<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>徐阿衡</title>
  <subtitle>Shuang</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.shuang0420.com/"/>
  <updated>2016-10-28T01:58:37.000Z</updated>
  <id>http://www.shuang0420.com/</id>
  
  <author>
    <name>徐阿衡</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>项目实战--搜索引擎</title>
    <link href="http://www.shuang0420.com/2016/10/28/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98-%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    <id>http://www.shuang0420.com/2016/10/28/项目实战-搜索引擎/</id>
    <published>2016-10-28T23:15:12.000Z</published>
    <updated>2016-10-28T01:58:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>CMU 11642 &#x7684; project&#x3002;<br><a id="more"></a></p>
<h1 id="&#x9879;&#x76EE;&#x4ECB;&#x7ECD;"><a href="#&#x9879;&#x76EE;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x9879;&#x76EE;&#x4ECB;&#x7ECD;"></a>&#x9879;&#x76EE;&#x4ECB;&#x7ECD;</h1><h2 id="&#x7B80;&#x4ECB;"><a href="#&#x7B80;&#x4ECB;" class="headerlink" title="&#x7B80;&#x4ECB;"></a>&#x7B80;&#x4ECB;</h2><p>&#x6570;&#x636E;&#xFF1A;ClueWeb09 dataset&#xFF0C;&#x5171; 553,202 &#x7BC7;&#x6587;&#x6863;&#xFF0C;&#x7528; Lucene &#x5EFA;&#x7ACB;&#x7684;&#x7D22;&#x5F15;&#x3002;<br>&#x90E8;&#x5206;&#x6846;&#x67B6;&#x662F;&#x73B0;&#x6210;&#x7684;&#xFF0C;&#x6709; <a href="http://boston.lti.cs.cmu.edu/classes/11-642/HW/doc/" target="_blank" rel="external">api &#x6587;&#x6863;</a><br>&#x6211;&#x4EEC;&#x8981;&#x505A;&#x7684;&#x662F;&#x5B9E;&#x73B0;&#x90E8;&#x5206; operator &#x4EE5;&#x53CA; ranking algorithm&#x3002;</p>
<h2 id="&#x8F93;&#x5165;"><a href="#&#x8F93;&#x5165;" class="headerlink" title="&#x8F93;&#x5165;"></a>&#x8F93;&#x5165;</h2><p>&#x7A0B;&#x5E8F;&#x8F93;&#x5165;: one parameter (name of parameter file)</p>
<p>parameter file &#x5FC5;&#x987B;&#x5305;&#x62EC;&#x4EE5;&#x4E0B;&#x53C2;&#x6570;&#xFF1A;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- queryFilePath= The path to the query file.</div><div class="line">- indexPath= The path to the Lucene index directory. Typically this will be something like &quot;indexPath=index&quot;.</div><div class="line">- trecEvalOutputPath= The path to the file where your software will write its output for trec_eval.</div><div class="line">- retrievalAlgorithm= &quot;UnrankedBoolean&quot; &#xFF0F; &quot;RankedBoolean&quot; &#xFF0F; &quot;BM25&quot; / &quot;Indri&quot;</div></pre></td></tr></table></figure></p>
<p><strong>&#x53EF;&#x9009;&#x53C2;&#x6570;</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#x7528;&#x4E8E; &quot;BM25&quot; / &quot;Indri&quot; &#x6A21;&#x578B;&#x3002;</div><div class="line">- BM25:k_1= Values are real numbers &gt;= 0.0.</div><div class="line">- BM25:b= Values are real numbers between 0.0 and 1.0.</div><div class="line">- BM25:k_3= Values are real numbers &gt;= 0.0.</div><div class="line">- Indri:mu= Values are integers &gt;= 0.</div><div class="line">- Indri:lambda= Values are real numbers between 0.0 and 1.0</div></pre></td></tr></table></figure></p>
<p>&#x7528;&#x4E8E; query expansion&#x3002;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- fb= Acceptable values are &quot;true&quot; and &quot;false&quot;. This value controls whether query expansion is performed (fb=true).</div><div class="line">- fbDocs= Acceptable values are integers &gt; 0. This value determines the number of documents to use for query expansion.</div><div class="line">- fbTerms= Acceptable values are integers &gt; 0. This value determines the number of terms that are added to the query.</div><div class="line">- fbMu= Acceptable values are integers &gt;= 0. This value determines the amount of smoothing used to calculate p(r|d).</div><div class="line">- fbOrigWeight= Acceptable values are between 0.0 and 1.0. This value determines the weight on the original query. The weight on the expanded query is (1-fbOrigWeight).</div><div class="line">- fbInitialRankingFile= The value is a string that contains the name of a file (in trec_eval input format) that contains an initial document ranking for the query.</div><div class="line">- fbExpansionQueryFile= The value is a string that contains the name of a file where your software must write its expansion query. The file format is described below.</div></pre></td></tr></table></figure></p>
<h2 id="&#x8F93;&#x51FA;"><a href="#&#x8F93;&#x51FA;" class="headerlink" title="&#x8F93;&#x51FA;"></a>&#x8F93;&#x51FA;</h2><p>&#x7A0B;&#x5E8F;&#x8F93;&#x51FA;&#xFF1A;<br>&#x5728; trecEvalOutputPath &#x6307;&#x5B9A;&#x7684;&#x6587;&#x4EF6;&#x4E2D;&#xFF1A;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">QueryID	Q0	DocID	                    Rank	Score	RunID</div><div class="line">10	    Q0	clueweb09-enwp03-35-1378	1	    16	  run-1</div><div class="line">10	    Q0	clueweb09-enwp00-78-1360	2	    11	  run-1</div><div class="line">10	    Q0	clueweb09-enwp00-67-0958	3	    9	    run-1</div><div class="line">:	      :	  :	                        :	    :	    :</div><div class="line">11	    Q0	clueweb09-enwp00-63-1141	1	    18	  run-1</div></pre></td></tr></table></figure></p>
<p>&#x5982;&#x679C;&#x6709; query expansion&#xFF0C;&#x5728; fbExpansionQueryFile &#x6307;&#x5B9A;&#x7684;&#x6587;&#x4EF6;&#x4E2D;&#xFF1A;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">qid1: query1</div><div class="line">qid2: query2</div><div class="line"> :      :</div><div class="line"></div><div class="line">eg.</div><div class="line">1: #wand (0.73 obama 0.43 family 0.40 white 0.65 tree 0.33 politics ...)</div><div class="line">2: #wand (0.69 french 0.83 lick 0.76 indiana ...)</div></pre></td></tr></table></figure></p>
<h1 id="&#x57FA;&#x672C;&#x7B56;&#x7565;"><a href="#&#x57FA;&#x672C;&#x7B56;&#x7565;" class="headerlink" title="&#x57FA;&#x672C;&#x7B56;&#x7565;"></a>&#x57FA;&#x672C;&#x7B56;&#x7565;</h1><p><strong>&#x8981;&#x6C42;</strong></p>
<ul>
<li>&#x4ECE; query file &#x4E2D;&#x9010;&#x6761;&#x8BFB;&#x53D6; query</li>
<li>&#x5C06; query parse &#x4E3A; query tree&#xFF0C;internal nodes &#x662F; operators&#xFF0C;leaves &#x662F; index terms<ul>
<li>&#x5982;&#x679C;&#x4E00;&#x4E2A; query &#x6CA1;&#x6709; explicit operator&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A; #OR</li>
<li>&#x5982;&#x679C;&#x4E00;&#x4E2A; query &#x6CA1;&#x6709; explicit field&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A; body</li>
<li>&#x5BF9; query term &#x8FDB;&#x884C; stemming &#x548C; stopwords &#x5904;&#x7406;</li>
</ul>
</li>
<li>&#x8BC4;&#x4F30; query&#xFF0C;&#x7528; <a href="http://www.shuang0420.com/2016/09/11/Search%20Engines%E7%AC%94%E8%AE%B0%20-%20Query%20Processing/">DAAT &#x7B56;&#x7565;</a>&#xFF0C;&#x5BF9; leaf node &#x7684; evaluation &#x5C31;&#x662F;&#x5982;&#x679C;&#x8FD9;&#x4E2A; term &#x7684; inverted list &#x5B58;&#x5728;&#xFF0C;&#x5C31;&#x83B7;&#x53D6;&#x5B83;&#xFF0C;&#x6CE8;&#x610F;&#x6709;&#x4E9B; query term &#x662F;&#x6CA1;&#x6709; inverted list &#x7684;&#x3002;</li>
<li>&#x5BF9;&#x6240;&#x6709;&#x6587;&#x6863;&#x6309;&#x6587;&#x6863;&#x5206;&#x6570;&#x964D;&#x5E8F;&#x6392;&#x5E8F;&#xFF0C;&#x5982;&#x679C;&#x5206;&#x6570;&#x76F8;&#x540C;&#xFF0C;&#x6309; external document id &#x5347;&#x5E8F;&#x6392;&#x5E8F;&#x3002;</li>
</ul>
<p><img src="/2016/10/28/&#x9879;&#x76EE;&#x5B9E;&#x6218;-&#x641C;&#x7D22;&#x5F15;&#x64CE;/query_tree.jpg" alt=""></p>
<h1 id="Operator"><a href="#Operator" class="headerlink" title="Operator"></a>Operator</h1><p>&#x4E0D;&#x540C;&#x6A21;&#x578B;&#x652F;&#x6301;&#x7684; operator &#x5404;&#x6709;&#x4E0D;&#x540C;<br>&#x7CFB;&#x7EDF;&#x9700;&#x8981;&#x652F;&#x6301;&#x7684; Operator &#x6709; #OR, #AND, #SYN, #NEAR/n, #WINDOW/n, &#x5BF9; BM25 &#x6A21;&#x578B;&#x6765;&#x8BF4;&#xFF0C;&#x8FD8;&#x9700;&#x8981;&#x652F;&#x6301; #SUM&#xFF0C;&#x5BF9; Indri &#x6A21;&#x578B;&#x6765;&#x8BF4;&#xFF0C;&#x8FD8;&#x9700;&#x8981;&#x652F;&#x6301; #AND, #WAND, #WSUM, #WINDOW</p>
<h1 id="Fields"><a href="#Fields" class="headerlink" title="Fields"></a>Fields</h1><p>&#x7CFB;&#x7EDF;&#x652F;&#x6301;&#x7684; fields &#x6709; &#x2018;url&#x2019;, &#x2018;keywords&#x2019; (from the html &#x2018;meta&#x2019; tag), &#x2018;title&#x2019;, &#x2018;body&#x2019;, &#x548C; &#x2018;inlink&#x2019; 5 &#x79CD;&#xFF0C;query &#x5F62;&#x5F0F;&#x4E3A; apple.title&#x3002;</p>
<h1 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h1><pre>#Operator( term_1.field term_2.field ... term_n.field )
apples
#AND (apple bananas)
#OR (apple bananas)
#NEAR/3 (apple pie)
#NEAR/5 (pie apple)
</pre>

<h1 id="&#x6392;&#x5E8F;&#x6A21;&#x578B;"><a href="#&#x6392;&#x5E8F;&#x6A21;&#x578B;" class="headerlink" title="&#x6392;&#x5E8F;&#x6A21;&#x578B;"></a>&#x6392;&#x5E8F;&#x6A21;&#x578B;</h1><h2 id="Exact-match"><a href="#Exact-match" class="headerlink" title="Exact-match"></a>Exact-match</h2><p>Boolean retrieval &#x9700;&#x8981;&#x652F;&#x6301;&#x7684; Operator &#x6709; #OR, #AND, #SYN, #NEAR/n, #WINDOW/n</p>
<ul>
<li>#OR &#x53EA;&#x8981;&#x6709;&#x4E00;&#x4E2A; query term &#x5728;&#x6587;&#x6863;&#x4E2D;&#x51FA;&#x73B0;&#xFF0C;&#x5C31;&#x7B97; match&#xFF0C;&#x5728; ranked boolean retrieval &#x4E2D;&#x5206;&#x6570;&#x4E3A;&#x6240;&#x6709;&#x5339;&#x914D;&#x7684; query term &#x7684; tf &#x7684;&#x6700;&#x5927;&#x503C;&#x3002;</li>
<li>#AND &#x53EA;&#x6709;&#x5728;&#x6240;&#x6709; query term &#x90FD;&#x5728;&#x6587;&#x6863;&#x4E2D;&#x51FA;&#x73B0;&#x65F6;&#xFF0C;&#x624D;&#x7B97; match&#xFF0C;&#x5728; ranked boolean retrieval &#x4E2D;&#x5206;&#x6570;&#x4E3A;&#x6240;&#x6709; query term &#x7684; tf &#x7684;&#x6700;&#x5C0F;&#x503C;&#x3002;</li>
<li>#NEAR/n &#x5982;&#x679C;&#x6BCF;&#x5BF9;&#x76F8;&#x90BB;&#x4E24;&#x4E2A; query term &#x4E4B;&#x95F4;&#x7684;&#x8DDD;&#x79BB;&#x5C0F;&#x4E8E; n&#xFF0C;&#x624D;&#x7B97; match&#xFF0C;&#x5728; ranked boolean retrieval &#x4E2D;&#x5206;&#x6570;&#x4E3A; match &#x7684;&#x6B21;&#x6570;&#x3002;&#xFF08;For example, #NEAR/2(a b c) matches &#x201C;a b c&#x201D;, &#x201C;a x b c&#x201D;, &#x201C;a b x c&#x201D;, and &#x201C;a x b x c&#x201D;, but not &#x201C;a x x b c&#x201D;&#xFF09;&#x3002;</li>
<li>#WINDOW/n &#x548C; #NEAR/n &#x7C7B;&#x4F3C;&#xFF0C;&#x4F46;&#x662F;&#x4E0D;&#x8981;&#x6C42;&#x987A;&#x5E8F;&#x3002;</li>
</ul>
<p><a href="http://www.shuang0420.com/2016/09/06/Search%20Engines%E7%AC%94%E8%AE%B0%20-%20Exact-match%20retrieval/">Search Engines&#x7B14;&#x8BB0; - Exact-match retrieval</a></p>
<h3 id="Unranked-boolean-retrieval"><a href="#Unranked-boolean-retrieval" class="headerlink" title="Unranked boolean retrieval"></a>Unranked boolean retrieval</h3><p>&#x5BF9;&#x6BCF;&#x4E2A;&#x6587;&#x6863;&#x6765;&#x8BF4;&#xFF0C;&#x5982;&#x679C; match&#xFF0C;&#x5206;&#x6570;&#x4E3A; 1&#xFF0C;&#x4E0D; match &#x5C31;&#x4E3A; 0&#x3002;</p>
<h3 id="Ranked-boolean-retrieval"><a href="#Ranked-boolean-retrieval" class="headerlink" title="Ranked boolean retrieval"></a>Ranked boolean retrieval</h3><p>&#x6BCF;&#x4E2A;&#x6587;&#x6863;&#x7684;&#x5206;&#x6570;&#x662F; query term &#x5728;&#x8BE5;&#x6587;&#x6863;&#x4E2D;&#x7684; term frequency&#x3002;</p>
<h2 id="Best-match"><a href="#Best-match" class="headerlink" title="Best-match"></a>Best-match</h2><p><a href="http://www.shuang0420.com/2016/09/30/Search%20Engines%E7%AC%94%E8%AE%B0%20-%20Best-Match/">Search Engines&#x7B14;&#x8BB0; - Best-Match</a></p>
<h3 id="BM25"><a href="#BM25" class="headerlink" title="BM25"></a>BM25</h3><p>&#x9700;&#x8981;&#x652F;&#x6301;&#x7684; Operator &#x6709; #SYN, #NEAR/n, #SUM</p>
<h3 id="Indri"><a href="#Indri" class="headerlink" title="Indri"></a>Indri</h3><p>&#x9700;&#x8981;&#x652F;&#x6301;&#x7684; Operator &#x6709; #AND(Indri #and), #WAND, #WSUM, #WINDOW&#x3002;&#x9ED8;&#x8BA4;&#x7684; operator &#x662F; #AND&#xFF0C;&#x6CE8;&#x610F;&#x8FD9;&#x91CC;&#x7684; #AND &#x548C; boolean retrieval &#x4E2D;&#x7684;&#x7B97;&#x6CD5;&#x4E0D;&#x4E00;&#x6837;&#x3002;<br><img src="/2016/10/28/&#x9879;&#x76EE;&#x5B9E;&#x6218;-&#x641C;&#x7D22;&#x5F15;&#x64CE;/indri_operator.jpg" alt=""></p>
<h1 id="Query-expansion"><a href="#Query-expansion" class="headerlink" title="Query expansion"></a>Query expansion</h1><p>&#x57FA;&#x672C;&#x903B;&#x8F91;&#x662F;&#x628A; initial query &#x5F53;&#x505A; classifier&#xFF0C;&#x7528;&#x5B83;&#x6765; label &#x90E8;&#x5206; data&#xFF0C;&#x5F97;&#x5230; top-ranked documents&#xFF0C;&#x7136;&#x540E;&#x7528; labeled data &#x6765;&#x4EA7;&#x751F;&#x66F4;&#x4F18;&#x7684; classifier&#x3002;&#x57FA;&#x672C;&#x8FC7;&#x7A0B;&#xFF1A;</p>
<ul>
<li>&#x7528;&#x539F;&#x59CB; query &#x68C0;&#x7D22;&#x6587;&#x6863;</li>
<li>&#x53D6;&#x7ED3;&#x679C;&#x7684;&#x524D; N &#x7BC7;&#x6587;&#x6863;&#x4F5C;&#x4E3A;&#x8BAD;&#x7EC3;&#x96C6;&#xFF0C;&#x8FD9;&#x4E9B;&#x6587;&#x6863;&#x76F8;&#x5173;&#x5EA6;&#x53EF;&#x80FD;&#x4E0D;&#x9AD8;&#xFF0C;&#x7136;&#x800C;&#x6211;&#x4EEC;&#x7684;&#x76EE;&#x7684;&#x662F;&#x5B66;&#x4E60; vocabulary pattern&#x3002;</li>
<li>&#x5E94;&#x7528; relevance feedback algorithm &#x9009;&#x53D6; term &#x548C; term weight</li>
<li>&#x7EC4;&#x6210;&#x65B0;&#x7684; query &#x6765;&#x68C0;&#x7D22;&#x6587;&#x6863;</li>
</ul>
<p><a href="http://www.shuang0420.com/2016/10/10/Search%20Engines%E7%AC%94%E8%AE%B0%20-%20Pseudo%20Relevance%20Feedback/">Search Engines&#x7B14;&#x8BB0; - Pseudo Relevance Feedback</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CMU 11642 &amp;#x7684; project&amp;#x3002;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Projects" scheme="http://www.shuang0420.com/categories/Projects/"/>
    
    
      <category term="mysql" scheme="http://www.shuang0420.com/tags/mysql/"/>
    
      <category term="hbase" scheme="http://www.shuang0420.com/tags/hbase/"/>
    
      <category term="webserver" scheme="http://www.shuang0420.com/tags/webserver/"/>
    
  </entry>
  
  <entry>
    <title>Search Engines笔记 - Learning to Rank</title>
    <link href="http://www.shuang0420.com/2016/10/25/Search%20Engines%E7%AC%94%E8%AE%B0%20-%20Learning%20to%20Rank/"/>
    <id>http://www.shuang0420.com/2016/10/25/Search Engines笔记 - Learning to Rank/</id>
    <published>2016-10-26T00:29:18.000Z</published>
    <updated>2016-10-26T01:18:55.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="&#x4F20;&#x7EDF;&#x7684;&#x6392;&#x5E8F;&#x6A21;&#x578B;"><a href="#&#x4F20;&#x7EDF;&#x7684;&#x6392;&#x5E8F;&#x6A21;&#x578B;" class="headerlink" title="&#x4F20;&#x7EDF;&#x7684;&#x6392;&#x5E8F;&#x6A21;&#x578B;"></a>&#x4F20;&#x7EDF;&#x7684;&#x6392;&#x5E8F;&#x6A21;&#x578B;</h1><h2 id="&#x76F8;&#x5173;&#x5EA6;&#x6392;&#x5E8F;&#x6A21;&#x578B;-Relevance-Ranking-Model"><a href="#&#x76F8;&#x5173;&#x5EA6;&#x6392;&#x5E8F;&#x6A21;&#x578B;-Relevance-Ranking-Model" class="headerlink" title="&#x76F8;&#x5173;&#x5EA6;&#x6392;&#x5E8F;&#x6A21;&#x578B;(Relevance Ranking Model)"></a>&#x76F8;&#x5173;&#x5EA6;&#x6392;&#x5E8F;&#x6A21;&#x578B;(Relevance Ranking Model)</h2><p>&#x76F8;&#x5173;&#x5EA6;&#x6392;&#x5E8F;&#x6A21;&#x578B;&#x6839;&#x636E;&#x67E5;&#x8BE2;&#x548C;&#x6587;&#x6863;&#x4E4B;&#x95F4;&#x7684;&#x76F8;&#x4F3C;&#x5EA6;&#x6765;&#x5BF9;&#x6587;&#x6863;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#x3002;&#x5E38;&#x7528;&#x7684;&#x6A21;&#x578B;&#x5305;&#x62EC;&#xFF1A;&#x5E03;&#x5C14;&#x6A21;&#x578B;(Boolean Model)&#xFF0C;&#x5411;&#x91CF;&#x7A7A;&#x95F4;&#x6A21;&#x578B;(Vector Space Model)&#xFF0C;&#x9690;&#x8BED;&#x4E49;&#x5206;&#x6790;(Latent Semantic Analysis)&#xFF0C;BM25&#xFF0C;LMIR&#x6A21;&#x578B;&#x7B49;&#x7B49;&#x3002;</p>
<h2 id="&#x91CD;&#x8981;&#x6027;&#x6392;&#x5E8F;&#x6A21;&#x578B;-Importance-Ranking-Model"><a href="#&#x91CD;&#x8981;&#x6027;&#x6392;&#x5E8F;&#x6A21;&#x578B;-Importance-Ranking-Model" class="headerlink" title="&#x91CD;&#x8981;&#x6027;&#x6392;&#x5E8F;&#x6A21;&#x578B;(Importance Ranking Model)"></a>&#x91CD;&#x8981;&#x6027;&#x6392;&#x5E8F;&#x6A21;&#x578B;(Importance Ranking Model)</h2><p>&#x91CD;&#x8981;&#x6027;&#x6392;&#x5E8F;&#x6A21;&#x578B;&#x4E0D;&#x8003;&#x8651;&#x67E5;&#x8BE2;&#xFF0C;&#x800C;&#x4EC5;&#x4EC5;&#x6839;&#x636E;&#x7F51;&#x9875;(&#x4EA6;&#x5373;&#x6587;&#x6863;)&#x4E4B;&#x95F4;&#x7684;&#x56FE;&#x7ED3;&#x6784;&#x6765;&#x5224;&#x65AD;&#x6587;&#x6863;&#x7684;&#x6743;&#x5A01;&#x7A0B;&#x5EA6;&#xFF0C;&#x5178;&#x578B;&#x7684;&#x6743;&#x5A01;&#x7F51;&#x7AD9;&#x5305;&#x62EC;Google&#xFF0C;Yahoo!&#x7B49;&#x3002;&#x5E38;&#x7528;&#x7684;&#x6A21;&#x578B;&#x5305;&#x62EC;PageRank&#xFF0C;HITS&#xFF0C;HillTop&#xFF0C;TrustRank&#x7B49;&#x7B49;&#x3002;</p>
<h1 id="Learning-to-Rank"><a href="#Learning-to-Rank" class="headerlink" title="Learning to Rank"></a>Learning to Rank</h1><h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><p>&#x5BF9;&#x4E8E;&#x4F20;&#x7EDF;&#x7684;&#x6392;&#x5E8F;&#x6A21;&#x578B;&#xFF0C;&#x5355;&#x4E2A;&#x6A21;&#x578B;&#x5F80;&#x5F80;&#x53EA;&#x80FD;&#x8003;&#x8651;&#x67D0;&#x4E00;&#x4E2A;&#x65B9;&#x9762;(&#x76F8;&#x5173;&#x5EA6;&#x6216;&#x8005;&#x91CD;&#x8981;&#x6027;)&#xFF0C;&#x6240;&#x4EE5;&#x53EA;&#x662F;&#x7528;&#x5355;&#x4E2A;&#x6A21;&#x578B;&#x8FBE;&#x4E0D;&#x5230;&#x8981;&#x6C42;&#x3002;&#x641C;&#x7D22;&#x5F15;&#x64CE;&#x901A;&#x5E38;&#x4F1A;&#x7EC4;&#x5408;&#x591A;&#x79CD;&#x6392;&#x5E8F;&#x6A21;&#x578B;&#x6765;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;&#x4F46;&#x662F;&#xFF0C;&#x5982;&#x4F55;&#x7EC4;&#x5408;&#x591A;&#x4E2A;&#x6392;&#x5E8F;&#x6A21;&#x578B;&#x6765;&#x5F62;&#x6210;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x6392;&#x5E8F;&#x6A21;&#x578B;&#xFF0C;&#x4EE5;&#x53CA;&#x5982;&#x4F55;&#x8C03;&#x8282;&#x8FD9;&#x4E9B;&#x53C2;&#x6570;&#xFF0C;&#x90FD;&#x662F;&#x4E00;&#x4E2A;&#x5F88;&#x5927;&#x7684;&#x95EE;&#x9898;&#x3002;&#x4F7F;&#x7528;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x628A;&#x5404;&#x4E2A;&#x73B0;&#x6709;&#x6392;&#x5E8F;&#x6A21;&#x578B;&#x7684;&#x8F93;&#x51FA;&#x4F5C;&#x4E3A;&#x7279;&#x5F81;&#xFF0C;&#x7136;&#x540E;&#x8BAD;&#x7EC3;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x6A21;&#x578B;&#xFF0C;&#x5E76;&#x81EA;&#x52A8;&#x5B66;&#x5F97;&#x8FD9;&#x4E2A;&#x65B0;&#x7684;&#x6A21;&#x578B;&#x7684;&#x53C2;&#x6570;&#xFF0C;&#x4ECE;&#x800C;&#x5F88;&#x65B9;&#x4FBF;&#x7684;&#x53EF;&#x4EE5;&#x7EC4;&#x5408;&#x591A;&#x4E2A;&#x73B0;&#x6709;&#x7684;&#x6392;&#x5E8F;&#x6A21;&#x578B;&#x6765;&#x751F;&#x6210;&#x65B0;&#x7684;&#x6392;&#x5E8F;&#x6A21;&#x578B;&#x3002;</p>
<h2 id="&#x7279;&#x5F81;&#x9009;&#x53D6;"><a href="#&#x7279;&#x5F81;&#x9009;&#x53D6;" class="headerlink" title="&#x7279;&#x5F81;&#x9009;&#x53D6;"></a>&#x7279;&#x5F81;&#x9009;&#x53D6;</h2><p>&#x4E0E;&#x6587;&#x672C;&#x5206;&#x7C7B;&#x4E0D;&#x540C;&#xFF0C;L2R&#x8003;&#x8651;&#x7684;&#x662F;&#x7ED9;&#x5B9A;&#x67E5;&#x8BE2;&#x7684;&#x6587;&#x6863;&#x96C6;&#x5408;&#x7684;&#x6392;&#x5E8F;&#x3002;&#x6240;&#x4EE5;&#xFF0C;L2R&#x7528;&#x5230;&#x7684;&#x7279;&#x5F81;&#x4E0D;&#x4EC5;&#x4EC5;&#x5305;&#x542B;&#x6587;&#x6863;d&#x672C;&#x8EAB;&#x7684;&#x4E00;&#x4E9B;&#x7279;&#x5F81;(&#x6BD4;&#x5982;&#x662F;&#x5426;&#x662F;Spam)&#x7B49;&#xFF0C;&#x4E5F;&#x5305;&#x62EC;&#x6587;&#x6863;d&#x548C;&#x7ED9;&#x5B9A;&#x67E5;&#x8BE2;q&#x4E4B;&#x95F4;&#x7684;&#x76F8;&#x5173;&#x5EA6;&#xFF0C;&#x4EE5;&#x53CA;&#x6587;&#x6863;&#x5728;&#x6574;&#x4E2A;&#x7F51;&#x7EDC;&#x4E0A;&#x7684;&#x91CD;&#x8981;&#x6027;(&#x6BD4;&#x5982;PageRank&#x503C;&#x7B49;)&#xFF0C;&#x4EA6;&#x5373;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x76F8;&#x5173;&#x6027;&#x6392;&#x5E8F;&#x6A21;&#x578B;&#x548C;&#x91CD;&#x8981;&#x6027;&#x6392;&#x5E8F;&#x6A21;&#x578B;&#x7684;&#x8F93;&#x51FA;&#x6765;&#x4F5C;&#x4E3A;L2R&#x7684;&#x7279;&#x5F81;&#x3002;</p>
<ul>
<li>&#x4F20;&#x7EDF;&#x6392;&#x5E8F;&#x6A21;&#x578B;&#x7684;&#x8F93;&#x51FA;&#xFF0C;&#x65E2;&#x5305;&#x62EC;&#x76F8;&#x5173;&#x6027;&#x6392;&#x5E8F;&#x6A21;&#x578B;&#x7684;&#x8F93;&#x51FA;f(q,d)&#xFF0C;&#x4E5F;&#x5305;&#x62EC;&#x91CD;&#x8981;&#x6027;&#x6392;&#x5E8F;&#x6A21;&#x578B;&#x7684;&#x8F93;&#x51FA;&#x3002;</li>
<li>&#x6587;&#x6863;&#x672C;&#x8EAB;&#x7684;&#x4E00;&#x4E9B;&#x7279;&#x5F81;&#xFF0C;&#x6BD4;&#x5982;&#x662F;&#x5426;&#x662F;Spam&#x7B49;&#x3002;</li>
</ul>
<h2 id="&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x83B7;&#x53D6;"><a href="#&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x83B7;&#x53D6;" class="headerlink" title="&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x83B7;&#x53D6;"></a>&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x83B7;&#x53D6;</h2><p>L2R&#x7684;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x53EF;&#x4EE5;&#x6709;&#x4E09;&#x79CD;&#x5F62;&#x5F0F;&#xFF1A;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x67E5;&#x8BE2;&#xFF0C;&#x5404;&#x4E2A;&#x6587;&#x6863;&#x7684;&#x7EDD;&#x5BF9;&#x76F8;&#x5173;&#x503C;(&#x975E;&#x5E38;&#x76F8;&#x5173;&#xFF0C;&#x6BD4;&#x8F83;&#x76F8;&#x5173;&#xFF0C;&#x4E0D;&#x76F8;&#x5173;&#xFF0C;&#x7B49;&#x7B49;)&#xFF1B;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x67E5;&#x8BE2;&#xFF0C;&#x4E24;&#x4E24;&#x6587;&#x6863;&#x4E4B;&#x95F4;&#x7684;&#x76F8;&#x5BF9;&#x76F8;&#x5173;&#x503C;(&#x6587;&#x6863;1&#x6BD4;&#x6587;&#x6863;2&#x76F8;&#x5173;&#xFF0C;&#x6587;&#x6863;4&#x6BD4;&#x6587;&#x6863;3&#x76F8;&#x5173;&#xFF0C;&#x7B49;&#x7B49;)&#xFF1B;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x67E5;&#x8BE2;&#xFF0C;&#x6240;&#x6709;&#x6587;&#x6863;&#x7684;&#x6309;&#x76F8;&#x5173;&#x5EA6;&#x6392;&#x5E8F;&#x7684;&#x5217;&#x8868;(&#x6587;&#x6863;1&gt;&#x6587;&#x6863;2&gt;&#x6587;&#x6863;3)&#x3002;&#x8FD9;&#x4E09;&#x79CD;&#x5F62;&#x5F0F;&#x7684;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x4E4B;&#x95F4;&#x53EF;&#x4EE5;&#x76F8;&#x4E92;&#x8F6C;&#x6362;&#xFF0C;&#x8BE6;&#x89C1;[1]&#x3002;</p>
<p>&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x7684;&#x83B7;&#x53D6;&#x6709;&#x4E24;&#x79CD;&#x4E3B;&#x8981;&#x65B9;&#x6CD5;&#xFF1A;&#x4EBA;&#x5DE5;&#x6807;&#x6CE8;[3]&#x548C;&#x4ECE;&#x65E5;&#x5FD7;&#x6587;&#x4EF6;&#x4E2D;&#x6316;&#x6398;[4]&#x3002;</p>
<p>&#x4EBA;&#x5DE5;&#x6807;&#x6CE8;&#xFF1A;&#x9996;&#x5148;&#x4ECE;&#x641C;&#x7D22;&#x5F15;&#x64CE;&#x7684;&#x641C;&#x7D22;&#x8BB0;&#x5F55;&#x4E2D;&#x968F;&#x673A;&#x62BD;&#x53D6;&#x4E00;&#x4E9B;&#x67E5;&#x8BE2;&#xFF0C;&#x5C06;&#x8FD9;&#x4E9B;&#x67E5;&#x8BE2;&#x63D0;&#x4EA4;&#x7ED9;&#x591A;&#x4E2A;&#x4E0D;&#x540C;&#x7684;&#x641C;&#x7D22;&#x5F15;&#x64CE;&#xFF0C;&#x7136;&#x540E;&#x9009;&#x53D6;&#x5404;&#x4E2A;&#x641C;&#x7D22;&#x5F15;&#x64CE;&#x8FD4;&#x56DE;&#x7ED3;&#x679C;&#x7684;&#x524D;K&#x4E2A;&#xFF0C;&#x6700;&#x540E;&#x7531;&#x4E13;&#x4E1A;&#x4EBA;&#x5458;&#x6765;&#x5BF9;&#x8FD9;&#x4E9B;&#x6587;&#x6863;&#x6309;&#x7167;&#x548C;&#x67E5;&#x8BE2;&#x7684;&#x76F8;&#x5173;&#x5EA6;&#x8FDB;&#x884C;&#x6807;&#x6CE8;&#x3002;</p>
<p>&#x4ECE;&#x65E5;&#x5FD7;&#x4E2D;&#x6316;&#x6398;&#xFF1A;&#x641C;&#x7D22;&#x5F15;&#x64CE;&#x90FD;&#x6709;&#x5927;&#x91CF;&#x7684;&#x65E5;&#x5FD7;&#x8BB0;&#x5F55;&#x7528;&#x6237;&#x7684;&#x884C;&#x4E3A;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4ECE;&#x4E2D;&#x63D0;&#x53D6;&#x51FA;L2R&#x7684;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x3002;Joachims&#x63D0;&#x51FA;&#x4E86;&#x4E00;&#x79CD;&#x5F88;&#x6709;&#x610F;&#x601D;&#x7684;&#x65B9;&#x6CD5;[4]&#xFF1A;&#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;&#x67E5;&#x8BE2;&#xFF0C;&#x641C;&#x7D22;&#x5F15;&#x64CE;&#x8FD4;&#x56DE;&#x7684;&#x7ED3;&#x679C;&#x5217;&#x8868;&#x4E3A;L&#xFF0C;&#x7528;&#x6237;&#x70B9;&#x51FB;&#x7684;&#x6587;&#x6863;&#x7684;&#x96C6;&#x5408;&#x4E3A;C&#xFF0C;&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x6587;&#x6863;di&#x88AB;&#x70B9;&#x51FB;&#x8FC7;&#xFF0C;&#x53E6;&#x5916;&#x4E00;&#x4E2A;&#x6587;&#x6863;dj&#x6CA1;&#x6709;&#x88AB;&#x70B9;&#x51FB;&#x8FC7;&#xFF0C;&#x5E76;&#x4E14;dj&#x5728;&#x7ED3;&#x679C;&#x5217;&#x8868;&#x4E2D;&#x6392;&#x5728;di&#x4E4B;&#x524D;&#xFF0C;&#x5219;di&gt;dj&#x5C31;&#x662F;&#x4E00;&#x6761;&#x8BAD;&#x7EC3;&#x8BB0;&#x5F55;&#x3002;&#x4EA6;&#x5373;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x4E3A;&#xFF1A;{di&gt;dj|di&#x5C5E;&#x4E8E;C&#xFF0C;dj&#x5C5E;&#x4E8E;L-C&#xFF0C;p(dj)&lt;p(di)}&#xFF0C;&#x5176;&#x4E2D;p(d)&#x8868;&#x793A;&#x6587;&#x6863;d&#x5728;&#x67E5;&#x8BE2;&#x7ED3;&#x679C;&#x5217;&#x8868;&#x4E2D;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x8D8A;&#x5C0F;&#x8868;&#x793A;&#x8D8A;&#x9760;&#x524D;&#x3002;</p>
<h2 id="&#x6A21;&#x578B;&#x8BAD;&#x7EC3;"><a href="#&#x6A21;&#x578B;&#x8BAD;&#x7EC3;" class="headerlink" title="&#x6A21;&#x578B;&#x8BAD;&#x7EC3;"></a>&#x6A21;&#x578B;&#x8BAD;&#x7EC3;</h2><p>L2R&#x662F;&#x4E00;&#x4E2A;&#x6709;&#x76D1;&#x7763;&#x5B66;&#x4E60;&#x8FC7;&#x7A0B;&#x3002;</p>
<p>&#x5BF9;&#x4E0E;&#x6BCF;&#x4E2A;&#x7ED9;&#x5B9A;&#x7684;&#x67E5;&#x8BE2;-&#x6587;&#x6863;&#x5BF9;(query document pair)&#xFF0C;&#x62BD;&#x53D6;&#x76F8;&#x5E94;&#x7684;&#x7279;&#x5F81;(&#x65E2;&#x5305;&#x62EC;&#x67E5;&#x8BE2;&#x548C;&#x6587;&#x6863;&#x4E4B;&#x95F4;&#x7684;&#x5404;&#x79CD;&#x76F8;&#x5173;&#x5EA6;&#xFF0C;&#x4E5F;&#x5305;&#x62EC;&#x6587;&#x6863;&#x672C;&#x8EAB;&#x7684;&#x7279;&#x5F81;&#x4EE5;&#x53CA;&#x91CD;&#x8981;&#x6027;&#x7B49;)&#xFF0C;&#x53E6;&#x5916;&#x901A;&#x8FC7;&#x6216;&#x8005;&#x4EBA;&#x5DE5;&#x6807;&#x6CE8;&#x6216;&#x8005;&#x4ECE;&#x65E5;&#x5FD7;&#x4E2D;&#x6316;&#x6398;&#x7684;&#x65B9;&#x6CD5;&#x6765;&#x5F97;&#x5230;&#x7ED9;&#x5B9A;&#x67E5;&#x8BE2;&#x4E0B;&#x6587;&#x6863;&#x96C6;&#x5408;&#x7684;&#x771F;&#x5B9E;&#x5E8F;&#x5217;&#x3002;&#x7136;&#x540E;&#x6211;&#x4EEC;&#x4F7F;&#x7528;L2R&#x7684;&#x5404;&#x79CD;&#x7B97;&#x6CD5;&#x6765;&#x5B66;&#x5230;&#x4E00;&#x4E2A;&#x6392;&#x5E8F;&#x6A21;&#x578B;&#xFF0C;&#x4F7F;&#x5176;&#x8F93;&#x51FA;&#x7684;&#x6587;&#x6863;&#x5E8F;&#x5217;&#x548C;&#x771F;&#x5B9E;&#x5E8F;&#x5217;&#x5C3D;&#x53EF;&#x80FD;&#x76F8;&#x4F3C;&#x3002;</p>
<h2 id="&#x7B97;&#x6CD5;&#x5206;&#x7C7B;&#x548C;&#x7B80;&#x4ECB;"><a href="#&#x7B97;&#x6CD5;&#x5206;&#x7C7B;&#x548C;&#x7B80;&#x4ECB;" class="headerlink" title="&#x7B97;&#x6CD5;&#x5206;&#x7C7B;&#x548C;&#x7B80;&#x4ECB;"></a>&#x7B97;&#x6CD5;&#x5206;&#x7C7B;&#x548C;&#x7B80;&#x4ECB;</h2><p>L2R&#x7B97;&#x6CD5;&#x4E3B;&#x8981;&#x5305;&#x62EC;&#x4E09;&#x79CD;&#x7C7B;&#x522B;&#xFF1A;PointWise&#xFF0C;PairWise&#xFF0C;ListWise&#x3002;</p>
<h3 id="PointWise-L2R"><a href="#PointWise-L2R" class="headerlink" title="PointWise L2R"></a>PointWise L2R</h3><p>PointWise&#x65B9;&#x6CD5;&#x53EA;&#x8003;&#x8651;&#x7ED9;&#x5B9A;&#x67E5;&#x8BE2;&#x4E0B;&#xFF0C;&#x5355;&#x4E2A;&#x6587;&#x6863;&#x7684;&#x7EDD;&#x5BF9;&#x76F8;&#x5173;&#x5EA6;&#xFF0C;&#x800C;&#x4E0D;&#x8003;&#x8651;&#x5176;&#x4ED6;&#x6587;&#x6863;&#x548C;&#x7ED9;&#x5B9A;&#x67E5;&#x8BE2;&#x7684;&#x76F8;&#x5173;&#x5EA6;&#x3002;&#x4EA6;&#x5373;&#x7ED9;&#x5B9A;&#x67E5;&#x8BE2;q&#x7684;&#x4E00;&#x4E2A;&#x771F;&#x5B9E;&#x6587;&#x6863;&#x5E8F;&#x5217;&#xFF0C;&#x6211;&#x4EEC;&#x53EA;&#x9700;&#x8981;&#x8003;&#x8651;&#x5355;&#x4E2A;&#x6587;&#x6863;di&#x548C;&#x8BE5;&#x67E5;&#x8BE2;&#x7684;&#x76F8;&#x5173;&#x7A0B;&#x5EA6;ci&#xFF0C;&#x4EA6;&#x5373;&#x8F93;&#x5165;&#x6570;&#x636E;&#x5E94;&#x8BE5;&#x662F;&#x5982;&#x4E0B;&#x7684;&#x5F62;&#x5F0F;&#xFF1A;</p>
<p>Pointwise&#x65B9;&#x6CD5;&#x4E3B;&#x8981;&#x5305;&#x62EC;&#x4EE5;&#x4E0B;&#x7B97;&#x6CD5;&#xFF1A;Pranking (NIPS 2002), OAP-BPM (EMCL 2003), Ranking with Large Margin Principles (NIPS 2002), Constraint Ordinal Regression (ICML 2005)&#x3002;</p>
<p>Pointwise&#x65B9;&#x6CD5;&#x4EC5;&#x4EC5;&#x4F7F;&#x7528;&#x4F20;&#x7EDF;&#x7684;&#x5206;&#x7C7B;&#xFF0C;&#x56DE;&#x5F52;&#x6216;&#x8005;Ordinal Regression&#x65B9;&#x6CD5;&#x6765;&#x5BF9;&#x7ED9;&#x5B9A;&#x67E5;&#x8BE2;&#x4E0B;&#x5355;&#x4E2A;&#x6587;&#x6863;&#x7684;&#x76F8;&#x5173;&#x5EA6;&#x8FDB;&#x884C;&#x5EFA;&#x6A21;&#x3002;&#x8FD9;&#x79CD;&#x65B9;&#x6CD5;&#x6CA1;&#x6709;&#x8003;&#x8651;&#x5230;&#x6392;&#x5E8F;&#x7684;&#x4E00;&#x4E9B;&#x7279;&#x5F81;&#xFF0C;&#x6BD4;&#x5982;&#x6587;&#x6863;&#x4E4B;&#x95F4;&#x7684;&#x6392;&#x5E8F;&#x7ED3;&#x679C;&#x9488;&#x5BF9;&#x7684;&#x662F;&#x7ED9;&#x5B9A;&#x67E5;&#x8BE2;&#x4E0B;&#x7684;&#x6587;&#x6863;&#x96C6;&#x5408;&#xFF0C;&#x800C;Pointwise&#x65B9;&#x6CD5;&#x4EC5;&#x4EC5;&#x8003;&#x8651;&#x5355;&#x4E2A;&#x6587;&#x6863;&#x7684;&#x7EDD;&#x5BF9;&#x76F8;&#x5173;&#x5EA6;&#xFF1B;&#x53E6;&#x5916;&#xFF0C;&#x5728;&#x6392;&#x5E8F;&#x4E2D;&#xFF0C;&#x6392;&#x5728;&#x6700;&#x524D;&#x7684;&#x51E0;&#x4E2A;&#x6587;&#x6863;&#x5BF9;&#x6392;&#x5E8F;&#x6548;&#x679C;&#x7684;&#x5F71;&#x54CD;&#x975E;&#x5E38;&#x91CD;&#x8981;&#xFF0C;Pointwise&#x6CA1;&#x6709;&#x8003;&#x8651;&#x8FD9;&#x65B9;&#x9762;&#x7684;&#x5F71;&#x54CD;&#x3002;</p>
<h3 id="Pairwise-L2R"><a href="#Pairwise-L2R" class="headerlink" title="Pairwise L2R"></a>Pairwise L2R</h3><p>Pairwise&#x65B9;&#x6CD5;&#x8003;&#x8651;&#x7ED9;&#x5B9A;&#x67E5;&#x8BE2;&#x4E0B;&#xFF0C;&#x4E24;&#x4E2A;&#x6587;&#x6863;&#x4E4B;&#x95F4;&#x7684;&#x76F8;&#x5BF9;&#x76F8;&#x5173;&#x5EA6;&#x3002;&#x4EA6;&#x5373;&#x7ED9;&#x5B9A;&#x67E5;&#x8BE2;q&#x7684;&#x4E00;&#x4E2A;&#x771F;&#x5B9E;&#x6587;&#x6863;&#x5E8F;&#x5217;&#xFF0C;&#x6211;&#x4EEC;&#x53EA;&#x9700;&#x8981;&#x8003;&#x8651;&#x4EFB;&#x610F;&#x4E24;&#x4E2A;&#x76F8;&#x5173;&#x5EA6;&#x4E0D;&#x540C;&#x7684;&#x6587;&#x6863;&#x4E4B;&#x95F4;&#x7684;&#x76F8;&#x5BF9;&#x76F8;&#x5173;&#x5EA6;&#xFF1A;di&gt;dj&#xFF0C;&#x6216;&#x8005;di&lt;dj&#x3002;</p>
<p>Pairwise&#x65B9;&#x6CD5;&#x4E3B;&#x8981;&#x5305;&#x62EC;&#x4EE5;&#x4E0B;&#x51E0;&#x79CD;&#x7B97;&#x6CD5;&#xFF1A;Learning to Retrieve Information (SCC 1995), Learning to Order Things (NIPS 1998), Ranking SVM (ICANN 1999), RankBoost (JMLR 2003), LDM (SIGIR 2005), RankNet (ICML 2005), Frank (SIGIR 2007), MHR(SIGIR 2007), Round Robin Ranking (ECML 2003), GBRank (SIGIR 2007), QBRank (NIPS 2007), MPRank (ICML 2007), IRSVM (SIGIR 2006) &#x3002;</p>
<p>&#x76F8;&#x6BD4;&#x4E8E;Pointwise&#x65B9;&#x6CD5;&#xFF0C;Pairwise&#x65B9;&#x6CD5;&#x901A;&#x8FC7;&#x8003;&#x8651;&#x4E24;&#x4E24;&#x6587;&#x6863;&#x4E4B;&#x95F4;&#x7684;&#x76F8;&#x5BF9;&#x76F8;&#x5173;&#x5EA6;&#x6765;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;&#x6709;&#x4E00;&#x5B9A;&#x7684;&#x8FDB;&#x6B65;&#x3002;&#x4F46;&#x662F;&#xFF0C;Pairwise&#x4F7F;&#x7528;&#x7684;&#x8FD9;&#x79CD;&#x57FA;&#x4E8E;&#x4E24;&#x4E24;&#x6587;&#x6863;&#x4E4B;&#x95F4;&#x76F8;&#x5BF9;&#x76F8;&#x5173;&#x5EA6;&#x7684;&#x635F;&#x5931;&#x51FD;&#x6570;&#xFF0C;&#x548C;&#x771F;&#x6B63;&#x8861;&#x91CF;&#x6392;&#x5E8F;&#x6548;&#x679C;&#x7684;&#x4E00;&#x4E9B;&#x6307;&#x6807;&#x4E4B;&#x95F4;&#xFF0C;&#x53EF;&#x80FD;&#x5B58;&#x5728;&#x5F88;&#x5927;&#x7684;&#x4E0D;&#x540C;&#xFF0C;&#x6709;&#x65F6;&#x751A;&#x81F3;&#x662F;&#x8D1F;&#x76F8;&#x5173;&#xFF0C;&#x5982;&#x4E0B;&#x56FE;&#x6240;&#x793A;(pairwise&#x7684;&#x635F;&#x5931;&#x51FD;&#x6570;&#x548C;NDCG&#x4E4B;&#x5448;&#x73B0;&#x51FA;&#x8D1F;&#x76F8;&#x5173;&#x6027;)&#xFF1A;</p>
<p>&#x53E6;&#x5916;&#xFF0C;&#x6709;&#x7684;Pairwise&#x65B9;&#x6CD5;&#x6CA1;&#x6709;&#x8003;&#x8651;&#x5230;&#x6392;&#x5E8F;&#x7ED3;&#x679C;&#x524D;&#x51E0;&#x540D;&#x5BF9;&#x6574;&#x4E2A;&#x6392;&#x5E8F;&#x7684;&#x91CD;&#x8981;&#x6027;&#xFF0C;&#x4E5F;&#x6CA1;&#x6709;&#x8003;&#x8651;&#x4E0D;&#x540C;&#x67E5;&#x8BE2;&#x5BF9;&#x5E94;&#x7684;&#x6587;&#x6863;&#x96C6;&#x5408;&#x7684;&#x5927;&#x5C0F;&#x5BF9;&#x67E5;&#x8BE2;&#x7ED3;&#x679C;&#x7684;&#x5F71;&#x54CD;(&#x4F46;&#x662F;&#x6709;&#x7684;Pairwise&#x65B9;&#x6CD5;&#x5BF9;&#x8FD9;&#x4E9B;&#x8FDB;&#x884C;&#x4E86;&#x6539;&#x8FDB;&#xFF0C;&#x6BD4;&#x5982;IR SVM&#x5C31;&#x662F;&#x5BF9;Ranking SVM&#x9488;&#x5BF9;&#x4EE5;&#x4E0A;&#x7F3A;&#x70B9;&#x8FDB;&#x884C;&#x6539;&#x8FDB;&#x5F97;&#x5230;&#x7684;&#x7B97;&#x6CD5;)&#x3002;</p>
<h3 id="Listwise-L2R"><a href="#Listwise-L2R" class="headerlink" title="Listwise L2R"></a>Listwise L2R</h3><p>  &#x4E0E;Pointwise&#x548C;Pairwise&#x65B9;&#x6CD5;&#x4E0D;&#x540C;&#xFF0C;Listwise&#x65B9;&#x6CD5;&#x76F4;&#x63A5;&#x8003;&#x8651;&#x7ED9;&#x5B9A;&#x67E5;&#x8BE2;&#x4E0B;&#x7684;&#x6587;&#x6863;&#x96C6;&#x5408;&#x7684;&#x6574;&#x4F53;&#x5E8F;&#x5217;&#xFF0C;&#x76F4;&#x63A5;&#x4F18;&#x5316;&#x6A21;&#x578B;&#x8F93;&#x51FA;&#x7684;&#x6587;&#x6863;&#x5E8F;&#x5217;&#xFF0C;&#x4F7F;&#x5F97;&#x5176;&#x5C3D;&#x53EF;&#x80FD;&#x63A5;&#x8FD1;&#x771F;&#x5B9E;&#x6587;&#x6863;&#x5E8F;&#x5217;&#x3002;</p>
<p>  Listwise&#x7B97;&#x6CD5;&#x4E3B;&#x8981;&#x5305;&#x62EC;&#x4EE5;&#x4E0B;&#x51E0;&#x79CD;&#x7B97;&#x6CD5;&#xFF1A;LambdaRank (NIPS 2006), AdaRank (SIGIR 2007), SVM-MAP (SIGIR 2007), SoftRank (LR4IR 2007), GPRank (LR4IR 2007), CCA (SIGIR 2007), RankCosine (IP&amp;M 2007), ListNet (ICML 2007), ListMLE (ICML 2008) &#x3002;</p>
<p>  &#x76F8;&#x6BD4;&#x4E8E;Pointwise&#x548C;Pairwise&#x65B9;&#x6CD5;&#xFF0C;Listwise&#x65B9;&#x6CD5;&#x76F4;&#x63A5;&#x4F18;&#x5316;&#x7ED9;&#x5B9A;&#x67E5;&#x8BE2;&#x4E0B;&#xFF0C;&#x6574;&#x4E2A;&#x6587;&#x6863;&#x96C6;&#x5408;&#x7684;&#x5E8F;&#x5217;&#xFF0C;&#x6240;&#x4EE5;&#x6BD4;&#x8F83;&#x597D;&#x7684;&#x89E3;&#x51B3;&#x4E86;&#x514B;&#x670D;&#x4E86;&#x4EE5;&#x4E0A;&#x7B97;&#x6CD5;&#x7684;&#x7F3A;&#x9677;&#x3002;Listwise&#x65B9;&#x6CD5;&#x4E2D;&#x7684;LambdaMART(&#x662F;&#x5BF9;RankNet&#x548C;LambdaRank&#x7684;&#x6539;&#x8FDB;)&#x5728;Yahoo Learning to Rank Challenge&#x8868;&#x73B0;&#x51FA;&#x6700;&#x597D;&#x7684;&#x6027;&#x80FD;&#x3002;</p>
<h2 id="&#x6548;&#x679C;&#x8BC4;&#x4EF7;"><a href="#&#x6548;&#x679C;&#x8BC4;&#x4EF7;" class="headerlink" title="&#x6548;&#x679C;&#x8BC4;&#x4EF7;"></a>&#x6548;&#x679C;&#x8BC4;&#x4EF7;</h2><p>L2R&#x662F;&#x7528;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x7684;&#x65B9;&#x6CD5;&#x6765;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;&#x6240;&#x4EE5;&#x8BC4;&#x4EF7;L2R&#x6548;&#x679C;&#x7684;&#x6307;&#x6807;&#x5C31;&#x662F;&#x8BC4;&#x4EF7;&#x6392;&#x5E8F;&#x7684;&#x6307;&#x6807;&#xFF0C;&#x4E3B;&#x8981;&#x5305;&#x62EC;&#x4E00;&#x4E0B;&#x51E0;&#x79CD;&#xFF1A;</p>
<ol>
<li><p>WTA(Winners take all) &#x5BF9;&#x4E8E;&#x7ED9;&#x5B9A;&#x7684;&#x67E5;&#x8BE2;q&#xFF0C;&#x5982;&#x679C;&#x6A21;&#x578B;&#x8FD4;&#x56DE;&#x7684;&#x7ED3;&#x679C;&#x5217;&#x8868;&#x4E2D;&#xFF0C;&#x7B2C;&#x4E00;&#x4E2A;&#x6587;&#x6863;&#x662F;&#x76F8;&#x5173;&#x7684;&#xFF0C;&#x5219;WTA(q)=1&#xFF0C;&#x5426;&#x5219;&#x4E3A;0.</p>
</li>
<li><p>MRR(Mean Reciprocal Rank) &#x5BF9;&#x4E8E;&#x7ED9;&#x5B9A;&#x67E5;&#x8BE2;q&#xFF0C;&#x5982;&#x679C;&#x7B2C;&#x4E00;&#x4E2A;&#x76F8;&#x5173;&#x7684;&#x6587;&#x6863;&#x7684;&#x4F4D;&#x7F6E;&#x662F;R(q)&#xFF0C;&#x5219;MRR(q)=1/R(q)&#x3002;</p>
</li>
<li><p>MAP(Mean Average Precision) &#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x771F;&#x5B9E;&#x76F8;&#x5173;&#x7684;&#x6587;&#x6863;d&#xFF0C;&#x8003;&#x8651;&#x5176;&#x5728;&#x6A21;&#x578B;&#x6392;&#x5E8F;&#x7ED3;&#x679C;&#x4E2D;&#x7684;&#x4F4D;&#x7F6E;P(d)&#xFF0C;&#x7EDF;&#x8BA1;&#x8BE5;&#x4F4D;&#x7F6E;&#x4E4B;&#x524D;&#x7684;&#x6587;&#x6863;&#x96C6;&#x5408;&#x7684;&#x5206;&#x7C7B;&#x51C6;&#x786E;&#x7387;&#xFF0C;&#x53D6;&#x6240;&#x6709;&#x8FD9;&#x4E9B;&#x51C6;&#x786E;&#x7387;&#x7684;&#x5E73;&#x5747;&#x503C;&#x3002;</p>
</li>
<li><p>NDCG(Normalized Discounted Cumulative Gain) &#x662F;&#x4E00;&#x79CD;&#x7EFC;&#x5408;&#x8003;&#x8651;&#x6A21;&#x578B;&#x6392;&#x5E8F;&#x7ED3;&#x679C;&#x548C;&#x771F;&#x5B9E;&#x5E8F;&#x5217;&#x4E4B;&#x95F4;&#x7684;&#x5173;&#x7CFB;&#x7684;&#x4E00;&#x79CD;&#x6307;&#x6807;&#xFF0C;&#x4E5F;&#x662F;&#x6700;&#x5E38;&#x7528;&#x7684;&#x8861;&#x91CF;&#x6392;&#x5E8F;&#x7ED3;&#x679C;&#x7684;&#x6307;&#x6807;&#xFF0C;&#x8BE6;&#x89C1;Wikipedia&#x3002;</p>
</li>
<li><p>RC(Rank Correlation) &#x4F7F;&#x7528;&#x76F8;&#x5173;&#x5EA6;&#x6765;&#x8861;&#x91CF;&#x6392;&#x5E8F;&#x7ED3;&#x679C;&#x548C;&#x771F;&#x5B9E;&#x5E8F;&#x5217;&#x4E4B;&#x95F4;&#x7684;&#x76F8;&#x4F3C;&#x5EA6;&#xFF0C;&#x5E38;&#x7528;&#x7684;&#x6307;&#x6807;&#x662F;Kendall&#x2019;s Tau&#x3002;</p>
</li>
</ol>
<blockquote>
<p><a href="http://boston.lti.cs.cmu.edu/classes/11-642/Papers/clarke-11.7.pdf" target="_blank" rel="external">Learning to rank</a><br><a href="http://boston.lti.cs.cmu.edu/classes/11-642/Papers/li-ieice-tis-11.pdf" target="_blank" rel="external">A Short Introduction to Learning to Rank</a><br><a href="http://www.cnblogs.com/kemaswill/archive/2013/06/01/3109497.html" target="_blank" rel="external">Learning to Rank &#x7B80;&#x4ECB;</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;&amp;#x4F20;&amp;#x7EDF;&amp;#x7684;&amp;#x6392;&amp;#x5E8F;&amp;#x6A21;&amp;#x578B;&quot;&gt;&lt;a href=&quot;#&amp;#x4F20;&amp;#x7EDF;&amp;#x7684;&amp;#x6392;&amp;#x5E8F;&amp;#x6A21;&amp;#x578B;&quot; class=
    
    </summary>
    
      <category term="Search Engines" scheme="http://www.shuang0420.com/categories/Search-Engines/"/>
    
    
      <category term="NLP" scheme="http://www.shuang0420.com/tags/NLP/"/>
    
      <category term="Search Engines" scheme="http://www.shuang0420.com/tags/Search-Engines/"/>
    
  </entry>
  
  <entry>
    <title>Search Engines笔记 - Cache</title>
    <link href="http://www.shuang0420.com/2016/10/15/Search%20Engines%E7%AC%94%E8%AE%B0%20-%20Cache/"/>
    <id>http://www.shuang0420.com/2016/10/15/Search Engines笔记 - Cache/</id>
    <published>2016-10-15T16:21:21.000Z</published>
    <updated>2016-10-18T01:35:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>Web traffic is highly skewed&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x7F13;&#x5B58;&#x63D0;&#x9AD8; performance&#x3002;&#x7F13;&#x5B58;&#x5185;&#x5BB9;&#x53EF;&#x4EE5;&#x662F; query, result page, inverted list&#x3002; <a id="more"></a></p>
<h1 id="Caching-of-Popular-Results"><a href="#Caching-of-Popular-Results" class="headerlink" title="Caching of Popular Results"></a>Caching of Popular Results</h1><h2 id="Query-distribution"><a href="#Query-distribution" class="headerlink" title="Query distribution"></a>Query distribution</h2><p><img src="http://7xu83c.com1.z0.glb.clouddn.com/query_cache.png" alt=""><br>query rank &#x548C; frequency &#x7B26;&#x5408;&#x957F;&#x5C3E;&#x5206;&#x5E03;&#x3002;Top 25 queries &#x5360;&#x4E86; 1% &#x7684;&#x6D41;&#x91CF;&#x3002;&#x5728; distinct queries &#x91CC;&#xFF0C;</p>
<ul>
<li>64% occur once</li>
<li>16% occur twice</li>
<li>7% occur three times</li>
<li>14% occur &gt;=3 times</li>
<li>average query frequency: 4</li>
</ul>
<h2 id="RAM-amp-DISK"><a href="#RAM-amp-DISK" class="headerlink" title="RAM &amp; DISK"></a>RAM &amp; DISK</h2><ol>
<li>&#x7ED9; query cache &#x5206;&#x914D; RAM<br>&#x50A8;&#x5B58;&#x6807;&#x51C6; queries&#xFF0C;&#x6309;&#x5B57;&#x6BCD;&#x987A;&#x5E8F;&#x6392;&#x5217; term<br>1.6GB cache &#x50A8;&#x5B58; 40 million queries (40 bytes/query)</li>
<li>&#x7ED9; result page cache &#x5206;&#x914D;&#x78C1;&#x76D8;<br>&#x4E00;&#x9875; 30KB uncompressed, 10KB compressed<br>400GB cache &#x53EF;&#x4EE5;&#x5B58; 40 million result pages</li>
<li>Cache misses use RAM only(very fast)</li>
<li>Cache hits use RAM+disk<br>&#x6BD4;&#x6B63;&#x5E38; evaluate query &#x8981;&#x5FEB;<br>&#x53EA;&#x7528;&#x4E00;&#x53F0;&#x673A;&#x5668;</li>
</ol>
<h2 id="RAM-only"><a href="#RAM-only" class="headerlink" title="RAM only"></a>RAM only</h2><ol>
<li>&#x7ED9; query cache &#x5206;&#x914D; RAM<br>&#x50A8;&#x5B58;&#x6807;&#x51C6; queries&#xFF0C;&#x6309;&#x5B57;&#x6BCD;&#x987A;&#x5E8F;&#x6392;&#x5217; term<br>9MB cache &#x50A8;&#x5B58; 300,000 queries</li>
<li>&#x7ED9; result page cache &#x5206;&#x914D; RAM<br>&#x4E00;&#x9875; 30KB uncompressed, 10KB compressed<br>2.1GB cache &#x5B58; 210,000 compressed result pages</li>
<li>Cache misses and hits only use RAM (very fast)<br>&#x56E0;&#x4E3A;&#x7F13;&#x5B58;&#x7684;&#x6BD4;&#x8F83;&#x5C11;&#xFF0C;&#x6240;&#x4EE5;&#x66F4;&#x591A;&#x7684; query &#x4F1A;&#x88AB; miss</li>
<li>Could partition caches across multiple machines<br>&#x9700;&#x8981;&#x66F4;&#x590D;&#x6742;&#x7684; design</li>
</ol>
<h2 id="Cache-size"><a href="#Cache-size" class="headerlink" title="Cache size?"></a>Cache size?</h2><p>Markatos &#x63D0;&#x51FA;&#xFF0C;30% &#x7684; queries &#x4F1A;&#x4E0E;&#x7F13;&#x5B58;&#x91CC;&#x7684; query &#x5339;&#x914D;&#xFF0C;&#x7136;&#x800C;&#x589E;&#x52A0; cache size &#x53EA;&#x80FD;&#x975E;&#x5E38;&#x5C0F;&#x5E45;&#x5EA6;&#x7684;&#x63D0;&#x9AD8; hit rate&#x3002;&#x89C1;&#x4E0B;&#x56FE;&#xFF1A;<br><img src="http://7xu83c.com1.z0.glb.clouddn.com/cache%20size.png" alt=""><br>&#x6839;&#x636E; UK2007 &#x7684; query log&#xFF0C;44% &#x7684; query &#x53EA;&#x51FA;&#x73B0;&#x4E86;&#x4E00;&#x6B21;&#xFF0C;56% &#x7684; query &#x51FA;&#x73B0;&#x4E86;&#x8D85;&#x8FC7;&#x4E00;&#x6B21;&#xFF0C;cache &#x8FD9; 56% &#x91CC;&#x7684; query &#x6709;&#x52A9;&#x4E8E;&#x63D0;&#x9AD8; performance&#xFF0C;&#x7136;&#x800C;&#x5E76;&#x4E0D;&#x80FD;&#x5E2E;&#x52A9; first occurrence of a query&#x3002;</p>
<h1 id="Caching-Inverted-List"><a href="#Caching-Inverted-List" class="headerlink" title="Caching Inverted List"></a>Caching Inverted List</h1><p>&#x6839;&#x636E; UK2007 &#x7684; query log&#xFF0C;4% &#x7684; query term &#x53EA;&#x51FA;&#x73B0;&#x4E86;&#x4E00;&#x6B21;&#xFF0C;96% &#x7684; query term &#x51FA;&#x73B0;&#x4E0D;&#x6B62;&#x4E00;&#x6B21;&#xFF0C;&#x5BF9; 96% &#x91CC;&#x5BF9; query term &#x8FDB;&#x884C; inverted list &#x7684; cache &#x624D;&#x662F;&#x6709;&#x7528;&#x7684;&#x3002;&#x5728;&#x6BCF;&#x4E2A; partition &#x4E0A;&#x5206;&#x914D;&#x4E00;&#x90E8;&#x5206; RAM (a few GB)&#x7ED9; inverted list&#x3002;&#x8FD9;&#x91CC;&#x7684;&#x91CD;&#x70B9;&#x5728;&#x4E8E; <strong>which terms should be cached?</strong> &#x4E24;&#x4E2A;&#x539F;&#x5219;&#xFF1A;</p>
<ul>
<li>Terms that are frequent in a query log (improve the hit rage)</li>
<li>Terms that don&#x2019;t have massive inverted lists (consume limited cache space)</li>
</ul>
<p>&#x5BF9; term &#x7684;&#x6392;&#x5E8F;&#xFF1A; $$Score(t)={qtf(t) \over df(t)}$$&#x3002;</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Web traffic is highly skewed&amp;#xFF0C;&amp;#x6211;&amp;#x4EEC;&amp;#x53EF;&amp;#x4EE5;&amp;#x901A;&amp;#x8FC7;&amp;#x7F13;&amp;#x5B58;&amp;#x63D0;&amp;#x9AD8; performance&amp;#x3002;&amp;#x7F13;&amp;#x5B58;&amp;#x5185;&amp;#x5BB9;&amp;#x53EF;&amp;#x4EE5;&amp;#x662F; query, result page, inverted list&amp;#x3002;&lt;/p&gt;
    
    </summary>
    
      <category term="Search Engines" scheme="http://www.shuang0420.com/categories/Search-Engines/"/>
    
    
      <category term="NLP" scheme="http://www.shuang0420.com/tags/NLP/"/>
    
      <category term="Search Engines" scheme="http://www.shuang0420.com/tags/Search-Engines/"/>
    
  </entry>
  
  <entry>
    <title>Search Engines笔记 - Index Construction</title>
    <link href="http://www.shuang0420.com/2016/10/14/Search%20Engines%E7%AC%94%E8%AE%B0%20-%20Index/"/>
    <id>http://www.shuang0420.com/2016/10/14/Search Engines笔记 - Index/</id>
    <published>2016-10-14T16:21:21.000Z</published>
    <updated>2016-10-18T13:59:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>&#x8FD9;&#x7BC7;&#x8BB2;&#x4E86;&#x641C;&#x7D22;&#x5F15;&#x64CE;&#x4E2D;&#x521B;&#x5EFA; index &#x7684;&#x4E3B;&#x8981;&#x539F;&#x5219;&#x3001;&#x65B9;&#x6CD5;&#x4EE5;&#x53CA;&#x4F18;&#x5316;&#x65B9;&#x6848;&#x3002; <a id="more"></a></p>
<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p><img src="http://7xu83c.com1.z0.glb.clouddn.com/index_cons.png" alt=""></p>
<h1 id="Basic-facts"><a href="#Basic-facts" class="headerlink" title="Basic facts"></a>Basic facts</h1><ol>
<li>&#x7528; Integer &#x4EE3;&#x66FF; String&#xFF0C;&#x7701;&#x7A7A;&#x95F4;&#x7701;&#x65F6;&#x95F4;&#x3002;</li>
<li>&#x4E00;&#x822C;&#x6765;&#x8BF4; corpus &#x6BD4; RAM &#x8981;&#x5927;&#xFF0C;&#x4E0D;&#x80FD;&#x5728;&#x5185;&#x5B58;&#x4E2D;&#x5B8C;&#x6210;&#x6574;&#x4E2A;&#x4EFB;&#x52A1;&#xFF0C;&#x6240;&#x4EE5;&#x4E00;&#x5B9A;&#x4F1A;&#x6709;&#x90E8;&#x5206;&#x5199;&#x5230;&#x78C1;&#x76D8;&#x4E2D;&#xFF0C;&#x8BBF;&#x95EE;&#x78C1;&#x76D8;&#x6570;&#x636E;&#x6BD4;&#x8BBF;&#x95EE;&#x5185;&#x5B58;&#x6570;&#x636E;&#x6162;&#x5F97;&#x591A;&#xFF0C;&#x6240;&#x4EE5;&#x53EF;&#x4EE5;&#x505A;&#x7684;&#x662F;<ul>
<li>&#x53EA;&#x5728;&#x5FC5;&#x8981;&#x7684;&#x65F6;&#x5019;&#x5199;&#x5165;&#x78C1;&#x76D8;</li>
<li>&#x538B;&#x7F29;&#x6570;&#x636E;&#x51CF;&#x5C11; I/O&#x3002;&#x6570;&#x636E;&#x4ECE;&#x78C1;&#x76D8;&#x4F20;&#x8F93;&#x5230;&#x5185;&#x5B58;&#x662F;&#x7531;&#x7CFB;&#x7EDF;&#x603B;&#x7EBF;&#x800C;&#x4E0D;&#x662F;&#x5904;&#x7406;&#x5668;&#x6765;&#x5B9E;&#x73B0;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x78C1;&#x76D8; I/O &#x65F6;&#x5904;&#x7406;&#x5668;&#x4ECD;&#x7136;&#x53EF;&#x4EE5;&#x5904;&#x7406;&#x6570;&#x636E;&#x3002;</li>
<li>&#x987A;&#x5E8F;&#x8BFB;&#x53D6;&#xFF08;&#x6BD4; random access &#x5FEB;&#xFF09;&#x3002;&#x56E0;&#x4E3A;&#x78C1;&#x76D8;&#x8BFB;&#x5199;&#x65F6;&#xFF0C;&#x78C1;&#x5934;&#x79FB;&#x5230;&#x6570;&#x636E;&#x6240;&#x5728;&#x7684;&#x78C1;&#x9053;&#x6709;&#x4E00;&#x6BB5;&#x65F6;&#x95F4;&#xFF0C;&#x5927;&#x6982; 5ms&#xFF0C;&#x79F0;&#x4E3A;&#x5BFB;&#x9053;&#x65F6;&#x95F4;&#xFF0C;&#x8FD9;&#x6BB5;&#x65F6;&#x95F4;&#x5E76;&#x4E0D;&#x8FDB;&#x884C;&#x6570;&#x636E;&#x7684;&#x4F20;&#x8F93;&#xFF0C;&#x6240;&#x4EE5;&#x8FDE;&#x7EED;&#x8BFB;&#x53D6;&#x7684;&#x6570;&#x636E;&#x5E94;&#x8BE5;&#x8FDE;&#x7EED;&#x5B58;&#x653E;&#x6765;&#x8282;&#x7701;&#x65F6;&#x95F4;&#x3002;</li>
</ul>
</li>
</ol>
<h1 id="Single-Processor-&#x5355;&#x673A;&#x7248;"><a href="#Single-Processor-&#x5355;&#x673A;&#x7248;" class="headerlink" title="Single Processor(&#x5355;&#x673A;&#x7248;)"></a>Single Processor(&#x5355;&#x673A;&#x7248;)</h1><h2 id="Block-sort-based-indexing-BSBI"><a href="#Block-sort-based-indexing-BSBI" class="headerlink" title="Block sort-based indexing(BSBI)"></a>Block sort-based indexing(BSBI)</h2><p>&#x57FA;&#x4E8E;&#x5757;&#x7684;&#x6392;&#x5E8F;&#x7D22;&#x5F15;&#x65B9;&#x6CD5;(Block sort-based indexing algorithm) &#x8FC7;&#x7A0B;&#x5982;&#x4E0B;:</p>
<ol>
<li>&#x5C06; corpus &#x5206;&#x5272;&#x6210;&#x51E0;&#x4E2A;&#x5927;&#x5C0F;&#x76F8;&#x7B49;&#x7684;&#x90E8;&#x5206;</li>
<li>&#x5BF9;&#x6BCF;&#x4E2A;&#x90E8;&#x5206;&#x7684; (termId,docId)&#x6392;&#x5E8F;</li>
<li>&#x4E00;&#x65E6; in-memory buffer &#x6EE1;&#x4E86;&#xFF0C;&#x5C31;&#x628A;&#x4E34;&#x65F6;&#x6392;&#x5E8F;&#x7ED3;&#x679C; flush &#x5230;&#x78C1;&#x76D8;&#x4E2D;&#xFF0C;&#x7136;&#x540E;&#x91CD;&#x65B0;&#x521D;&#x59CB;&#x5316;&#xFF0C;&#x91CD;&#x590D;2&#x3001;3&#x8FC7;&#x7A0B;</li>
<li>&#x5C06;&#x6240;&#x6709;&#x7684;&#x4E2D;&#x95F4;&#x6587;&#x4EF6;&#x5408;&#x5E76;&#x6210;&#x6700;&#x7EC8;&#x7D22;&#x5F15;&#x3002;(merge index blocks on disk)</li>
</ol>
<p>&#x4E0B;&#x56FE;&#x662F;&#x5408;&#x5E76;&#x4E2D;&#x95F4;&#x7ED3;&#x679C;(block merge step)&#x7684;&#x56FE;&#x793A; <img src="http://7xu83c.com1.z0.glb.clouddn.com/block%20merge.png" alt=""></p>
<p>BSBI &#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x662F; O(TlogT)</p>
<h2 id="Single-pass-in-memory-indexing-SPIMI"><a href="#Single-pass-in-memory-indexing-SPIMI" class="headerlink" title="Single-pass in-memory indexing(SPIMI)"></a>Single-pass in-memory indexing(SPIMI)</h2><p>BSBI &#x9700;&#x8981;&#x5C06; term &#x6620;&#x5C04;&#x6210; id&#xFF0C;&#x5BF9;&#x5927;&#x89C4;&#x6A21;&#x7684; corpus &#x6765;&#x8BF4;&#xFF0C;&#x8FD9;&#x79CD;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x4F1A;&#x5F88;&#x5927;&#x4EE5;&#x81F4;&#x5728;&#x5185;&#x5B58;&#x4E2D;&#x96BE;&#x4EE5;&#x5B58;&#x653E;&#xFF0C;SPIMI &#x4F7F;&#x7528; term &#x672C;&#x8EAB;&#xFF0C;&#x5C06;&#x6BCF;&#x4E2A;&#x5757;&#x7684;&#x8BCD;&#x5178;&#x5199;&#x5165;&#x78C1;&#x76D8;&#xFF0C;&#x5BF9;&#x4E8E;&#x4E0B;&#x4E00;&#x4E2A;&#x5757;&#x5219;&#x91CD;&#x65B0;&#x91C7;&#x7528;&#x65B0;&#x7684;&#x8BCD;&#x5178;&#xFF0C;&#x8FD9;&#x6837;&#x5E26;&#x6765;&#x7684;&#x597D;&#x5904;&#x662F;&#xFF0C;&#x53EA;&#x8981;&#x786C;&#x76D8;&#x7A7A;&#x95F4;&#x8DB3;&#x591F;&#x5927;&#xFF0C;SPIMI &#x5C31;&#x80FD;&#x7D22;&#x5F15;&#x4EFB;&#x4F55;&#x5927;&#x5C0F;&#x7684; corpus&#x3002; &#x7B97;&#x6CD5;&#x5982;&#x4E0B;&#xFF0C;&#x53CD;&#x590D;&#x8C03;&#x7528; SPIMI-INVERT &#x51FD;&#x6570;&#x76F4;&#x5230;&#x5C06;&#x5168;&#x90E8; corpus &#x5904;&#x7406;&#x5B8C;&#x3002;token_stream &#x5C31;&#x662F; term-docid stream&#x3002; <img src="http://7xu83c.com1.z0.glb.clouddn.com/SPIMI.png" alt=""></p>
<p>BSBI &#x548C; SPIMI &#x7684;&#x4E00;&#x4E2A;&#x533A;&#x522B;&#x662F;&#xFF0C; SPIMI &#x76F4;&#x63A5;&#x5728; inverted list &#x4E2D;&#x589E;&#x52A0;&#x4E00;&#x9879;&#xFF0C;&#x8FD9;&#x4E2A; inverted lsit &#x662F;&#x52A8;&#x6001;&#x589E;&#x957F;&#x5BF9;&#xFF0C;&#x5927;&#x5C0F;&#x4F1A;&#x4E0D;&#x65AD;&#x8C03;&#x6574;&#xFF0C;&#x800C; BSBI &#x4E00;&#x5F00;&#x59CB;&#x5C31;&#x6574;&#x7406;&#x51FA;&#x6240;&#x6709;&#x7684; termID-docID &#x5E76;&#x5BF9;&#x5B83;&#x4EEC;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#x3002;&#x8FD9;&#x6837;&#x505A;&#x7684;&#x597D;&#x5904;&#x662F;&#xFF1A;</p>
<ul>
<li>&#x4E0D;&#x9700;&#x8981;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;&#x5904;&#x7406;&#x901F;&#x5EA6;&#x66F4;&#x5FEB;</li>
<li>&#x4FDD;&#x7559; inverted list &#x5BF9; term &#x7684;&#x5F52;&#x5C5E;&#x5173;&#x7CFB;&#xFF0C;&#x80FD;&#x8282;&#x7701;&#x5185;&#x5B58;&#xFF0C;&#x4E5F;&#x4E0D;&#x7528;&#x4FDD;&#x5B58; term id&#xFF0C;&#x6240;&#x4EE5;&#x6BCF;&#x6B21;&#x5355;&#x72EC;&#x7684; SPIMI-INVERT &#x8C03;&#x7528;&#x80FD;&#x591F;&#x5904;&#x7406;&#x7684;&#x5757;&#x53EF;&#x4EE5;&#x975E;&#x5E38;&#x5927;&#xFF0C;&#x6574;&#x4E2A;&#x7684;&#x7D22;&#x5F15;&#x6784;&#x5EFA;&#x8FC7;&#x7A0B;&#x4E5F;&#x4F1A;&#x56E0;&#x6B64;&#x975E;&#x5E38;&#x9AD8;&#x6548;&#x3002;</li>
</ul>
<p>SPIMI &#x7684;&#x7A7A;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x662F; O(T)&#x3002;</p>
<h1 id="Distributed-indexes"><a href="#Distributed-indexes" class="headerlink" title="Distributed indexes"></a>Distributed indexes</h1><h2 id="Size-of-web-search-engine-index"><a href="#Size-of-web-search-engine-index" class="headerlink" title="Size of web search engine index"></a>Size of web search engine index</h2><p>Assumption:</p>
<ul>
<li>Number of web pages: 50 billion (in 2013), assume 50% are text-like (guess)</li>
<li>Average web page size: 37K (in 2013)</li>
<li>Average inlink size for non-text pages: 1K (guess)</li>
<li>Index size is about 20% the size of the raw text</li>
</ul>
<p>Text: 25billion <em> 37K + 25billion </em> 1K = 925TB Index: 20% * 950TB = 185TB (call it 200TB for convenience)</p>
<p>&#x2013;&gt; The index fits on about 50 4TB disk drives</p>
<h2 id="Hardware"><a href="#Hardware" class="headerlink" title="Hardware"></a>Hardware</h2><p>&#x4E00;&#x4E2A; computer cluster&#xFF0C;&#x53C8;&#x53EB;&#x505A; rack&#xFF0C;&#x6709; 40-80 &#x53F0;&#x673A;&#x5668;&#xFF0C;&#x6BCF;&#x4E2A; rack &#x6709;&#x81EA;&#x5DF1;&#x5185;&#x90E8;&#x7684;&#x7F51;&#x7EDC;&#xFF0C;&#x5BF9;&#x5927;&#x516C;&#x53F8;&#x50CF; google &#x800C;&#x8A00;&#xFF0C;&#x673A;&#x5668;&#x7684;&#x9009;&#x62E9;&#x9075;&#x5FAA;&#x7684;&#x539F;&#x5219;&#x662F;&#xFF1A;</p>
<ul>
<li>cheaper is better</li>
<li>small number of ordinary disks on each computer</li>
<li>large(but not huge) RAM on each computer</li>
</ul>
<p>&#x56E0;&#x4E3A;&#x4E00;&#x53F0;&#x673A;&#x5B50;&#x574F;&#x4E86;&#x5F97;&#x7ACB;&#x523B;&#x6362;&#x4E00;&#x53F0;&#x673A;&#x5B50;&#x4E0A;&#x53BB;&#xFF0C;&#x81EA;&#x52A8; deploy&#xFF0C;&#x968F;&#x65F6;&#x6295;&#x5165;&#x4F7F;&#x7528;&#x3002;&#x800C;&#x5BF9;&#x4E8E;&#x5C0F;&#x7684;&#x7EC4;&#x7EC7;&#x50CF; cmu&#xFF0C;&#x673A;&#x5B50;&#x5C31;&#x4F1A;&#x4E70;&#x597D;&#x4E00;&#x70B9;&#x7684;&#xFF0C;&#x4E00;&#x53F0;&#x574F;&#x4E86;&#x4F1A;&#x53BB;&#x4FEE;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x76F4;&#x63A5;&#x6362;&#x4E00;&#x53F0;&#x3002;</p>
<h2 id="Partitioned-indexes"><a href="#Partitioned-indexes" class="headerlink" title="Partitioned indexes"></a>Partitioned indexes</h2><p>Partitioned index &#x7528;&#x5230;&#x4E86; sharding &#x548C; replication &#x7684;&#x539F;&#x7406;&#x3002;</p>
<h3 id="Sharding"><a href="#Sharding" class="headerlink" title="Sharding"></a>Sharding</h3><p>index &#x901A;&#x5E38;&#x662F;&#x88AB;&#x5207;&#x7247;(sharding)&#x7684;&#xFF0C;&#x6BCF;&#x4E2A; partition &#x5305;&#x542B;&#x4E86;&#x4E00;&#x5806;&#x4E0D;&#x91CD;&#x590D;&#x7684; document set&#xFF0C;&#x6BCF;&#x4E2A; partition &#x90FD;&#x88AB;&#x5206;&#x5230;&#x4E86;&#x4E00;&#x53F0;&#x673A;&#x5668;&#xFF0C;&#x6839;&#x636E;&#x4E4B;&#x524D;&#x5BF9; index size &#x7684; assumption&#xFF0C;&#x5C31;&#x6709; 25 partitions <em>2disks/node</em> 4TB = 200TB&#x3002; &#x90A3;&#x4E48; <strong>corpus &#x4F1A;&#x600E;&#x4E48;&#x88AB; partition &#x5462;&#xFF1F;</strong> &#x53EF;&#x4EE5;&#x968F;&#x673A;&#x5206;&#x914D;(random assignment)&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x6309;&#x6765;&#x6E90;&#xFF08;source-based assignment&#xFF09;&#xFF0C;&#x603B;&#x7684;&#x6765;&#x8BF4;&#xFF0C;&#x968F;&#x673A;&#x5206;&#x914D;&#x7528;&#x7684;&#x6BD4;&#x8F83;&#x591A;&#xFF0C;&#x56E0;&#x4E3A;&#x968F;&#x673A;&#x53EF;&#x4EE5;&#x5E73;&#x8861; query traffic across partitions&#xFF0C;&#x8BA9;&#x6BCF;&#x53F0;&#x673A;&#x5F97;&#x5230;&#x5145;&#x5206;&#x4F7F;&#x7528;&#x3002;</p>
<h3 id="Replication"><a href="#Replication" class="headerlink" title="Replication"></a>Replication</h3><p>index &#x901A;&#x5E38;&#x88AB;&#x5B58;&#x4E86;&#x597D;&#x51E0;&#x4EFD; copy(replication)&#xFF0C;&#x4E3A;&#x4E86;&#x63D0;&#x9AD8;&#x5E76;&#x884C;&#x80FD;&#x529B;&#x548C;&#x5BB9;&#x9519;&#x80FD;&#x529B;&#x3002; &#x6240;&#x4EE5;&#x4E00;&#x4E2A; index server &#x6807;&#x51C6;&#x7684;&#x914D;&#x7F6E;&#xFF1A;</p>
<ul>
<li>40 machines in a rack</li>
<li>2*4TB disks/machine</li>
<li>320 TB of index/rack</li>
</ul>
<h3 id="Query-evalution"><a href="#Query-evalution" class="headerlink" title="Query evalution"></a>Query evalution</h3><p>&#x5206;&#x5E03;&#x5F0F;&#x7CFB;&#x7EDF;&#x7684; query &#x8BC4;&#x4F30;&#x8FC7;&#x7A0B;&#x4E3A;</p>
<ul>
<li>&#x4ECE;&#x6BCF;&#x4E2A; partition &#x4E2D;&#x627E;&#x51FA;&#x4E00;&#x53F0;&#x673A;&#x5668;&#x3002; (select a machine for each index partition)</li>
<li>&#x628A; query &#x5206;&#x914D;&#x5230;&#x9009;&#x51FA;&#x7684;&#x673A;&#x5668;&#x4E2D;&#xFF0C;&#x7136;&#x540E;&#x6BCF;&#x53F0;&#x673A;&#x5668;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A; ranked list of matches&#x3002; (broadcast the query to each selected machine)</li>
<li>&#x4E00;&#x4E2A; aggregator &#x5C06;&#x8FD9;&#x4E9B; ranked list &#x5408;&#x5E76;(merge-sort)&#x6210;&#x6700;&#x7EC8;&#x7684;&#x6709;&#x5E8F;&#x6587;&#x6863;&#x96C6;&#x5408;&#x3002;(an aggregator assembles them into a final ranked list of doc ids)</li>
<li>&#x5176;&#x5B83;&#x673A;&#x5668;&#x5BF9;&#x6BCF;&#x4E2A;&#x7ED3;&#x679C;&#x6765;&#x5BFB;&#x627E; title, urls, etc.&#x3002;&#xFF08;other machines looks up titles, URLs, etc., for each result, a similar partitioning/pooling strategy is used for documents&#xFF09;</li>
</ul>
<h2 id="Tiered-indexes"><a href="#Tiered-indexes" class="headerlink" title="Tiered indexes"></a>Tiered indexes</h2><p>&#x53E6;&#x4E00;&#x79CD;&#x5206;&#x5E03;&#x5F0F;&#x7684; index &#x662F;&#x5C06; web page &#x8FDB;&#x884C;&#x5206;&#x5C42;&#xFF0C;10% &#x4E3A; tier 1&#xFF0C;&#x662F;&#x9AD8;&#x4EF7;&#x503C;&#x7684;&#x7F51;&#x9875;&#xFF0C;&#x5176;&#x4F59; 90% &#x662F; tier 2&#xFF0C;&#x662F;&#x4F4E;&#x4EF7;&#x503C;&#x7684;&#x7F51;&#x9875;&#x3002;query &#x8FC7;&#x6765;&#x6211;&#x4EEC;&#x5148;&#x4ECE; tier 1 &#x627E;&#xFF0C;&#x5982;&#x679C; good results &#x4E0D;&#x591F;&#xFF0C;&#x518D;&#x5F80; tier 2 &#x627E;&#x3002; &#x6240;&#x4EE5;&#x95EE;&#x9898;&#x6765;&#x4E86;&#xFF0C;<strong>&#x600E;&#x4E48;&#x627E; top tier(s)&#xFF1F;</strong></p>
<ul>
<li>Pages with high page rank, or from sites with high page rank</li>
<li>Pages that were important for frequent past queries(ranked highly, high click through, high dwell time)</li>
<li>Pages with short URLs (more likely to be home pages)</li>
<li>Pages with low spam scores</li>
</ul>
<p>Tiered index &#x7684;&#x4F18;&#x52BF;&#x5982;&#x4E0B;&#xFF1A;</p>
<ul>
<li>&#x964D;&#x4F4E;&#x4E86;&#x5927;&#x591A;&#x6570; query &#x7684;&#x641C;&#x7D22;&#x6210;&#x672C;&#xFF0C;&#x4E00;&#x4E2A;&#x5B8C;&#x6574;&#x7684;&#x641C;&#x7D22;&#x8FC7;&#x7A0B;&#x6BD4; tier 1 &#x7684;&#x641C;&#x7D22;&#x8981;&#x627E; 10x &#x7684;&#x673A;&#x5668;&#x3002;</li>
<li>&#x63D0;&#x9AD8;&#x4E86;&#x5927;&#x591A;&#x6570; query &#x7684;&#x641C;&#x7D22;&#x8D28;&#x91CF;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x66F4;&#x5173;&#x6CE8; &#x201C;good&#x201D; pages.</li>
</ul>
<p><strong>&#x4EC0;&#x4E48;&#x60C5;&#x51B5;&#x4E0B;&#x4F1A;&#x53BB;&#x627E; tier 2?</strong></p>
<ul>
<li>&#x5339;&#x914D; query &#x7684; Tier 1 &#x7684;&#x7F51;&#x9875;&#x592A;&#x5C11;</li>
<li>query &#x975E;&#x5E38;&#x7684; uncommon</li>
</ul>
<h2 id="Index-Construction"><a href="#Index-Construction" class="headerlink" title="Index Construction"></a>Index Construction</h2><p>&#x5EFA;&#x7ACB;&#x5206;&#x5E03;&#x5F0F;&#x7D22;&#x5F15;&#x7528;&#x7684;&#x6846;&#x67B6;&#x662F; MapReduce&#xFF0C;&#x57FA;&#x672C;&#x8FC7;&#x7A0B;&#x662F; Input reader &#x2013;&gt; Map &#x2013;&gt; Combine &#x2013;&gt; Shuffle &#x2013;&gt; Reduce&#x3002;<br>&#x4ECE;&#x6700;&#x57FA;&#x672C;&#x7684; binary inverted list &#x8FDB;&#x884C;&#x793A;&#x8303;&#xFF0C;format &#x662F; (term,[docids]) &#x6216;&#x8005; (term,[docid,docid,&#x2026;])&#xFF0C;&#x6CE8;&#x610F;&#x8FD9;&#x91CC;&#x7684; docid &#x662F; internal document id&#xFF08;&#x8F6C;&#x5316;&#x6210;&#x4E86; integer&#xFF09; &#x800C;&#x4E0D;&#x662F;&#x539F;&#x6765;&#x7684; id&#x3002;</p>
<h3 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h3><p>&#x6BCF;&#x4E2A; Map task &#x76F8;&#x5F53;&#x4E8E;&#x4E00;&#x4E2A; document parser</p>
<ul>
<li>input: a stream of documents</li>
<li>output: a stream of (term,docid) tuples<br>eg. (men,1)(and,1)(women,1)&#x2026;(once,2)(upon,2)</li>
</ul>
<h3 id="Shuffle&#xFF0F;Sort"><a href="#Shuffle&#xFF0F;Sort" class="headerlink" title="Shuffle&#xFF0F;Sort"></a>Shuffle&#xFF0F;Sort</h3><p>Shuffle &#x7684;&#x8FC7;&#x7A0B;&#x76F8;&#x5F53;&#x4E8E; route tuples &#x5230; Reducers &#x91CC;&#x3002;&#x5728; Shuffle/Sort &#x4E2D;&#xFF0C;&#x90FD;&#x662F; shuffle/sort by key&#xFF0C;&#x800C;&#x4E0D;&#x662F; by value&#x3002;</p>
<ul>
<li>input: (t5,docid1)(t1,docid3)(t1,docid1)&#x2026;</li>
<li>output: (t1,docid3)(t1,docid1)(t5,docid1)&#x2026;</li>
</ul>
<h3 id="Redcuer"><a href="#Redcuer" class="headerlink" title="Redcuer"></a>Redcuer</h3><p>Reducer &#x7684;&#x4F5C;&#x7528;&#x5C31;&#x662F;&#x5C06; stream of keys &#x8F6C;&#x5316;&#x6210; streams of inverted lists&#x3002;Reducer &#x4F1A; sort values &#x4E5F;&#x5C31;&#x662F; docids&#xFF0C;&#x7136;&#x540E;&#x5EFA;&#x7ACB; inverted list&#xFF0C;&#x8FD9;&#x91CC;&#x8981;&#x4FDD;&#x8BC1;&#x7684;&#x662F;&#x6700;&#x957F;&#x7684; inverted list &#x5FC5;&#x987B;&#x80FD;&#x591F; fit in memory&#x3002;</p>
<ul>
<li>input: (men,1)(men,127)(men,49)(men,23)&#x2026;</li>
<li>ouput: (men,[df:492,docids:1,23,49,127,&#x2026;])</li>
</ul>
<h3 id="Improvement"><a href="#Improvement" class="headerlink" title="Improvement"></a>Improvement</h3><p>&#x8FD9;&#x4E2A;&#x6D41;&#x7A0B;&#x4E0B;&#x6765;&#x7684;&#x6548;&#x7387;&#x5E76;&#x4E0D;&#x9AD8;&#xFF0C;&#x56E0;&#x4E3A;&#x6BCF;&#x4E2A; unique term in a document &#x90FD;&#x4F1A;&#x4EA7;&#x751F;&#x4E00;&#x4E2A; tuple&#xFF0C;&#x50CF; WSJ&#x2019;87-92 (533 MB of text) &#x5C31;&#x4F1A;&#x4EA7;&#x751F; 20 million &#x7684; tuple&#xFF0C;&#x6BCF;&#x4E2A; tuple &#x90FD;&#x4F1A; shuffle &#x5230; reducers &#x91CC;&#xFF0C;&#x8FDB; reducer &#x524D;&#x8FD8;&#x8981;&#x5148; sort&#xFF0C;&#x8FD9;&#x4E2A;&#x8FC7;&#x7A0B;&#x7279;&#x522B;&#x8017;&#x65F6;&#x3002;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x4F1A;&#x7528; Combiner &#x6765;&#x63D0;&#x9AD8;&#x6548;&#x7387;&#x3002;Combiner &#x7684;&#x4F5C;&#x7528;&#x548C; reducer &#x5DEE;&#x4E0D;&#x591A;&#xFF0C;&#x4E0D;&#x8FC7;&#x5B83;&#x662F;&#x5728;&#x6BCF;&#x4E2A; mapper &#x91CC;&#x8FDB;&#x884C;&#x7684;&#xFF0C;&#x5B83;&#x628A;&#x6BCF;&#x4E2A; mapper &#x91CC;&#x7684; docid &#x5148;&#x8FDB;&#x884C;&#x4E86;&#x5408;&#x5E76;&#x3002;(t1,docid1)(t2,docid1)(t4,docid2)&#x2026;-&gt;(t1,[docid1,docid18,&#x2026;])&#x3002;&#x8FD9;&#x6837;&#x7684;&#x597D;&#x5904;&#x662F;&#x9700;&#x8981; shuffle &#x7684; tuple &#x66F4;&#x5C11;&#xFF0C;&#x9700;&#x8981; hash &#x7684; key &#x66F4;&#x5C11;&#xFF0C;&#x9700;&#x8981;&#x8FDB;&#x884C; movement operation &#x7684;&#x6570;&#x636E;&#x4E5F;&#x66F4;&#x5C11;&#xFF0C;&#x53E6;&#x5916;&#xFF0C;&#x9700;&#x8981; reduce &#x7684; tuple &#x66F4;&#x5C11;&#xFF0C;&#x9700;&#x8981; sort &#x7684; tuple &#x4E5F;&#x66F4;&#x5C11;&#x3002;<br>&#x6539;&#x8FDB;&#x540E;&#x7684;&#x6846;&#x67B6;&#x5982;&#x4E0B;&#xFF1A;</p>
<ol>
<li><strong>Map:</strong><br>$(docid_1,content_1)$ -&gt; $(t_1,ilist_{1,1})(t_2,ilist_{2,1})(t_3,ilist_{3,1})$</li>
<li><strong>Combine:</strong><br>Sort by t &amp; combine $(t_1 [ilist_{1,2} ilist_{1,3} ilist_{1,1},&#x2026;])$-&gt;$(t_1,ilist_{1,27})$<br>&#x6BCF;&#x4E2A; output inverted list &#x5305;&#x542B;&#x4E86; a sequence of documents</li>
<li><strong>Shuffle by t</strong></li>
<li><strong>Sort by t</strong><br>$(t_4 ilist_{4,1}) (t_1 ilist_{1,3})$-&gt;$(t_1,ilist_{1,2})(t_1,ilist_{1,4})(t_4,ilist_{4,1})$</li>
<li><strong>Reduce</strong><br>$(t_1 [ilist_{1,2} ilist_{1,1} ilist_{1,4},&#x2026;])$-&gt;$(t_1,ilist_final)$</li>
</ol>
<p>$ilist_{i,j}$: the j&#x2019;th inverted list fragment for term i</p>
<p>&#x6CE8;&#x610F;&#x6BCF;&#x4E2A; reducer &#x91CC;&#x7684; inverted list &#x90FD;&#x662F;&#x5B8C;&#x6574;&#x7684;&#xFF0C;&#x6BCF;&#x4E2A; reducer &#x76F8;&#x5F53;&#x4E8E;&#x5B58;&#x4E86;&#x4E2A; result block&#xFF0C;&#x6BCF;&#x4E2A; block &#x5305;&#x62EC;&#x4E0D;&#x540C;&#x7684; term&#xFF0C;&#x6BCF;&#x4E2A; term &#x53EA;&#x5728;&#x4E00;&#x4E2A; block &#x91CC;&#x51FA;&#x73B0;&#x3002;</p>
<p>&#x5982;&#x679C;&#x8981;&#x521B;&#x5EFA; partitioned inverted list&#xFF0C;&#x53EA;&#x7528;&#x5728; key &#x91CC;&#x52A0;&#x4E0A;&#x4E00;&#x4E2A; partition id &#x5373;&#x53EF;&#x3002;</p>
<ol>
<li><strong>Map:</strong><br>$(docid_1,content_1)$ -&gt; $([p,t_1],ilist_{1,1})([p,t_2],ilist_{2,1})([p,t_3],ilist_{3,1})$</li>
<li><strong>Combine:</strong><br>Sort by t &amp; combine $([p,t_1] [ilist_{1,2} ilist_{1,3} ilist_{1,1},&#x2026;])$-&gt;$([p,t_1],ilist_{1,27})$<br>&#x6BCF;&#x4E2A; output inverted list &#x5305;&#x542B;&#x4E86; a sequence of documents</li>
<li><strong>Shuffle by p</strong></li>
<li><strong>Sort by [p,t]</strong><br>$([p,t_4] ilist_{4,1}) ([p,t_1] ilist_{1,3})$-&gt;$([p,t_1],ilist_{1,2})([p,t_1],ilist_{1,4})([p,t_4],ilist_{4,1})$</li>
<li><strong>Reduce</strong><br>$([p,t_1] [ilist_{1,2} ilist_{1,1} ilist_{1,4},&#x2026;])$-&gt;$([p,t_1],ilist_final)$</li>
</ol>
<h1 id="Inverted-list-compression"><a href="#Inverted-list-compression" class="headerlink" title="Inverted list compression"></a>Inverted list compression</h1><p>&#x6982;&#x5FF5;&#x4E0A;&#x6765;&#x8BB2; inverted list &#x770B;&#x8D77;&#x6765;&#x50CF;&#x4E00;&#x4E2A; object</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># apple</div><div class="line">df: 4356</div><div class="line">docid: 42</div><div class="line">tf: 3</div><div class="line">locs: 14</div><div class="line">      83</div><div class="line">      157</div><div class="line">      94</div><div class="line">docid: 94</div><div class="line">...</div></pre></td></tr></table></figure>
<p>&#x800C;&#x5B9E;&#x9645;&#x4E0A;&#x5B83;&#x5728;&#x78C1;&#x76D8;&#x4E2D;&#x53EA;&#x662F;&#x4E00;&#x4E32;&#x6570;&#x5B57;</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">4356</div><div class="line">42</div><div class="line">3</div><div class="line">14</div><div class="line">83</div><div class="line">157</div><div class="line">94</div></pre></td></tr></table></figure>
<p>&#x901A;&#x5E38; intered list &#x4F1A;&#x88AB;&#x538B;&#x7F29;&#xFF0C;&#x76EE;&#x7684;&#x4E0D;&#x540C;&#xFF0C;&#x9009;&#x62E9;&#x7684;&#x538B;&#x7F29;&#x65B9;&#x6CD5;&#x4E5F;&#x5C31;&#x4E0D;&#x540C;&#x3002;&#x8981;&#x8282;&#x7701;&#x7A7A;&#x95F4;&#x6211;&#x4EEC;&#x5C31;&#x7528; aggressive compression algorithms&#xFF0C;&#x8981;&#x8282;&#x7701;&#x65F6;&#x95F4;&#x6211;&#x4EEC;&#x5C31;&#x7528; simple compression algorithms&#x3002;&#x73B0;&#x5728;&#x6211;&#x4EEC;&#x6700;&#x4E3B;&#x8981;&#x7684;&#x76EE;&#x7684;&#x662F;&#x8282;&#x7701; query &#x65F6;&#x95F4;&#xFF0C;&#x7528;&#x7684;&#x538B;&#x7F29;&#x7B97;&#x6CD5;&#x4E3B;&#x8981;&#x6709;</p>
<ul>
<li>Gap encoding</li>
<li>Restricted variable-length(RVL) encoding</li>
</ul>
<h2 id="Delta-Gap"><a href="#Delta-Gap" class="headerlink" title="Delta Gap"></a>Delta Gap</h2><p>Delta Gap &#x7684;&#x57FA;&#x672C;&#x601D;&#x60F3;&#x662F;&#x4FDD;&#x5B58;&#x6570;&#x5B57;&#x7684;&#x5DEE;&#x503C;&#x800C;&#x4E0D;&#x662F;&#x6570;&#x5B57;&#x672C;&#x8EAB;&#xFF0C;&#x610F;&#x4E49;&#x5728;&#x4E8E;</p>
<ul>
<li>increase probability of smaller numbers</li>
<li>more skewed distribution</li>
<li>lower entropy</li>
</ul>
<h2 id="Variable-Byte-Encoding"><a href="#Variable-Byte-Encoding" class="headerlink" title="Variable Byte Encoding"></a>Variable Byte Encoding</h2><p>Variable Byte Encoding &#x5B58;&#x4E86;&#x4E00;&#x4E32; bytes&#xFF0C;&#x6BCF;&#x4E2A; byte &#x7531;&#x5F00;&#x5934; 1 &#x4F4D; flag &#x548C; 7 &#x4F4D;&#x7684; payload&#xFF08;the number&#xFF09;&#x7EC4;&#x6210;&#x3002;flag &#x4E3A; 0&#xFF0C;&#x8868;&#x793A;&#x4E0D;&#x662F;&#x6700;&#x540E;&#x4E00;&#x4E2A; byte&#xFF0C;flag &#x4E3A; 1 &#x8868;&#x793A;&#x8FD9;&#x662F;&#x6700;&#x540E;&#x4E00;&#x4E2A; byte&#x3002;&#x901A;&#x8FC7;&#x8FDE;&#x63A5; payload &#x6765;&#x91CD;&#x5EFA; number&#x3002;</p>
<p>&#x597D;&#x5904;&#x662F; encoding &#x548C; decoding &#x7684;&#x6548;&#x7387;&#x90FD;&#x5F88;&#x9AD8;&#xFF0C;&#x53EF;&#x4EE5;&#x627E;&#x5230;&#x7B2C; n &#x4F4D;&#x6570;&#x5B57;&#x800C;&#x4E0D;&#x7528; decode &#x4E4B;&#x524D;&#x7684;&#x6570;&#x5B57;&#x3002;</p>
<p>Example</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">[0..2^7-1]:      1 byte : 1xxxxxxx</div><div class="line">[2^7...2^14-1]:  2 bytes: 0xxxxxxx1xxxxxxx</div><div class="line">[2^14...2^21-1]: 3 bytes: 0xxxxxxx0xxxxxxx1xxxxxxx</div><div class="line">...</div><div class="line"></div><div class="line">Decimal: 5</div><div class="line">Binary: 00000000 00000000 00000000 00000101</div><div class="line"># &#x7167;&#x6284;&#x6700;&#x540E;7&#x4F4D;&#xFF0C;&#x7B2C;&#x4E00;&#x4F4D;&#x8865;&#x4E0A;1</div><div class="line">Compressed: 10000101</div><div class="line"></div><div class="line">Decimal: 127</div><div class="line">Binary: 00000000 00000000 00000000 01111111</div><div class="line"># &#x7167;&#x6284;&#x6700;&#x540E;7&#x4F4D;&#xFF0C;&#x7B2C;&#x4E00;&#x4F4D;&#x8865;&#x4E0A;1</div><div class="line">Compressed: 11111111</div><div class="line"></div><div class="line">Decimal: 128</div><div class="line">Binary: 00000000 00000000 00000000 10000000</div><div class="line"># &#x7167;&#x6284;&#x6700;&#x540E;7&#x4F4D;&#xFF0C;&#x7B2C;&#x4E00;&#x4F4D;&#x8865;&#x4E0A;0&#xFF0C;&#x518D;&#x5F80;&#x524D;&#x627E;7&#x4F4D;&#xFF0C;&#x7167;&#x6284;&#xFF0C;&#x7B2C;&#x4E00;&#x4F4D;&#x8865;&#x4E0A;1</div><div class="line">Compressed: 00000000 10000001</div><div class="line"></div><div class="line">Decimal: 131</div><div class="line">Binary: 00000000 00000000 00000000 10000011</div><div class="line"># &#x7167;&#x6284;&#x6700;&#x540E;7&#x4F4D;&#xFF0C;&#x7B2C;&#x4E00;&#x4F4D;&#x8865;&#x4E0A;0&#xFF0C;&#x518D;&#x5F80;&#x524D;&#x627E;7&#x4F4D;&#xFF0C;&#x7167;&#x6284;&#xFF0C;&#x7B2C;&#x4E00;&#x4F4D;&#x8865;&#x4E0A;1</div><div class="line">Compressed: 00000011 10000001</div></pre></td></tr></table></figure>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>&#x6700;&#x9AD8;&#x6548;&#x7684;&#x538B;&#x7F29;&#x7B97;&#x6CD5;&#x6BD4; variable byte encoding &#x8282;&#x7701; 15%&#xFF0D;20% &#x7684;&#x7A7A;&#x95F4;&#xFF0C;&#x4F46;&#x662F;&#x6BD4; restricted variable length encoding &#x8981;&#x6162;&#x3002;&#x6CE8;&#x610F;&#x6211;&#x4EEC;&#x8FD9;&#x91CC;&#x8981;&#x628A;&#x63E1;&#x7684;&#x539F;&#x5219;&#x662F; <strong>&#x201C;Disks are cheap, and speed is important&#x201D;</strong>&#xFF0C;&#x6240;&#x4EE5; Restricted variable length compression &#x8FD8;&#x662F;&#x975E;&#x5E38;&#x901A;&#x7528;&#x7684;&#x3002;</p>
<p>&#x538B;&#x7F29;&#x4E0D;&#x5305;&#x542B; positional &#x4FE1;&#x606F;&#x7684; inverted file&#xFF0C;&#x6240;&#x7528;&#x7A7A;&#x95F4;&#x662F; original text &#x7684; 10%&#xFF0C;&#x538B;&#x7F29;&#x5305;&#x542B; positional &#x4FE1;&#x606F;&#x7684; inverted file&#xFF0C;&#x6240;&#x7528;&#x7A7A;&#x95F4;&#x662F; original text &#x7684; 15%-20%&#x3002;</p>
<h1 id="Inverted-list-Optimization"><a href="#Inverted-list-Optimization" class="headerlink" title="Inverted list Optimization"></a>Inverted list Optimization</h1><h2 id="Skip-lists"><a href="#Skip-lists" class="headerlink" title="Skip lists"></a>Skip lists</h2><p>&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x8DF3;&#x8FC7;&#x4E00;&#x4E9B;&#x6587;&#x6863;&#x6765;&#x51CF;&#x5C11; I/O&#xFF0C;&#x51CF;&#x5C11;&#x8BA1;&#x7B97;&#x3002;</p>
<h3 id="Operators"><a href="#Operators" class="headerlink" title="Operators"></a>Operators</h3><p>#NEAR,#WINDOW,#SYN,Boolean AND&#xFF0C;skip lists &#x5728;&#x8FD9;&#x4E9B; operator &#x4E2D;&#x4F1A;&#x975E;&#x5E38;&#x6709;&#x6548;&#x3002;&#x56DE;&#x987E; #NEAR &#x7684;&#x7B97;&#x6CD5;&#xFF0C;&#x5047;&#x8BBE; query &#x662F; #NEAR/3(a b)&#xFF0C;&#x5305;&#x542B; a &#x7684;&#x7B2C;&#x4E00;&#x4E2A; docid &#x662F; 59356&#xFF0C;&#x5305;&#x542B; b &#x7684;&#x7B2C;&#x4E00;&#x4E2A; docid &#x662F; 43&#xFF0C;&#x4E4B;&#x524D;&#x7684;&#x505A;&#x6CD5;&#x662F;&#x8BA9; b &#x7684; doc pointer &#x4E0D;&#x65AD;&#x6307;&#x5411; next&#xFF0C;&#x76F4;&#x5230; a,b &#x7684;pointer &#x6307;&#x5411;&#x540C;&#x4E00;&#x7BC7;&#x6587;&#x6863;&#xFF0C;&#x5982;&#x679C;&#x8003;&#x8651; skip lists&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x6307;&#x5411; a &#x7684; docid&#xFF0C;&#xFF08;&#x8C03;&#x7528; docIteratorAdvanceTo(doc_id_a)&#x65B9;&#x6CD5;&#xFF09;&#x3002;</p>
<h3 id="Score-calculation-Top-Docs"><a href="#Score-calculation-Top-Docs" class="headerlink" title="Score calculation (Top-Docs)"></a>Score calculation (Top-Docs)</h3><p>&#x6709;&#x4E9B; inverted list &#x592A;&#x957F;&#x4E86;&#xFF0C;&#x800C;&#x5927;&#x591A; query &#x53EA;&#x9700;&#x8981;&#x8FD4;&#x56DE; &lt;100 &#x7684;&#x6587;&#x6863;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x53EF;&#x4EE5; truncate inverted list that contain only the best docs&#xFF0C;&#x8FD9;&#x6837;&#x5C31;&#x80FD;&#x63D0;&#x9AD8;&#x6548;&#x7387;&#xFF0C;&#x4EE3;&#x4EF7;&#x662F; low recall&#x3002;</p>
<p><strong>&#x600E;&#x4E48;&#x627E;&#x5230; Top-Docs</strong></p>
<ul>
<li>tf</li>
<li>PageRank</li>
</ul>
<p><strong>&#x600E;&#x4E48;&#x5BF9; Top-Docs &#x6392;&#x5E8F;</strong></p>
<ul>
<li>Order by doc id</li>
<li>Order by tf</li>
</ul>
<p><strong>How many terms are frequent enough to have a top-docs list?</strong><br>&#x6839;&#x636E; <a href="http://www.shuang0420.com/2016/07/10/Tfidf&#x603B;&#x7ED3;&#x7B14;&#x8BB0;/">Zipf&#x2019;s Law</a><br>$$Rank * Frequency = A * N$$</p>
<p>&#x6240;&#x4EE5; ctf&gt;=800 &#x7684; term &#x5927;&#x6982;&#x5360;&#x6BD4; ${A*N/800 \over A * N}=1/800=0.125%$</p>
<p><strong>why 800?</strong><br>&#x5047;&#x8BBE;&#x4E00;&#x4E2A; inverted lsit &#x6709;5&#x4E2A; integer&#xFF0C;&#x6CA1;&#x538B;&#x7F29;&#x5C31;&#x6709; 16 bytes&#xFF0C;30%&#x538B;&#x7F29;&#x6BD4;&#xFF0C;&#x538B;&#x7F29;&#x4E86;&#x6709; 5 bytes&#xFF0C;linux filesystem page size&#x662F; 4096 bytes, &#x6240;&#x4EE5;&#x6709;4096/5=819&#x6761; inverted list &#x80FD; fit in one page</p>
<p>&#x5047;&#x8BBE; vocabulary &#x6709; 1,000,000 &#x4E2A; term&#xFF0C;&#x90A3;&#x4E48;&#x5927;&#x6982;&#x53EA;&#x6709; 1,250 &#x4E2A; top-docs lists&#xFF0C;&#x6BCF;&#x4E2A; list &#x5927;&#x6982; 4-8KB&#xFF0C;&#x4E00;&#x5171;&#x5360; 5-10 MB&#x3002;</p>
<h2 id="Multiple-inverted-lists-per-term"><a href="#Multiple-inverted-lists-per-term" class="headerlink" title="Multiple inverted lists per term"></a>Multiple inverted lists per term</h2><p>&#x6709;&#x4E9B; operator &#x5E76;&#x4E0D;&#x9700;&#x8981; tf&#xFF0C;&#x50CF; unranked boolean operators&#xFF0C; &#x6709;&#x4E9B; operator &#x5E76;&#x4E0D;&#x9700;&#x8981; locations&#xFF0C;&#x50CF; #SUM,#WEIGHT,#AND,#OR,#ANDNOT,&#x2026;&#xFF0C;&#x800C; inverted lists with locations &#x4F1A;&#x4EA7;&#x751F; I/O &#x6D6A;&#x8D39;&#xFF0C;&#x5BF9;&#x6CA1;&#x6709; location &#x7684; inverted list&#xFF0C;&#x6211;&#x4EEC;&#x53EA;&#x7528;&#x5B58; docid, tf &#x4E24;&#x4E2A; integer&#xFF0C;&#x800C;&#x5BF9;&#x5B58;&#x4E86; location &#x7684; inverted list,&#x5047;&#x5B9A;&#x6211;&#x4EEC;&#x5BF9;&#x6BCF;&#x7BC7;&#x6587;&#x6863;&#x591A;&#x7528;&#x4E86; 1.5 &#x4E2A; integer&#xFF0C;&#x90A3;&#x4E48;&#x6211;&#x4EEC;&#x5176;&#x5B9E;&#x6D6A;&#x8D39;&#x4E86; 42% &#x7684; I/O&#x3002; &#x6240;&#x4EE5;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A; term&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5B58;&#x4E24;&#x4EFD; inverted list&#xFF0C;&#x4E00;&#x4EFD;&#x6709; location&#xFF0C;&#x4E00;&#x4EFD;&#x6CA1;&#x6709;&#xFF0C;&#x5BF9;&#x4E0D;&#x9700;&#x8981; location &#x7684; operator&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x76F4;&#x63A5;&#x8BBF;&#x95EE;&#x6CA1;&#x6709;location &#x7684; inverted list&#xFF0C;&#x8FD9;&#x6837;&#x5C31;&#x80FD;&#x907F;&#x514D;&#x4E0D;&#x5FC5;&#x8981;&#x7684; I/O&#xFF0C;&#x5F53;&#x7136;&#x4EE3;&#x4EF7;&#x662F;&#x989D;&#x5916;&#x7684;&#x78C1;&#x76D8;&#x7A7A;&#x95F4;&#x3002;</p>
<p><strong>&#x6211;&#x4EEC;&#x8981;&#x5BF9;&#x6BCF;&#x4E2A; term &#x90FD;&#x5B58;&#x4E24;&#x4E2A; inverted list &#x5417;&#xFF1F;</strong> &#x5176;&#x5B9E;&#x5E76;&#x4E0D;&#x9700;&#x8981;&#x3002;&#x56E0;&#x4E3A;&#x5927;&#x6982;&#x53EA;&#x6709; 0.125% &#x5BF9; term &#x6709; topdocs/champion list&#xFF0C;&#x5176;&#x5B83; term &#x5BF9; inverted list &#x90FD;&#x5F88;&#x77ED;&#x3002;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x53EA;&#x7528;&#x5BF9; frequent terms &#x5EFA;&#x4E24;&#x4E2A; inverted list &#x5C31;&#x53EF;&#x4EE5;&#x5566;&#x3002;</p>
<h1 id="Index-updates"><a href="#Index-updates" class="headerlink" title="Index updates"></a>Index updates</h1><p>corpus &#x5E76;&#x4E0D;&#x662F;&#x9759;&#x6001;&#x7684;&#xFF0C;&#x968F;&#x7740;&#x6587;&#x6863;&#x7684;&#x589E;&#x52A0;&#xFF0C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x5C06;&#x65B0;&#x7684; term &#x52A0;&#x5165;&#x8BCD;&#x5178;&#xFF0C;&#x5BF9;&#x5DF2;&#x6709;&#x7684; inverted list &#x8FDB;&#x884C;&#x66F4;&#x65B0;&#xFF0C;&#x7136;&#x800C;&#x8FD9;&#x4E2A;&#x4EE3;&#x4EF7;&#x975E;&#x5E38;&#x7684;&#x5927;&#x3002;&#x6700;&#x7B80;&#x5355;&#x7684;&#x7D22;&#x5F15;&#x66F4;&#x65B0;&#x65B9;&#x6CD5;&#x662F; <strong>&#x5468;&#x671F;&#x6027;&#x5730;&#x5BF9; corpus &#x8FDB;&#x884C;&#x7D22;&#x5F15;&#x91CD;&#x6784;</strong>&#xFF0C;&#x5982;&#x679C; corpus &#x66F4;&#x65B0;&#x6B21;&#x6570;&#x4E0D;&#x591A;&#xFF0C;&#x800C;&#x4E14;&#x80FD;&#x63A5;&#x53D7;&#x65B0;&#x6587;&#x6863;&#x68C0;&#x7D22;&#x7684;&#x4E00;&#x5B9A;&#x5EF6;&#x8FDF;&#xFF0C;&#x4E5F;&#x6709;&#x8DB3;&#x591F;&#x8D44;&#x6E90;&#x652F;&#x6301;&#x5EFA;&#x7ACB;&#x65B0;&#x7D22;&#x5F15;&#x65F6;&#x8BA9;&#x65E7;&#x7D22;&#x5F15;&#x7EE7;&#x7EED;&#x5DE5;&#x4F5C;&#xFF0C;&#x90A3;&#x4E48;&#x5468;&#x671F;&#x6027;&#x7D22;&#x5F15;&#x91CD;&#x6784;&#x4E0D;&#x5931;&#x4E3A;&#x4E00;&#x79CD;&#x597D;&#x9009;&#x62E9;&#x3002; &#x53E6;&#x5916;&#x4E00;&#x79CD;&#x89E3;&#x51B3;&#x65B9;&#x6CD5;&#x662F;&#x4FDD;&#x6301;&#x4E24;&#x4E2A;&#x7D22;&#x5F15;&#xFF1A;&#x4E00;&#x4E2A;&#x4E3B;&#x7D22;&#x5F15;&#xFF0C;&#x4E00;&#x4E2A;&#x8F85;&#x52A9;&#x7D22;&#x5F15;&#xFF0C;&#x8F85;&#x52A9;&#x7D22;&#x5F15;&#x7528;&#x4E8E;&#x5B58;&#x50A8;&#x65B0;&#x6587;&#x6863;&#x4FE1;&#x606F;&#xFF0C;&#x4FDD;&#x5B58;&#x5728;&#x5185;&#x5B58;&#x4E2D;&#xFF0C;&#x68C0;&#x7D22;&#x65F6;&#x53EF;&#x4EE5;&#x540C;&#x65F6;&#x904D;&#x5386;&#x4E24;&#x4E2A;&#x7D22;&#x5F15;&#x5E76;&#x5C06;&#x7ED3;&#x679C;&#x5408;&#x5E76;&#x3002;&#x5982;&#x679C;&#x6709;&#x6587;&#x6863;&#x5220;&#x9664;&#xFF0C;&#x53EF;&#x4EE5;&#x628A;&#x5220;&#x9664;&#x7684; docid &#x8BB0;&#x5F55;&#x5728;&#x4E00;&#x4E2A; delete list &#x91CC;&#xFF0C;&#x5728;&#x8FD4;&#x56DE;&#x7ED3;&#x679C;&#x4E4B;&#x524D;&#x5229;&#x7528;&#x5B83;&#x8FC7;&#x6EE4;&#x6389;&#x5DF2;&#x7ECF;&#x5220;&#x9664;&#x7684;&#x6587;&#x6863;&#x3002;&#x6587;&#x6863;&#x7684;&#x66F4;&#x65B0;&#x901A;&#x8FC7;&#x5148;&#x5220;&#x9664;&#x540E;&#x91CD;&#x65B0;&#x63D2;&#x5165;&#x5B9E;&#x73B0;&#x3002;&#x5F53;&#x8F85;&#x52A9;&#x7D22;&#x5F15;&#x53D8;&#x5F97;&#x5F88;&#x5927;&#x65F6;&#xFF0C;&#x5C31;&#x5C06;&#x5B83;&#x5408;&#x5E76;&#x5230;&#x4E3B;&#x7D22;&#x5F15;&#x4E2D;&#x3002;</p>
<h1 id="Storing-document-structure"><a href="#Storing-document-structure" class="headerlink" title="Storing document structure"></a>Storing document structure</h1><h2 id="Treat-each-element-as-independent-of-other-elements"><a href="#Treat-each-element-as-independent-of-other-elements" class="headerlink" title="Treat each element as independent of other elements"></a>Treat each element as independent of other elements</h2><p>&#x7B80;&#x5355;&#x660E;&#x4E86;&#x7684;&#x7ED3;&#x6784;&#xFF0C;&#x7B80;&#x5355;&#x3001;&#x9AD8;&#x6548;&#xFF0C;&#x5BF9; shallow structure &#x7684; document &#x975E;&#x5E38;&#x6709;&#x6548;&#x3002; &#x5728;&#x8FD9;&#x79CD;&#x7ED3;&#x6784;&#x4E0B;&#xFF0C;&#x6211;&#x4EEC;&#x5206;&#x522B;&#x4FDD;&#x5B58;&#x6BCF;&#x4E2A; field &#x4E0B;&#x7684;&#x8BCD;&#x6C47;&#xFF0C;&#x53EF;&#x4EE5;&#x6709;&#x4E00;&#x4E0B;&#x4E24;&#x79CD;&#x5F62;&#x5F0F;</p>
<ul>
<li>FIELD::TERM</li>
<li>(FIELD,TERM)</li>
</ul>
<h2 id="Treat-elements-as-part-of-an-element-hierarchy"><a href="#Treat-elements-as-part-of-an-element-hierarchy" class="headerlink" title="Treat elements as part of an element hierarchy"></a>Treat elements as part of an element hierarchy</h2><p>$Document \supset Section \supset Subsection$ &#x975E;&#x5E38;&#x7075;&#x6D3B;&#x7684;&#x7ED3;&#x6784;&#xFF0C;&#x66F4;&#x597D;&#x7684;&#x7B26;&#x5408;&#x7528;&#x6237;&#x9700;&#x6C42;&#xFF0C;&#x57FA;&#x672C;&#x601D;&#x60F3;&#x662F; <strong>&#x201C;Terms in &#x201C;Subsection&#x201D; should also appear in &#x201C;Section&#x201D;&#x201D;</strong> &#x5BF9; complex structure &#x975E;&#x5E38;&#x6709;&#x6548;&#x3002;</p>
<h3 id="Storing-fields-as-trees"><a href="#Storing-fields-as-trees" class="headerlink" title="Storing fields as trees"></a>Storing fields as trees</h3><p><img src="http://7xu83c.com1.z0.glb.clouddn.com/tree.png" alt=""></p>
<p>&#x8FD9;&#x79CD;&#x65B9;&#x5F0F;&#x4EE3;&#x4EF7;&#x592A;&#x9AD8;&#xFF0C;I/O &#x548C;&#x5185;&#x5B58;&#x4EE3;&#x4EF7;&#x90FD;&#x5F88;&#x9AD8;&#x3002;&#x505A;&#x4E2A;&#x7B80;&#x5355;&#x8BA1;&#x7B97;</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">20 bytes/node * 100 nodes/doc * 1,000,000 docs=2GB</div></pre></td></tr></table></figure>
<h3 id="Storing-fields-as-inverted-lists"><a href="#Storing-fields-as-inverted-lists" class="headerlink" title="Storing fields as inverted lists"></a>Storing fields as inverted lists</h3><p>&#x591A;&#x5B58;&#x4E00;&#x4EFD; field &#x7684; inverted list&#xFF0C;&#x5305;&#x542B; field &#x8D77;&#x59CB;&#x548C;&#x7EC8;&#x6B62;&#x4F4D;&#x7F6E;&#x3002;&#x7136;&#x540E;&#x901A;&#x8FC7;&#x8FD9;&#x4E2A;&#x4F4D;&#x7F6E;&#x533A;&#x95F4;&#x627E;&#x5230; term inverted list &#x4E2D;&#x7B26;&#x5408;&#x6761;&#x4EF6;&#x7684; location&#x3002; <img src="http://7xu83c.com1.z0.glb.clouddn.com/inverted_list.png" alt=""></p>
<h2 id="Indri-Index-Components"><a href="#Indri-Index-Components" class="headerlink" title="Indri Index Components"></a>Indri Index Components</h2><h3 id="Statistic-files"><a href="#Statistic-files" class="headerlink" title="Statistic files"></a>Statistic files</h3><p><img src="http://7xu83c.com1.z0.glb.clouddn.com/Indri_static_file.png" alt=""></p>
<h3 id="Term-dictionaries"><a href="#Term-dictionaries" class="headerlink" title="Term dictionaries"></a>Term dictionaries</h3><p><img src="http://7xu83c.com1.z0.glb.clouddn.com/Indri_term_diction.png" alt=""></p>
<h3 id="Inverted-files"><a href="#Inverted-files" class="headerlink" title="Inverted files"></a>Inverted files</h3><p><img src="http://7xu83c.com1.z0.glb.clouddn.com/Indri_inverted.png" alt=""></p>
<h3 id="Compressed-collection"><a href="#Compressed-collection" class="headerlink" title="Compressed collection"></a>Compressed collection</h3><p><img src="http://7xu83c.com1.z0.glb.clouddn.com/indri_compress.png" alt=""></p>
<h2 id="Lucene-Index"><a href="#Lucene-Index" class="headerlink" title="Lucene Index"></a>Lucene Index</h2><p>&#x7565;</p>
<blockquote>
<p>&#x53C2;&#x8003;&#x94FE;&#x63A5;:<br><a href="http://boston.lti.cs.cmu.edu/classes/11-642/" target="_blank" rel="external">Search Engines: 11-442 / 11-642</a><br>&#x672C;&#x6587;&#x56FE;&#x7247;&#x6765;&#x81EA;&#x4E66;&#x672C; Introduction to Information Retrieval &#x548C; Jamie Callen &#x7684; slides&#x3002;</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#x8FD9;&amp;#x7BC7;&amp;#x8BB2;&amp;#x4E86;&amp;#x641C;&amp;#x7D22;&amp;#x5F15;&amp;#x64CE;&amp;#x4E2D;&amp;#x521B;&amp;#x5EFA; index &amp;#x7684;&amp;#x4E3B;&amp;#x8981;&amp;#x539F;&amp;#x5219;&amp;#x3001;&amp;#x65B9;&amp;#x6CD5;&amp;#x4EE5;&amp;#x53CA;&amp;#x4F18;&amp;#x5316;&amp;#x65B9;&amp;#x6848;&amp;#x3002;&lt;/p&gt;
    
    </summary>
    
      <category term="Search Engines" scheme="http://www.shuang0420.com/categories/Search-Engines/"/>
    
    
      <category term="NLP" scheme="http://www.shuang0420.com/tags/NLP/"/>
    
      <category term="Search Engines" scheme="http://www.shuang0420.com/tags/Search-Engines/"/>
    
  </entry>
  
  <entry>
    <title>Search Engines笔记 - Pseudo Relevance Feedback</title>
    <link href="http://www.shuang0420.com/2016/10/10/Search%20Engines%E7%AC%94%E8%AE%B0%20-%20Pseudo%20Relevance%20Feedback/"/>
    <id>http://www.shuang0420.com/2016/10/10/Search Engines笔记 - Pseudo Relevance Feedback/</id>
    <published>2016-10-11T01:59:21.000Z</published>
    <updated>2016-10-18T01:27:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>&#x600E;&#x6837;&#x4EA7;&#x751F;&#x66F4;&#x597D;&#x7684; query &#x6765;&#x5F97;&#x5230;&#x66F4;&#x591A;&#x7684;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF1F;&#x4ECE;&#x7528;&#x6237;&#x89D2;&#x5EA6;&#x770B;&#xFF0C;&#x7528;&#x6237;&#x4E00;&#x5F00;&#x59CB;&#x4F1A;&#x7528; short query &#x6765;&#x8FDB;&#x884C;&#x68C0;&#x7D22;&#xFF0C;&#x5728;&#x770B;&#x5230;&#x7ED3;&#x679C;&#x6587;&#x6863;&#x540E;&#x901A;&#x8FC7;&#x589E;&#x52A0;&#x6216;&#x51CF;&#x5C11; term &#x4EE5;&#x53CA;&#x8C03;&#x6574; term weight &#x7684;&#x65B9;&#x5F0F;&#x8FDB;&#x4E00;&#x6B65;&#x4F18;&#x5316; query&#x3002;&#x800C;&#x5BF9;&#x7CFB;&#x7EDF;&#x800C;&#x8A00;&#xFF0C;&#x80FD;&#x81EA;&#x52A8;&#x4EA7;&#x751F; better query &#x7684;&#x65B9;&#x5F0F;&#x83AB;&#x8FC7;&#x4E8E; machine learning&#x3002; <a id="more"></a></p>
<p>relevance feedback &#x5176;&#x5B9E;&#x662F;&#x4E00;&#x4E2A; machine learning(supervised) &#x7684;&#x95EE;&#x9898;&#xFF0C;&#x7406;&#x60F3;&#x4E2D;&#x6211;&#x4EEC;&#x8981;&#x5B66;&#x4E60;&#x7684;&#x662F; f(document)&#x2013;&gt;{relevant, not relevant}&#xFF0C;&#x7136;&#x800C;&#x4E00;&#x822C;&#x6211;&#x4EEC;&#x5B66;&#x4E60;&#x7684;&#x662F; f(document)&#x2013;&gt;score&#x3002;&#x8BAD;&#x7EC3;&#x96C6;&#x7684;&#x5927;&#x5C0F;&#x4E00;&#x822C;&#x6765;&#x8BF4; 10-20 &#x9875;&#x662F; good, 100-200 &#x9875;&#x5C31; great &#x4E86;&#x3002;</p>
<p>&#x7136;&#x800C; relevance feedback &#x5E76;&#x4E0D;&#x7ECF;&#x5E38;&#x88AB;&#x4F7F;&#x7528;&#xFF0C;&#x4E00;&#x65B9;&#x9762;&#x662F;&#x56E0;&#x4E3A; users &#x4E0D;&#x559C;&#x6B22;&#x7ED9;&#x8BC4;&#x4EF7;(&#x56E0;&#x6B64; training data &#x4F1A;&#x5F88;&#x5C11;&#xFF0C;&#x51C6;&#x786E;&#x5EA6;&#x4E5F;&#x4E0D;&#x4E00;&#x5B9A;&#x9AD8;)&#xFF0C;&#x53E6;&#x4E00;&#x65B9;&#x9762;&#x662F;&#x8FD9;&#x79CD;&#x8BC4;&#x4EF7;&#x6709;&#x98CE;&#x9669;&#xFF0C;&#x5982;&#x679C;&#x8BC4;&#x4F30;&#x7684;&#x6587;&#x6863;&#x5F88;&#x5C11;&#xFF0C;&#x7ED3;&#x679C;&#x662F; highly variable &#x7684;&#xFF0C;stability &#x548C; consistency &#x53EF;&#x80FD;&#x4F1A;&#x53D7;&#x5230;&#x635F;&#x4F24;&#x3002;&#x6240;&#x4EE5;&#x4E00;&#x822C;&#x6211;&#x4EEC;&#x7528;&#x7684;&#x662F; Pseudo-relevance feedback&#xFF0C;&#x4E00;&#x79CD; unsupervised(or self-supervised) &#x65B9;&#x6CD5;&#x3002;</p>
<h1 id="Pseudo-relevance-feedback"><a href="#Pseudo-relevance-feedback" class="headerlink" title="Pseudo-relevance feedback"></a>Pseudo-relevance feedback</h1><p>&#x57FA;&#x672C;&#x903B;&#x8F91;&#x662F;&#x628A; initial query &#x5F53;&#x505A; classifier&#xFF0C;&#x7528;&#x5B83;&#x6765; label &#x90E8;&#x5206; data&#xFF0C;&#x5F97;&#x5230; top-ranked documents&#xFF0C;&#x7136;&#x540E;&#x7528; labeled data &#x6765;&#x4EA7;&#x751F;&#x66F4;&#x4F18;&#x7684; classifier&#x3002;&#x57FA;&#x672C;&#x8FC7;&#x7A0B;&#xFF1A;</p>
<ol>
<li>&#x7528;&#x539F;&#x59CB; query &#x68C0;&#x7D22;&#x6587;&#x6863;</li>
<li>&#x53D6;&#x7ED3;&#x679C;&#x7684;&#x524D; N &#x7BC7;&#x6587;&#x6863;&#x4F5C;&#x4E3A;&#x8BAD;&#x7EC3;&#x96C6;&#xFF0C;&#x8FD9;&#x4E9B;&#x6587;&#x6863;&#x76F8;&#x5173;&#x5EA6;&#x53EF;&#x80FD;&#x4E0D;&#x9AD8;&#xFF0C;&#x7136;&#x800C;&#x6211;&#x4EEC;&#x7684;&#x76EE;&#x7684;&#x662F;&#x5B66;&#x4E60; vocabulary pattern&#x3002;</li>
<li>&#x5E94;&#x7528; relevance feedback algorithm &#x9009;&#x53D6; term &#x548C; term weight</li>
<li>&#x7EC4;&#x6210;&#x65B0;&#x7684; query &#x6765;&#x68C0;&#x7D22;&#x6587;&#x6863;</li>
</ol>
<h2 id="Okapi-BM25"><a href="#Okapi-BM25" class="headerlink" title="Okapi BM25"></a>Okapi BM25</h2><p>&#x8FC7;&#x7A0B;&#xFF1A;</p>
<ol>
<li>&#x7528;&#x539F;&#x59CB; query &#x68C0;&#x7D22;&#x6587;&#x6863;</li>
<li>&#x53D6;&#x524D; N &#x7BC7;&#x6587;&#x6863;&#x7684; term &#x4F5C;&#x4E3A; potential expansion terms</li>
<li>&#x4E3A;&#x6BCF;&#x4E2A; potential expansion term &#x8BA1;&#x7B97;&#x5206;&#x6570;</li>
<li>&#x7528;&#x524D; m &#x4E2A; term &#x521B;&#x5EFA;&#x65B0;&#x7684; $query_{learned}$</li>
<li>&#x7528;&#x65B0;&#x7684; query &#x68C0;&#x7D22;&#x6587;&#x6863;</li>
</ol>
<p><img src="http://7xu83c.com1.z0.glb.clouddn.com/bm25_expan.png" alt=""></p>
<h2 id="Inference-networks-Indri"><a href="#Inference-networks-Indri" class="headerlink" title="Inference networks (Indri)"></a>Inference networks (Indri)</h2><p>&#x8FC7;&#x7A0B;&#xFF1A;</p>
<ol>
<li>&#x7528;&#x539F;&#x59CB; query &#x68C0;&#x7D22;&#x6587;&#x6863;</li>
<li>&#x53D6;&#x524D; N &#x7BC7;&#x6587;&#x6863;&#x7684; term &#x4F5C;&#x4E3A; potential expansion terms</li>
<li>&#x4E3A;&#x6BCF;&#x4E2A; potential expansion term &#x8BA1;&#x7B97;&#x5206;&#x6570;</li>
<li>&#x7528;&#x524D; m &#x4E2A; term &#x521B;&#x5EFA;&#x65B0;&#x7684; $Q_{learned}$</li>
<li>&#x5408;&#x5E76; $Q_{original}$ &#x548C; $Q_{learned}$ &#x521B;&#x5EFA; $Q_{expanded}$</li>
<li>&#x7528;&#x65B0;&#x7684; query &#x68C0;&#x7D22;&#x6587;&#x6863;</li>
</ol>
<p>&#x5BF9;&#x6BCF;&#x4E2A; expansion term&#xFF0C;&#x8BA1;&#x7B97; p(t|I)<br><img src="http://7xu83c.com1.z0.glb.clouddn.com/Indri_expand_1.png" alt=""></p>
<p>&#x5E76;&#x6CA1;&#x6709;&#x5BF9; frequent terms in corpus &#x505A;&#x51FA;&#x60E9;&#x7F5A;&#xFF0C;&#x6240;&#x4EE5;&#x52A0;&#x4E0A;&#x4E00;&#x4E2A;&#x7C7B;&#x4F3C; idf &#x5BF9; weight<br><img src="http://7xu83c.com1.z0.glb.clouddn.com/Indri_expand_2.png" alt=""></p>
<p>&#x6700;&#x540E;&#x7684; expanded query &#x662F;<br>$$Q_{expanded} &#xFF1D; \#wand(wQ_{original}, (1-w)Q_{learned})$$</p>
<p>&#x9700;&#x8981;&#x7684;&#x53C2;&#x6570;:</p>
<ul>
<li>fbdocs: number of judged documents</li>
<li>fbterms: number of terms to add to the query, indri&#x2019;s default is 10</li>
<li>$\mu$: smoothing weight to use for new terms, indri&#x2019;s default is 0</li>
<li>$w$: weight of the original query, indri&#x2019;s default is 0.5</li>
</ul>
<p><strong>How many terms is enough</strong><br>&#x6807;&#x51C6;&#x7B54;&#x6848;&#x6765;&#x4E86;: It depends! &#x56E0; query &#x800C;&#x5F02;&#x3002;</p>
<p><strong>Corpus</strong><br>&#x5176;&#x5B9E; initial query &#x548C; final query &#x53EF;&#x4EE5;&#x5728;&#x4E0D;&#x540C;&#x7684;&#x8BED;&#x6599;&#x4E0A;&#x8DD1;&#xFF0C;&#x6BD4;&#x5982;&#x8BF4; initial query &#x5728; wikipedia &#x4E0A;&#x8DD1;&#xFF0C;&#x4EA7;&#x751F;&#x9AD8;&#x8D28;&#x91CF;&#x7684; expansion term&#xFF0C;&#x7136;&#x540E;&#x7528;&#x6269;&#x5145;&#x7684; query &#x5728; web &#x4E0A;&#x8DD1;&#xFF0C;&#x8FD9;&#x80FD;&#x591F;&#x663E;&#x8457;&#x63D0;&#x9AD8; MAP &#x548C; P@10&#x3002;</p>
<p>&#x76F4;&#x63A5;&#x4E0A;&#x4EE3;&#x7801;&#xFF1A;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/**</div><div class="line"> * @param score_list</div><div class="line"> * @return</div><div class="line"> * @throws IOException</div><div class="line"> */</div><div class="line">private static String expandQuery(ScoreList score_list) throws IOException {</div><div class="line">	double fbMu = Double.parseDouble(parameters.get(&quot;fbMu&quot;));</div><div class="line">	int fbDocs = Integer.parseInt(parameters.get(&quot;fbDocs&quot;));</div><div class="line">	int fbTerms = Integer.parseInt(parameters.get(&quot;fbTerms&quot;));</div><div class="line">	int docNum = Math.min(fbDocs, score_list.size());</div><div class="line">	Map&lt;String, ArrayList&lt;Integer&gt;&gt; invertedList = new HashMap();</div><div class="line">	// map&lt;term, score&gt;</div><div class="line">	Map&lt;String, Double&gt; termScore = new HashMap();</div><div class="line">	// get expanded term</div><div class="line">	for (int i = 0; i &lt; docNum; i++) {</div><div class="line">		int doc_id = score_list.getDocid(i);</div><div class="line">		TermVector vec = new TermVector(doc_id, &quot;body&quot;);</div><div class="line">		// termVecMap.put(doc_id, vec);</div><div class="line">		double docScore = score_list.getDocidScore(i);</div><div class="line">		double docLen = Idx.getFieldLength(&quot;body&quot;, doc_id);</div><div class="line">		// for each term</div><div class="line">		for (int j = 1; j &lt; vec.stemsLength(); j++) {</div><div class="line"></div><div class="line">			String term = vec.stemString(j);</div><div class="line">			// ignore any candidate expansion term that contains a period</div><div class="line">			// (&apos;.&apos;) or a comma (&apos;,&apos;)</div><div class="line">			if (term.contains(&quot;.&quot;) || term.contains(&quot;,&quot;)) {</div><div class="line">				continue;</div><div class="line">			}</div><div class="line">			// update inverted list for current term</div><div class="line">			if (invertedList.containsKey(term)) {</div><div class="line">				ArrayList&lt;Integer&gt; cur_inverted_list = invertedList.get(term);</div><div class="line">				cur_inverted_list.add(doc_id);</div><div class="line">				invertedList.put(term, cur_inverted_list);</div><div class="line">			} else {</div><div class="line">				ArrayList&lt;Integer&gt; cur_inverted_list = new ArrayList();</div><div class="line">				cur_inverted_list.add(doc_id);</div><div class="line">				invertedList.put(term, cur_inverted_list);</div><div class="line">			}</div><div class="line">			// score potential expansion term for current doc</div><div class="line">			long tf = vec.stemFreq(j);</div><div class="line">			long ctf = vec.totalStemFreq(j);</div><div class="line">			double mle = ctf / (double) Idx.getSumOfFieldLengths(&quot;body&quot;);</div><div class="line">			double Ptd = (tf + fbMu * mle) / (docLen + fbMu);</div><div class="line">			double idf = Math.log(1 / mle);</div><div class="line">			double cur_doc_score = Ptd * docScore * idf;</div><div class="line">			if (termScore.containsKey(term)) {</div><div class="line">				termScore.put(term, termScore.get(term) + cur_doc_score);</div><div class="line">			} else {</div><div class="line">				termScore.put(term, cur_doc_score);</div><div class="line">			}</div><div class="line"></div><div class="line">		}</div><div class="line">	}</div><div class="line"></div><div class="line">	// get top k terms</div><div class="line">	PriorityQueue&lt;Map.Entry&lt;String, Double&gt;&gt; termScorePq = new PriorityQueue&lt;Map.Entry&lt;String, Double&gt;&gt;(</div><div class="line">			termScore.size(), new Comparator&lt;Map.Entry&lt;String, Double&gt;&gt;() {</div><div class="line">				@Override</div><div class="line">				public int compare(Map.Entry&lt;String, Double&gt; m1, Map.Entry&lt;String, Double&gt; m2) {</div><div class="line">					return m2.getValue().compareTo(m1.getValue());</div><div class="line">				}</div><div class="line">			});</div><div class="line">	termScorePq.addAll(termScore.entrySet());</div><div class="line"></div><div class="line">	// get new query</div><div class="line">	String learnedQuery = &quot;#wand ( &quot;;</div><div class="line">	for (int i = 0; i &lt; fbTerms; i++) {</div><div class="line">		String score = String.format(&quot;%.4f&quot;, termScorePq.peek().getValue());</div><div class="line">		String term = termScorePq.peek().getKey();</div><div class="line">		learnedQuery = learnedQuery + &quot; &quot; + score + &quot; &quot; + term;</div><div class="line">		termScorePq.poll();</div><div class="line">	}</div><div class="line">	learnedQuery += &quot; )&quot;;</div><div class="line">	System.out.println(&quot;learnedQuery &quot; + learnedQuery);</div><div class="line">	return learnedQuery;</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>&#x5904;&#x7406; query file&#x3002;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Process the query file.</div><div class="line"> *</div><div class="line"> * @param queryFilePath</div><div class="line"> * @param model</div><div class="line"> * @throws Exception</div><div class="line"> */</div><div class="line">static void processQueryFile(String queryFilePath, String trecEvalOutputPath, RetrievalModel model)</div><div class="line">    throws Exception {</div><div class="line"></div><div class="line">  BufferedReader input = null;</div><div class="line">  BufferedWriter output = null;</div><div class="line">  BufferedWriter bw = null;</div><div class="line"></div><div class="line">  try {</div><div class="line">    String qLine = null;</div><div class="line"></div><div class="line">    input = new BufferedReader(new FileReader(queryFilePath));</div><div class="line">    output = new BufferedWriter(new FileWriter(trecEvalOutputPath));</div><div class="line">    bw = new BufferedWriter(new FileWriter(parameters.get(&quot;fbExpansionQueryFile&quot;)));</div><div class="line"></div><div class="line">    // Each pass of the loop processes one query.</div><div class="line"></div><div class="line">    while ((qLine = input.readLine()) != null) {</div><div class="line">      int d = qLine.indexOf(&apos;:&apos;);</div><div class="line"></div><div class="line">      if (d &lt; 0) {</div><div class="line">        throw new IllegalArgumentException(&quot;Syntax error:  Missing &apos;:&apos; in query line.&quot;);</div><div class="line">      }</div><div class="line"></div><div class="line">      printMemoryUsage(false);</div><div class="line"></div><div class="line">      String qid = qLine.substring(0, d);</div><div class="line">      String query = qLine.substring(d + 1);</div><div class="line"></div><div class="line">      System.out.println(&quot;Query &quot; + qLine);</div><div class="line"></div><div class="line">      ScoreList r = null;</div><div class="line"></div><div class="line">      String defaultOp = model.defaultQrySopName();</div><div class="line">      query = defaultOp + &quot;(&quot; + query + &quot;)&quot;;</div><div class="line">      // if not expand query</div><div class="line">      if (!(parameters.containsKey(&quot;fb&quot;) &amp;&amp; parameters.get(&quot;fb&quot;).equals(&quot;true&quot;))) {</div><div class="line">        r = processQuery(query, model);</div><div class="line">      } else { // if expand query</div><div class="line">        // check parameters</div><div class="line">        if (!(parameters.containsKey(&quot;fbTerms&quot;) &amp;&amp; parameters.containsKey(&quot;fbMu&quot;)</div><div class="line">            &amp;&amp; parameters.containsKey(&quot;fbOrigWeight&quot;)</div><div class="line">            &amp;&amp; parameters.containsKey(&quot;fbExpansionQueryFile&quot;))) {</div><div class="line">          throw new IllegalArgumentException(&quot;Required parameters were missing from the parameter file.&quot;);</div><div class="line">        }</div><div class="line">        // check if there&apos;s ranking file</div><div class="line">        if (!parameters.containsKey(&quot;fbInitialRankingFile&quot;)) {</div><div class="line">          r = processQuery(query, model);</div><div class="line">          r.sort();</div><div class="line">        } else {</div><div class="line">          Map&lt;Integer, ScoreList&gt; score_list_map = readRankingFile(</div><div class="line">              parameters.get(&quot;fbInitialRankingFile&quot;));</div><div class="line">          if (!score_list_map.containsKey(Integer.parseInt(qid))) {</div><div class="line">            throw new Exception(&quot;No query &quot; + qid + &quot; in ranking file!&quot;);</div><div class="line">          }</div><div class="line">          r = score_list_map.get(Integer.parseInt(qid));</div><div class="line">        }</div><div class="line">//					r.sort();</div><div class="line">        String expandedQuery = expandQuery(r);</div><div class="line">        printExpandedQuery(bw, qid, expandedQuery);</div><div class="line">        double fbOrigWeight = Double.parseDouble(parameters.get(&quot;fbOrigWeight&quot;));</div><div class="line">        String newQuery = &quot;#wand (&quot; + String.valueOf(fbOrigWeight) + &quot; &quot; + query + &quot; &quot;</div><div class="line">            + String.valueOf(1 - fbOrigWeight) + &quot; &quot; + expandedQuery + &quot; )&quot;;</div><div class="line">        // System.out.println(&quot; new Query &quot; + newQuery);</div><div class="line">        r = processQuery(newQuery, model);</div><div class="line">      }</div><div class="line"></div><div class="line">      if (r != null) {</div><div class="line">        printResults(qid, r, output);</div><div class="line">      }</div><div class="line">    }</div><div class="line">  } catch (IOException ex) {</div><div class="line">    ex.printStackTrace();</div><div class="line">  } finally {</div><div class="line">    input.close();</div><div class="line">    output.close();</div><div class="line">    bw.close();</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>&#x5982;&#x679C;&#x6709; initial ranking file&#x3002;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> *</div><div class="line"> * @param fbInitialRankingFile</div><div class="line"> * @return</div><div class="line"> */</div><div class="line">private static Map&lt;Integer, ScoreList&gt; readRankingFile(String fbInitialRankingFile) {</div><div class="line">  // System.out.println(&quot;filename &quot;+fbInitialRankingFile);</div><div class="line">  Map&lt;Integer, ScoreList&gt; scoreList_map = new HashMap&lt;&gt;();</div><div class="line">  try (BufferedReader br = new BufferedReader(new FileReader(fbInitialRankingFile))) {</div><div class="line">    String str;</div><div class="line">    int last_qry = -1;</div><div class="line">    ScoreList score_list = new ScoreList();</div><div class="line">    while ((str = br.readLine()) != null) {</div><div class="line">      String[] data = str.split(&quot; &quot;);</div><div class="line">      int cur_qry = Integer.parseInt(data[0].trim());</div><div class="line">      if (last_qry == -1) {</div><div class="line">        last_qry = cur_qry;</div><div class="line">      }</div><div class="line">      if (cur_qry != last_qry) {</div><div class="line">        scoreList_map.put(last_qry, score_list);</div><div class="line">        last_qry = cur_qry;</div><div class="line">        score_list = new ScoreList();</div><div class="line">      }</div><div class="line">      score_list.add(Idx.getInternalDocid(data[2].trim()), Double.parseDouble(data[4].trim()));</div><div class="line">    }</div><div class="line">    // add the last query and scorelist</div><div class="line">    scoreList_map.put(last_qry, score_list);</div><div class="line">  } catch (Exception e) {</div><div class="line">    // TODO Auto-generated catch block</div><div class="line">    e.printStackTrace();</div><div class="line">  }</div><div class="line">  return scoreList_map;</div><div class="line">}</div></pre></td></tr></table></figure></p>
<h2 id="Effectiveness"><a href="#Effectiveness" class="headerlink" title="Effectiveness"></a>Effectiveness</h2><ul>
<li>Query expansion improves MAP by about 20% on average</li>
<li>But, you may really annoy 1/3 of your users.</li>
</ul>
<p>&#x6240;&#x4EE5;&#x901A;&#x5E38;&#x6765;&#x8BF4;&#xFF0C;query expansion &#x4F1A;&#x7528;&#x5728; recall &#x5F88;&#x91CD;&#x8981;&#x7684;&#x573A;&#x666F;&#xFF0C;&#x6216;&#x8005; average performance &#x5F88;&#x91CD;&#x8981;&#x7684;&#x573A;&#x666F;&#xFF0C;&#x6BD4;&#x5982; legal retrieval, TREC, research paper &#x7B49;&#x3002;</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#x600E;&amp;#x6837;&amp;#x4EA7;&amp;#x751F;&amp;#x66F4;&amp;#x597D;&amp;#x7684; query &amp;#x6765;&amp;#x5F97;&amp;#x5230;&amp;#x66F4;&amp;#x591A;&amp;#x7684;&amp;#x76F8;&amp;#x5173;&amp;#x6587;&amp;#x6863;&amp;#xFF1F;&amp;#x4ECE;&amp;#x7528;&amp;#x6237;&amp;#x89D2;&amp;#x5EA6;&amp;#x770B;&amp;#xFF0C;&amp;#x7528;&amp;#x6237;&amp;#x4E00;&amp;#x5F00;&amp;#x59CB;&amp;#x4F1A;&amp;#x7528; short query &amp;#x6765;&amp;#x8FDB;&amp;#x884C;&amp;#x68C0;&amp;#x7D22;&amp;#xFF0C;&amp;#x5728;&amp;#x770B;&amp;#x5230;&amp;#x7ED3;&amp;#x679C;&amp;#x6587;&amp;#x6863;&amp;#x540E;&amp;#x901A;&amp;#x8FC7;&amp;#x589E;&amp;#x52A0;&amp;#x6216;&amp;#x51CF;&amp;#x5C11; term &amp;#x4EE5;&amp;#x53CA;&amp;#x8C03;&amp;#x6574; term weight &amp;#x7684;&amp;#x65B9;&amp;#x5F0F;&amp;#x8FDB;&amp;#x4E00;&amp;#x6B65;&amp;#x4F18;&amp;#x5316; query&amp;#x3002;&amp;#x800C;&amp;#x5BF9;&amp;#x7CFB;&amp;#x7EDF;&amp;#x800C;&amp;#x8A00;&amp;#xFF0C;&amp;#x80FD;&amp;#x81EA;&amp;#x52A8;&amp;#x4EA7;&amp;#x751F; better query &amp;#x7684;&amp;#x65B9;&amp;#x5F0F;&amp;#x83AB;&amp;#x8FC7;&amp;#x4E8E; machine learning&amp;#x3002;&lt;/p&gt;
    
    </summary>
    
      <category term="Search Engines" scheme="http://www.shuang0420.com/categories/Search-Engines/"/>
    
    
      <category term="NLP" scheme="http://www.shuang0420.com/tags/NLP/"/>
    
      <category term="Search Engines" scheme="http://www.shuang0420.com/tags/Search-Engines/"/>
    
  </entry>
  
  <entry>
    <title>Hexo local search 错误解决</title>
    <link href="http://www.shuang0420.com/2016/10/07/Hexo%20local%20search%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/"/>
    <id>http://www.shuang0420.com/2016/10/07/Hexo local search错误解决/</id>
    <published>2016-10-08T00:26:12.000Z</published>
    <updated>2016-10-09T15:49:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>swiftype &#x9002;&#x7528;&#x671F;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x6708;&#xFF0C;&#x4E0D;&#x8981;&#x8DDF;&#x6211;&#x8BF4;&#x662F;&#x9AD8;&#x7EA7;&#x7528;&#x6237;&#x4E00;&#x4E2A;&#x6708;&#xFF0C;&#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x6708;&#x4E4B;&#x540E;&#x641C;&#x7D22;&#x5C31;&#x4E0D;&#x80FD;&#x7528;&#x4E86;&#xFF01;&#xFF01;&#xFF01;<br>&#x8F6C;&#x800C;&#x56DE;&#x5230; local search&#xFF0C;&#x5C31;&#x51FA;&#x73B0;&#x4E86;&#x4E4B;&#x524D;&#x6CA1;&#x6709;&#x51FA;&#x73B0;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x597D;&#x4E45;&#x624D;&#x6574;&#x51FA;&#x4E86;&#x529E;&#x6CD5;&#xFF0C;&#x5FC5;&#x987B;&#x8BB0;&#x5F55;&#x4E00;&#x4E0B;&#x3002;<br><a id="more"></a></p>
<h1 id="&#x57FA;&#x672C;&#x914D;&#x7F6E;"><a href="#&#x57FA;&#x672C;&#x914D;&#x7F6E;" class="headerlink" title="&#x57FA;&#x672C;&#x914D;&#x7F6E;"></a>&#x57FA;&#x672C;&#x914D;&#x7F6E;</h1><p>&#x5E38;&#x7528;&#x7684;&#x662F; local search&#x3002;</p>
<p>&#x5B89;&#x88C5; hexo-generator-search&#xFF0C;&#x5728;&#x7AD9;&#x70B9;&#x7684;&#x6839;&#x76EE;&#x5F55;&#x4E0B;&#x6267;&#x884C;&#x4EE5;&#x4E0B;&#x547D;&#x4EE4;&#xFF1A;</p>
<pre>$ npm install hexo-generator-search --save</pre>

<p>&#x7F16;&#x8F91; &#x7AD9;&#x70B9;&#x914D;&#x7F6E;&#x6587;&#x4EF6;&#xFF0C;&#x65B0;&#x589E;&#x4EE5;&#x4E0B;&#x5185;&#x5BB9;&#x5230;&#x4EFB;&#x610F;&#x4F4D;&#x7F6E;&#xFF1A;</p>
<pre>
search:
  path: search.xml
  field: post
</pre>

<h1 id="&#x95EE;&#x9898;1-ERROR-Process-failed-layout-DS-Store"><a href="#&#x95EE;&#x9898;1-ERROR-Process-failed-layout-DS-Store" class="headerlink" title="&#x95EE;&#x9898;1: ERROR Process failed: layout/.DS_Store"></a>&#x95EE;&#x9898;1: ERROR Process failed: layout/.DS_Store</h1><p>hexo g &#x8FD0;&#x884C;&#x51FA;&#x73B0;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ERROR Process failed: layout/.DS_Store</div><div class="line">TypeError: Cannot read property &apos;compile&apos; of undefined</div></pre></td></tr></table></figure></p>
<p>&#x53EF;&#x80FD;&#x4E0D;&#x5F71;&#x54CD;&#x5927;&#x5C40;&#xFF0C;&#x4F46;&#x8FD8;&#x662F;&#x4F1A;&#x5F88;&#x4E0D;&#x723D;&#xFF0C;&#x89E3;&#x51B3;&#x529E;&#x6CD5;&#x4E0D;&#x662F;&#x7B80;&#x5355;&#x7C97;&#x66B4;&#x7684;&#x628A; .DS_Store &#x5220;&#x6389;(command+delete)&#xFF0C;&#x8FD9;&#x6837;&#x662F;&#x6CA1;&#x7528;&#x7684;&#xFF0C;&#x8981;&#x5728;&#x547D;&#x4EE4;&#x884C;&#x91CC; rm -rf &#x5220;&#x3002;&#x67E5;&#x770B;&#x9690;&#x85CF;&#x6587;&#x4EF6;&#x7684;&#x547D;&#x4EE4;&#x662F; ls -al&#x3002;</p>
<h1 id="&#x95EE;&#x9898;2-xmlParseEntityRef-no-name"><a href="#&#x95EE;&#x9898;2-xmlParseEntityRef-no-name" class="headerlink" title="&#x95EE;&#x9898;2: xmlParseEntityRef: no name"></a>&#x95EE;&#x9898;2: xmlParseEntityRef: no name</h1><p>&#x5728;&#x7F51;&#x7AD9;&#x540E;&#x8F93;&#x5165;/search.xml&#x67E5;&#x770B;&#x9875;&#x9762;&#xFF0C;&#x51FA;&#x73B0; &#x201C;error on line 7 at column 81: xmlParseEntityRef: no name&#x201D; &#x9519;&#x8BEF;&#x3002;<br>&#x539F;&#x56E0;&#xFF1A;&#x6807;&#x9898;&#x4E2D;&#x7684; &amp; &#x4F1A;&#x548C; HTML tags &#x51B2;&#x7A81;&#xFF01;<br>&#x89E3;&#x51B3;&#xFF1A;&#x628A; &amp; &#x6362;&#x6389;&#x554A;&#x6362;&#x6389;&#xFF01;</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;swiftype &amp;#x9002;&amp;#x7528;&amp;#x671F;&amp;#x53EA;&amp;#x6709;&amp;#x4E00;&amp;#x4E2A;&amp;#x6708;&amp;#xFF0C;&amp;#x4E0D;&amp;#x8981;&amp;#x8DDF;&amp;#x6211;&amp;#x8BF4;&amp;#x662F;&amp;#x9AD8;&amp;#x7EA7;&amp;#x7528;&amp;#x6237;&amp;#x4E00;&amp;#x4E2A;&amp;#x6708;&amp;#xFF0C;&amp;#x5C31;&amp;#x662F;&amp;#x4E00;&amp;#x4E2A;&amp;#x6708;&amp;#x4E4B;&amp;#x540E;&amp;#x641C;&amp;#x7D22;&amp;#x5C31;&amp;#x4E0D;&amp;#x80FD;&amp;#x7528;&amp;#x4E86;&amp;#xFF01;&amp;#xFF01;&amp;#xFF01;&lt;br&gt;&amp;#x8F6C;&amp;#x800C;&amp;#x56DE;&amp;#x5230; local search&amp;#xFF0C;&amp;#x5C31;&amp;#x51FA;&amp;#x73B0;&amp;#x4E86;&amp;#x4E4B;&amp;#x524D;&amp;#x6CA1;&amp;#x6709;&amp;#x51FA;&amp;#x73B0;&amp;#x7684;&amp;#x95EE;&amp;#x9898;&amp;#xFF0C;&amp;#x597D;&amp;#x4E45;&amp;#x624D;&amp;#x6574;&amp;#x51FA;&amp;#x4E86;&amp;#x529E;&amp;#x6CD5;&amp;#xFF0C;&amp;#x5FC5;&amp;#x987B;&amp;#x8BB0;&amp;#x5F55;&amp;#x4E00;&amp;#x4E0B;&amp;#x3002;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Configuration" scheme="http://www.shuang0420.com/categories/Configuration/"/>
    
    
      <category term="Hexo" scheme="http://www.shuang0420.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Search Engines笔记 - Information Needs</title>
    <link href="http://www.shuang0420.com/2016/10/02/Search%20Engines%E7%AC%94%E8%AE%B0%20-%20Information%20Needs/"/>
    <id>http://www.shuang0420.com/2016/10/02/Search Engines笔记 - Information Needs/</id>
    <published>2016-10-03T01:59:21.000Z</published>
    <updated>2016-10-18T01:28:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>&#x600E;&#x6837;&#x4EA7;&#x751F;&#x66F4;&#x597D;&#x7684; query &#x6765;&#x5F97;&#x5230;&#x66F4;&#x591A;&#x7684;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF1F;&#x4ECE;&#x7528;&#x6237;&#x89D2;&#x5EA6;&#x770B;&#xFF0C;&#x7528;&#x6237;&#x4E00;&#x5F00;&#x59CB;&#x4F1A;&#x7528; short query &#x6765;&#x8FDB;&#x884C;&#x68C0;&#x7D22;&#xFF0C;&#x5728;&#x770B;&#x5230;&#x7ED3;&#x679C;&#x6587;&#x6863;&#x540E;&#x901A;&#x8FC7;&#x589E;&#x52A0;&#x6216;&#x51CF;&#x5C11; term &#x4EE5;&#x53CA;&#x8C03;&#x6574; term weight &#x7684;&#x65B9;&#x5F0F;&#x8FDB;&#x4E00;&#x6B65;&#x4F18;&#x5316; query&#x3002;&#x800C;&#x5BF9;&#x7CFB;&#x7EDF;&#x800C;&#x8A00;&#xFF0C;&#x80FD;&#x81EA;&#x52A8;&#x4EA7;&#x751F; better query &#x7684;&#x65B9;&#x5F0F;&#x83AB;&#x8FC7;&#x4E8E; machine learning&#x3002; <a id="more"></a></p>
<h1 id="Query-type"><a href="#Query-type" class="headerlink" title="Query type"></a>Query type</h1><ul>
<li>Informational(39%)<br>&#x50CF; iphones &#x4E4B;&#x7C7B;&#xFF0C;&#x7528;&#x6237;&#x60F3;&#x4E86;&#x89E3;&#x4E00;&#x4E2A; topic&#x3002;</li>
<li>Transactional(36%)<br>&#x50CF; shopping, buying airline tickets &#x4E4B;&#x7C7B;&#xFF0C;&#x7528;&#x6237;&#x60F3;&#x627E;&#x4E2A;&#x7F51;&#x7AD9;&#x8FDB;&#x884C;&#x4EA4;&#x6613;&#xFF0C;&#x4F46;&#x662F;&#x5E76;&#x6CA1;&#x6709; specific destination.</li>
<li>Navigational(25%)<br>&#x50CF; Greyhound bus, Dell &#x4E4B;&#x7C7B;&#xFF0C;&#x7528;&#x6237;&#x6709;&#x4E00;&#x4E2A; specific location/destination in mind</li>
</ul>
<h1 id="Query-language"><a href="#Query-language" class="headerlink" title="Query language"></a>Query language</h1><p>&#x4E00;&#x6761;&#x6807;&#x51C6;&#x7684; query &#x5206;&#x4E3A; 3 &#x90E8;&#x5206;&#x3002;</p>
<ul>
<li>Source of information: fields, XML elements, metadata</li>
<li>Query operators: AND, OR, NEAR/n, &#x2026;</li>
<li>Rules: how those operators can be used</li>
</ul>
<p>&#x6BCF;&#x4E00;&#x6761; query &#x90FD;&#x4F1A;&#x88AB; transform &#x6210; structured query&#x3002;</p>
<h2 id="Query-operators"><a href="#Query-operators" class="headerlink" title="Query operators"></a>Query operators</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Boolean operators: AND, OR, AND-NOT</div><div class="line">Distance operators: NEAR/n, WINDOW/n, SENTENCE/n, PARAGRAPH/n</div><div class="line">Extent(field) restrictions: BODY, TITLE, INLINK, ABSTRACT, AUTHOR,...</div><div class="line">Comparison operators: &lt;, &gt;, BEFORE, AFTER, ...</div><div class="line">Score operators: WEIGHT, AVERAGE, MAX, MIN, ...</div><div class="line">Synonym</div><div class="line">Filter-And-Rank(q1,q2): q1 forms a set, use q2 ranks it</div></pre></td></tr></table></figure>
<h2 id="Query-Processing"><a href="#Query-Processing" class="headerlink" title="Query Processing"></a>Query Processing</h2><p>query processing&#xFF0C;&#x8FD9;&#x91CC;&#x6700;&#x5E38;&#x7528;&#x7684;&#x662F; #NEAR &#x548C; #SYNONYM&#xFF0C;&#x5BF9;&#x4E8E;&#x4E00;&#x4E9B;&#x8BCD;&#x7EC4;(phrases)&#xFF0C;&#x641C;&#x7D22;&#x5F15;&#x64CE;&#x4F1A;&#x7528; #NEAR &#x8FDB;&#x884C;&#x89C4;&#x8303;&#x5316;&#xFF0C;&#x5982;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">die-cast -&gt; #NEAR/1 (die cast)</div><div class="line">virginia beach -&gt; #NEAR/1 (virginia beach)</div><div class="line">barack obama -&gt; #NEAR/3 (barack obama)</div></pre></td></tr></table></figure></p>
<p>&#x5BF9;&#x4E8E;&#x4E00;&#x4E9B;&#x7F29;&#x5199;&#xFF0C;&#x6216;&#x8005;&#x62FC;&#x5199;&#x9519;&#x8BEF;&#xFF0C;&#x4E00;&#x822C;&#x4F1A;&#x7528; #SYNONYM &#x8FDB;&#x884C;&#x8C03;&#x6574;&#xFF0C;&#x5982;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># Abbreviations</div><div class="line">virginia -&gt; (virginia,va)</div><div class="line"></div><div class="line"># Spelliing correction:</div><div class="line">brittany -&gt; britney</div><div class="line">brittany -&gt; #SYNONYM (brittany,britney)</div></pre></td></tr></table></figure></p>
<h2 id="Query-Reformulation"><a href="#Query-Reformulation" class="headerlink" title="Query Reformulation"></a>Query Reformulation</h2><p>Sequential-Dependency Models(SDM) &#x4F1A;&#x5C06; unstructured queries &#x8F6C;&#x5316;&#x79F0; structured queries&#xFF0C;&#x4E00;&#x4E2A; sequential dependency model query &#x5206;&#x4E3A;&#x4E09;&#x90E8;&#x5206;:</p>
<ul>
<li>Bag of words matches<br>&#x4F5C;&#x7528;&#x662F;&#x4FDD;&#x8BC1;&#x80FD;&#x627E;&#x5230;&#x4E1C;&#x897F;&#x3002;eg. #AND(q1,q2&#x2026;qn)</li>
<li>N-gram matches (ordered,phrase-like)<br>&#x63D0;&#x4F9B;&#x4E86; extra weight &#x7ED9;&#x5339;&#x914D;&#x7684; n-gram&#x3002;eg. #NEAR/1(q1,q2) #NEAR/1(q2,q3)&#x2026;#NEAR/1(qn-1,qn)</li>
<li>Short window matches (unordered, sentence-like)<br>&#x63D0;&#x4F9B;&#x4E86; extra weight &#x7ED9;&#x5339;&#x914D;&#x7684;&#x7A97;&#x53E3;&#x3002;eg. #WINDOW/8(q1,q2)&#x2026;#WINDOW/8(qn-1,qn)</li>
</ul>
<p>Eg.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">User Query:</div><div class="line">	sherwood regional library</div><div class="line"></div><div class="line">A sequential dependency model query:</div><div class="line">	#wand(</div><div class="line">		0.5 #and( sherwood regional library )</div><div class="line">		0.25 #and( #near/1( regional library )  #near/1( sherwood regional ) )</div><div class="line">		0.25 #and( #window/8( regional library )  #window/8( sherwood regional ) ) )</div></pre></td></tr></table></figure></p>
<p>Perl &#x4EE3;&#x7801;:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/perl</div><div class="line"></div><div class="line">#</div><div class="line"># Perl subroutine that generates Indri dependence model queries.</div><div class="line">#</div><div class="line"># Written by: Don Metzler (metzler@cs.umass.edu)</div><div class="line"># Last update: 06/27/2005</div><div class="line">#</div><div class="line"># Feel free to distribute, edit, modify, or mangle this code as you see fit. If you make any interesting</div><div class="line"># changes please email me a copy.</div><div class="line">#</div><div class="line"># For more technical details, see:</div><div class="line">#</div><div class="line">#    * Metzler, D. and Croft, W.B., &quot;A Markov Random Field Model for Term Dependencies,&quot; ACM SIGIR 2005.</div><div class="line">#</div><div class="line">#    * Metzler, D., Strohman T., Turtle H., and Croft, W.B., &quot;Indri at TREC 2004: Terabyte Track&quot;, TREC 2004.</div><div class="line">#</div><div class="line">#    * http://ciir.cs.umass.edu/~metzler/</div><div class="line">#</div><div class="line"># MODIFICATIONS</div><div class="line">#  - Updated by Jamie Callan:  02/11/2015</div><div class="line">#    Modified to support a less cryptic Indri-like query language.</div><div class="line">#    #combine --&gt; #and, #1 --&gt; #near/1, #weight --&gt; #wand, and #uw --&gt; #window/</div><div class="line">#</div><div class="line"># NOTES</div><div class="line">#</div><div class="line">#    * this script assumes that the query string has already been parsed and that all characters</div><div class="line">#      that are not compatible with Indri&apos;s query language have been removed.</div><div class="line">#</div><div class="line">#    * it is not advisable to do a &apos;full dependence&apos; variant on long strings because of the exponential</div><div class="line">#      number of terms that will result. it is suggested that the &apos;sequential dependence&apos; variant be</div><div class="line">#      used for long strings. either that, or split up long strings into smaller cohesive chunks and</div><div class="line">#      apply the &apos;full dependence&apos; variant to each of the chunks.</div><div class="line">#</div><div class="line">#    * the unordered features use a window size of 4 * number of terms within the phrase. this has been</div><div class="line">#      found to work well across a wide range of collections and topics. however, this may need to be</div><div class="line">#      modified on an individual basis.</div><div class="line">#</div><div class="line"></div><div class="line"># example usage</div><div class="line">print formulate_query( &quot;sherwood regional library&quot;, &quot;sd&quot;, 0.02, 0.49, 0.49 ) . &quot;\n\n&quot;;</div><div class="line">#print formulate_query( &quot;sherwood regional library&quot;, &quot;fd&quot;, 0.8, 0.1, 0.1 ) . &quot;\n\n&quot;;</div><div class="line"></div><div class="line">#</div><div class="line"># formulates a query based on query text and feature weights</div><div class="line">#</div><div class="line"># arguments:</div><div class="line">#    * query - string containing original query terms separated by spaces</div><div class="line">#    * type  - string. &quot;sd&quot; for sequential dependence or &quot;fd&quot; for full dependence variant. defaults to &quot;fd&quot;.</div><div class="line">#    * wt[0] - weight assigned to term features</div><div class="line">#    * wt[1] - weight assigned to ordered (#near) features</div><div class="line">#    * wt[2] - weight assigned to unordered (#window) features</div><div class="line">#</div><div class="line">sub formulate_query {</div><div class="line">    my ( $q, $type, @wt ) = @_;</div><div class="line"></div><div class="line">    # trim whitespace from beginning and end of query string</div><div class="line">    $q =~ s/^\s+|\s+$//g;</div><div class="line"></div><div class="line">    my $queryT = &quot;#and( &quot;;</div><div class="line">    my $queryO = &quot;#and(&quot;;</div><div class="line">    my $queryU = &quot;#and(&quot;;</div><div class="line"></div><div class="line">    # generate term features (f_T)</div><div class="line">    my @terms = split(/\s+/ , $q);</div><div class="line">    my $term;</div><div class="line">    foreach $term ( @terms ) {</div><div class="line">	$queryT .= &quot;$term &quot;;</div><div class="line">    }</div><div class="line"></div><div class="line">    my $num_terms = @terms;</div><div class="line"></div><div class="line">    # skip the rest of the processing if we&apos;re just</div><div class="line">    # interested in term features or if we only have 1 term</div><div class="line">    if( ( $wt[1] == 0.0 &amp;&amp; $wt[2] == 0.0 ) || $num_terms == 1 ) {</div><div class="line">	return $queryT . &quot;)&quot;;</div><div class="line">    }</div><div class="line"></div><div class="line">    # generate the rest of the features</div><div class="line">    my $start = 1;</div><div class="line">    if( $type eq &quot;sd&quot; ) { $start = 3; }</div><div class="line">    for( my $i = $start ; $i &lt; 2 ** $num_terms ; $i++ ) {</div><div class="line">	my $bin = unpack(&quot;B*&quot;, pack(&quot;N&quot;, $i)); # create binary representation of i</div><div class="line">	my $num_extracted = 0;</div><div class="line">	my $extracted_terms = &quot;&quot;;</div><div class="line"></div><div class="line">	# get query terms corresponding to &apos;on&apos; bits</div><div class="line">	for( my $j = 0 ; $j &lt; $num_terms ; $j++ ) {</div><div class="line">	    my $bit = substr($bin, $j - $num_terms, 1);</div><div class="line">	    if( $bit eq &quot;1&quot; ) {</div><div class="line">		$extracted_terms .= &quot;$terms[$j] &quot;;</div><div class="line">		$num_extracted++;</div><div class="line">	    }</div><div class="line">	}</div><div class="line"></div><div class="line">	if( $num_extracted == 1 ) { next; } # skip these, since we already took care of the term features...</div><div class="line">	if( $bin =~ /^0+11+[^1]*$/ ) { # words in contiguous phrase, ordered features (f_O)</div><div class="line">	    $queryO .= &quot; #near/1( $extracted_terms) &quot;;</div><div class="line">	}</div><div class="line">	$queryU .= &quot; #window/&quot; . 4*$num_extracted . &quot;( $extracted_terms) &quot;; # every subset of terms, unordered features (f_U)</div><div class="line">	if( $type eq &quot;sd&quot; ) { $i *= 2; $i--; }</div><div class="line">    }</div><div class="line"></div><div class="line">    my $query = &quot;#wand(&quot;;</div><div class="line">    if( $wt[0] != 0.0 &amp;&amp; $queryT ne &quot;#and( &quot; ) { $query .= &quot; $wt[0] $queryT)&quot;; }</div><div class="line">    if( $wt[1] != 0.0 &amp;&amp; $queryO ne &quot;#and(&quot; ) { $query .= &quot; $wt[1] $queryO)&quot;; }</div><div class="line">    if( $wt[2] != 0.0 &amp;&amp; $queryU ne &quot;#and(&quot; ) { $query .= &quot; $wt[2] $queryU)&quot;; }</div><div class="line"></div><div class="line">    if( $query eq &quot;#wand(&quot; ) { return &quot;&quot;; } # return &quot;&quot; if we couldn&apos;t formulate anything</div><div class="line"></div><div class="line">    return $query . &quot; )&quot;;</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>&#x53E6;&#x5916;&#x5E38;&#x7528;&#x7684;&#x6A21;&#x578B;&#x8FD8;&#x6709; <a href="http://www.shuang0420.com/2016/10/10/Search%20Engines%E7%AC%94%E8%AE%B0%20-%20Pseudo%20Relevance%20Feedback/">query expansion</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#x600E;&amp;#x6837;&amp;#x4EA7;&amp;#x751F;&amp;#x66F4;&amp;#x597D;&amp;#x7684; query &amp;#x6765;&amp;#x5F97;&amp;#x5230;&amp;#x66F4;&amp;#x591A;&amp;#x7684;&amp;#x76F8;&amp;#x5173;&amp;#x6587;&amp;#x6863;&amp;#xFF1F;&amp;#x4ECE;&amp;#x7528;&amp;#x6237;&amp;#x89D2;&amp;#x5EA6;&amp;#x770B;&amp;#xFF0C;&amp;#x7528;&amp;#x6237;&amp;#x4E00;&amp;#x5F00;&amp;#x59CB;&amp;#x4F1A;&amp;#x7528; short query &amp;#x6765;&amp;#x8FDB;&amp;#x884C;&amp;#x68C0;&amp;#x7D22;&amp;#xFF0C;&amp;#x5728;&amp;#x770B;&amp;#x5230;&amp;#x7ED3;&amp;#x679C;&amp;#x6587;&amp;#x6863;&amp;#x540E;&amp;#x901A;&amp;#x8FC7;&amp;#x589E;&amp;#x52A0;&amp;#x6216;&amp;#x51CF;&amp;#x5C11; term &amp;#x4EE5;&amp;#x53CA;&amp;#x8C03;&amp;#x6574; term weight &amp;#x7684;&amp;#x65B9;&amp;#x5F0F;&amp;#x8FDB;&amp;#x4E00;&amp;#x6B65;&amp;#x4F18;&amp;#x5316; query&amp;#x3002;&amp;#x800C;&amp;#x5BF9;&amp;#x7CFB;&amp;#x7EDF;&amp;#x800C;&amp;#x8A00;&amp;#xFF0C;&amp;#x80FD;&amp;#x81EA;&amp;#x52A8;&amp;#x4EA7;&amp;#x751F; better query &amp;#x7684;&amp;#x65B9;&amp;#x5F0F;&amp;#x83AB;&amp;#x8FC7;&amp;#x4E8E; machine learning&amp;#x3002;&lt;/p&gt;
    
    </summary>
    
      <category term="Search Engines" scheme="http://www.shuang0420.com/categories/Search-Engines/"/>
    
    
      <category term="NLP" scheme="http://www.shuang0420.com/tags/NLP/"/>
    
      <category term="Search Engines" scheme="http://www.shuang0420.com/tags/Search-Engines/"/>
    
  </entry>
  
  <entry>
    <title>AES 和 RSA 笔记</title>
    <link href="http://www.shuang0420.com/2016/10/02/AES%20%E5%92%8C%20RSA%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.shuang0420.com/2016/10/02/AES 和 RSA笔记/</id>
    <published>2016-10-02T23:55:12.000Z</published>
    <updated>2016-10-09T00:04:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>&#x7B80;&#x5355;&#x56DE;&#x987E; AES &#x548C; RSA &#x7B97;&#x6CD5;&#x3002;<br><a id="more"></a></p>
<h1 id="Symmetric-key-&#x5BF9;&#x79F0;&#x52A0;&#x5BC6;"><a href="#Symmetric-key-&#x5BF9;&#x79F0;&#x52A0;&#x5BC6;" class="headerlink" title="Symmetric key &#x5BF9;&#x79F0;&#x52A0;&#x5BC6;"></a>Symmetric key &#x5BF9;&#x79F0;&#x52A0;&#x5BC6;</h1><p>&#x52A0;&#x5BC6;&#x548C;&#x89E3;&#x5BC6;&#x5747;&#x91C7;&#x7528;&#x540C;&#x4E00;&#x628A;&#x5BC6;&#x94A5;&#xFF0C;&#x800C;&#x4E14;&#x901A;&#x4FE1;&#x53CC;&#x65B9;&#x90FD;&#x5FC5;&#x987B;&#x83B7;&#x5F97;&#x8FD9;&#x628A;&#x5BC6;&#x94A5;&#x3002;&#x4E00;&#x65B9;&#x901A;&#x8FC7;&#x5BC6;&#x94A5;&#x5C06;&#x4FE1;&#x606F;&#x52A0;&#x5BC6;&#x540E;&#xFF0C;&#x628A;&#x5BC6;&#x6587;&#x4F20;&#x7ED9;&#x53E6;&#x4E00;&#x65B9;&#xFF0C;&#x53E6;&#x4E00;&#x65B9;&#x901A;&#x8FC7;&#x8FD9;&#x4E2A;&#x76F8;&#x540C;&#x7684;&#x5BC6;&#x94A5;&#x5C06;&#x5BC6;&#x6587;&#x89E3;&#x5BC6;&#xFF0C;&#x8F6C;&#x6362;&#x6210;&#x53EF;&#x4EE5;&#x7406;&#x89E3;&#x7684;&#x660E;&#x6587;&#x3002;<br>&#x5E38;&#x89C1;&#x7684;&#x5BF9;&#x79F0;&#x52A0;&#x5BC6;&#x7B97;&#x6CD5;&#x6709;DES&#x3001;3DES&#x3001;AES&#x3001;Blowfish&#x3001;IDEA&#x3001;RC5&#x3001;RC6&#x3001;AES&#x3002;</p>
<ul>
<li>DES&#xFF08;Data Encryption Standard&#xFF09;&#xFF1A;&#x6570;&#x636E;&#x52A0;&#x5BC6;&#x6807;&#x51C6;&#xFF0C;&#x901F;&#x5EA6;&#x8F83;&#x5FEB;&#xFF0C;&#x9002;&#x7528;&#x4E8E;&#x52A0;&#x5BC6;&#x5927;&#x91CF;&#x6570;&#x636E;&#x7684;&#x573A;&#x5408;&#x3002;</li>
<li>3DES&#xFF08;Triple DES&#xFF09;&#xFF1A;&#x662F;&#x57FA;&#x4E8E;DES&#xFF0C;&#x5BF9;&#x4E00;&#x5757;&#x6570;&#x636E;&#x7528;&#x4E09;&#x4E2A;&#x4E0D;&#x540C;&#x7684;&#x5BC6;&#x94A5;&#x8FDB;&#x884C;&#x4E09;&#x6B21;&#x52A0;&#x5BC6;&#xFF0C;&#x5F3A;&#x5EA6;&#x66F4;&#x9AD8;&#x3002;</li>
<li>AES&#xFF08;Advanced Encryption Standard&#xFF09;&#xFF1A;&#x9AD8;&#x7EA7;&#x52A0;&#x5BC6;&#x6807;&#x51C6;&#xFF0C;&#x662F;&#x4E0B;&#x4E00;&#x4EE3;&#x7684;&#x52A0;&#x5BC6;&#x7B97;&#x6CD5;&#x6807;&#x51C6;&#xFF0C;&#x901F;&#x5EA6;&#x5FEB;&#xFF0C;&#x5B89;&#x5168;&#x7EA7;&#x522B;&#x9AD8;&#xFF1B;</li>
</ul>
<p>&#x5BF9;&#x79F0;&#x52A0;&#x5BC6;&#x7684;&#x6700;&#x5927;&#x4F18;&#x70B9;&#x662F;&#x901F;&#x5EA6;&#x5FEB;&#xFF0C;&#x7136;&#x800C;&#x5B83;&#x4E5F;&#x5B58;&#x5728;&#x7740;&#x8BF8;&#x591A;&#x95EE;&#x9898;&#x3002;</p>
<h2 id="&#x5B58;&#x5728;&#x95EE;&#x9898;"><a href="#&#x5B58;&#x5728;&#x95EE;&#x9898;" class="headerlink" title="&#x5B58;&#x5728;&#x95EE;&#x9898;"></a>&#x5B58;&#x5728;&#x95EE;&#x9898;</h2><ul>
<li>&#x8981;&#x6C42;&#x63D0;&#x4F9B;&#x4E00;&#x6761;&#x5B89;&#x5168;&#x7684;&#x6E20;&#x9053;&#x4F7F;&#x901A;&#x8BAF;&#x53CC;&#x65B9;&#x5728;&#x9996;&#x6B21;&#x901A;&#x8BAF;&#x65F6;&#x534F;&#x5546;&#x4E00;&#x4E2A;&#x5171;&#x540C;&#x7684;&#x5BC6;&#x94A5;&#x3002;&#x76F4;&#x63A5;&#x7684;&#x9762;&#x5BF9;&#x9762;&#x534F;&#x5546;&#x53EF;&#x80FD;&#x662F;&#x4E0D;&#x73B0;&#x5B9E;&#x800C;&#x4E14;&#x96BE;&#x4E8E;&#x5B9E;&#x65BD;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x53CC;&#x65B9;&#x53EF;&#x80FD;&#x9700;&#x8981;&#x501F;&#x52A9;&#x4E8E;&#x90AE;&#x4EF6;&#x548C;&#x7535;&#x8BDD;&#x7B49;&#x5176;&#x5B83;&#x76F8;&#x5BF9;&#x4E0D;&#x591F;&#x5B89;&#x5168;&#x7684;&#x624B;&#x6BB5;&#x6765;&#x8FDB;&#x884C;&#x534F;&#x5546;&#xFF1B;</li>
<li>&#x5BC6;&#x94A5;&#x7684;&#x6570;&#x76EE;&#x96BE;&#x4E8E;&#x7BA1;&#x7406;&#x3002;&#x56E0;&#x4E3A;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E00;&#x4E2A;&#x5408;&#x4F5C;&#x8005;&#x90FD;&#x9700;&#x8981;&#x4F7F;&#x7528;&#x4E0D;&#x540C;&#x7684;&#x5BC6;&#x94A5;&#xFF0C;&#x5F88;&#x96BE;&#x9002;&#x5E94;&#x5F00;&#x653E;&#x793E;&#x4F1A;&#x4E2D;&#x5927;&#x91CF;&#x7684;&#x4FE1;&#x606F;&#x4EA4;&#x6D41;&#xFF1B;&#x800C;&#x5982;&#x679C;&#x5927;&#x5BB6;&#x90FD;&#x4F7F;&#x7528;&#x540C;&#x4E00;&#x4E2A;&#x5BC6;&#x94A5;&#xFF0C;&#x53EA;&#x8981;&#x5176;&#x4E2D;&#x4E00;&#x4E2A;&#x4EBA;&#x5BC6;&#x94A5;&#x88AB;&#x76D7;&#x7A83;&#x4E86;&#xFF0C;&#x90A3;&#x4E48;&#x6574;&#x4F53;&#x52A0;&#x5BC6;&#x7684;&#x4FE1;&#x606F;&#x5C06;&#x90FD;&#x88AB;&#x7834;&#x89E3;&#x4E86;&#x3002;</li>
<li>&#x5BF9;&#x79F0;&#x52A0;&#x5BC6;&#x7B97;&#x6CD5;&#x4E00;&#x822C;&#x4E0D;&#x80FD;&#x63D0;&#x4F9B;&#x4FE1;&#x606F;&#x5B8C;&#x6574;&#x6027;&#x7684;&#x9274;&#x522B;&#x3002;&#x5B83;&#x65E0;&#x6CD5;&#x9A8C;&#x8BC1;&#x53D1;&#x9001;&#x8005;&#x548C;&#x63A5;&#x53D7;&#x8005;&#x7684;&#x8EAB;&#x4EFD;&#xFF1B;<br>-&#x5BF9;&#x79F0;&#x5BC6;&#x94A5;&#x7684;&#x7BA1;&#x7406;&#x548C;&#x5206;&#x53D1;&#x5DE5;&#x4F5C;&#x662F;&#x4E00;&#x4EF6;&#x5177;&#x6709;&#x6F5C;&#x5728;&#x5371;&#x9669;&#x7684;&#x548C;&#x70E6;&#x7410;&#x7684;&#x8FC7;&#x7A0B;&#x3002;&#x5BF9;&#x79F0;&#x52A0;&#x5BC6;&#x662F;&#x57FA;&#x4E8E;&#x5171;&#x540C;&#x4FDD;&#x5B88;&#x79D8;&#x5BC6;&#x6765;&#x5B9E;&#x73B0;&#x7684;&#xFF0C;&#x91C7;&#x7528;&#x5BF9;&#x79F0;&#x52A0;&#x5BC6;&#x6280;&#x672F;&#x7684;&#x8D38;&#x6613;&#x53CC;&#x65B9;&#x5FC5;&#x987B;&#x4FDD;&#x8BC1;&#x91C7;&#x7528;&#x7684;&#x662F;&#x76F8;&#x540C;&#x7684;&#x5BC6;&#x94A5;&#xFF0C;&#x4FDD;&#x8BC1;&#x5F7C;&#x6B64;&#x5BC6;&#x94A5;&#x7684;&#x4EA4;&#x6362;&#x662F;&#x5B89;&#x5168;&#x53EF;&#x9760;&#x7684;&#xFF0C;&#x540C;&#x65F6;&#x8FD8;&#x8981;&#x8BBE;&#x5B9A;&#x9632;&#x6B62;&#x5BC6;&#x94A5;&#x6CC4;&#x5BC6;&#x548C;&#x66F4;&#x6539;&#x5BC6;&#x94A5;&#x7684;&#x7A0B;&#x5E8F;&#x3002;</li>
</ul>
<h2 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h2><p><img src="http://7xu83c.com1.z0.glb.clouddn.com/AES.png" alt=""><br>AES&#x52A0;&#x5BC6;&#x8FC7;&#x7A0B;&#x6D89;&#x53CA;&#x5230;4&#x79CD;&#x64CD;&#x4F5C;&#xFF1A;&#x5B57;&#x8282;&#x66FF;&#x4EE3;&#xFF08;SubBytes&#xFF09;&#x3001;&#x884C;&#x79FB;&#x4F4D;&#xFF08;ShiftRows&#xFF09;&#x3001;&#x5217;&#x6DF7;&#x6DC6;&#xFF08;MixColumns&#xFF09;&#x548C;&#x8F6E;&#x5BC6;&#x94A5;&#x52A0;&#xFF08;AddRoundKey&#xFF09;&#x3002;&#x4ECE;&#x4E0A;&#x56FE;&#x53EF;&#x4EE5;&#x770B;&#x51FA;&#xFF1A;1&#xFF09;&#x89E3;&#x5BC6;&#x8FC7;&#x7A0B;&#x7684;&#x6BCF;&#x4E00;&#x6B65;&#x5206;&#x522B;&#x5BF9;&#x5E94;&#x64CD;&#x4F5C;&#x7684;&#x9006;&#x64CD;&#x4F5C;&#xFF0C;2&#xFF09;&#x52A0;&#x89E3;&#x5BC6;&#x6240;&#x6709;&#x64CD;&#x4F5C;&#x7684;&#x987A;&#x5E8F;&#x6B63;&#x597D;&#x662F;&#x76F8;&#x53CD;&#x7684;&#x3002;&#x6B63;&#x662F;&#x7531;&#x4E8E;&#x8FD9;&#x4E24;&#x70B9;&#x4FDD;&#x8BC1;&#x4E86;&#x89E3;&#x5BC6;&#x80FD;&#x591F;&#x6B63;&#x786E;&#x5730;&#x6062;&#x590D;&#x660E;&#x6587;&#x3002;&#x52A0;&#x89E3;&#x5BC6;&#x4E2D;&#x6BCF;&#x8F6E;&#x7684;&#x5BC6;&#x94A5;&#x5206;&#x522B;&#x7531;&#x521D;&#x59CB;&#x5BC6;&#x94A5;&#x6269;&#x5C55;&#x5F97;&#x5230;&#x3002;&#x7B97;&#x6CD5;&#x4E2D;16&#x5B57;&#x8282;&#x7684;&#x660E;&#x6587;&#x3001;&#x5BC6;&#x6587;&#x548C;&#x8F6E;&#x5BC6;&#x94A5;&#x90FD;&#x4EE5;&#x4E00;&#x4E2A;4x4&#x7684;&#x77E9;&#x9635;&#x8868;&#x793A;&#x3002;</p>
<p><a href="http://www.cnblogs.com/luop/p/4334160.html" target="_blank" rel="external">&#x7B97;&#x6CD5;&#x8BE6;&#x89E3;</a></p>
<h1 id="Asymmetric-key-&#x975E;&#x5BF9;&#x79F0;&#x52A0;&#x5BC6;"><a href="#Asymmetric-key-&#x975E;&#x5BF9;&#x79F0;&#x52A0;&#x5BC6;" class="headerlink" title="Asymmetric key &#x975E;&#x5BF9;&#x79F0;&#x52A0;&#x5BC6;"></a>Asymmetric key &#x975E;&#x5BF9;&#x79F0;&#x52A0;&#x5BC6;</h1><p>&#x4F7F;&#x7528;&#x975E;&#x5BF9;&#x79F0;&#x52A0;&#x5BC6;&#x7B97;&#x6CD5;&#xFF0C;&#x9996;&#x5148;&#x8981;&#x6709;&#x4E00;&#x5BF9;key&#xFF0C;&#x4E00;&#x4E2A;&#x662F;private key&#x79C1;&#x94A5;&#xFF0C;&#x53E6;&#x4E00;&#x4E2A;&#x662F;public key&#x516C;&#x94A5;&#xFF0C;&#x5982;&#x679C;&#x7528;&#x516C;&#x5F00;&#x5BC6;&#x94A5;&#x5BF9;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x52A0;&#x5BC6;&#xFF0C;&#x53EA;&#x6709;&#x7528;&#x5BF9;&#x5E94;&#x7684;&#x79C1;&#x6709;&#x5BC6;&#x94A5;&#x624D;&#x80FD;&#x89E3;&#x5BC6;&#xFF1B;&#x5982;&#x679C;&#x7528;&#x79C1;&#x6709;&#x5BC6;&#x94A5;&#x5BF9;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x52A0;&#x5BC6;&#xFF0C;&#x90A3;&#x4E48;&#x53EA;&#x6709;&#x7528;&#x5BF9;&#x5E94;&#x7684;&#x516C;&#x5F00;&#x5BC6;&#x94A5;&#x624D;&#x80FD;&#x89E3;&#x5BC6;&#x3002;&#x56E0;&#x4E3A;&#x52A0;&#x5BC6;&#x548C;&#x89E3;&#x5BC6;&#x4F7F;&#x7528;&#x7684;&#x662F;&#x4E24;&#x4E2A;&#x4E0D;&#x540C;&#x7684;&#x5BC6;&#x94A5;&#xFF0C;&#x6240;&#x4EE5;&#x8FD9;&#x79CD;&#x7B97;&#x6CD5;&#x53EB;&#x4F5C;&#x975E;&#x5BF9;&#x79F0;&#x52A0;&#x5BC6;&#x7B97;&#x6CD5;&#x3002;&#x53EF;&#x4EE5;&#x628A;&#x4F60;&#x7684;public key&#x5206;&#x53D1;&#x7ED9;&#x60F3;&#x7ED9;&#x4F60;&#x4F20;&#x5BC6;&#x6587;&#x7684;&#x7528;&#x6237;&#xFF0C;&#x7136;&#x540E;&#x7528;&#x6237;&#x4F7F;&#x7528;&#x8BE5;public key&#x52A0;&#x5BC6;&#x8FC7;&#x7684;&#x5BC6;&#x6587;&#xFF0C;&#x53EA;&#x6709;&#x4F7F;&#x7528;&#x4F60;&#x7684; private key &#x624D;&#x80FD;&#x89E3;&#x5BC6;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x53EA;&#x8981;&#x4F60;&#x81EA;&#x5DF1;&#x4FDD;&#x5B58;&#x597D;&#x4F60;&#x7684; private key&#xFF0C;&#x5C31;&#x80FD;&#x786E;&#x4FDD;&#xFF0C;&#x522B;&#x4EBA;&#x60F3;&#x7ED9;&#x4F60;&#x53D1;&#x7684;&#x5BC6;&#x6587;&#x4E0D;&#x88AB;&#x7834;&#x89E3;&#xFF0C;&#x6240;&#x4EE5;&#x4F60;&#x4E0D;&#x7528;&#x62C5;&#x5FC3;&#x522B;&#x4EBA;&#x7684;&#x5BC6;&#x94A5;&#x88AB;&#x76D7;&#x3002;</p>
<p>&#x8FC7;&#x7A0B;&#xFF1A;</p>
<ol>
<li>&#x4E59;&#x65B9;&#x751F;&#x6210;&#x4E24;&#x628A;&#x5BC6;&#x94A5;&#xFF08;&#x516C;&#x94A5;&#x548C;&#x79C1;&#x94A5;&#xFF09;&#x3002;&#x516C;&#x94A5;&#x662F;&#x516C;&#x5F00;&#x7684;&#xFF0C;&#x4EFB;&#x4F55;&#x4EBA;&#x90FD;&#x53EF;&#x4EE5;&#x83B7;&#x5F97;&#xFF0C;&#x79C1;&#x94A5;&#x5219;&#x662F;&#x4FDD;&#x5BC6;&#x7684;&#x3002;</li>
<li>&#x7532;&#x65B9;&#x83B7;&#x53D6;&#x4E59;&#x65B9;&#x7684;&#x516C;&#x94A5;&#xFF0C;&#x7136;&#x540E;&#x7528;&#x5B83;&#x5BF9;&#x4FE1;&#x606F;&#x52A0;&#x5BC6;&#x3002;</li>
<li>&#x4E59;&#x65B9;&#x5F97;&#x5230;&#x52A0;&#x5BC6;&#x540E;&#x7684;&#x4FE1;&#x606F;&#xFF0C;&#x7528;&#x79C1;&#x94A5;&#x89E3;&#x5BC6;&#x3002;</li>
</ol>
<p>&#x975E;&#x5BF9;&#x79F0;&#x52A0;&#x5BC6;&#x7B97;&#x6CD5;&#x7684;&#x4FDD;&#x5BC6;&#x6027;&#x6BD4;&#x8F83;&#x597D;&#xFF0C;&#x5B83;&#x6D88;&#x9664;&#x4E86;&#x6700;&#x7EC8;&#x7528;&#x6237;&#x4EA4;&#x6362;&#x5BC6;&#x94A5;&#x7684;&#x9700;&#x8981;&#xFF0C;&#x4F46;&#x52A0;&#x5BC6;&#x548C;&#x89E3;&#x5BC6;&#x82B1;&#x8D39;&#x65F6;&#x95F4;&#x957F;&#x3001;&#x901F;&#x5EA6;&#x6162;&#xFF0C;&#x5728;&#x67D0;&#x4E9B;&#x6781;&#x7AEF;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x751A;&#x81F3;&#x80FD;&#x6BD4;&#x975E;&#x5BF9;&#x79F0;&#x52A0;&#x5BC6;&#x6162;&#x4E0A;1000&#x500D;&#x3002;&#x56E0;&#x6B64;&#x5B83;&#x4E0D;&#x9002;&#x5408;&#x4E8E;&#x5BF9;&#x6587;&#x4EF6;&#x52A0;&#x5BC6;&#x800C;&#x53EA;&#x9002;&#x7528;&#x4E8E;&#x5BF9;&#x5C11;&#x91CF;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x52A0;&#x5BC6;&#x3002;</p>
<p>&#x4E3E;&#x4E2A;&#x4F8B;&#x5B50;&#xFF0C;&#x5982;&#x679C;&#x4F01;&#x4E1A;&#x4E2D;&#x6709;n&#x4E2A;&#x7528;&#x6237;&#xFF0C;&#x4F01;&#x4E1A;&#x9700;&#x8981;&#x751F;&#x6210;n&#x5BF9;&#x5BC6;&#x94A5;&#xFF0C;&#x5E76;&#x5206;&#x53D1;n&#x4E2A;&#x516C;&#x94A5;&#x3002;&#x7531;&#x4E8E;&#x516C;&#x94A5;&#x662F;&#x53EF;&#x4EE5;&#x516C;&#x5F00;&#x7684;&#xFF0C;&#x7528;&#x6237;&#x53EA;&#x8981;&#x4FDD;&#x7BA1;&#x597D;&#x81EA;&#x5DF1;&#x7684;&#x79C1;&#x94A5;&#x5373;&#x53EF;(&#x4F01;&#x4E1A;&#x5206;&#x53D1;&#x540E;&#x4E00;&#x822C;&#x4FDD;&#x5B58;&#x7684;&#x662F;&#x79C1;&#x94A5;,&#x7528;&#x6237;&#x62FF;&#x7684;&#x662F;&#x516C;&#x94A5;)&#xFF0C;&#x56E0;&#x6B64;&#x52A0;&#x5BC6;&#x5BC6;&#x94A5;&#x7684;&#x5206;&#x53D1;&#x5C06;&#x53D8;&#x5F97;&#x5341;&#x5206;&#x7B80;&#x5355;&#x3002;&#x540C;&#x65F6;&#xFF0C;&#x7531;&#x4E8E;&#x6BCF;&#x4E2A;&#x7528;&#x6237;&#x7684;&#x79C1;&#x94A5;&#x662F;&#x552F;&#x4E00;&#x7684;&#xFF0C;&#x5176;&#x4ED6;&#x7528;&#x6237;&#x9664;&#x4E86;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x4FE1;&#x606F;&#x53D1;&#x9001;&#x8005;&#x7684;&#x516C;&#x94A5;&#x6765;&#x9A8C;&#x8BC1;&#x4FE1;&#x606F;&#x7684;&#x6765;&#x6E90;&#x662F;&#x5426;&#x771F;&#x5B9E;&#xFF0C;&#x8FD8;&#x53EF;&#x4EE5;&#x786E;&#x4FDD;&#x53D1;&#x9001;&#x8005;&#x65E0;&#x6CD5;&#x5426;&#x8BA4;&#x66FE;&#x53D1;&#x9001;&#x8FC7;&#x8BE5;&#x4FE1;&#x606F;&#x3002;</p>
<p>&#x8FD9;&#x79CD;&#x52A0;&#x5BC6;&#x7B97;&#x6CD5;&#x5E94;&#x7528;&#x975E;&#x5E38;&#x5E7F;&#x6CDB;&#xFF0C;SSH, HTTPS, TLS&#xFF0C;&#x7535;&#x5B50;&#x8BC1;&#x4E66;&#xFF0C;&#x7535;&#x5B50;&#x7B7E;&#x540D;&#xFF0C;&#x7535;&#x5B50;&#x8EAB;&#x4EFD;&#x8BC1;&#x7B49;&#x7B49;&#x3002;</p>
<h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2><p>1977&#x5E74;&#xFF0C;&#x4E09;&#x4F4D;&#x6570;&#x5B66;&#x5BB6;Rivest&#x3001;Shamir &#x548C; Adleman &#x8BBE;&#x8BA1;&#x4E86;&#x4E00;&#x79CD;&#x7B97;&#x6CD5;&#xFF0C;&#x53EF;&#x4EE5;&#x5B9E;&#x73B0;&#x975E;&#x5BF9;&#x79F0;&#x52A0;&#x5BC6;&#x3002;&#x8FD9;&#x79CD;&#x7B97;&#x6CD5;&#x7528;&#x4ED6;&#x4EEC;&#x4E09;&#x4E2A;&#x4EBA;&#x7684;&#x540D;&#x5B57;&#x547D;&#x540D;&#xFF0C;&#x53EB;&#x505A;RSA&#x7B97;&#x6CD5;&#x3002;&#x4ECE;&#x90A3;&#x65F6;&#x76F4;&#x5230;&#x73B0;&#x5728;&#xFF0C;RSA&#x7B97;&#x6CD5;&#x4E00;&#x76F4;&#x662F;&#x6700;&#x5E7F;&#x4E3A;&#x4F7F;&#x7528;&#x7684;&#x201D;&#x975E;&#x5BF9;&#x79F0;&#x52A0;&#x5BC6;&#x7B97;&#x6CD5;&#x201D;&#x3002;&#x6BEB;&#x4E0D;&#x5938;&#x5F20;&#x5730;&#x8BF4;&#xFF0C;&#x53EA;&#x8981;&#x6709;&#x8BA1;&#x7B97;&#x673A;&#x7F51;&#x7EDC;&#x7684;&#x5730;&#x65B9;&#xFF0C;&#x5C31;&#x6709;RSA&#x7B97;&#x6CD5;&#x3002;<br>&#x8FD9;&#x79CD;&#x7B97;&#x6CD5;&#x975E;&#x5E38;&#x53EF;&#x9760;&#xFF0C;&#x5BC6;&#x94A5;&#x8D8A;&#x957F;&#xFF0C;&#x5B83;&#x5C31;&#x8D8A;&#x96BE;&#x7834;&#x89E3;&#x3002;&#x6839;&#x636E;&#x5DF2;&#x7ECF;&#x62AB;&#x9732;&#x7684;&#x6587;&#x732E;&#xFF0C;&#x76EE;&#x524D;&#x88AB;&#x7834;&#x89E3;&#x7684;&#x6700;&#x957F;RSA&#x5BC6;&#x94A5;&#x662F;768&#x4E2A;&#x4E8C;&#x8FDB;&#x5236;&#x4F4D;&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x957F;&#x5EA6;&#x8D85;&#x8FC7;768&#x4F4D;&#x7684;&#x5BC6;&#x94A5;&#xFF0C;&#x8FD8;&#x65E0;&#x6CD5;&#x7834;&#x89E3;&#xFF08;&#x81F3;&#x5C11;&#x6CA1;&#x4EBA;&#x516C;&#x5F00;&#x5BA3;&#x5E03;&#xFF09;&#x3002;&#x56E0;&#x6B64;&#x53EF;&#x4EE5;&#x8BA4;&#x4E3A;&#xFF0C;1024&#x4F4D;&#x7684;RSA&#x5BC6;&#x94A5;&#x57FA;&#x672C;&#x5B89;&#x5168;&#xFF0C;2048&#x4F4D;&#x7684;&#x5BC6;&#x94A5;&#x6781;&#x5176;&#x5B89;&#x5168;&#x3002;<br>&#x4EE3;&#x7801;&#x7406;&#x89E3; RSA &#x7B97;&#x6CD5;&#x3002;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line">/* Demonstrate RSA in Java using BigIntegers */</div><div class="line"></div><div class="line">import java.math.BigInteger;</div><div class="line">import java.util.Random;</div><div class="line"></div><div class="line">/**</div><div class="line"> *  RSA Algorithm from CLR</div><div class="line"> *</div><div class="line"> * 1. Select at random two large prime numbers p and q.</div><div class="line"> * 2. Compute n by the equation n = p * q.</div><div class="line"> * 3. Compute phi(n)=  (p - 1) * ( q - 1)</div><div class="line"> * 4. Select a small odd integer e that is relatively prime to phi(n).</div><div class="line"> * 5. Compute d as the multiplicative inverse of e modulo phi(n). A theorem in</div><div class="line"> *    number theory asserts that d exists and is uniquely defined.</div><div class="line"> * 6. Publish the pair P = (e,n) as the RSA public key.</div><div class="line"> * 7. Keep secret the pair S = (d,n) as the RSA secret key.</div><div class="line"> * 8. To encrypt a message M compute C = M^e (mod n)</div><div class="line"> * 9. To decrypt a message C compute M = C^d (mod n)</div><div class="line"> */</div><div class="line"></div><div class="line">public class RSAExample {</div><div class="line"></div><div class="line">  public static void main(String[] args) {</div><div class="line">    // Each public and private key consists of an exponent and a modulus</div><div class="line">    BigInteger n; // n is the modulus for both the private and public keys</div><div class="line">    BigInteger e; // e is the exponent of the public key</div><div class="line">    BigInteger d; // d is the exponent of the private key</div><div class="line"></div><div class="line">    Random rnd = new Random();</div><div class="line"></div><div class="line">    // Step 1: Generate two large random primes.</div><div class="line">    // We use 400 bits here, but best practice for security is 2048 bits.</div><div class="line">    // Change 400 to 2048, recompile, and run the program again and you will</div><div class="line">    // notice it takes much longer to do the math with that many bits.</div><div class="line">    BigInteger p = new BigInteger(400,100,rnd);</div><div class="line">    BigInteger q = new BigInteger(400,100,rnd);</div><div class="line"></div><div class="line">    // Step 2: Compute n by the equation n = p * q.</div><div class="line">    n = p.multiply(q);</div><div class="line"></div><div class="line">    // Step 3: Compute phi(n) = (p-1) * (q-1)</div><div class="line">    BigInteger phi = (p.subtract(BigInteger.ONE)).multiply(q.subtract(BigInteger.ONE));</div><div class="line"></div><div class="line">    // Step 4: Select a small odd integer e that is relatively prime to phi(n).</div><div class="line">    // By convention the prime 65537 is used as the public exponent.</div><div class="line">    e = new BigInteger (&quot;65537&quot;);</div><div class="line"></div><div class="line">    // Step 5: Compute d as the multiplicative inverse of e modulo phi(n).</div><div class="line">    d = e.modInverse(phi);</div><div class="line"></div><div class="line">    System.out.println(&quot; e = &quot; + e);  // Step 6: (e,n) is the RSA public key</div><div class="line">    System.out.println(&quot; d = &quot; + d);  // Step 7: (d,n) is the RSA private key</div><div class="line">    System.out.println(&quot; n = &quot; + n);  // Modulus for both keys</div><div class="line"></div><div class="line">    // Encode a simple message. For example the letter &apos;A&apos; in UTF-8 is 65</div><div class="line">    BigInteger m = new BigInteger(&quot;65&quot;);</div><div class="line"></div><div class="line">    // Step 8: To encrypt a message M compute C = M^e (mod n)</div><div class="line">    BigInteger c = m.modPow(e, n);</div><div class="line"></div><div class="line">    // Step 9: To decrypt a message C compute M = C^d (mod n)</div><div class="line">    BigInteger clear = c.modPow(d, n);</div><div class="line">    System.out.println(&quot;Cypher text = &quot; + c);</div><div class="line">    System.out.println(&quot;Clear text = &quot; + clear); // Should be &quot;65&quot;</div><div class="line"></div><div class="line">    // Step 8 (reprise) Encrypt the string &apos;Hello&apos;</div><div class="line">    String s = &quot;RSA is way cool.&quot;;</div><div class="line">    m = new BigInteger(s.getBytes()); // m is the original clear text</div><div class="line">    c = m.modPow(e, n);     // Do the encryption, c is the cypher text</div><div class="line"></div><div class="line">    // Step 9 (reprise) Decrypt...</div><div class="line">    clear = c.modPow(d, n); // Decrypt, clear is the resulting clear text</div><div class="line">    String clearStr = new String(clear.toByteArray());  // Decode to a string</div><div class="line"></div><div class="line">    System.out.println(&quot;Cypher text = &quot; + c);</div><div class="line">    System.out.println(&quot;Clear text = &quot; + clearStr);</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure></p>
<p>&#x6570;&#x5B66;&#x539F;&#x7406;&#x53C2;&#x89C1;<br><a href="http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html" target="_blank" rel="external">RSA&#x7B97;&#x6CD5;&#x539F;&#x7406;&#xFF08;&#x4E00;&#xFF09;</a><br><a href="http://www.ruanyifeng.com/blog/2013/07/rsa_algorithm_part_two.html" target="_blank" rel="external">RSA&#x7B97;&#x6CD5;&#x539F;&#x7406;&#xFF08;&#x4E8C;&#xFF09;</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#x7B80;&amp;#x5355;&amp;#x56DE;&amp;#x987E; AES &amp;#x548C; RSA &amp;#x7B97;&amp;#x6CD5;&amp;#x3002;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构和算法" scheme="http://www.shuang0420.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="加密" scheme="http://www.shuang0420.com/tags/%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>SHA-1和MD5 笔记</title>
    <link href="http://www.shuang0420.com/2016/10/01/SHA-1%E5%92%8CMD5%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.shuang0420.com/2016/10/01/SHA-1和MD5笔记/</id>
    <published>2016-10-01T23:55:12.000Z</published>
    <updated>2016-10-09T15:14:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>&#x7B80;&#x5355;&#x56DE;&#x987E; SHA-1 &#x548C; MD5 &#x7B97;&#x6CD5;&#x3002;<br><a id="more"></a></p>
<h1 id="Hash-&#x51FD;&#x6570;"><a href="#Hash-&#x51FD;&#x6570;" class="headerlink" title="Hash &#x51FD;&#x6570;"></a>Hash &#x51FD;&#x6570;</h1><p>Hash &#x51FD;&#x6570; H(M)&#xFF0C; &#x4F5C;&#x7528;&#x4E8E;&#x4E00;&#x4EFB;&#x610F;&#x957F;&#x5EA6;&#x7684;&#x6D88;&#x606F; M&#xFF0C;&#x8FD4;&#x56DE;&#x4E00;&#x56FA;&#x5B9A;&#x957F;&#x5EA6;&#x7684;&#x6563;&#x5217;&#x503C;h:h=H(M)&#xFF0C;&#x4F5C;&#x4E3A;&#x521D;&#x59CB;&#x6D88;&#x606F;&#x7684;&#x72EC;&#x4E00;&#x65E0;&#x4E8C;&#x7684;&#x201C;&#x6570;&#x5B57;&#x6307;&#x7EB9;&#x201D;&#xFF0C;&#x4ECE;&#x800C;&#x80FD;&#x4FDD;&#x8BC1;&#x6570;&#x636E;&#x7684;&#x5B8C;&#x6574;&#x6027;&#x548C;&#x60DF;&#x4E00;&#x6027;&#x3002;Hash&#x7B97;&#x6CD5;&#x662F;&#x73B0;&#x4EE3;&#x5BC6;&#x7801;&#x4F53;&#x7CFB;&#x4E2D;&#x7684;&#x4E00;&#x4E2A;&#x91CD;&#x8981;&#x7EC4;&#x6210;&#x90E8;&#x5206;&#x3002;&#x7531;&#x4E8E;&#x975E;&#x5BF9;&#x79F0;&#x7B97;&#x6CD5;&#x7684;&#x8FD0;&#x7B97;&#x901F;&#x5EA6;&#x8F83;&#x6162;&#xFF0C;&#x6240;&#x4EE5;&#x5728;&#x6570;&#x5B57;&#x7B7E;&#x540D;&#x534F;&#x8BAE;&#x4E2D;&#xFF0C;Hash &#x51FD;&#x6570;&#x626E;&#x6F14;&#x4E86;&#x4E00;&#x4E2A;&#x91CD;&#x8981;&#x7684;&#x89D2;&#x8272;&#x3002;&#x5BF9; Hash &#x503C;&#xFF0C;&#x53C8;&#x79F0;&#x201D;&#x6570;&#x5B57;&#x6458;&#x8981;&#x201D;&#x8FDB;&#x884C;&#x6570;&#x5B57;&#x7B7E;&#x540D;&#xFF0C;&#x5728;&#x7EDF;&#x8BA1;&#x4E0A;&#x53EF;&#x4EE5;&#x8BA4;&#x4E3A;&#x4E0E;&#x5BF9;&#x6587;&#x4EF6;&#x672C;&#x8EAB;&#x8FDB;&#x884C;&#x6570;&#x5B57;&#x7B7E;&#x540D;&#x662F;&#x7B49;&#x6548;&#x7684;&#x3002;hash&#x51FD;&#x6570;&#x5E76;&#x4E0D;&#x5B8C;&#x5168;&#x53EF;&#x9760;&#xFF0C;&#x4E0D;&#x540C;&#x6587;&#x4EF6;&#x4EA7;&#x751F;&#x76F8;&#x540C; MD5 &#x548C; SHA1 &#x7684;&#x51E0;&#x7387;&#x8FD8;&#x662F;&#x6709;&#x7684;&#xFF0C;&#x53EA;&#x662F;&#x4E0D;&#x9AD8;&#x3002;</p>
<p>&#x901A;&#x8FC7; Hash &#x7B97;&#x6CD5;&#x53EF;&#x5B9E;&#x73B0;&#x6570;&#x5B57;&#x7B7E;&#x540D;&#x5B9E;&#x73B0;&#xFF0C;&#x6570;&#x5B57;&#x7B7E;&#x540D;&#x7684;&#x539F;&#x7406;&#x662F;&#x5C06;&#x8981;&#x4F20;&#x9001;&#x7684;&#x660E;&#x6587;&#x901A;&#x8FC7;&#x4E00;&#x79CD;&#x51FD;&#x6570;&#x8FD0;&#x7B97;&#xFF08;Hash&#xFF09;&#x8F6C;&#x6362;&#x6210;&#x62A5;&#x6587;&#x6458;&#x8981;&#xFF08;&#x4E0D;&#x540C;&#x7684;&#x660E;&#x6587;&#x5BF9;&#x5E94;&#x4E0D;&#x540C;&#x7684;&#x62A5;&#x6587;&#x6458;&#x8981;&#xFF09;&#xFF0C;&#x62A5;&#x6587;&#x6458;&#x8981;&#x52A0;&#x5BC6;&#x540E;&#x4E0E;&#x660E;&#x6587;&#x4E00;&#x8D77;&#x4F20;&#x9001;&#x7ED9;&#x63A5;&#x53D7;&#x65B9;&#xFF0C;&#x63A5;&#x53D7;&#x65B9;&#x5C06;&#x63A5;&#x53D7;&#x7684;&#x660E;&#x6587;&#x4EA7;&#x751F;&#x65B0;&#x7684;&#x62A5;&#x6587;&#x6458;&#x8981;&#x4E0E;&#x53D1;&#x9001;&#x65B9;&#x7684;&#x53D1;&#x6765;&#x62A5;&#x6587;&#x6458;&#x8981;&#x89E3;&#x5BC6;&#x6BD4;&#x8F83;&#xFF0C;&#x6BD4;&#x8F83;&#x7ED3;&#x679C;&#x4E00;&#x81F4;&#x8868;&#x793A;&#x660E;&#x6587;&#x672A;&#x88AB;&#x6539;&#x52A8;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x4E00;&#x81F4;&#x8868;&#x793A;&#x660E;&#x6587;&#x5DF2;&#x88AB;&#x7BE1;&#x6539;&#x3002;</p>
<p>Hash &#x51FD;&#x6570;&#x7684;&#x5B89;&#x5168;&#x6027;&#x5728;&#x4E8E;&#x5176;&#x4EA7;&#x751F;&#x6563;&#x5217;&#x503C;&#x7684;&#x64CD;&#x4F5C;&#x8FC7;&#x7A0B;&#x5177;&#x6709;&#x8F83;&#x5F3A;&#x7684;&#x5355;&#x5411;&#x6027;&#xFF08;&#x4E0D;&#x53EF;&#x9006;&#x6027;&#xFF09;&#x3002;&#x5982;&#x679C;&#x5728;&#x8F93;&#x5165;&#x5E8F;&#x5217;&#x4E2D;&#x5D4C;&#x5165;&#x5BC6;&#x7801;&#xFF0C;&#x90A3;&#x4E48;&#x4EFB;&#x4F55;&#x4EBA;&#x5728;&#x4E0D;&#x77E5;&#x9053;&#x5BC6;&#x7801;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x90FD;&#x4E0D;&#x80FD;&#x4EA7;&#x751F;&#x6B63;&#x786E;&#x7684;&#x6563;&#x5217;&#x503C;&#xFF0C;&#x4ECE;&#x800C;&#x4FDD;&#x8BC1;&#x4E86;&#x5176;&#x5B89;&#x5168;&#x6027;&#x3002;&#x8FD9;&#x7B26;&#x5408;&#x4E86;&#x6570;&#x5B57;&#x7B7E;&#x540D;&#x7684;&#x7279;&#x6027;&#xFF0C;&#x6570;&#x5B57;&#x7B7E;&#x540D;&#x53EA;&#x80FD;&#x7528;&#x975E;&#x5BF9;&#x79F0;&#x7B97;&#x6CD5;&#x3002;</p>
<p>Hash &#x51FD;&#x6570;&#x4E00;&#x822C;&#x7528;&#x4E8E;&#x4EA7;&#x751F;&#x6D88;&#x606F;&#x6458;&#x8981;&#xFF0C;&#x5BC6;&#x94A5;&#x52A0;&#x5BC6;&#x7B49;&#xFF0C;&#x5E38;&#x89C1;&#x7684;&#x6709;&#xFF1A;</p>
<ul>
<li>MD5&#xFF08;Message Digest Algorithm 5&#xFF09;&#xFF1A;&#x662F;RSA&#x6570;&#x636E;&#x5B89;&#x5168;&#x516C;&#x53F8;&#x5F00;&#x53D1;&#x7684;&#x4E00;&#x79CD;&#x5355;&#x5411;&#x6563;&#x5217;&#x7B97;&#x6CD5;&#x3002;</li>
<li>SHA&#xFF08;Secure Hash Algorithm&#xFF09;&#xFF1A;&#x53EF;&#x4EE5;&#x5BF9;&#x4EFB;&#x610F;&#x957F;&#x5EA6;&#x7684;&#x6570;&#x636E;&#x8FD0;&#x7B97;&#x751F;&#x6210;&#x4E00;&#x4E2A;160&#x4F4D;&#x7684;&#x6570;&#x503C;&#xFF1B;</li>
</ul>
<h1 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h1><p>MD5&#xFF0C;&#x4E00;&#x79CD;&#x4E0D;&#x53EF;&#x9006;&#x7684;&#x52A0;&#x5BC6;&#x7B97;&#x6CD5;&#xFF0C;&#x76EE;&#x524D;&#x662F;&#x6700;&#x7262;&#x9760;&#x7684;&#x52A0;&#x5BC6;&#x7B97;&#x6CD5;&#x4E4B;&#x4E00;&#xFF0C;&#x5C1A;&#x6CA1;&#x6709;&#x80FD;&#x591F;&#x9006;&#x8FD0;&#x7B97;&#x7684;&#x7A0B;&#x5E8F;&#x88AB;&#x5F00;&#x53D1;&#x51FA;&#x6765;&#xFF0C;&#x5B83;&#x5BF9;&#x5E94;&#x4EFB;&#x4F55;&#x5B57;&#x7B26;&#x4E32;&#x90FD;&#x53EF;&#x4EE5;&#x52A0;&#x5BC6;&#x6210;&#x4E00;&#x6BB5;&#x552F;&#x4E00;&#x7684;&#x56FA;&#x5B9A;&#x957F;&#x5EA6;&#x7684;&#x4EE3;&#x7801;&#x3002;</p>
<p>MD5(RFC1321)&#x662F;Rivest&#x4E8E;1991&#x5E74;&#x5BF9;MD4&#x7684;&#x6539;&#x8FDB;&#x7248;&#x672C;&#x3002;&#x5B83;&#x5BF9;&#x8F93;&#x5165;&#x4ECD;&#x4EE5; 512 &#x4F4D;&#x5206;&#x7EC4;&#xFF0C;&#x5176;&#x8F93;&#x51FA;&#x662F; 4&#x4E2A;32&#x4F4D;&#x5B57;&#x7684;&#x7EA7;&#x8054;&#xFF0C;&#x4E0E; MD4 &#x76F8;&#x540C;&#x3002;MD5 &#x6BD4; MD4 &#x6765;&#x5F97;&#x590D;&#x6742;&#xFF0C;&#x5E76;&#x4E14;&#x901F;&#x5EA6;&#x8F83;&#x4E4B;&#x8981;&#x6162;&#x4E00;&#x70B9;&#xFF0C;&#x4F46;&#x66F4;&#x5B89;&#x5168;&#xFF0C;&#x5728;&#x6297;&#x5206;&#x6790;&#x548C;&#x6297;&#x5DEE;&#x5206;&#x65B9;&#x9762;&#x8868;&#x73B0;&#x66F4;&#x597D;&#x3002;</p>
<p>MD5 &#x901A;&#x5E38;&#x7528;&#x4E8E;&#x5BC6;&#x7801;&#x7684;&#x52A0;&#x5BC6;&#x5B58;&#x50A8;&#xFF0C;&#x6570;&#x5B57;&#x7B7E;&#x540D;&#xFF0C;&#x6587;&#x4EF6;&#x5B8C;&#x6574;&#x6027;&#x9A8C;&#x8BC1;&#x7B49;&#x3002;</p>
<h2 id="Java-&#x4EE3;&#x7801;"><a href="#Java-&#x4EE3;&#x7801;" class="headerlink" title="Java &#x4EE3;&#x7801;"></a>Java &#x4EE3;&#x7801;</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">import java.security.NoSuchAlgorithmException;</div><div class="line"></div><div class="line">public static String computeHash(String input) {</div><div class="line">    byte[] hashed_str = null;</div><div class="line">    String res = null;</div><div class="line">    try {</div><div class="line">        java.security.MessageDigest alg = java.security.MessageDigest.getInstance(&quot;md5&quot;);</div><div class="line">        alg.update(input.getBytes());</div><div class="line">        hashed_str = alg.digest();</div><div class="line">        res = javax.xml.bind.DatatypeConverter.printHexBinary(hashed_str);</div><div class="line">    } catch (NoSuchAlgorithmException ex) {</div><div class="line">        System.out.println(&quot;Exception: &quot; + ex);</div><div class="line">    } finally {</div><div class="line">        return res;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>
<h1 id="SHA-1"><a href="#SHA-1" class="headerlink" title="SHA-1"></a>SHA-1</h1><p>SHA-1&#xFF0C;&#x4E00;&#x79CD;&#x4E0D;&#x53EF;&#x9006;&#x7684;&#x3001;&#x9632;&#x51B2;&#x7A81;&#xFF0C;&#x5E76;&#x5177;&#x6709;&#x826F;&#x597D;&#x7684;&#x96EA;&#x5D29;&#x6548;&#x5E94;&#x7684;&#x52A0;&#x5BC6;&#x7B97;&#x6CD5;&#x3002;&#x8BE5;&#x7B97;&#x6CD5;&#x8F93;&#x5165;&#x62A5;&#x6587;&#x7684;&#x6700;&#x5927;&#x957F;&#x5EA6;&#x4E0D;&#x8D85;&#x8FC7; 2^64 &#x4F4D;&#xFF0C;&#x4EA7;&#x751F;&#x7684;&#x8F93;&#x51FA;&#x662F;&#x4E00;&#x4E2A; 160 &#x4F4D;&#x7684;&#x62A5;&#x6587;&#x6458;&#x8981;&#x3002;&#x8F93;&#x5165;&#x662F;&#x6309; 512 &#x4F4D;&#xFF08;64 &#x5B57;&#x8282;&#xFF09;&#x7684;&#x5206;&#x7EC4;&#x8FDB;&#x884C;&#x5904;&#x7406;&#x7684;&#xFF0C;&#x5E76;&#x4EA7;&#x751F;&#xFF12;&#xFF10;&#x4E2A;&#x5B57;&#x8282;&#x7684;&#x88AB;&#x79F0;&#x4E3A;&#x4FE1;&#x606F;&#x8BA4;&#x8BC1;&#x4EE3;&#x7801;&#x6216;&#x4FE1;&#x606F;&#x6458;&#x8981;&#x7684;&#x8F93;&#x51FA;&#x3002;</p>
<h2 id="Java-&#x4EE3;&#x7801;-1"><a href="#Java-&#x4EE3;&#x7801;-1" class="headerlink" title="Java &#x4EE3;&#x7801;"></a>Java &#x4EE3;&#x7801;</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">import java.security.NoSuchAlgorithmException;</div><div class="line"></div><div class="line">public static String computeHash(String input) {</div><div class="line">    byte[] hashed_str = null;</div><div class="line">    String res = null;</div><div class="line">    try {</div><div class="line">        java.security.MessageDigest alg = java.security.MessageDigest.getInstance(&quot;SHA-1&quot;);</div><div class="line">        alg.update(input.getBytes());</div><div class="line">        hashed_str = alg.digest();</div><div class="line">        res = javax.xml.bind.DatatypeConverter.printHexBinary(hashed_str);</div><div class="line">    } catch (NoSuchAlgorithmException ex) {</div><div class="line">        System.out.println(&quot;Exception: &quot; + ex);</div><div class="line">    } finally {</div><div class="line">        return res;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>
<h1 id="SHA-1&#x4E0E;MD5&#x7684;&#x6BD4;&#x8F83;"><a href="#SHA-1&#x4E0E;MD5&#x7684;&#x6BD4;&#x8F83;" class="headerlink" title="SHA-1&#x4E0E;MD5&#x7684;&#x6BD4;&#x8F83;"></a>SHA-1&#x4E0E;MD5&#x7684;&#x6BD4;&#x8F83;</h1><p>&#x56E0;&#x4E3A;&#x4E8C;&#x8005;&#x5747;&#x7531;MD4&#x5BFC;&#x51FA;&#xFF0C;SHA-1&#x548C;MD5&#x5F7C;&#x6B64;&#x5F88;&#x76F8;&#x4F3C;&#x3002;&#x76F8;&#x5E94;&#x7684;&#xFF0C;&#x4ED6;&#x4EEC;&#x7684;&#x5F3A;&#x5EA6;&#x548C;&#x5176;&#x4ED6;&#x7279;&#x6027;&#x4E5F;&#x662F;&#x76F8;&#x4F3C;&#xFF0C;&#x4F46;&#x8FD8;&#x6709;&#x4EE5;&#x4E0B;&#x51E0;&#x70B9;&#x4E0D;&#x540C;&#xFF1A;</p>
<ul>
<li>&#x5F3A;&#x884C;&#x653B;&#x51FB;&#x7684;&#x5B89;&#x5168;&#x6027;&#xFF1A;SHA-1&#x4E0E;MD5 &#x7684;&#x6700;&#x5927;&#x533A;&#x522B;&#x5728;&#x4E8E;&#x5176;&#x6458;&#x8981;&#x6BD4;MD5 &#x6458;&#x8981;&#x957F; 32 &#x6BD4;&#x7279;&#x3002;&#x5BF9;&#x4E8E;&#x5F3A;&#x884C;&#x653B;&#x51FB;&#xFF0C;&#x4EA7;&#x751F;&#x4EFB;&#x4F55;&#x4E00;&#x4E2A;&#x62A5;&#x6587;&#x4F7F;&#x4E4B;&#x6458;&#x8981;&#x7B49;&#x4E8E;&#x7ED9;&#x5B9A;&#x62A5;&#x6587;&#x6458;&#x8981;&#x7684;&#x96BE;&#x5EA6;&#xFF1A;MD5 &#x662F;2128 &#x6570;&#x91CF;&#x7EA7;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;SHA-1 &#x662F;2160 &#x6570;&#x91CF;&#x7EA7;&#x7684;&#x64CD;&#x4F5C;&#x3002;&#x56E0;&#x800C;,SHA-1 &#x5BF9;&#x5F3A;&#x884C;&#x653B;&#x51FB;&#x7684;&#x5F3A;&#x5EA6;&#x66F4;&#x5927;&#x3002;</li>
<li>&#x901F;&#x5EA6;&#xFF1A;&#x7531;&#x4E8E;SHA-1 &#x7684;&#x5FAA;&#x73AF;&#x6B65;&#x9AA4;&#x6BD4;MD5 &#x591A;&#xFF08;80:64&#xFF09;&#x4E14;&#x8981;&#x5904;&#x7406;&#x7684;&#x7F13;&#x5B58;&#x5927;&#xFF08;160 &#x6BD4;&#x7279;:128 &#x6BD4;&#x7279;&#xFF09;&#xFF0C;SHA-1 &#x7684;&#x8FD0;&#x884C;&#x901F;&#x5EA6;&#x6BD4;MD5 &#x6162;&#x3002;</li>
</ul>
<p>&#x6700;&#x540E;&#x4E0A;&#x5F20;&#x6BD4;&#x8F83;&#x56FE;&#x3002;<br><img src="http://7xu83c.com1.z0.glb.clouddn.com/md5&amp;sha-1.jpg" alt=""></p>
<h1 id="&#x5E94;&#x7528;&#xFF0D;&#x7F51;&#x7AD9;&#x7528;&#x6237;&#x540D;&#x5BC6;&#x7801;&#x4FDD;&#x5B58;"><a href="#&#x5E94;&#x7528;&#xFF0D;&#x7F51;&#x7AD9;&#x7528;&#x6237;&#x540D;&#x5BC6;&#x7801;&#x4FDD;&#x5B58;" class="headerlink" title="&#x5E94;&#x7528;&#xFF0D;&#x7F51;&#x7AD9;&#x7528;&#x6237;&#x540D;&#x5BC6;&#x7801;&#x4FDD;&#x5B58;"></a>&#x5E94;&#x7528;&#xFF0D;&#x7F51;&#x7AD9;&#x7528;&#x6237;&#x540D;&#x5BC6;&#x7801;&#x4FDD;&#x5B58;</h1><p>&#x7F51;&#x7AD9;&#x7528;&#x6237;&#x540D;&#x5BC6;&#x7801;&#x7684;&#x4FDD;&#x5B58;&#x65B9;&#x5F0F;&#xFF1A;</p>
<ul>
<li>&#x660E;&#x6587; hash &#x540E;&#x4FDD;&#x5B58;&#xFF0C;&#x5982; md5</li>
<li>MD5+Salt &#x65B9;&#x5F0F;,&#x8FD9;&#x4E2A; salt &#x53EF;&#x4EE5;&#x968F;&#x673A;</li>
</ul>
<p>&#x7F51;&#x7AD9;&#x7528;&#x6237;&#x540D;&#x5BC6;&#x7801;&#x4FDD;&#x5B58;&#x901A;&#x5E38;&#x4F1A;&#x7528;&#x5230; MD5 + Salt&#x3002;salt &#x5C31;&#x662F;&#x670D;&#x52A1;&#x7AEF;&#x5728;&#x63A5;&#x6536;&#x4E86;&#x5BA2;&#x6237;&#x8F93;&#x5165;&#x7684;&#x539F;&#x5B57;&#x7B26;&#x4E32;&#x540E;&#x518D;&#x52A0;&#x4E00;&#x6BB5;&#x81EA;&#x5B9A;&#x4E49;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x7136;&#x540E;&#x5BF9;&#x65B0;&#x4EA7;&#x751F;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x4E00;&#x8D77;&#x8FDB;&#x884C;&#x52A0;&#x5BC6;&#xFF0C;&#x63D0;&#x9AD8;&#x5B89;&#x5168;&#x6027;&#x3002;<a href="https://github.com/Shuang0420/Distributed-System/tree/master/Project2/Project2Task2/src/project2task2" target="_blank" rel="external">&#x793A;&#x4F8B;&#x4EE3;&#x7801;</a></p>
<blockquote>
<p>&#x53C2;&#x8003;&#x94FE;&#x63A5;<br><a href="http://stark-summer.iteye.com/blog/1313884" target="_blank" rel="external">&#x6570;&#x5B57;&#x7B7E;&#x540D;&#x7B97;&#x6CD5;MD5&#x548C;SHA-1&#x7684;&#x6BD4;&#x8F83;</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#x7B80;&amp;#x5355;&amp;#x56DE;&amp;#x987E; SHA-1 &amp;#x548C; MD5 &amp;#x7B97;&amp;#x6CD5;&amp;#x3002;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构和算法" scheme="http://www.shuang0420.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="加密" scheme="http://www.shuang0420.com/tags/%E5%8A%A0%E5%AF%86/"/>
    
      <category term="Hash" scheme="http://www.shuang0420.com/tags/Hash/"/>
    
  </entry>
  
  <entry>
    <title>Search Engines笔记 - Best-Match</title>
    <link href="http://www.shuang0420.com/2016/09/30/Search%20Engines%E7%AC%94%E8%AE%B0%20-%20Best-Match/"/>
    <id>http://www.shuang0420.com/2016/09/30/Search Engines笔记 - Best-Match/</id>
    <published>2016-09-30T16:21:21.000Z</published>
    <updated>2016-10-18T04:12:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>Best match&#x6A21;&#x578B;&#x8861;&#x91CF;&#x7684;&#x662F;&#x4E00;&#x7BC7;&#x6587;&#x6863;&#x4E0E; information need &#x7684;&#x5339;&#x914D;&#x7A0B;&#x5EA6;&#xFF0C;&#x4E0E; Exact match&#x6A21;&#x578B;&#xFF08;&#x5339;&#x914D;&#xFF0F;&#x4E0D;&#x5339;&#x914D;&#xFF09;&#x76F8;&#x6BD4;&#x66F4;&#x6CE8;&#x91CD;&#x7528;&#x6237;&#x4F53;&#x9A8C;&#xFF0C;&#x4E0D;&#x7BA1;&#x6709;&#x6CA1;&#x6709;&#x5339;&#x914D; Best match &#x90FD;&#x4F1A;&#x8FD4;&#x56DE;&#x6587;&#x6863;&#x7ED3;&#x679C;&#x3002;<br><a id="more"></a></p>
<p>&#x672C;&#x7BC7;&#x5206;&#x4E3A;&#x4EE5;&#x4E0B;&#x56DB;&#x90E8;&#x5206;&#x3002;</p>
<ul>
<li>Vector space retrieval model(VSM)</li>
<li>Probabilistic retrieval model(BM25)</li>
<li>Statistical language model(query likelihood)</li>
<li>Inference networks(Indri)</li>
</ul>
<h1 id="VSM"><a href="#VSM" class="headerlink" title="VSM"></a>VSM</h1><p>&#x5047;&#x8BBE;&#x6587;&#x6863; d &#x5BF9;&#x5E94;&#x7684;&#x5411;&#x91CF;&#x7528; $\overrightarrow {V}(d)$ &#x8868;&#x793A;&#xFF0C;&#x6BCF;&#x4E2A;&#x7EF4;&#x5EA6;&#x5BF9;&#x5E94;&#x4E00;&#x4E2A; term&#xFF0C;&#x5411;&#x91CF;&#x5206;&#x91CF;&#x4E00;&#x822C;&#x53EF;&#x4EE5;&#x91C7;&#x7528; tf-idf &#x6743;&#x91CD;&#x8BA1;&#x7B97;&#x65B9;&#x5F0F;&#x3002;&#x4E00;&#x7EC4;&#x6587;&#x6863;&#x7684;&#x96C6;&#x5408;&#x770B;&#x4F5C;&#x5411;&#x91CF;&#x7A7A;&#x95F4;&#x7684;&#x591A;&#x4E2A;&#x5411;&#x91CF;&#xFF0C;&#x6BCF;&#x4E2A; term &#x5BF9;&#x5E94;&#x4E00;&#x4E2A;&#x5750;&#x6807;&#x8F74;&#xFF0C;&#x7136;&#x540E;&#x5728;&#x5411;&#x91CF;&#x7A7A;&#x95F4;&#x4E0B;&#x8FDB;&#x884C;&#x76F8;&#x4F3C;&#x5EA6;&#x8BA1;&#x7B97;&#x3002;</p>
<h2 id="&#x76F8;&#x4F3C;&#x5EA6;&#x8BA1;&#x7B97;"><a href="#&#x76F8;&#x4F3C;&#x5EA6;&#x8BA1;&#x7B97;" class="headerlink" title="&#x76F8;&#x4F3C;&#x5EA6;&#x8BA1;&#x7B97;"></a>&#x76F8;&#x4F3C;&#x5EA6;&#x8BA1;&#x7B97;</h2><p>&#x76F8;&#x4F3C;&#x5EA6;&#x7684;&#x8BA1;&#x7B97;&#x65B9;&#x6CD5;&#x3002;</p>
<ul>
<li>Inner product</li>
<li>Dice coefficient</li>
<li>Jackard coefficient</li>
<li>Cosine correlation</li>
</ul>
<h3 id="&#x4F59;&#x5F26;&#x76F8;&#x4F3C;&#x5EA6;-cosine-similarity"><a href="#&#x4F59;&#x5F26;&#x76F8;&#x4F3C;&#x5EA6;-cosine-similarity" class="headerlink" title="&#x4F59;&#x5F26;&#x76F8;&#x4F3C;&#x5EA6; (cosine similarity)"></a>&#x4F59;&#x5F26;&#x76F8;&#x4F3C;&#x5EA6; (cosine similarity)</h3><p>&#x76F4;&#x63A5;&#x5411;&#x91CF;&#x5DEE;(overlap measures)&#x8861;&#x91CF;&#x76F8;&#x4F3C;&#x5EA6;&#x4F1A;&#x4EA7;&#x751F;&#x4E0B;&#x9762;&#x7684;&#x95EE;&#x9898;&#xFF0C;</p>
<ul>
<li>It doesn&#x2019;t normalize for vector length</li>
<li>All terms are treated as equally important</li>
</ul>
<p>&#x53EF;&#x80FD;&#x5BFC;&#x81F4;&#x7684;&#x7ED3;&#x679C;&#x662F;&#xFF0C;&#x4E24;&#x7BC7;&#x5185;&#x5BB9;&#x76F8;&#x4F3C;&#x7684;&#x6587;&#x6863;&#x5411;&#x91CF;&#x7684;&#x5DEE;&#x5411;&#x91CF;&#x53EF;&#x80FD;&#x5F88;&#x5927;&#xFF0C;&#x56E0;&#x4E3A;&#x4E00;&#x7BC7;&#x6587;&#x6863;&#x53EF;&#x80FD;&#x6BD4;&#x53E6;&#x4E00;&#x7BC7;&#x6587;&#x6863;&#x957F;&#x5F88;&#x591A;&#x3002;</p>
<p>&#x6700;&#x5E38;&#x7528;&#x7684; similarity metric &#x8FD8;&#x662F; cosine similarity.<br><img src="http://7xu83c.com1.z0.glb.clouddn.com/cos.png" alt=""></p>
<p>&#x5173;&#x4E8E; Vector Coefficient &#x6211;&#x4EEC;&#x9700;&#x8981;&#x8003;&#x8651;&#x4EE5;&#x4E0B;&#x4E09;&#x70B9;&#xFF1A;</p>
<ul>
<li>Document term weight: Importance of the term in this document ==&gt; tf -&gt; log(tf+1)</li>
<li>Collection term weight: Importance of the term in this collection  ==&gt; idf -&gt; $log{N \over df}+1$ (avoid idf=0)</li>
<li>Length normalization: Compensate for varying document length</li>
</ul>
<p>&#x66F4;&#x8FDB;&#x4E00;&#x6B65;&#x7684; cosine-similarity&#xFF0C;Inc.ltc<br><img src="http://7xu83c.com1.z0.glb.clouddn.com/inc_ltc_sim.png" alt=""></p>
<p>&#x8FD9;&#x4E2A;&#x516C;&#x5F0F;&#x53EF;&#x4EE5;&#x7528;&#x4F5C; #SUM &#x7684;&#x8BA1;&#x7B97;&#xFF0C;&#x4EC5;&#x8BA1;&#x7B97;&#x5305;&#x542B;&#x4E86;&#x67E5;&#x8BE2;&#x8BCD;&#x7684;&#x6587;&#x6863;&#x7684;&#x5206;&#x6570;&#x3002;</p>
<h3 id="Length-Bias"><a href="#Length-Bias" class="headerlink" title="Length Bias"></a>Length Bias</h3><p>&#x5927;&#x591A;&#x6570;&#x7684; similarity metrics &#x90FD;&#x4F1A;&#x6709;&#x4E00;&#x4E2A; length bias&#xFF0C;&#x5C31;&#x662F;&#x8BF4;&#x77ED;&#x6587;&#x6863;&#x7684;&#x5206;&#x6570;&#x88AB;&#x9AD8;&#x4F30;&#x4E86;&#xFF0C;&#x957F;&#x6587;&#x6863;&#x7684;&#x5206;&#x6570;&#x88AB;&#x4F4E;&#x4F30;&#x4E86;&#xFF0C;<br><img src="http://7xu83c.com1.z0.glb.clouddn.com/length_bias_sim.png" alt=""></p>
<p>&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x9700;&#x8981; pivote document length normalization&#xFF0C;&#x53EF;&#x4EE5;&#x91C7;&#x7528; Lnu.Ltu metric.<br><img src="http://7xu83c.com1.z0.glb.clouddn.com/lnu.png" alt=""></p>
<h2 id="Lucene-&#x5E94;&#x7528;"><a href="#Lucene-&#x5E94;&#x7528;" class="headerlink" title="Lucene &#x5E94;&#x7528;"></a>Lucene &#x5E94;&#x7528;</h2><p>Lucene &#x7684;&#x68C0;&#x7D22;&#x8FC7;&#x7A0B;&#xFF1A;</p>
<ol>
<li>Use boolean query to form a set of documents</li>
<li>Use a vector sapce retrieval algorithm to rank the set</li>
</ol>
<p>Simplified Lucene&#x2019;s tf.idf Ranker<br><img src="http://7xu83c.com1.z0.glb.clouddn.com/lucene-tfidf.png" alt=""></p>
<p>&#x4E0E; Inc.ltc &#x7684;&#x4E0D;&#x540C;</p>
<ul>
<li>tf weight &#x7528;&#x4E86; sqrt(tf) &#x800C;&#x4E0D;&#x662F; log(tf)+1&#xFF0C;stronger reward for frequent terms in document</li>
<li>idf weight &#x7528;&#x4E86; square &#x800C;&#x4E0D;&#x662F; idf&#xFF0C;stronger penalty for frequent terms across corpus</li>
</ul>
<h2 id="&#x5C0F;&#x7ED3;"><a href="#&#x5C0F;&#x7ED3;" class="headerlink" title="&#x5C0F;&#x7ED3;"></a>&#x5C0F;&#x7ED3;</h2><blockquote>
<p>Key idea: Measure similarity among weighted term vectors</p>
</blockquote>
<p>Vector Space Retrieval Model &#x6CA1;&#x6709;&#x544A;&#x8BC9;&#x6211;&#x4EEC;&#x600E;&#x4E48; set term weights&#xFF0C;&#x6CA1;&#x6709;&#x544A;&#x8BC9;&#x6211;&#x4EEC;&#x600E;&#x4E48;&#x786E;&#x5B9A; similarity&#xFF0C;&#x4E5F;&#x6CA1;&#x6709;&#x544A;&#x8BC9;&#x6211;&#x4EEC;&#x600E;&#x4E48;&#x652F;&#x6301; query-independent weights&#xFF0C;&#x5B83;&#x7684;&#x4F18;&#x70B9;&#x662F;&#x7075;&#x6D3B;&#xFF0C;&#x7F3A;&#x70B9;&#x4E5F;&#x662F;&#x7075;&#x6D3B;&#xFF0C;&#x6240;&#x6709;&#x7684;&#x4E1C;&#x897F;&#x90FD;&#x8981;&#x6211;&#x4EEC;&#x81EA;&#x5DF1;&#x8BBE;&#x7F6E;&#x3002;</p>
<h1 id="Okapi-BM25"><a href="#Okapi-BM25" class="headerlink" title="Okapi BM25"></a>Okapi BM25</h1><p>BM25 &#x5341;&#x5206;&#x91CD;&#x89C6; term frequency &#x548C; document length&#xFF0C;&#x8FD9;&#x91CC;&#x7701;&#x7565;&#x4E86;&#x516C;&#x5F0F;&#x63A8;&#x5BFC;&#x8FC7;&#x7A0B;&#xFF0C;&#x76F4;&#x63A5;&#x5206;&#x6790;&#x53C2;&#x6570;&#x3002;<br><img src="http://7xu83c.com1.z0.glb.clouddn.com/bm25.png" alt=""></p>
<h2 id="k1"><a href="#k1" class="headerlink" title="k1"></a>k1</h2><p>&#x5982;&#x679C; k1 &#x53D6; 0&#xFF0C;&#x5219;&#x5BF9;&#x5E94; BIM &#x6A21;&#x578B;&#xFF0C;document term frequency &#x5B8C;&#x5168;&#x6CA1;&#x6709;&#x5F71;&#x54CD;&#xFF0C;rare word (idf)&#x548C; repeated query terms(query tf) dominate&#xFF1B;&#x5982;&#x679C; k1 &#x53D6;&#x8F83;&#x5927;&#x503C;&#xFF0C;&#x5BF9;&#x5E94;&#x4F7F;&#x7528;&#x539F;&#x59CB;&#x7684; term frequency&#x3002;</p>
<h2 id="b"><a href="#b" class="headerlink" title="b"></a>b</h2><p>b (0&lt;=b&lt;1) &#x51B3;&#x5B9A;&#x6587;&#x6863;&#x7684;&#x7F29;&#x653E;&#x957F;&#x5EA6;&#xFF1A;b=1 &#x8868;&#x793A;&#x57FA;&#x4E8E;&#x6587;&#x6863;&#x957F;&#x5EA6;&#x5BF9; term frequency &#x8FDB;&#x884C;&#x5B8C;&#x5168;&#x7684;&#x7F29;&#x653E;&#xFF0C;b=0 &#x8868;&#x793A;&#x5F52;&#x4E00;&#x5316;&#x65F6;&#x4E0D;&#x8003;&#x8651;&#x6587;&#x6863;&#x957F;&#x5EA6;&#x56E0;&#x7D20;&#xFF0C;&#x957F;&#x6587;&#x6863;&#x66F4;&#x6709;&#x53EF;&#x80FD;&#x6392;&#x5728;&#x524D;&#x9762;&#x3002;</p>
<h2 id="k3"><a href="#k3" class="headerlink" title="k3"></a>k3</h2><p>&#x5982;&#x679C;&#x67E5;&#x8BE2;&#x5F88;&#x957F;&#xFF0C;&#x5BF9;&#x4E8E; query term &#x4E5F;&#x53EF;&#x4EE5;&#x91C7;&#x7528;&#x7C7B;&#x4F3C;&#x7684;&#x6743;&#x91CD;&#x8BA1;&#x7B97;&#x65B9;&#x6CD5;&#x3002;&#x5BF9;&#x67E5;&#x8BE2;&#x957F;&#x5EA6;&#x6CA1;&#x6709;&#x8FDB;&#x884C;&#x5F52;&#x4E00;&#x5316;&#xFF08;&#x76F8;&#x5F53;&#x4E8E;b=0&#xFF09;&#x3002;k3=0 &#x8868;&#x793A; term frequency in query &#x5E76;&#x6CA1;&#x6709;&#x5F71;&#x54CD;&#xFF0C;(apple apple pie) &#x548C; (apple pie) &#x5B8C;&#x5168;&#x4E00;&#x6837;&#x3002;<br>&#x8FD9;&#x4E00;&#x9879;&#x901A;&#x5E38;&#x662F;&#x7531;&#x7528;&#x6237;&#x786E;&#x5B9A;&#x7684;&#xFF0C;&#x5BF9;&#x5E94;&#x7684; operator &#x662F; $WSUM</p>
<h2 id="&#x53C2;&#x6570;&#x4F18;&#x5316;"><a href="#&#x53C2;&#x6570;&#x4F18;&#x5316;" class="headerlink" title="&#x53C2;&#x6570;&#x4F18;&#x5316;"></a>&#x53C2;&#x6570;&#x4F18;&#x5316;</h2><p>&#x6574;&#x4E2A;&#x516C;&#x5F0F;&#x7684;&#x53C2;&#x6570;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x5728;&#x5355;&#x72EC;&#x7684;&#x5F00;&#x53D1;&#x6D4B;&#x8BD5;&#x96C6;&#x4E0A;&#x641C;&#x7D22;&#x6700;&#x4F18;&#x53C2;&#x6570;&#x6765;&#x6700;&#x5927;&#x5316;&#x68C0;&#x7D22;&#x6027;&#x80FD;&#xFF0C;&#x5982;&#x7F51;&#x683C;&#x641C;&#x7D22;&#x65B9;&#x6CD5;&#xFF08;grid search&#xFF09;&#x3002;&#x73B0;&#x6709;&#x7684;&#x8BD5;&#x9A8C;&#x4E2D;&#xFF0C;&#x53C2;&#x6570;&#x7684;&#x5408;&#x7406;&#x53D6;&#x503C;&#x8303;&#x56F4;&#x662F; k1,k3 &#x53D6; 1.2~2&#xFF0C;b &#x53D6; 0.75&#x3002;</p>
<p>&#x9664;&#x4E86;&#x5BF9;&#x7528;&#x6237;&#x67E5;&#x8BE2;&#x63D0;&#x4F9B; term frequency &#x8BA1;&#x7B97;&#x65B9;&#x6CD5;&#x5916;&#xFF0C;&#x5728;&#x76F8;&#x5173;&#x53CD;&#x9988;&#x4E2D;&#x8FD8;&#x53EF;&#x4EE5;&#x8003;&#x8651;&#x67E5;&#x8BE2;&#x6269;&#x5C55;&#xFF0C;&#x5728;&#x5DF2;&#x77E5;&#x7684;&#x76F8;&#x5173;&#x6587;&#x6863;&#x5229;&#x7528;&#x516C;&#x5F0F;&#x5BF9; term &#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;&#x5E76;&#x9009;&#x53D6;&#x6700;&#x9760;&#x524D;&#x7684;&#x591A;&#x4E2A; term &#x6784;&#x6210;&#x65B0;&#x7684;&#x67E5;&#x8BE2;&#xFF0C;&#x518D;&#x8FDB;&#x884C;&#x8BA1;&#x7B97;&#x3002;</p>
<h2 id="RSJ-weight"><a href="#RSJ-weight" class="headerlink" title="RSJ weight"></a>RSJ weight</h2><p>RSJ weight &#x548C; idf &#x76F8;&#x4F3C;&#xFF0C;&#x90FD; favor rare words in corpus&#xFF0C;&#x56E0;&#x4E3A; rare words &#x80FD;&#x66F4;&#x597D;&#x7684;&#x533A;&#x5206;&#x76F8;&#x5173;&#x6587;&#x6863;&#x4E0E;&#x4E0D;&#x76F8;&#x5173;&#x6587;&#x6863;&#x3002;RSJ &#x4E5F;&#x6709;&#x4E0D;&#x8DB3;&#x7684;&#x5730;&#x65B9;&#x3002;<br>&#x5982;&#x679C; df=N/2&#xFF0C;&#x90A3;&#x4E48; RSJ weight &#x5C31;&#x4F1A;&#x53D8;&#x6210; log(1)=0&#xFF0C;matching the term has no effect on the doc score<br>&#x5982;&#x679C; df&gt;N/2&#xFF0C;RSJ weight=log(fraction)&lt;0&#xFF0C;matching a frequent term lowers a document score</p>
<p>&#x901A;&#x5E38;&#x7684;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#x662F;&#xFF0C;&#x628A; RSJ weight &#x8BBE;&#x7F6E;&#x6210; $Max(0&#xFF0C;log{N-df+0.5 \over df+0.5})$&#x3002;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x7528; idf &#x516C;&#x5F0F;&#x4EE3;&#x66FF; RSJ weight&#xFF0C;&#x90A3;&#x4E48;&#x5BF9; frequent words &#x7684;&#x60E9;&#x7F5A;&#x5C31;&#x4F1A;&#x51CF;&#x5C0F;&#xFF0C;&#x5C24;&#x5176;&#x662F;&#x5BF9;&#x90A3;&#x4E9B;&#x51FA;&#x73B0;&#x4E86; N/2 &#x7684;&#x8BCD;&#x3002;</p>
<p>&#x6700;&#x8FD1;&#xFF0C;Lucene &#x8F6C;&#x53D8;&#x4E86; ranking &#x7B97;&#x6CD5;&#xFF0C;&#x53D8;&#x6210;&#x4E86; BM25 Ranker<br><img src="http://7xu83c.com1.z0.glb.clouddn.com/lucene_bm25.png" alt=""></p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p><strong>&#x4F18;&#x70B9;&#xFF1A;</strong></p>
<ul>
<li>Motivated by sound probabilistic theory</li>
<li>Parameters allow it to be tuned to new environments</li>
<li>Very effective in a wide variety of evaluations </li>
</ul>
<p><strong>&#x7F3A;&#x70B9;&#xFF1A;</strong></p>
<ul>
<li>Heuristic tf weighting and document length normalization</li>
<li>Effects of parameters not immediately obvious</li>
</ul>
<h1 id="Query-Likelihood"><a href="#Query-Likelihood" class="headerlink" title="Query Likelihood"></a>Query Likelihood</h1><p>&#x5047;&#x5B9A;&#x56DB;&#x4E2A;&#x53D8;&#x91CF;</p>
<ul>
<li>d: document</li>
<li>$\theta_d$: language model for document d</li>
<li>q: query</li>
<li>$\theta_q$: language model for query q</li>
</ul>
<p>q &#x548C; $\theta_q$&#xFF0C;d &#x548C; $\theta_d$ &#x4E0D;&#x662F;&#x540C;&#x4E00;&#x4E2A;&#x4E1C;&#x897F;&#xFF0C;&#x7136;&#x800C;&#x4E3A;&#x4E86;&#x65B9;&#x4FBF;&#x8868;&#x793A;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x7528; q &#x76F4;&#x63A5;&#x8868;&#x793A;&#xFF0C;p(d|q) &#x4EE3;&#x66FF; p(d|$\theta_q$)</p>
<p>&#x6211;&#x4EEC;&#x751F;&#x6210;&#x4E24;&#x4E2A;&#x6A21;&#x578B;&#xFF0C;&#x4E00;&#x4E2A;&#x662F; document &#x7684; language model&#xFF0C;&#x4E00;&#x4E2A;&#x662F; query &#x7684; language model&#xFF0C;&#x6709;&#x4E24;&#x79CD;&#x65B9;&#x6848;&#x6765; rank document</p>
<ul>
<li>Rank d by $p(d|\theta_q)$     (query likelihood)</li>
<li>Rank d by similarity of $\theta_d$ and $\theta_q$  (KL divergence)</li>
</ul>
<h2 id="Rank-by-P-d-q"><a href="#Rank-by-P-d-q" class="headerlink" title="Rank by P(d|q)"></a>Rank by P(d|q)</h2><p>&#x7ED9;&#x5B9A;&#x4E00;&#x4E2A; query&#xFF0C;&#x51FA;&#x73B0;&#x6587;&#x6863; d &#x7684;&#x6982;&#x7387;&#xFF0C;query &#x4E00;&#x822C;&#x5F88;&#x77ED;&#xFF0C;$\theta_q$ &#x975E;&#x5E38;&#x7684;&#x7A00;&#x758F;&#xFF0C;&#x5B83;&#x5305;&#x542B;&#x4E86;&#x5F88;&#x5C11;&#x7684; term frequency &#x4FE1;&#x606F;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x7528; Bayes rule &#x6765;&#x8F6C;&#x6362;&#x5B83;&#x3002;</p>
<p>$p(d|q)={p(q|d)p(d) \over p(q)}$<br>&#x2013;&gt; &#x4E22;&#x6389; document-independent term<br>$p(q|d)p(d)$<br>&#x2013;&gt; &#x4E22;&#x6389; constant term<br>$p(q|d)$<br>&#x2013;&gt;<br>$\prod p(q_i|d)$</p>
<p>&#x4E8E;&#x662F;&#x95EE;&#x9898;&#x5C31;&#x53D8;&#x6210;&#x4E86;&#x600E;&#x4E48;&#x4F30;&#x8BA1; $p(q_i|d)$</p>
<h3 id="p-q-i-d"><a href="#p-q-i-d" class="headerlink" title="$p(q_i|d)$"></a>$p(q_i|d)$</h3><p>&#x6211;&#x4EEC;&#x7528;&#x6700;&#x5927;&#x4F3C;&#x7136; (Maximum likelihood estimation MLE)&#x3002;<br>$$P_{MLE}(q_i|d)={tf_{q_i,d} \over length(d)}$$</p>
<p>&#x662F;&#x4E00;&#x4E2A;&#x597D;&#x7684;&#x4F30;&#x8BA1;&#x5417;&#xFF1F;<br>&#x9996;&#x5148;&#x5B83;&#x57FA;&#x4E8E;&#x4E00;&#x7BC7;&#x6587;&#x6863;&#xFF0C;&#x6240;&#x4EE5;&#x7ED3;&#x679C;&#x53EF;&#x80FD;&#x6CA1;&#x90A3;&#x4E48;&#x51C6;&#x786E;&#xFF0C;&#x5982;&#x679C; document &#x91CC;&#x6CA1;&#x6709;&#x51FA;&#x73B0; $q_i$&#xFF0C;&#x90A3;&#x4E48;&#x7ED3;&#x679C;&#x5C31;&#x662F; 0&#xFF0C;&#x8FD9;&#x76F8;&#x5F53;&#x4E8E;&#x4E00;&#x4E2A; boolean AND&#xFF0C;&#x6240;&#x4EE5; $q_i$ &#x662F;&#x5BF9; document &#x7684;&#x4E00;&#x4E2A;&#x4E0D;&#x9519;&#x7684; description&#xFF0C;&#x5373;&#x4F7F;&#x5B83;&#x4E0D;&#x5728; document &#x4E2D;&#x3002;</p>
<p>&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x8981;&#x7528; smoothing&#xFF0C;&#x6765;&#x63D0;&#x9AD8; MLE &#x7684;&#x51C6;&#x786E;&#x6027;&#xFF0C;&#x540C;&#x65F6;&#x6765;&#x9884;&#x6D4B; unobserved terms&#xFF0C;&#x5C31;&#x662F;&#x6CA1;&#x6709;&#x51FA;&#x73B0;&#x5728; document &#x91CC;&#x7684;&#x8BCD;&#x3002;</p>
<h3 id="Smoothing"><a href="#Smoothing" class="headerlink" title="Smoothing"></a>Smoothing</h3><h4 id="Jelinek-Mercer-&#x201C;Mixture-Model&#x201D;-Smoothing"><a href="#Jelinek-Mercer-&#x201C;Mixture-Model&#x201D;-Smoothing" class="headerlink" title="Jelinek-Mercer(&#x201C;Mixture Model&#x201D;) Smoothing"></a>Jelinek-Mercer(&#x201C;Mixture Model&#x201D;) Smoothing</h4><p>$$p(q_i|d)=(1-\lambda)p_{MLE}(q_i|d)+ \lambda p_{MLE}(q_i|C)$$</p>
<p>C &#x4EE3;&#x8868;&#x6574;&#x4E2A; collection&#xFF0C;$\lambda$ &#x8D8A;&#x5C0F;&#xFF0C;smoothing &#x7684;&#x4F5C;&#x7528;&#x8D8A;&#x5C0F;&#xFF0C;&#x8D8A;&#x9002;&#x5408;&#x77ED; query&#xFF0C;$\lambda$ &#x8D8A;&#x5927;&#xFF0C;smoothing &#x7684;&#x4F5C;&#x7528;&#x8D8A;&#x5927;&#xFF0C;&#x8D8A;&#x9002;&#x5408;&#x957F; query&#x3002;&#x4E3A;&#x4EC0;&#x4E48;&#xFF1F;&#x5BF9;&#x77ED;&#x6587;&#x6863;&#x800C;&#x8A00;&#xFF0C;&#x901A;&#x5E38;&#x6BCF;&#x4E00;&#x4E2A; query term &#x90FD;&#x8981; match&#xFF0C;&#x6240;&#x4EE5; idf weighting &#x5E76;&#x6CA1;&#x6709;&#x90A3;&#x4E48;&#x91CD;&#x8981;&#xFF0C;&#x8D8A;&#x5C0F;&#x7684; smoothing &#x8D8A;&#x597D;&#xFF0C;&#x800C;&#x5BF9;&#x4E8E;&#x957F; query &#x800C;&#x8A00;&#xFF0C;&#x5927;&#x90E8;&#x5206; query term &#x5FC5;&#x987B; match&#xFF0C;&#x800C;&#x53E6;&#x4E00;&#x90E8;&#x5206;&#x53EF;&#x4EE5;&#x4E0D; match&#xFF0C;&#x6240;&#x4EE5; idf weighting &#x4F1A;&#x66F4;&#x91CD;&#x8981;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x591A; smoothing &#x4E00;&#x70B9;&#x3002;</p>
<p>Jelinek-Mercer smoothing &#x7684;&#x4F5C;&#x7528;&#x4E0E; idf &#x7C7B;&#x4F3C;&#xFF0C;&#x5B83;&#x80FD;&#x591F;&#x533A;&#x5206; frequent and rare terms in collection&#x3002;</p>
<p>&#x770B;&#x4E00;&#x4E2A;&#x5177;&#x4F53;&#x4F8B;&#x5B50;&#xFF0C;&#x6709;&#x4E24;&#x4E2A; query term&#xFF0C;&#x4E00;&#x4E2A; frequent &#x4E00;&#x4E2A; rare&#x3002;</p>
<pre>p(apple|C)=0.01, p(ipod|C)=0.001</pre>

<p>&#x4E24;&#x7BC7;&#x6587;&#x6863;</p>
<pre>doc1: doclen=50,$tf\_{apple}=2$,$tf\_{ipod}=3$
doc2: doclen=50,$tf\_{apple}=3$,$tf\_{ipod}=2$</pre>

<p>&#x6CA1;&#x6709; smoothing &#x524D;&#xFF0C;&#x4E24;&#x7BC7;&#x6587;&#x6863;&#x7684; p(q|d)&#x90FD;&#x662F; 0.0024</p>
<pre>2/50 &#xFF0A; 3/50=0.0024
3/50 &#xFF0A; 2/50=0.0024</pre>

<p>JM Smooth &#x540E;&#xFF0C;&#x5047;&#x8BBE; $\lambda=0.4$</p>
<pre>doc1: p(q|d)=(0.6* 2/50 + 0.4*0.01) * (0.6 * 3/50 + 0.4*0.001)=0.001019
doc2: p(q|d)=(0.6* 3/50 + 0.4*0.01) * (0.6 * 2/50 + 0.4*0.001)=0.000976</pre>

<p>&#x8FD9;&#x5C31;&#x53D1;&#x73B0;&#xFF0C;smooth &#x53EF;&#x4EE5;&#x533A;&#x5206; frequent and rare terms in collection&#x3002;<br>&#x6211;&#x4EEC;&#x4E5F;&#x53EF;&#x4EE5;&#x8BA1;&#x7B97; doclen=50,$tf_{apple}=2$,$tf_{ipod}=2$ &#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x770B;&#x591A;&#x52A0;&#x5165;&#x4E00;&#x4E2A; apple &#x6216; ipod &#x540E; p(q|d) &#x53D1;&#x751F;&#x4E86;&#x4EC0;&#x4E48;&#xFF0C;&#x540C;&#x6837;&#x7684;&#xFF0C;unsmoothed effect &#x5BF9; frequent &#x548C; rare &#x5E76;&#x6CA1;&#x6709;&#x5DEE;&#x522B;&#xFF0C;&#x4F46;&#x662F; smooth &#x5E26;&#x6765;&#x4E86;&#x663E;&#x8457;&#x5DEE;&#x5F02;&#x3002;</p>
<p>&#x6700;&#x540E;&#x4E0A;&#x5F20;&#x63A8;&#x5BFC;&#x56FE;<br><img src="http://7xu83c.com1.z0.glb.clouddn.com/JM_smo.png" alt=""></p>
<h3 id="Bayesian-Smoothing-With-Dirichlet-Priors"><a href="#Bayesian-Smoothing-With-Dirichlet-Priors" class="headerlink" title="Bayesian Smoothing With Dirichlet Priors"></a>Bayesian Smoothing With Dirichlet Priors</h3><p>$$p(q_i|d)={tf_{q_i,d}+ \mu p_{MLE}(q_i|C) \over length(d)+ \mu }$$</p>
<p>$\mu$ &#x5728; [1000-10000] &#x533A;&#x95F4;&#x5185;&#x6BD4;&#x8F83;&#x597D;<br>Bayesian smoothing &#x662F;&#x5BF9;&#x6587;&#x6863;&#x957F;&#x5EA6;&#x7684;&#x5E73;&#x6ED1;&#xFF0C;&#x5BF9;&#x77ED;&#x6587;&#x6863;&#x800C;&#x8A00;&#xFF0C;$p(q_i|d)$ &#x7684;&#x6982;&#x7387;&#x5206;&#x5E03;&#x66F4;&#x4E0D;&#x5E73;&#x6ED1;&#xFF0C;&#x9700;&#x8981;&#x66F4;&#x5927;&#x7684; $\mu $&#xFF0C;&#x5BF9;&#x957F;&#x6587;&#x6863;&#x800C;&#x8A00;&#xFF0C;&#x6982;&#x7387;&#x5206;&#x5E03;&#x66F4;&#x5E73;&#x6ED1;&#xFF0C;&#x9700;&#x8981;&#x66F4;&#x5C0F;&#x7684; $\mu$.</p>
<h3 id="Two-Stage-Smoothing"><a href="#Two-Stage-Smoothing" class="headerlink" title="Two-Stage Smoothing"></a>Two-Stage Smoothing</h3><p>&#x53EF;&#x4EE5;&#x7ED3;&#x5408;&#x4EE5;&#x4E0A;&#x4E24;&#x79CD;&#x5E73;&#x6ED1;&#x65B9;&#x5F0F;&#xFF0C;&#x5F97;&#x5230;<br>$$p(q_i|d)=(1- \lambda ){tf_{q_i,d}+ \mu p_{MLE}(q_i|C) \over length(d)+ \mu }+ \lambda p_{MLE}(q_i|C)$$</p>
<p><img src="http://7xu83c.com1.z0.glb.clouddn.com/query_likeli.png" alt=""></p>
<h2 id="Rank-by-similarity"><a href="#Rank-by-similarity" class="headerlink" title="Rank by similarity"></a>Rank by similarity</h2><p>KL Divergence<br>Kullback-Leibler &#x8DDD;&#x79BB;&#xFF0C;&#x4E5F;&#x53EB;&#x76F8;&#x5BF9;&#x71B5;&#xFF08;Relative Entropy&#xFF09;&#x3002;&#x8BA1;&#x7B97;&#x516C;&#x5F0F;&#x5982;&#x4E0B;&#xFF1A;<br>$$KL(p||q)=\sum p(x)log{p(x) \over q(x)}$$</p>
<p>KL &#x8DDD;&#x79BB;&#x4E0D;&#x662F;&#x5BF9;&#x79F0;&#x7684;, KL(p||q)!=KL(q||p)&#xFF0C;&#x6211;&#x4EEC;&#x8981;&#x8BA1;&#x7B97;&#x7684;&#x662F; KL(q||d)&#xFF0C;query &#x548C; document &#x7684;&#x76F8;&#x5BF9;&#x71B5;&#xFF0C;&#x63A8;&#x5BFC;&#x516C;&#x5F0F;&#x5982;&#x4E0B;&#x3002;<br><img src="http://7xu83c.com1.z0.glb.clouddn.com/KL_sim.png" alt=""></p>
<h2 id="&#x6BD4;&#x8F83;"><a href="#&#x6BD4;&#x8F83;" class="headerlink" title="&#x6BD4;&#x8F83;"></a>&#x6BD4;&#x8F83;</h2><p>&#x4E24;&#x79CD;&#x65B9;&#x5F0F;&#x5176;&#x5B9E;&#x662F;&#x4E00;&#x6837;&#x7684;&#xFF0C;&#x4ED4;&#x7EC6;&#x770B;&#x516C;&#x5F0F;&#xFF01;<br>Query likelihood ranks by<br>$$p(q|d)=\prod p(q_i|d)$$</p>
<p>KL diverge ranks by<br>$$\sum p(x)log{p(x) \over q(x)}$$</p>
<h1 id="Indri"><a href="#Indri" class="headerlink" title="Indri"></a>Indri</h1><p><img src="http://7xu83c.com1.z0.glb.clouddn.com/Indri_framework.png" alt=""></p>
<p>document + smoothing parameter($\alpha$ $\beta$) -&gt; language model($\theta$) -&gt; language model vocabulary(r)</p>
<p>information needs(I)&#x7531; query(q) &#x8868;&#x793A;&#xFF0C;query &#x7531; operator(c) &#x7EC4;&#x6210;.</p>
<p><img src="http://7xu83c.com1.z0.glb.clouddn.com/Indri_operator.png" alt=""></p>
<p>&#x5728; Indri &#x4E2D;&#xFF0C;#AND &#x8BA4;&#x4E3A;&#x6240;&#x6709;&#x7684; argument &#x90FD;&#x662F;&#x72EC;&#x7ACB;&#x6982;&#x7387;&#xFF0C; #WSUM &#x8BA4;&#x4E3A;&#x6240;&#x6709;&#x7684; argument &#x90FD;&#x7528;&#x6765;&#x4F30;&#x8BA1;&#x540C;&#x4E00;&#x4E2A;&#x6982;&#x7387;&#x3002;<br>&#x5728;&#x5B9E;&#x73B0; Indri &#x7684; ranking algorithm &#x65F6;&#xFF0C;&#x8981;&#x6CE8;&#x610F;&#x7684;&#x662F;&#x6211;&#x4EEC;&#x5FC5;&#x987B;&#x5B9E;&#x73B0;&#x4E00;&#x4E2A; getDefaultScore&#xFF0C;&#x6765;&#x5904;&#x7406; tf=0 &#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x4EE5;&#x4FDD;&#x8BC1;&#x7528;&#x6237;&#x603B;&#x80FD;&#x5F97;&#x5230;&#x641C;&#x7D22;&#x7ED3;&#x679C;&#x3002;<br><img src="http://7xu83c.com1.z0.glb.clouddn.com/Indri_default.png" alt=""><br><img src="http://7xu83c.com1.z0.glb.clouddn.com/Indri_default2.png" alt=""></p>
<h1 id="Document-Priors"><a href="#Document-Priors" class="headerlink" title="Document Priors"></a>Document Priors</h1><p>Document Priors &#x6307;&#x4E0E; query &#x65E0;&#x5173;&#x7684;&#x7528;&#x6765;&#x8BC4;&#x4F30;&#x6587;&#x6863;&#x4EF7;&#x503C;&#x7684; estimates (query-independent estimates of the value of each document)&#xFF0C;&#x4E00;&#x822C;&#x662F;&#x6839;&#x636E;&#x6587;&#x6863;&#x672C;&#x8EAB;&#x7684;&#x6027;&#x8D28;&#x6765;&#x51B3;&#x5B9A;&#x7684;&#xFF0C;&#x4E3B;&#x8981;&#x7684; document priors &#x6709; spam score, PageRank, length of url &#x7B49;&#x3002;<br>&#x5728; BM25&#xFF0C;query likelihood &#x548C; KL divergence &#x4E2D;&#x7684;&#x4F7F;&#x7528;&#x3002;<br><img src="http://7xu83c.com1.z0.glb.clouddn.com/priors.png" alt=""><br>Indri &#x4E2D;&#xFF0C;prior &#x5728; Query likelihood &#x4E2D;&#x7684;&#x8868;&#x793A;&#x4E3A; #and(#prior(url) a b c)&#xFF0C;&#x5728; KL divergence &#x4E2D;&#x7684;&#x8868;&#x793A;&#x4E3A; #and(#prior(url) #and(a b c))</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Best match&amp;#x6A21;&amp;#x578B;&amp;#x8861;&amp;#x91CF;&amp;#x7684;&amp;#x662F;&amp;#x4E00;&amp;#x7BC7;&amp;#x6587;&amp;#x6863;&amp;#x4E0E; information need &amp;#x7684;&amp;#x5339;&amp;#x914D;&amp;#x7A0B;&amp;#x5EA6;&amp;#xFF0C;&amp;#x4E0E; Exact match&amp;#x6A21;&amp;#x578B;&amp;#xFF08;&amp;#x5339;&amp;#x914D;&amp;#xFF0F;&amp;#x4E0D;&amp;#x5339;&amp;#x914D;&amp;#xFF09;&amp;#x76F8;&amp;#x6BD4;&amp;#x66F4;&amp;#x6CE8;&amp;#x91CD;&amp;#x7528;&amp;#x6237;&amp;#x4F53;&amp;#x9A8C;&amp;#xFF0C;&amp;#x4E0D;&amp;#x7BA1;&amp;#x6709;&amp;#x6CA1;&amp;#x6709;&amp;#x5339;&amp;#x914D; Best match &amp;#x90FD;&amp;#x4F1A;&amp;#x8FD4;&amp;#x56DE;&amp;#x6587;&amp;#x6863;&amp;#x7ED3;&amp;#x679C;&amp;#x3002;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Search Engines" scheme="http://www.shuang0420.com/categories/Search-Engines/"/>
    
    
      <category term="NLP" scheme="http://www.shuang0420.com/tags/NLP/"/>
    
      <category term="Search Engines" scheme="http://www.shuang0420.com/tags/Search-Engines/"/>
    
  </entry>
  
  <entry>
    <title>Search Engines笔记 - Document Representations</title>
    <link href="http://www.shuang0420.com/2016/09/25/Search%20Engines%E7%AC%94%E8%AE%B0%20-%20Document%20Representation/"/>
    <id>http://www.shuang0420.com/2016/09/25/Search Engines笔记 - Document Representation/</id>
    <published>2016-09-26T00:29:18.000Z</published>
    <updated>2016-10-18T01:04:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>&#x8BB2;&#x4E24;&#x79CD; document representation &#x65B9;&#x6CD5;&#xFF0C;<strong>Controlled vocabulary index terms</strong> vs <strong>Free-text or full-text index terms</strong><br><a id="more"></a></p>
<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p><img src="http://7xu83c.com1.z0.glb.clouddn.com/Doc_repres.png" alt=""></p>
<h1 id="Controlled-vocabulary-index-terms"><a href="#Controlled-vocabulary-index-terms" class="headerlink" title="Controlled vocabulary index terms"></a>Controlled vocabulary index terms</h1><p>&#x4ECE;&#x4E00;&#x4E2A; well-defined classification scheme &#x4E2D;&#x6311;&#x53D6; term&#xFF0C;&#x6BD4;&#x8F83;&#x6709;&#x540D;&#x7684; controlled vocabularies &#x6709; dmoz&#x3002;</p>
<h2 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h2><p>broad vocabularies &#x6765;&#x63CF;&#x8FF0; general level &#x7684; topic; detailed vocabularies &#x6765;&#x63CF;&#x8FF0;&#x66F4;&#x52A0; detail &#x7684; topic&#x3002;&#x4E00;&#x4E2A; well-defined classification scheme &#x4E3B;&#x8981;&#x6709;&#x4EE5;&#x4E0B;&#x6784;&#x6210;&#xFF1A;</p>
<ul>
<li>a set of rules for identifying the subject of a document</li>
<li>a thesaurus specifying</li>
<li>a group of indexing terms</li>
<li>a set of instructions for assigning indexing terms</li>
</ul>
<h2 id="Advantages-and-Disadvantages"><a href="#Advantages-and-Disadvantages" class="headerlink" title="Advantages and Disadvantages"></a>Advantages and Disadvantages</h2><p>&#x4F18;&#x70B9;&#xFF1A;</p>
<ul>
<li>High recall</li>
<li>Supports both browsing and search</li>
<li>Popular in some fields(eg. medicine,law, patent)</li>
</ul>
<p>&#x7F3A;&#x70B9;&#xFF1A;</p>
<ul>
<li>Coverage vs detail tradeoff</li>
<li>Expensive to create and maintain</li>
<li>Difficult for people to assign to documents consistently</li>
<li>Not easy for most people to use for search</li>
</ul>
<h1 id="Free-text-or-full-text-index-terms"><a href="#Free-text-or-full-text-index-terms" class="headerlink" title="Free-text or full-text index terms"></a>Free-text or full-text index terms</h1><p>&#x4ECE;&#x539F;&#x6587;&#x6863;&#x6216;&#x8005;&#x76F8;&#x5173;&#x6587;&#x6863;&#x4E2D;&#x6311;&#x53D6; term&#x3002;Free-text or full-text indexing &#x7528;&#x7684;&#x662F; uncontrolled vocabulary&#x3002;Free-text &#x548C; full-text indexing &#x7684;&#x533A;&#x522B;&#x5728;&#x4E8E;&#x524D;&#x8005;&#x53EA;&#x7528;&#x4E86;&#x90E8;&#x5206;&#x7684; term &#x4F5C;&#x4E3A; index&#xFF0C;&#x800C;&#x540E;&#x8005;&#x7528;&#x4E86;&#x51E0;&#x4E4E;&#x6240;&#x6709;&#x7684; term &#x6765;&#x4F5C;&#x4E3A; index&#x3002;</p>
<p><strong>How to select terms?</strong></p>
<ul>
<li>selected terms &#x4EBA;&#x5DE5;&#x9009;</li>
<li>all terms &#x5C31;&#x4E0D;&#x7528;&#x8003;&#x8651;&#x9009;&#x62E9;&#x7684;&#x95EE;&#x9898;</li>
</ul>
<h2 id="Advantages-and-Disadvantages-1"><a href="#Advantages-and-Disadvantages-1" class="headerlink" title="Advantages and Disadvantages"></a>Advantages and Disadvantages</h2><p>&#x4F18;&#x70B9;&#xFF1A;</p>
<ul>
<li>Index terms guaranteed to be a good match to document contents</li>
<li>No need to learn a (possibly complex) controlled vocabulary</li>
<li>Possibly easier to automate than controlled-vocabulary</li>
</ul>
<p>&#x7F3A;&#x70B9;&#xFF1A;</p>
<ul>
<li>Greater possibility of vocabulary-mismatch problems<br>&#x6BD4;&#x5982;&#x6587;&#x6863;&#x91CC;&#x6709; automobile&#xFF0C;query &#x8BF4;&#x662F; car</li>
</ul>
<h2 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h2><blockquote>
<p>Search engine uses shallow language analysis and heuristics to convert lexical tokens (usually words) into index terms (features)</p>
</blockquote>
<p>Heuristic methods: map tokens to indexing terms</p>
<h3 id="Stopwords"><a href="#Stopwords" class="headerlink" title="Stopwords"></a>Stopwords</h3><p>&#x4E00;&#x4E9B; stopwords &#x5982; the, a &#x5E76;&#x6CA1;&#x6709;&#x5B9E;&#x9645;&#x610F;&#x4E49;&#xFF0C;&#x5220;&#x9664; stopwords &#x53EF;&#x4EE5;&#x51CF;&#x5C0F; index size&#xFF0C;&#x63D0;&#x9AD8;&#x51C6;&#x786E;&#x6027;&#x548C;&#x6548;&#x7387;&#xFF0C;&#x7136;&#x800C;&#x4E5F;&#x4F1A;&#x5E26;&#x6765;&#x4E00;&#x4E9B;&#x95EE;&#x9898;&#xFF0C;&#x5982;&#x65E0;&#x6CD5;&#x5904;&#x7406;&#x4E00;&#x4E9B; query(eg. To be or not to be, let it be)&#x3002;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#x662F;&#x6211;&#x4EEC;&#x628A; index &#x7684; stopwords &#x5B58;&#x4E0B;&#x6765;&#xFF0C;&#x5728; process query &#x7684;&#x65F6;&#x5019;&#x53BB;&#x6389; query &#x91CC;&#x7684; stopwords&#xFF0C;&#x5982;&#x679C; stopwords &#x5728; query terms &#x91CC;&#x5360;&#x6BD4;&#x5F88;&#x9AD8;&#xFF0C;&#x6216;&#x8005;&#x7528;&#x6237;&#x663E;&#x6027;&#x8981;&#x6C42;&#x7559;&#x4E0B; stopwords (eg. +the last)&#xFF0C;&#x5C31;&#x628A; stopwords &#x7559;&#x4E0B;&#x3002;</p>
<p>&#x4F18;&#x70B9;&#xFF1A;</p>
<ul>
<li>Discard meaningless word</li>
<li>Reduce index size</li>
<li>Improve accuracy</li>
</ul>
<p>&#x7F3A;&#x70B9;&#xFF1A;</p>
<ul>
<li>Make some queries difficult to satisfy</li>
</ul>
<p><strong>&#x521B;&#x5EFA; stopword list</strong><br>&#x901A;&#x8FC7; frequency analysis &#x548C; manual review &#x6765;&#x5B8C;&#x6210;&#x3002;</p>
<ul>
<li>Sort dictionary based on frequency</li>
<li>Examine the most frequent terms</li>
<li>Examine a query log to see which frequent terms might be important</li>
</ul>
<h3 id="Normalization"><a href="#Normalization" class="headerlink" title="Normalization"></a>Normalization</h3><p>&#x901A;&#x5E38;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x5BF9; token &#x8FDB;&#x884C; Normalize&#xFF0C;&#x6BD4;&#x5982;&#x5927;&#x5C0F;&#x5199;&#x8F6C;&#x6362;&#xFF0C;&#x4EE5;&#x4FBF;&#x4E0B;&#x4E00;&#x6B65;&#x5904;&#x7406;&#x3002;</p>
<p>&#x4F18;&#x70B9;:</p>
<ul>
<li>Improve recall, matches more queries</li>
</ul>
<p>&#x7F3A;&#x70B9;&#xFF1A;</p>
<ul>
<li>Apple may be used as a company name, while apple will be considered as a kind of fruit.</li>
</ul>
<h3 id="Morphological-analysis"><a href="#Morphological-analysis" class="headerlink" title="Morphological analysis"></a>Morphological analysis</h3><p>Map a token to another token (&#x201C;stemming&#x201D;,&#x201D;conflation&#x201D;) eg. images -&gt; image<br>&#x5E38;&#x7528;&#x7684; stemming algorithms &#x6709; Porter, KSTEM &#x7B49;&#xFF0C;&#x4E00;&#x822C;&#x6765;&#x8BF4;&#xFF0C;Porter &#x548C; KSTEM &#x80FD;&#x4EA7;&#x751F;&#x7684;&#x5DEE;&#x4E0D;&#x591A; accurate &#x7684; search results&#x3002;Porter &#x66F4;&#x52A0;&#x7684; aggressive&#xFF0C;&#x53EF;&#x80FD;&#x4F1A;&#x51FA;&#x73B0;&#x4E00;&#x4E9B;&#x4E0D;&#x662F;&#x8BCD;&#x7684;&#x8BCD;&#xFF0C;&#x800C; KSTEM &#x66F4;&#x52A0;&#x7684; convervative&#xFF0C;&#x4F1A;&#x4EA7;&#x751F; smaller conflation classes&#xFF0C;&#x66F4;&#x52A0;&#x50CF;&#x201D;&#x8BCD;&#x201D;&#x3002;<br>&#x5BF9;&#x4E8E; enterprise search &#x800C;&#x8A00;&#xFF0C;corpus &#x76F8;&#x5BF9;&#x8F83;&#x5C0F;&#xFF0C;recall &#x901A;&#x5E38;&#x5F88;&#x91CD;&#x8981;&#xFF0C;&#x6240;&#x4EE5;&#x7528;&#x6237;&#x4E3A;&#x4E86;&#x5F97;&#x5230;&#x66F4;&#x591A;&#x7684;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF0C;&#x5BF9; stemming mistakes &#x5BB9;&#x5FCD;&#x5EA6;&#x8F83;&#x9AD8;&#x3002;&#x800C;&#x5BF9;&#x4E8E; web search &#x800C;&#x8A00;&#xFF0C;corpus &#x5F88;&#x5927;&#xFF0C; recall &#x5E76;&#x6CA1;&#x6709;&#x90A3;&#x4E48;&#x91CD;&#x8981;&#xFF0C;precision &#x66F4;&#x91CD;&#x8981;&#xFF0C;&#x6240;&#x4EE5;&#x5BF9; stemming mistakes &#x5BB9;&#x5FCD;&#x5EA6;&#x66F4;&#x4F4E;&#x3002;Google &#x4E4B;&#x524D;&#x662F;&#x4E0D;&#x505A; stemming &#x7684;&#xFF0C;&#x73B0;&#x5728;&#x4F3C;&#x4E4E;&#x5F00;&#x59CB;&#x505A;&#x4E86;&#x3002;</p>
<p>&#x8FD9;&#x4E9B;&#x6280;&#x672F;&#x90FD;&#x662F;&#x56E0;&#x8BED;&#x8A00;&#x800C;&#x5F02;&#x7684;&#xFF0C;&#x4E0D;&#x540C;&#x7684;&#x8BED;&#x8A00;&#x6709;&#x4E0D;&#x540C;&#x7684;&#x8BED;&#x6CD5;&#x89C4;&#x5219;&#xFF0C;&#x4E0D;&#x80FD;&#x4E00;&#x6982;&#x800C;&#x8BBA;&#x3002;</p>
<p><strong>&#x4F18;&#x70B9;:</strong></p>
<ul>
<li>Conflating variations of a word<br>  more accurate representation of the document<br>  broader range of queries to (correctly) match</li>
</ul>
<p><strong>&#x7F3A;&#x70B9;&#xFF1A;</strong></p>
<ul>
<li>Effects are inconsistent</li>
<li>Terms can be grouped mistakenly(eg.Apple,Apples)</li>
<li>Sophisticated morphological analysis can be very slow</li>
</ul>
<h3 id="Phrases"><a href="#Phrases" class="headerlink" title="Phrases"></a>Phrases</h3><p>&#x5BF9; phrase &#x7684;&#x5904;&#x7406;&#xFF0C;&#x4E00;&#x822C;&#x6709;&#x4E24;&#x79CD;&#x65B9;&#x6848;&#x3002;</p>
<ol>
<li>&#x4E00;&#x79CD;&#x662F; precoordinate(1 inverted list)&#xFF0C;&#x628A; phrase &#x5B58;&#x4E3A; index&#xFF0C;&#x6BD4;&#x5982; interest rate&#xFF0C;inverted list &#x5B58;&#x6210; interest_rate&#xFF0C;&#x5728;&#x7528;&#x6237;&#x67E5;&#x8BE2;&#x65F6; interest rate &#x65F6;&#xFF0C;&#x66FF;&#x6362;&#x6210; interested_rate &#x8FDB;&#x884C; match&#x3002;&#x8FD9;&#x79CD;&#x505A;&#x6CD5;&#x8017;&#x8D39;&#x4E86;&#x5F88;&#x591A;&#x7A7A;&#x95F4;&#xFF0C;how to select phrases to be stored &#x4E5F;&#x662F;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x53EF;&#x80FD;&#x4F1A;&#x5B58;&#x5F88;&#x591A;&#x6C38;&#x8FDC;&#x4E0D;&#x4F1A;&#x88AB;&#x67E5;&#x8BE2;&#x7684; phrase&#x3002;</li>
<li>&#x53E6;&#x4E00;&#x79CD;&#x662F; postcoordinate(more than one inverted lists)&#xFF0C;&#x5BF9; query &#x8FDB;&#x884C; reformulation, &#x5982; interest rate &#x53D8;&#x6210; #NEAR/1(interest rate)&#xFF0C;&#x7136;&#x540E;&#x8FDB;&#x884C; match&#x3002;&#x8FD9;&#x79CD;&#x65B9;&#x6CD5;&#x67E5;&#x8BE2;&#x65F6;&#x4F1A; a little bit slow&#xFF0C;&#x7136;&#x800C;&#x4E0D;&#x5FC5; be smart about phrase index choosing&#x3002;</li>
</ol>
<h3 id="De-compounding"><a href="#De-compounding" class="headerlink" title="De-compounding"></a>De-compounding</h3><p>computer-virus -&gt; computer,virus</p>
<p><strong>&#x4F18;&#x70B9;</strong></p>
<ul>
<li>More accurate representation of the document</li>
<li>Broader range of queries to (correctly) match</li>
</ul>
<p><strong>&#x7F3A;&#x70B9;</strong></p>
<ul>
<li>N-grams like &#x201C;roe v. wade&#x201D; will be meaningless</li>
</ul>
<h3 id="&#x5176;&#x5B83;"><a href="#&#x5176;&#x5B83;" class="headerlink" title="&#x5176;&#x5B83;"></a>&#x5176;&#x5B83;</h3><p>Basic lexical processing</p>
<ul>
<li>tokens</li>
<li>stopwords</li>
<li>morphologial processing (&#x201C;stemming&#x201D;)</li>
</ul>
<p>Other representations</p>
<ul>
<li>phrases, citations and inlink text, paths and urls</li>
</ul>
<p>Multiple representations</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#x8BB2;&amp;#x4E24;&amp;#x79CD; document representation &amp;#x65B9;&amp;#x6CD5;&amp;#xFF0C;&lt;strong&gt;Controlled vocabulary index terms&lt;/strong&gt; vs &lt;strong&gt;Free-text or full-text index terms&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Search Engines" scheme="http://www.shuang0420.com/categories/Search-Engines/"/>
    
    
      <category term="NLP" scheme="http://www.shuang0420.com/tags/NLP/"/>
    
      <category term="Search Engines" scheme="http://www.shuang0420.com/tags/Search-Engines/"/>
    
  </entry>
  
  <entry>
    <title>Search Engines笔记 - Evaluating Search Effectiveness</title>
    <link href="http://www.shuang0420.com/2016/09/20/Search%20Engines%E7%AC%94%E8%AE%B0%20-%20Evaluating%20Search%20Effectiveness/"/>
    <id>http://www.shuang0420.com/2016/09/20/Search Engines笔记 - Evaluating Search Effectiveness/</id>
    <published>2016-09-21T01:59:21.000Z</published>
    <updated>2016-10-18T12:35:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>&#x600E;&#x6837;&#x8BC4;&#x4F30; search engine &#x7684;&#x6548;&#x679C;&#xFF1F;<br><a id="more"></a></p>
<h1 id="Methodology"><a href="#Methodology" class="headerlink" title="Methodology"></a>Methodology</h1><ul>
<li>Obtain a corpus of <strong>documents</strong></li>
<li>Obtain a set of <strong>information needs</strong></li>
<li>Obtain <strong>relevance judgments</strong></li>
<li><strong>Measure</strong> how well each method finds relevant documents</li>
<li><strong>Compare</strong> the effectiveness of different methods</li>
</ul>
<p>&#x6240;&#x4EE5;&#x6709;&#x4E94;&#x4E2A;&#x90E8;&#x5206;&#xFF1A;</p>
<ul>
<li>documents</li>
<li>information needs</li>
<li>relevance judgements</li>
<li>metrics</li>
<li>comparison of methods</li>
</ul>
<p>&#x6211;&#x4EEC;&#x9010;&#x4E00;&#x6765;&#x8BA8;&#x8BBA;</p>
<h1 id="Test-collections"><a href="#Test-collections" class="headerlink" title="Test collections"></a>Test collections</h1><p>documents, information needs, relevance judgements &#x4E09;&#x90E8;&#x5206;&#x5408;&#x8D77;&#x6765;&#x79F0;&#x4E3A;&#x4E00;&#x4E2A; test collection&#x3002;&#x5E38;&#x7528;&#x7684; test collections &#x6709;<br><img src="http://7xu83c.com1.z0.glb.clouddn.com/Test_collections.png" alt=""></p>
<p>&#x8FD9;&#x4E9B; test collections &#x90FD;&#x975E;&#x5E38;&#x5B9E;&#x7528;&#xFF0C;&#x7136;&#x800C;&#x90FD;&#x6709;&#x5404;&#x81EA;&#x7684; bias&#x3002;</p>
<h2 id="Information-Needs"><a href="#Information-Needs" class="headerlink" title="Information Needs"></a>Information Needs</h2><p>&#x4E00;&#x822C;&#x6765;&#x8BF4;&#xFF0C;&#x4E00;&#x4E2A; test collection &#x6709; 50-200 &#x4E2A; information needs&#x3002;information need &#x901A;&#x5E38;&#x7531; query &#x6765;&#x4F53;&#x73B0;&#xFF0C;&#x5F53;&#x7136;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x901A;&#x8FC7; search engines &#x4E2D;&#x83B7;&#x5F97;&#x7684; user behavior, user history, population behavior &#x6765;&#x4F53;&#x73B0;&#x3002;&#x90A3;&#x4E48;&#xFF0C;<strong>&#x600E;&#x6837;&#x83B7;&#x5F97; information needs &#x5462;&#xFF1F;</strong> &#x901A;&#x5E38;&#x6709;&#x4E09;&#x79CD;&#x529E;&#x6CD5;&#x3002;</p>
<ul>
<li>Ask &#x5411;&#x7528;&#x6237;&#x8BE2;&#x95EE;&#x4ED6;&#x4EEC;&#x8981;&#x627E;&#x4EC0;&#x4E48;&#xFF0C;&#x8FD9;&#x5F53;&#x7136;&#x662F;&#x6700;&#x4F18;&#x7684;&#x65B9;&#x6CD5;&#x3002;</li>
<li>Observe &#x901A;&#x8FC7; search log&#xFF0C;&#x6839;&#x636E; query, clicks &#x7B49;&#x6765;&#x89C2;&#x5BDF;&#x7528;&#x6237;&#x9700;&#x8981;&#x4EC0;&#x4E48;&#xFF0C;&#x7136;&#x540E;&#x6839;&#x636E;&#x89C2;&#x5BDF;&#x7ED3;&#x679C;&#x6765;&#x8FD8;&#x539F; information needs&#x3002;</li>
<li>Guess &#x6839;&#x636E;&#x6587;&#x6863;&#x6765;&#x731C;&#x8FD9;&#x4E9B;&#x6587;&#x6863;&#x80FD;&#x6EE1;&#x8DB3;&#x4EC0;&#x4E48;&#x6837;&#x7684; information needs&#xFF0C;&#x8FD9;&#x662F; weakest option&#xFF0C;&#x4F46;&#x5F80;&#x5F80;&#x4E5F;&#x662F;&#x552F;&#x4E00;&#x7684;&#x9009;&#x62E9;&#x3002;</li>
</ul>
<h2 id="Relevance-Assessment"><a href="#Relevance-Assessment" class="headerlink" title="Relevance Assessment"></a>Relevance Assessment</h2><p>&#x4EBA;&#x4E3A;&#x5224;&#x65AD;&#xFF0C;&#x901A;&#x5E38;&#x662F;&#x4E3B;&#x89C2;&#x7684;&#x3002;<br>&#x7528;&#x4E0D;&#x540C;&#x7684; techniques &#x68C0;&#x7D22;&#x51FA;&#x6587;&#x6863;&#xFF0C;&#x7136;&#x540E;&#x4EBA;&#x4E3A;&#x5224;&#x65AD;&#x6BCF;&#x4E00;&#x79CD; technique &#x4E0B;&#x7684; top n &#x7684;&#x6587;&#x6863;&#xFF0C;relevant set &#x5C31;&#x662F;&#x8FD9;&#x4E9B;&#x5224;&#x65AD;&#x4E3A;&#x76F8;&#x5173;&#x7684;&#x6587;&#x6863;&#x7684;&#x96C6;&#x5408;&#x3002;</p>
<h1 id="Metrics"><a href="#Metrics" class="headerlink" title="Metrics"></a>Metrics</h1><h2 id="Unranked-Boolean-Retrieval-Model"><a href="#Unranked-Boolean-Retrieval-Model" class="headerlink" title="Unranked Boolean Retrieval Model"></a>Unranked Boolean Retrieval Model</h2><p>P,R,P@n,F1 &#x90FD;&#x662F; set-based measures&#x3002;&#x9002;&#x5408; unranked boolean retrieval model&#xFF0C;&#x9002;&#x5408;&#x6587;&#x672C;&#x5206;&#x7C7B;&#xFF0C;&#x7136;&#x800C;&#x5BF9; ranked retrieval model &#x6CA1;&#x90A3;&#x4E48;&#x9002;&#x7528;&#x3002;</p>
<h3 id="Precision-and-Recall"><a href="#Precision-and-Recall" class="headerlink" title="Precision and Recall"></a>Precision and Recall</h3><p>$$Precision = {|Relevant \cap Retrieved| \over |Retrieved|} $$<br>$$Recall = {|Relevant \cap Retrieved| \over |Relevant|}$$</p>
<p>&#x7406;&#x8BBA;&#x4E0A;&#x6765;&#x8BB2;&#xFF0C;&#x6574;&#x4E2A;&#x6587;&#x6863;&#x96C6;&#x90FD;&#x4F1A;&#x88AB; rank&#xFF0C;&#x7136;&#x540E;&#x5BF9;&#x6574;&#x4E2A;&#x6587;&#x6863;&#x96C6;&#x6765;&#x8BA1;&#x7B97; P&amp;R&#xFF0C;&#x7136;&#x800C;&#x8FD9;&#x662F;&#x6CA1;&#x6709;&#x5FC5;&#x8981;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x5F15;&#x5165;&#x4E86; P@n &#x548C; MAP(Mean average precision)&#x3002;</p>
<h3 id="P-n"><a href="#P-n" class="headerlink" title="P@n"></a>P@n</h3><p>&#x975E;&#x5E38;&#x597D;&#x7406;&#x89E3;&#xFF0C;&#x6392;&#x540D;&#x524D; n &#x7684;&#x6587;&#x6863;&#x7684; precision&#x3002;&#x5982; P@5,P@10&#x3002;&#x5E26;&#x6765;&#x7684;&#x95EE;&#x9898;&#x662F;&#x5E76;&#x6CA1;&#x6709;&#x5BF9; query &#x7684;&#x96BE;&#x5EA6;&#x8FDB;&#x884C; normalize&#x3002;&#x7B80;&#x5355;&#x7684; query &#x53EF;&#x80FD;&#x4F1A;&#x6709;&#x66F4;&#x591A;&#x7684;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF0C;&#x96BE;&#x7684; query &#x80FD;&#x5F97;&#x5230;&#x7684;&#x76F8;&#x5173;&#x6587;&#x6863;&#x66F4;&#x5C11;&#x3002;&#x6240;&#x4EE5; P@n &#x7684; stability &#x4E0D;&#x5982; MAP.</p>
<h3 id="F-Measure"><a href="#F-Measure" class="headerlink" title="F-Measure"></a>F-Measure</h3><p>&#x5BF9; precision &#x548C; recall &#x8FDB;&#x884C; weight<br>$$F = {1 \over \alpha {1 \over P} + (1- \alpha) {1 \over R}}$$<br>&#x5982;&#x679C; precision &#x548C; recall &#x7684;&#x6743;&#x91CD;&#x76F8;&#x540C;&#xFF0C;&#x90A3;&#x5C31;&#x662F; $F={2PR \over P+R}$</p>
<h3 id="Average-Results"><a href="#Average-Results" class="headerlink" title="Average Results"></a>Average Results</h3><h4 id="Micro-average-across-documents"><a href="#Micro-average-across-documents" class="headerlink" title="Micro average across documents"></a>Micro average across documents</h4><p>&#x6BCF;&#x7BC7;&#x6587;&#x6863;&#x7684;&#x91CD;&#x8981;&#x6027;&#x76F8;&#x540C;&#xFF0C;queries with many relevant documents dominate&#xFF0C;machine learning &#x5E38;&#x7528;&#xFF0C; IR &#x4E0D;&#x5E38;&#x7528;&#xFF0C;&#x56E0;&#x4E3A; class distribution &#x66F4;&#x52A0;&#x7684; skewed&#x3002;</p>
<h4 id="Macro-average-across-queries"><a href="#Macro-average-across-queries" class="headerlink" title="Macro average across queries"></a>Macro average across queries</h4><p>&#x6BCF;&#x4E2A; query &#x7684;&#x91CD;&#x8981;&#x6027;&#x76F8;&#x540C;&#xFF0C;ad-hoc retrieval &#x6700;&#x5E38;&#x7528;&#x7684; averaging method&#x3002;</p>
<h2 id="Ranked-Retrieval"><a href="#Ranked-Retrieval" class="headerlink" title="Ranked Retrieval"></a>Ranked Retrieval</h2><ul>
<li>Average Precision (AP)</li>
<li>Mean Average Precision (MAP)</li>
<li>Interpolated Average Precision</li>
</ul>
<h3 id="AP-and-MAP"><a href="#AP-and-MAP" class="headerlink" title="AP and MAP"></a>AP and MAP</h3><p>MAP &#x662F; single-value&#x3002;<br>AP measures P at each relevant document for the ith query and average the measurements for the ith query&#x3002;&#x5BF9;&#x5355;&#x4E2A;&#x9700;&#x6C42;&#xFF0C;&#x6C42;&#x8FD4;&#x56DE;&#x7ED3;&#x679C;&#x4E2D;&#x6BCF;&#x7BC7;&#x76F8;&#x5173;&#x6587;&#x6863;&#x4F4D;&#x7F6E;&#x4E0A;&#x7684; precision &#x7684;&#x5E73;&#x5747;&#x503C;&#x3002;&#x76F8;&#x5F53;&#x4E8E;&#x67D0;&#x4E2A; query &#x4E0B;&#x5BF9;&#x5E94;&#x7684;&#x591A;&#x6761; precision-recall curve &#x4E0B;&#x9762;&#x79EF;&#x7684;&#x5E73;&#x5747;&#x503C;&#x3002;<br>&#x5BF9;&#x6240;&#x6709;&#x9700;&#x6C42;&#x5E73;&#x5747;&#x5C31;&#x80FD;&#x5F97;&#x5230; MAP&#x3002;MAP measures the mean of the Average Precision values for all queries&#x3002;MAP &#x53EF;&#x4EE5;&#x5728;&#x6BCF;&#x4E2A; recall &#x6C34;&#x5E73;&#x4E0A;&#x63D0;&#x4F9B;&#x5355;&#x6307;&#x6807;&#x7ED3;&#x679C;&#xFF0C;&#x5177;&#x6709;&#x975E;&#x5E38;&#x597D;&#x7684; discrimination &#x548C; stability&#x3002;MAP &#x4E0D;&#x9700;&#x8981;&#x9009;&#x62E9;&#x56FA;&#x5B9A;&#x7684; recall &#x6C34;&#x5E73;&#xFF0C;&#x4E5F;&#x4E0D;&#x9700;&#x8981;&#x63D2;&#x503C;&#xFF0C;&#x5373;&#x4F7F;&#x6709;&#x4E9B; query &#x7684;&#x76F8;&#x5173;&#x6587;&#x6863;&#x6570;&#x5F88;&#x591A;&#x800C;&#x6709;&#x4E9B;&#x5F88;&#x5C11;&#xFF0C;&#x6700;&#x7EC8;&#x7684; MAP &#x663E;&#x793A;&#x6BCF;&#x4E2A; query &#x7684;&#x4F5C;&#x7528;&#x5374;&#x662F;&#x76F8;&#x7B49;&#x7684;&#x3002;&#x5355;&#x4E2A;&#x7CFB;&#x7EDF;&#x5728;&#x4E0D;&#x540C;information needs &#x7684; MAP&#x503C;&#x76F8;&#x5DEE;&#x8F83;&#x5927;&#xFF08;0.1-0.7&#xFF09;&#xFF0C;&#x4E0D;&#x540C;&#x7CFB;&#x7EDF;&#x5728;&#x540C;&#x4E00; information need &#x4E0A;&#x7684; MAP &#x5DEE;&#x5F02;&#x53CD;&#x800C;&#x76F8;&#x5BF9;&#x8981;&#x5C0F;&#x4E00;&#x4E9B;&#x3002;</p>
<p>&#x4E00;&#x9053;&#x9898;&#x89E3;&#x51B3;&#x3002;<br><img src="http://7xu83c.com1.z0.glb.clouddn.com/AP&amp;MAP.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">AP1=(1+1+0.75+0.67)/4=0.855</div><div class="line">AP2=(1+0.84+0.5)/5=0.468</div><div class="line">MAP=(0.468+0.855)/2=0.6615</div></pre></td></tr></table></figure></p>
<p>&#x770B;&#x4E00;&#x4E0B; AP &#x548C; MAP &#x7684;&#x5206;&#x5E03;&#x3002;<br><img src="http://7xu83c.com1.z0.glb.clouddn.com/AP_MAP_dis.png" alt=""></p>
<p>MAP &#x7528;&#x7684;&#x975E;&#x5E38;&#x591A;&#xFF0C;&#x4E00;&#x65B9;&#x9762;&#x662F;&#x56E0;&#x4E3A;&#x5B83;&#x80FD;&#x5F88;&#x597D;&#x7684;&#x4F53;&#x73B0;&#x7CFB;&#x7EDF;&#x7684;&#x4F18;&#x52A3;&#xFF0C;&#x4E00;&#x822C;&#x6765;&#x8BF4;&#xFF0C;&#x5982;&#x679C; MAP(A)&gt;MAP(B)&#xFF0C;&#x90A3;&#x4E48; A&#x7CFB;&#x7EDF;&#x66F4;&#x6709;&#x53EF;&#x80FD;&#x6BD4; B&#x7CFB;&#x7EDF;&#x597D;&#xFF0C;&#x50CF; P@n &#x7B49;&#x5176;&#x5B83; metrics &#x5C31;&#x4E0D;&#x80FD;&#x5982;&#x6B64;&#x80AF;&#x5B9A;&#x3002;&#x53E6;&#x5916;&#xFF0C;MAP &#x8BA1;&#x7B97;&#x5F88;&#x5FEB;&#xFF0C;&#x548C; NDCG &#x76F8;&#x6BD4;&#x3002;</p>
<h3 id="MRR-Mean-Reciprocal-Rank"><a href="#MRR-Mean-Reciprocal-Rank" class="headerlink" title="MRR (Mean Reciprocal Rank)"></a>MRR (Mean Reciprocal Rank)</h3><p>&#x6709;&#x65F6;&#x5019;&#x6211;&#x4EEC;&#x66F4;&#x5173;&#x5FC3;&#x7B2C;&#x4E00;&#x7BC7;&#x76F8;&#x5173;&#x6587;&#x6863;&#x3002;&#x800C;&#x6392;&#x540D;&#x8F83;&#x4F4E;&#x7684;&#x6587;&#x6863;&#x901A;&#x5E38;&#x4E0D;&#x4F1A;&#x88AB;&#x6D4F;&#x89C8;&#x5230;&#x3002;<br>Reciprocal rank &#x6307;&#x7684;&#x662F; 1/rank of first relevant document&#x3002;&#x6240;&#x4EE5; MRR &#x5C31;&#x662F; average of reciprocal rank values across a set of queries&#x3002;</p>
<p><img src="http://7xu83c.com1.z0.glb.clouddn.com/metrics_reconsider.png" alt=""></p>
<p>&#x9002;&#x7528;&#x573A;&#x666F;&#x4E3E;&#x4F8B;&#xFF1A;&#x67D0;&#x4E2A;&#x5B66;&#x751F;&#x60F3;&#x627E; cmu 11642 &#x7684;&#x8BFE;&#x7A0B;&#x4E3B;&#x9875;&#x3002;</p>
<h3 id="NDCG-Normalized-Discounted-Cumulative-Gain"><a href="#NDCG-Normalized-Discounted-Cumulative-Gain" class="headerlink" title="NDCG (Normalized Discounted Cumulative Gain)"></a>NDCG (Normalized Discounted Cumulative Gain)</h3><p>Web search engines &#x4E2D;&#x5E38;&#x7528;&#x7684;&#x65B9;&#x6CD5;&#x3002;multi-valued relevance assessment&#xFF0C;&#x8BC4;&#x4F30; ranking &#x7684;&#x8D28;&#x91CF;&#x3002;<br>$$NDCG@k = Z_k \sum_{i=1}^k{2^{R_i}-1 \over log(1+i)}$$</p>
<ul>
<li>$R_i$ &#x6307;&#x6392;&#x540D;&#x5728; i &#x7684;&#x76F8;&#x5173;&#x6587;&#x6863;&#x7684; relevance &#x5206;&#x6570;</li>
<li>$Z_k$ normalizes so that NDCG=1 at k for a perfect ranking&#x3002;<br>$Z_k$ = 1/DCG@k for the &#x201C;ideal&#x201D; ranking<br>Required to combine scores for different queries</li>
</ul>
<p>&#x9002;&#x7528;&#x573A;&#x666F;&#xFF1A;&#x53EF;&#x80FD;&#x4F1A;&#x6709;&#x591A;&#x4E2A;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF0C;probability that a person views a page depends upon its rank. eg. &#x987E;&#x5BA2;&#x60F3;&#x8981;&#x5728;&#x7F51;&#x4E0A;&#x4E70;&#x4E00;&#x53F0;&#x7535;&#x8111;&#xFF0C;&#x9700;&#x8981;&#x6BD4;&#x8F83;&#x4E0D;&#x540C;&#x7684;&#x578B;&#x53F7;&#x3001;&#x5916;&#x89C2;&#x3001;&#x4EF7;&#x94B1;&#x3001;&#x6392;&#x540D;&#x3002;</p>
<p><img src="http://7xu83c.com1.z0.glb.clouddn.com/NCDG.png" alt=""></p>
<h3 id="RBP-Rank-Biased-Precision"><a href="#RBP-Rank-Biased-Precision" class="headerlink" title="RBP (Rank-Biased Precision)"></a>RBP (Rank-Biased Precision)</h3><p>&#x975E;&#x5E38;&#x7B80;&#x5355;&#x7684; model&#xFF0C;&#x5BF9;&#x7528;&#x6237;&#x884C;&#x4E3A;&#x8FDB;&#x884C;&#x5EFA;&#x6A21;&#x3002;multi-valued relevance assessments&#xFF0C;&#x7528;user&#x2019;s persistence &#x6765;&#x8BC4;&#x4F30; rank &#x8D28;&#x91CF;&#x3002;<br>$$RBP = (1-p) \sum_{i=1}^n R_ip^{i-1}$$</p>
<ul>
<li>p: a parameter that models the user&#x2019;s persistence</li>
<li>n: Number of documents</li>
<li>Ri: The relevance of the document at rank I</li>
</ul>
<p><img src="http://7xu83c.com1.z0.glb.clouddn.com/RBP%20.png" alt=""></p>
<h1 id="trec-eval"><a href="#trec-eval" class="headerlink" title="trec-eval"></a>trec-eval</h1><p>ad-hoc retrieval &#x7684;&#x6807;&#x51C6;&#x7684;&#x8BC4;&#x4F30;&#x5DE5;&#x5177;&#x3002;<br><a href="http://boston.lti.cs.cmu.edu/classes/11-642/HW/HTS/trec_eval.pdf" target="_blank" rel="external">&#x683C;&#x5F0F;</a></p>
<p>Precision-recall curve &#x5448;&#x73B0;&#x660E;&#x663E;&#x7684;&#x952F;&#x9F7F;&#x5F62;&#x72B6;&#xFF0C;&#x56E0;&#x4E3A;&#x5982;&#x679C;&#x8FD4;&#x56DE;&#x7684;&#x7B2C; k+1 &#x7BC7;&#x6587;&#x6863;&#x4E0D;&#x76F8;&#x5173;&#xFF0C;&#x90A3;&#x4E48;&#x5728; k+1 &#x7BC7;&#x6587;&#x6863;&#x4F4D;&#x7F6E;&#x4E0A;&#x7684; recall &#x548C;&#x524D; k &#x7BC7;&#x6587;&#x6863;&#x4F4D;&#x7F6E;&#x4E0A;&#x7684; recall &#x4E00;&#x6837;&#xFF0C;&#x4F46;&#x662F; precision &#x663E;&#x7136;&#x4E0B;&#x964D;&#x3002;&#x53CD;&#x4E4B;&#xFF0C;&#x5982;&#x679C;&#x8FD4;&#x56DE;&#x7684;&#x7B2C; k+1 &#x7BC7;&#x6587;&#x6863;&#x76F8;&#x5173;&#xFF0C;&#x90A3;&#x4E48; recall &#x548C; precision &#x90FD;&#x4F1A;&#x589E;&#x5927;&#xFF0C;&#x8FD9;&#x65F6;&#x5019;&#x66F2;&#x7EBF;&#x4F1A;&#x5448;&#x952F;&#x9F7F;&#x5F62;&#x4E0A;&#x5347;&#x3002;&#x5C06;&#x8FD9;&#x4E9B;&#x7EC6;&#x5FAE;&#x7684;&#x53D8;&#x5316;&#x53BB;&#x6389;&#x901A;&#x5E38;&#x91C7;&#x7528;&#x5DEE;&#x503C;</p>
<h1 id="Build-your-own-test-collection"><a href="#Build-your-own-test-collection" class="headerlink" title="Build your own test collection"></a>Build your own test collection</h1><ol>
<li>Collect a large set of representative documents</li>
<li>Collect a set of representative information needs (at least 25, preferably 50-100)</li>
<li>Translate each information need into a set of queries (at least several queries per information need)</li>
<li>Run each query against each search engine (save top N documents, at least 50 docs per query)</li>
<li>Pool all results for an information needs (different queries,different engines; sort them into random order)</li>
<li>Have a person judge each document (one person judge all documents for one information need)</li>
</ol>
<h1 id="Evaluation-in-a-Dynamic-Environment"><a href="#Evaluation-in-a-Dynamic-Environment" class="headerlink" title="Evaluation in a Dynamic Environment"></a>Evaluation in a Dynamic Environment</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#x600E;&amp;#x6837;&amp;#x8BC4;&amp;#x4F30; search engine &amp;#x7684;&amp;#x6548;&amp;#x679C;&amp;#xFF1F;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Search Engines" scheme="http://www.shuang0420.com/categories/Search-Engines/"/>
    
    
      <category term="NLP" scheme="http://www.shuang0420.com/tags/NLP/"/>
    
      <category term="Search Engines" scheme="http://www.shuang0420.com/tags/Search-Engines/"/>
    
  </entry>
  
  <entry>
    <title>数据结构和算法 -- 搜索</title>
    <link href="http://www.shuang0420.com/2016/09/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%20--%20%E6%90%9C%E7%B4%A2/"/>
    <id>http://www.shuang0420.com/2016/09/20/数据结构和算法 -- 搜索/</id>
    <published>2016-09-20T23:55:12.000Z</published>
    <updated>2016-09-20T22:00:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="&#x4E8C;&#x5206;&#x67E5;&#x627E;-Binary-search"><a href="#&#x4E8C;&#x5206;&#x67E5;&#x627E;-Binary-search" class="headerlink" title="&#x4E8C;&#x5206;&#x67E5;&#x627E; (Binary search)"></a>&#x4E8C;&#x5206;&#x67E5;&#x627E; (Binary search)</h1><h2 id="&#x6982;&#x5FF5;"><a href="#&#x6982;&#x5FF5;" class="headerlink" title="&#x6982;&#x5FF5;"></a>&#x6982;&#x5FF5;</h2><p>&#x5BF9;&#x4E8E;&#x5DF2;&#x6392;&#x5E8F;&#x7684;&#x6709;&#x5E8F;&#x7EBF;&#x6027;&#x5BB9;&#x5668;&#x800C;&#x8A00;(&#x6BD4;&#x5982;&#x6570;&#x7EC4;&#xFF0C;vector)&#xFF0C;&#x4E8C;&#x5206;&#x67E5;&#x627E;(Binary search)&#x51E0;&#x4E4E;&#x603B;&#x662F;&#x6700;&#x4F18;&#x7684;&#x641C;&#x7D22;&#x65B9;&#x6848;&#x3002;&#x4E8C;&#x5206;&#x67E5;&#x627E;&#x5C06;&#x5BB9;&#x5668;&#x7B49;&#x5206;&#x4E3A;&#x4E24;&#x90E8;&#x5206;&#xFF0C;&#x518D;&#x6839;&#x636E;&#x4E2D;&#x95F4;&#x8282;&#x70B9;&#x4E0E;&#x5F85;&#x641C;&#x7D22;&#x6570;&#x636E;&#x7684;&#x76F8;&#x5BF9;&#x5927;&#x5C0F;&#x5173;&#x7CFB;&#xFF0C;&#x8FDB;&#x4E00;&#x6B65;&#x641C;&#x7D22;&#x5176;&#x4E2D;&#x67D0;&#x4E00;&#x90E8;&#x5206;&#x3002;&#x4E8C;&#x5206;&#x67E5;&#x627E;&#x7684;&#x7B97;&#x6CD5;&#x590D;&#x6742;&#x5EA6;&#x4E3A;O(logn)&#x3002;<br>&#x5BF9;&#x4E8E;&#x5C40;&#x90E8;&#x6709;&#x5E8F;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x6839;&#x636E;&#x5176;&#x5C40;&#x90E8;&#x6709;&#x5E8F;&#x7684;&#x7279;&#x6027;&#xFF0C;&#x5C3D;&#x53EF;&#x80FD;&#x5730;&#x5229;&#x7528;&#x903C;&#x8FD1;&#x3001;&#x526A;&#x679D;&#xFF0C;&#x4F7F;&#x7528;&#x4E8C;&#x5206;&#x67E5;&#x627E;&#x7684;&#x53D8;&#x79CD;&#x8FDB;&#x884C;&#x641C;&#x7D22;&#x3002;</p>
<p>&#x4E8C;&#x5206;&#x5BFB;&#x627E;&#x8981;&#x6CE8;&#x610F;&#x7684;&#x95EE;&#x9898;&#x662F;&#xFF1A;</p>
<ul>
<li>Which way should middle pointer go next</li>
<li>Avoid infinite loop in the code</li>
</ul>
<h2 id="&#x7B97;&#x6CD5;"><a href="#&#x7B97;&#x6CD5;" class="headerlink" title="&#x7B97;&#x6CD5;"></a>&#x7B97;&#x6CD5;</h2><blockquote>
<p>Compare the number in the middle of the array with x. If it is equal, we are done. If the number is greater, we know to look in the second half of the array. If it is smaller, we know to look in the first half. We can repeat the search on the appropriate half of the array by comparing the middle element of that array with x, once again narrowing our search by a factor of 2. We repeat this process until we find x. This algorithm takes O(log n) time.</p>
</blockquote>
<h2 id="Complexity"><a href="#Complexity" class="headerlink" title="Complexity"></a>Complexity</h2><p>Time compexity: O(logN)</p>
<h2 id="&#x6A21;&#x677F;"><a href="#&#x6A21;&#x677F;" class="headerlink" title="&#x6A21;&#x677F;"></a>&#x6A21;&#x677F;</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">int binarySearch(int *array, int left, int right, int value) {</div><div class="line">    if (left &gt; right) {</div><div class="line">        // value not found</div><div class="line">        return -1;</div><div class="line">    }</div><div class="line">    int mid = right - (right - left) / 2;</div><div class="line">    if (array[mid] == value) {</div><div class="line">        return mid;</div><div class="line">    } else if (array[mid] &lt; value) {</div><div class="line">        return binarySearch(array, mid + 1, right, value);</div><div class="line">    } else {</div><div class="line">        return binarySearch(array, left, mid - 1, value);</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>
<h2 id="&#x4F8B;&#x9898;"><a href="#&#x4F8B;&#x9898;" class="headerlink" title="&#x4F8B;&#x9898;"></a>&#x4F8B;&#x9898;</h2><h3 id="Find-first-bad-version"><a href="#Find-first-bad-version" class="headerlink" title="Find first bad version"></a>Find first bad version</h3><blockquote>
<p>You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.<br>Suppose you have n versions [1, 2, &#x2026;, n] and you want to find out the first bad one, which causes all the following ones to be bad.<br>You are given an API bool isBadVersion(version) which will return whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"># The isBadVersion API is already defined for you.</div><div class="line"># @param version, an integer</div><div class="line"># @return a bool</div><div class="line"># def isBadVersion(version):</div><div class="line"></div><div class="line">class Solution(object):</div><div class="line">    def firstBadVersion(self, n):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type n: int</div><div class="line">        :rtype: int</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        if n==0:</div><div class="line">            return 0</div><div class="line">        start = 0</div><div class="line">        end = n</div><div class="line">        while start &lt; end-1:</div><div class="line">            mid = (start + end)/2</div><div class="line">            if isBadVersion(mid):</div><div class="line">                end = mid</div><div class="line">            else:</div><div class="line">                start = mid</div><div class="line">        return start if isBadVersion(start) else end</div></pre></td></tr></table></figure>
<h3 id="Search-a-2D-Matrix"><a href="#Search-a-2D-Matrix" class="headerlink" title="Search a 2D Matrix"></a>Search a 2D Matrix</h3><blockquote>
<p>Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:<br>Integers in each row are sorted from left to right.<br>The first integer of each row is greater than the last integer of the previous row.<br>For example,<br>Consider the following matrix:<br>[<br>  [1,   3,  5,  7],<br>  [10, 11, 16, 20],<br>  [23, 30, 34, 50]<br>]<br>Given target = 3, return true.</p>
</blockquote>
<p>&#x628A;&#x8FD9;&#x4E2A; 2D &#x6570;&#x7EC4;&#x62C9;&#x5E73;&#x6210; 1D &#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x5355;&#x8C03;&#x9012;&#x589E;&#x7684;(sorted)&#x7684;&#x6570;&#x7EC4;&#xFF0C;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x4E0B;&#x627E;&#x4E00;&#x4E2A;&#x6570;&#x7528; binary search &#x5C31;&#x597D;&#xFF0C;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x662F; O(log(mn))=O(logN)&#xFF0C;&#x8981;&#x6CE8;&#x610F;&#x7684;&#x5C31;&#x662F; index &#x4E4B;&#x95F4;&#x600E;&#x4E48;&#x8F6C;&#x6362;&#xFF0C;&#x89C2;&#x5BDF;&#x53D1;&#x73B0;&#xFF1A;<br>2D -&gt; 1D  (i,j) -&gt; i*n+j<br>1D -&gt; 2D  index -&gt; (index/n,index%n)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">class Solution(object):</div><div class="line">    def searchMatrix(self, matrix, target):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type matrix: List[List[int]]</div><div class="line">        :type target: int</div><div class="line">        :rtype: bool</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        if not matrix:</div><div class="line">            return False</div><div class="line"></div><div class="line">        m = len(matrix) # row</div><div class="line">        n = len(matrix[0]) # column</div><div class="line"></div><div class="line">        start = 0</div><div class="line">        end = m*n-1</div><div class="line">        while start &lt;= end:</div><div class="line">            mid = (start+end)/2</div><div class="line">            if matrix[mid/n][mid%n] == target:</div><div class="line">                return True</div><div class="line">            if matrix[mid/n][mid%n] &gt; target:</div><div class="line">                end = mid-1</div><div class="line">            else:</div><div class="line">                start = mid+1</div><div class="line">        return False</div></pre></td></tr></table></figure></p>
<h3 id="Search-a-2D-Matrix-II"><a href="#Search-a-2D-Matrix-II" class="headerlink" title="Search a 2D Matrix II"></a>Search a 2D Matrix II</h3><p>&#x95EE;&#x9898;&#x518D;&#x53D8;&#x96BE;&#x4E00;&#x70B9;&#x3002;</p>
<blockquote>
<p>Search a 2D Matrix II  QuestionEditorial Solution  My Submissions<br>Total Accepted: 50080<br>Total Submissions: 136871<br>Difficulty: Medium<br>Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:<br>Integers in each row are sorted in ascending from left to right.<br>Integers in each column are sorted in ascending from top to bottom.<br>For example,<br>Consider the following matrix:<br>[<br>  [1,   4,  7, 11, 15],<br>  [2,   5,  8, 12, 19],<br>  [3,   6,  9, 16, 22],<br>  [10, 13, 14, 17, 24],<br>  [18, 21, 23, 26, 30]<br>]<br>Given target = 5, return true.<br>Given target = 20, return false.</p>
</blockquote>
<p>&#x5F53;&#x7136;&#x8FD8;&#x662F;&#x53EF;&#x4EE5;&#x7528; binary search &#x505A;&#xFF0C;&#x9700;&#x8981;&#x975E;&#x5E38;&#x4ED4;&#x7EC6;&#x3002;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6; max(O(mlogn,nlogm)),&#x7531; T(n)=2T(n/2)+cn &#x63A8;&#x5BFC;&#x800C;&#x6765;<br><img src="http://7xu83c.com1.z0.glb.clouddn.com/2D-matrix.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">class Solution(object):</div><div class="line">    def searchMatrix(self, matrix, target):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type matrix: List[List[int]]</div><div class="line">        :type target: int</div><div class="line">        :rtype: bool</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        if not matrix:</div><div class="line">            return False</div><div class="line">        return self.helper(matrix,target,0,0,len(matrix)-1,len(matrix[0])-1)</div><div class="line"></div><div class="line"></div><div class="line">    def helper(self,matrix,target,startX,startY,endX,endY):</div><div class="line">        if startX&gt;endX or startY&gt;endY:</div><div class="line">            return False</div><div class="line">        midX=(startX+endX)/2</div><div class="line">        midY=(startY+endY)/2</div><div class="line">        mid = matrix[midX][midY]</div><div class="line">        if mid == target:</div><div class="line">            return True</div><div class="line">        if mid &gt; target:</div><div class="line">            return self.helper(matrix,target,startX,midY,midX-1,endY) or self.helper(matrix,target,startX,startY,endX,midY-1)</div><div class="line">        else:</div><div class="line">            return self.helper(matrix,target,midX+1,startY,endX,midY) or self.helper(matrix,target,startX,midY+1,endX,endY)</div><div class="line">        return False</div></pre></td></tr></table></figure></p>
<p>&#x6216;&#x8005;&#xFF0C;&#x4E0D;&#x7528; binary search&#xFF0C;&#x7528;&#x6BD4;&#x8F83;&#x901A;&#x7528;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x5F88;&#x597D;&#x7406;&#x89E3;&#xFF0C;&#x4ECE; top rightmost &#x5F00;&#x59CB;&#xFF0C;&#x6BD4;&#x8F83;&#x4E0E; target &#x7684;&#x5927;&#x5C0F;&#xFF0C;if curr&gt;target&#xFF0C;&#x5F80;&#x5DE6;&#xFF0C;if curr<target，往下。要注意的是确定 ending="" case,="" j<0="" or="" i="">len(matrix)-1&#x3002;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">class Solution(object):</div><div class="line">    def searchMatrix(self, matrix, target):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type matrix: List[List[int]]</div><div class="line">        :type target: int</div><div class="line">        :rtype: bool</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        if not matrix:</div><div class="line">            return False</div><div class="line">        i,j = 0,len(matrix[0])-1</div><div class="line">        while True:</div><div class="line">            if j&lt;0 or i&gt;len(matrix)-1:</div><div class="line">                return False</div><div class="line">            curr = matrix[i][j]</div><div class="line">            if curr == target:</div><div class="line">                return True</div><div class="line">            if curr &gt; target:</div><div class="line">                j -= 1</div><div class="line">            else:</div><div class="line">                i += 1</div></pre></td></tr></table></figure></target，往下。要注意的是确定></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;&amp;#x4E8C;&amp;#x5206;&amp;#x67E5;&amp;#x627E;-Binary-search&quot;&gt;&lt;a href=&quot;#&amp;#x4E8C;&amp;#x5206;&amp;#x67E5;&amp;#x627E;-Binary-search&quot; class=&quot;headerlink&quot; title=&quot;
    
    </summary>
    
      <category term="数据结构和算法" scheme="http://www.shuang0420.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="树" scheme="http://www.shuang0420.com/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>数据结构和算法 -- 数组</title>
    <link href="http://www.shuang0420.com/2016/09/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%20--%20%E6%95%B0%E7%BB%84/"/>
    <id>http://www.shuang0420.com/2016/09/19/数据结构和算法 -- 数组/</id>
    <published>2016-09-19T13:55:12.000Z</published>
    <updated>2016-10-12T16:18:46.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h1 id="&#x7B56;&#x7565;-amp-&#x6CE8;&#x610F;&#x70B9;"><a href="#&#x7B56;&#x7565;-amp-&#x6CE8;&#x610F;&#x70B9;" class="headerlink" title="&#x7B56;&#x7565; &amp; &#x6CE8;&#x610F;&#x70B9;"></a>&#x7B56;&#x7565; &amp; &#x6CE8;&#x610F;&#x70B9;</h1><h1 id="&#x4F8B;&#x9898;"><a href="#&#x4F8B;&#x9898;" class="headerlink" title="&#x4F8B;&#x9898;"></a>&#x4F8B;&#x9898;</h1><h2 id="346-Moving-Average-from-Data-Stream"><a href="#346-Moving-Average-from-Data-Stream" class="headerlink" title="346. Moving Average from Data Stream"></a>346. Moving Average from Data Stream</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Given a stream of integers and a window size, calculate the moving average of all integers in the sliding window.<br>For example,<br>MovingAverage m = new MovingAverage(3);<br>m.next(1) = 1<br>m.next(10) = (1 + 10) / 2<br>m.next(3) = (1 + 10 + 3) / 3<br>m.next(5) = (10 + 3 + 5) / 3</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&apos;&apos;&apos;</div><div class="line">Solution:</div><div class="line">- maintain a deque of at most &apos;size&apos; length, for each next call, enque the number, calculate average, check if the length of deque is 3, if it is, popleft, and finally return the average. Time complexity O(n); Space complexity O(size)</div><div class="line"></div><div class="line">Follow-up:</div><div class="line">- make it O(1), save the sum each time, that is for each next call, enque the number, add to global sum, calculate average, check if the length of deque is 3, if it is, pop left, minus popped number from sum, and finally return the average.</div><div class="line">&apos;&apos;&apos;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">from collections import deque</div><div class="line">class MovingAverage(object):</div><div class="line"></div><div class="line">    def __init__(self, size):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        Initialize your data structure here.</div><div class="line">        :type size: int</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        self.q=deque()</div><div class="line">        self.size=size</div><div class="line">        self.sum=0</div><div class="line"></div><div class="line">    def next(self, val):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type val: int</div><div class="line">        :rtype: float</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        self.q.append(val)</div><div class="line">        self.sum+=val</div><div class="line">        avg=self.sum/float(len(self.q))</div><div class="line">        if len(self.q)==self.size:</div><div class="line">            self.sum-=self.q.popleft()</div><div class="line">        return avg</div><div class="line"></div><div class="line"># Your MovingAverage object will be instantiated and called as such:</div><div class="line"># obj = MovingAverage(size)</div><div class="line"># param_1 = obj.next(val)</div></pre></td></tr></table></figure>
<h2 id="75-Sort-Colors"><a href="#75-Sort-Colors" class="headerlink" title="75. Sort Colors"></a>75. Sort Colors</h2><p>subarray &#x95EE;&#x9898;</p>
<h3 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h3><p>Given an array with n objects colored red, white or blue, sort them so that objects of the same color are adjacent, with the colors in the order red, white and blue.<br>Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.<br>Note:<br>You are not suppose to use the library&#x2019;s sort function for this problem.</p>
<h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">&apos;&apos;&apos;</div><div class="line">Solution:</div><div class="line">- quicksort?  Time complexity: O(nlogn)</div><div class="line">- 3 numbers, so count and reset, Time complexity: O(n), Space complexity: O(3)-&gt;O(1), two-pass</div><div class="line">- subarray with different states, Time complexity: O(n)</div><div class="line"></div><div class="line">Attention:</div><div class="line">- for solution 3, boundary is tricky, remember pointer is not included</div><div class="line"></div><div class="line">Test case:</div><div class="line">- [0]</div><div class="line">- [0,0,0]</div><div class="line">&apos;&apos;&apos;</div><div class="line">class Solution(object):</div><div class="line">    def sortColors(self, nums):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type nums: List[int]</div><div class="line">        :rtype: void Do not return anything, modify nums in-place instead.</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        if len(nums)&lt;=1:</div><div class="line">            return</div><div class="line">        left,right,cur=0,len(nums)-1,0</div><div class="line">        while cur&lt;=right:</div><div class="line">            if nums[cur]==0:</div><div class="line">                nums[cur],nums[left]=nums[left],nums[cur]</div><div class="line">                left+=1</div><div class="line">                cur+=1</div><div class="line">            elif nums[cur]==2:</div><div class="line">                nums[cur],nums[right]=nums[right],nums[cur]</div><div class="line">                right-=1</div><div class="line">            else:</div><div class="line">                cur+=1</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    &apos;&apos;&apos;            </div><div class="line">    # two-pass solution: count and reset            </div><div class="line">    def sortColors(self, nums):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type nums: List[int]</div><div class="line">        :rtype: void Do not return anything, modify nums in-place instead.</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        if len(nums)&lt;1:</div><div class="line">            return</div><div class="line">        a0,a1,a2=0,0,0</div><div class="line">        for n in nums:</div><div class="line">            if n==0: a0+=1</div><div class="line">            elif n==1: a1+=1</div><div class="line">            elif n==2: a2+=1</div><div class="line">        for i in range(len(nums)):</div><div class="line">            if a0&gt;0:</div><div class="line">                nums[i]=0</div><div class="line">                a0-=1</div><div class="line">            elif a1&gt;0:</div><div class="line">                nums[i]=1</div><div class="line">                a1-=1</div><div class="line">            elif a2&gt;0:</div><div class="line">                nums[i]=2</div><div class="line">                a2-=1</div><div class="line">    &apos;&apos;&apos;</div></pre></td></tr></table></figure>
<h2 id="53-Maximum-Subarray"><a href="#53-Maximum-Subarray" class="headerlink" title="53. Maximum Subarray"></a>53. Maximum Subarray</h2><h3 id="Problem-2"><a href="#Problem-2" class="headerlink" title="Problem"></a>Problem</h3><p>Find the contiguous subarray within an array (containing at least one number) which has the largest sum.<br>For example, given the array [-2,1,-3,4,-1,2,1,-5,4],<br>the contiguous subarray [4,-1,2,1] has the largest sum = 6.<br>More practice:<br>If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.</p>
<h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">&apos;&apos;&apos;</div><div class="line">Solution:</div><div class="line">- subarray: 2 pointers: head,tail</div><div class="line">- any repeated work? no   any meaningless work? yes    check the sum-array and we can find that the non-max-sum either subtract one more number or miss one more addition --&gt; cur_sum=max(cur_sum,nums[start]+cur_sum)</div><div class="line"></div><div class="line">&apos;&apos;&apos;</div><div class="line">class Solution(object):</div><div class="line">    def maxSubArray(self, nums):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type nums: List[int]</div><div class="line">        :rtype: int</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        cur_sum,max_sum=nums[0],nums[0]</div><div class="line">        for start in range(1,len(nums)):</div><div class="line">            cur_sum=max(nums[start],nums[start]+cur_sum)</div><div class="line">            max_sum=max(cur_sum,max_sum)</div><div class="line">        return max_sum</div><div class="line">    &apos;&apos;&apos;</div><div class="line">    # brute-force, time limit exceeded</div><div class="line">    def maxSubArray(self, nums):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type nums: List[int]</div><div class="line">        :rtype: int</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        if len(nums)==0:</div><div class="line">            return 0</div><div class="line">        global_sum=nums[0]</div><div class="line">        for i in range(0,len(nums)-1):</div><div class="line">            part_sum=nums[i]</div><div class="line">            if part_sum&gt;global_sum:</div><div class="line">                global_sum=part_sum</div><div class="line">            for j in range(i+1,len(nums)):</div><div class="line">                part_sum+=nums[j]</div><div class="line">                if part_sum&gt;global_sum:</div><div class="line">                    global_sum=part_sum</div><div class="line">        part_sum=nums[-1]</div><div class="line">        if part_sum&gt;global_sum:</div><div class="line">            global_sum=part_sum</div><div class="line">        return global_sum</div><div class="line">    &apos;&apos;&apos;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;&amp;#x7B56;&amp;#x7565;-amp-&amp;#x6CE8;&amp;#x610F;&amp;#x70B9;&quot;&gt;&lt;a href=&quot;#&amp;#x7B56;&amp;#x7565;-amp-&amp;#x6CE8;&amp;#x610F;&amp;#x70B9;&quot; class=&quot;hea
    
    </summary>
    
      <category term="数据结构和算法" scheme="http://www.shuang0420.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数组" scheme="http://www.shuang0420.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构和算法 -- TWO-SUM 问题和python dict</title>
    <link href="http://www.shuang0420.com/2016/09/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%20--%20TWO-SUM%20%E9%97%AE%E9%A2%98%E5%92%8C%20python%20dict/"/>
    <id>http://www.shuang0420.com/2016/09/18/数据结构和算法 -- TWO-SUM 问题和 python dict/</id>
    <published>2016-09-18T13:55:12.000Z</published>
    <updated>2016-10-12T03:22:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>&#x6253;&#x5C3D; two-sum &#x95EE;&#x9898;&#x3002;<br><a id="more"></a></p>
<h1 id="&#x7B56;&#x7565;-amp-&#x6CE8;&#x610F;&#x70B9;"><a href="#&#x7B56;&#x7565;-amp-&#x6CE8;&#x610F;&#x70B9;" class="headerlink" title="&#x7B56;&#x7565; &amp; &#x6CE8;&#x610F;&#x70B9;"></a>&#x7B56;&#x7565; &amp; &#x6CE8;&#x610F;&#x70B9;</h1><h2 id="Assumption"><a href="#Assumption" class="headerlink" title="Assumption"></a>Assumption</h2><ul>
<li>array is sorted?</li>
<li>each input would have exactly one solution?</li>
<li>duplicates in array?</li>
<li>return index is sorted?</li>
</ul>
<h2 id="&#x7B56;&#x7565;"><a href="#&#x7B56;&#x7565;" class="headerlink" title="&#x7B56;&#x7565;"></a>&#x7B56;&#x7565;</h2><ol>
<li><p>&#x5934;&#x5C3E;&#x6307;&#x9488;&#xFF0C;&#x7ECF;&#x5178;&#x6A21;&#x677F;</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">while start&lt;end:</div><div class="line">    sum=numbers[start]+numbers[end]</div><div class="line">    if sum==target:</div><div class="line">        return [start,end]</div><div class="line">    if sum&gt;target:</div><div class="line">        end-=1</div><div class="line">    else:</div><div class="line">        start+=1</div></pre></td></tr></table></figure>
</li>
<li><p>&#x52A0;&#x4E0A;&#x53BB;&#x91CD;&#x7684;&#x6A21;&#x677F;&#xFF1A;</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">while start&lt;end:</div><div class="line">    cur_sum=nums[start]+nums[end]</div><div class="line">    if cur_sum&lt;target:</div><div class="line">        start+=1</div><div class="line">    elif cur_sum&gt;target:</div><div class="line">        end-=1</div><div class="line">    else:</div><div class="line">        cur_res.append([nums[0],nums[start],nums[end]])</div><div class="line">        start+=1</div><div class="line">        end-=1</div><div class="line">        while start&lt;end and nums[start]==nums[start-1]:</div><div class="line">            start+=1</div><div class="line">        while start&lt;end and nums[end]==nums[end+1]:</div><div class="line">            end-=1</div></pre></td></tr></table></figure>
</li>
<li><p>Hashmap &#x6765; search target-nums[i]&#xFF0C;1&#xFF0D;pass &#x5148; check &#x5728;&#x4E0D;&#x5728; map &#x4E2D;&#xFF0C;&#x4E0D;&#x5728;&#x5C31;&#x653E;&#x8FDB;&#x53BB;&#x3002;</p>
</li>
</ol>
<h2 id="&#x6CE8;&#x610F;&#x70B9;"><a href="#&#x6CE8;&#x610F;&#x70B9;" class="headerlink" title="&#x6CE8;&#x610F;&#x70B9;"></a>&#x6CE8;&#x610F;&#x70B9;</h2><ul>
<li>&#x6D89;&#x53CA; index &#x4E00;&#x822C;&#x5C31;&#x4E0D;&#x5148; sort &#x4E86;&#xFF0C;&#x56E0;&#x4E3A;&#x4F1A; disrupt the order</li>
<li>&#x5982;&#x679C;&#x4E0A;&#x6765;&#x5C31;&#x628A;&#x6574;&#x4E2A; list &#x8F6C;&#x6210; hashmap<val,index>&#xFF0C;&#x4E4B;&#x540E;&#x5728; search&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x8981;&#x6CE8;&#x610F; val==target-val &#x7684;&#x60C5;&#x51B5;&#x4E86;&#xFF0C;&#x4E5F;&#x8981;&#x5224;&#x65AD; val &#x51FA;&#x73B0;&#x51E0;&#x6B21;&#xFF08;hashmap &#x5FC5;&#x987B;&#x8003;&#x8651; key &#x662F;&#x5426;&#x4F1A;&#x91CD;&#x590D;&#xFF09;</val,index></li>
<li>&#x8981;&#x53BB;&#x91CD;&#x7684;&#x95EE;&#x9898;&#x7528;&#x4E24;&#x4E2A; pointer &#x53EF;&#x4EE5;&#x987A;&#x4FBF;&#x53BB;&#x91CD;&#xFF0C;&#x4F46;&#x8981;&#x6CE8;&#x610F;&#x4FDD;&#x8BC1;&#x5927;&#x6761;&#x4EF6; start&lt;end</li>
<li>&#x6CE8;&#x610F;&#x6570;&#x5B57;&#x53EF;&#x80FD;&#x662F; negative&#xFF0C;&#x521D;&#x59CB;&#x5316;&#x53D8;&#x91CF;&#x4E0D;&#x8981;&#x60F3;&#x5F53;&#x7136;&#x7684;&#x4E3A;0&#xFF0C;&#x8BA1;&#x7B97; difference &#x7684;&#x65F6;&#x5019;&#x7528; abs(n) &#x7EDD;&#x5BF9;&#x503C;&#x3002;</li>
<li>python dict &#x7684;&#x7528;&#x6CD5;&#xFF0C;&#x54EA;&#x4E9B; O(1) &#x54EA;&#x4E9B; O(n)</li>
</ul>
<h1 id="&#x4F8B;&#x9898;"><a href="#&#x4F8B;&#x9898;" class="headerlink" title="&#x4F8B;&#x9898;"></a>&#x4F8B;&#x9898;</h1><h2 id="1-Two-Sum"><a href="#1-Two-Sum" class="headerlink" title="1. Two Sum"></a>1. Two Sum</h2><blockquote>
<p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.<br>You may assume that each input would have exactly one solution.<br>Example:<br>Given nums = [2, 7, 11, 15], target = 9,<br>Because nums[0] + nums[1] = 2 + 7 = 9,<br>return [0, 1].</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">&apos;&apos;&apos;</div><div class="line">Check assumption:</div><div class="line">- array is not sorted</div><div class="line">- each input would have exactly one solution</div><div class="line">- duplicates in array</div><div class="line">- return index is not sorted</div><div class="line"></div><div class="line">Corner case:</div><div class="line">- len(nums)&lt;2 or nums==None</div><div class="line"></div><div class="line">Solution:</div><div class="line">- Loop array, search target-nums[i] for each nums[j] on the right. Time complexity: O(n^2)</div><div class="line"></div><div class="line">Attention:</div><div class="line">- we cannot sort array, compare target and sum and move pointers to get the answer as it would disrupt the order</div><div class="line">- array.index(value) returns first match, but this may not be what you expect</div><div class="line"></div><div class="line">Optimization:</div><div class="line">- While loop, use hashmap&lt;target-nums[i],i&gt; to store remaining index and value, so that the second loop will have O(1) time complexity, and the total complexity would be O(n). The cost is space complexity. This is two-pass solution.</div><div class="line">- Two-pass --&gt; One pass. While loop, for each i, check if it is in hashmap, if not, add it to the hashmap, if exists, return index.</div><div class="line">&apos;&apos;&apos;</div><div class="line"></div><div class="line">class Solution(object):</div><div class="line"></div><div class="line">    # with hashmap</div><div class="line">    def twoSum(self, nums, target):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type nums: List[int]</div><div class="line">        :type target: int</div><div class="line">        :rtype: List[int]</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        if not nums or len(nums)&lt;2:</div><div class="line">            return None</div><div class="line">        hashmap=dict()</div><div class="line">        for index,value in enumerate(nums):</div><div class="line">            if target-value in hashmap:</div><div class="line">                return[index,hashmap[target-value]]</div><div class="line">            hashmap[value]=index</div><div class="line">        return None</div><div class="line"></div><div class="line"></div><div class="line">    &apos;&apos;&apos;</div><div class="line">    # two loops</div><div class="line">    def twoSum(self, nums, target):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type nums: List[int]</div><div class="line">        :type target: int</div><div class="line">        :rtype: List[int]</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        if not nums or len(nums)&lt;2:</div><div class="line">            return None</div><div class="line">        for index1,value in enumerate(nums):</div><div class="line">            for index2 in range(index1+1,len(nums)):</div><div class="line">                if nums[index2]==target-value:</div><div class="line">                    return [index1,index2]</div><div class="line">        return None</div><div class="line">    &apos;&apos;&apos;</div></pre></td></tr></table></figure>
<h2 id="167-Two-Sum-II-Input-array-is-sorted"><a href="#167-Two-Sum-II-Input-array-is-sorted" class="headerlink" title="167. Two Sum II - Input array is sorted"></a>167. Two Sum II - Input array is sorted</h2><blockquote>
<p>Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.<br>The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.<br>You may assume that each input would have exactly one solution.<br>Input: numbers={2, 7, 11, 15}, target=9<br>Output: index1=1, index2=2</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">class Solution(object):</div><div class="line">    def twoSum(self, numbers, target):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type numbers: List[int]</div><div class="line">        :type target: int</div><div class="line">        :rtype: List[int]</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        if not numbers or len(numbers)&lt;2:</div><div class="line">            return None</div><div class="line">        start=0</div><div class="line">        end=len(numbers)-1</div><div class="line">        while start&lt;end:</div><div class="line">            sum=numbers[start]+numbers[end]</div><div class="line">            if sum==target:</div><div class="line">                return [start+1,end+1]</div><div class="line">            if sum&gt;target:</div><div class="line">                end-=1</div><div class="line">            else:</div><div class="line">                start+=1</div><div class="line">        return None</div></pre></td></tr></table></figure>
<h2 id="170-Two-Sum-III-Data-structure-design"><a href="#170-Two-Sum-III-Data-structure-design" class="headerlink" title="170. Two Sum III - Data structure design"></a>170. Two Sum III - Data structure design</h2><blockquote>
<p>Design and implement a TwoSum class. It should support the following operations: add and find.<br>add - Add the number to an internal data structure.<br>find - Find if there exists any pair of numbers which sum is equal to the value.<br>For example,<br>add(1); add(3); add(5);<br>find(4) -&gt; true<br>find(7) -&gt; false</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">&apos;&apos;&apos;</div><div class="line">Data structure:</div><div class="line">- hashmap&lt;number,frequency&gt;.   Use hashmap because duplicates matter!</div><div class="line"></div><div class="line">Corner case:</div><div class="line">- hashmap is None</div><div class="line"></div><div class="line">Attention:</div><div class="line">- avoid case val==target-val</div><div class="line"></div><div class="line">Time complexity:</div><div class="line">- add() O(1)</div><div class="line">- find() O(n)</div><div class="line"></div><div class="line">About python dictionary:</div><div class="line">- Do not use dict.keys!</div><div class="line">In Python 2 dict.keys() creates the whole list of keys first that&apos;s why it is an O(N) operation, while key in dict is an O(1) operation.</div><div class="line">&gt;&gt;&gt; dic = dict.fromkeys(range(10**5))</div><div class="line">&gt;&gt;&gt; %timeit 10000 in dic</div><div class="line">1000000 loops, best of 3: 170 ns per loop</div><div class="line">&gt;&gt;&gt; %timeit 10000 in dic.keys()</div><div class="line">100 loops, best of 3: 4.98 ms per loop</div><div class="line">&gt;&gt;&gt; %timeit 10000 in dic.iterkeys()</div><div class="line">1000 loops, best of 3: 402 us per loop</div><div class="line">&gt;&gt;&gt; %timeit 10000 in dic.viewkeys()</div><div class="line">1000000 loops, best of 3: 457 ns per loop</div><div class="line"></div><div class="line">- Use dict.get(key,default=None)!</div><div class="line">self.hashmap[number]=self.hashmap.get(number,0)+1</div><div class="line">&apos;&apos;&apos;</div><div class="line">class TwoSum(object):</div><div class="line"></div><div class="line">    def __init__(self):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        initialize your data structure here</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        self.hashmap=dict()</div><div class="line"></div><div class="line">    def add(self, number):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        Add the number to an internal data structure.</div><div class="line">        :rtype: nothing</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        &apos;&apos;&apos;</div><div class="line">        if self.hashmap.has_key(number):</div><div class="line">            self.hashmap[number]+=1</div><div class="line">        else:</div><div class="line">            self.hashmap[number]=1</div><div class="line">        &apos;&apos;&apos;</div><div class="line">        self.hashmap[number]=self.hashmap.get(number,0)+1</div><div class="line"></div><div class="line">    def find(self, value):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        Find if there exists any pair of numbers which sum is equal to the value.</div><div class="line">        :type value: int</div><div class="line">        :rtype: bool</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        if not self.hashmap:</div><div class="line">            return False</div><div class="line">        for v in self.hashmap:</div><div class="line">            if value-v in self.hashmap:</div><div class="line">                if self.hashmap[v]&gt;1 or v!=value-v:</div><div class="line">                    return True</div><div class="line">        return False</div><div class="line"></div><div class="line"></div><div class="line"># Your TwoSum object will be instantiated and called as such:</div><div class="line"># twoSum = TwoSum()</div><div class="line"># twoSum.add(number)</div><div class="line"># twoSum.find(value)</div></pre></td></tr></table></figure>
<h2 id="15-3Sum"><a href="#15-3Sum" class="headerlink" title="15. 3Sum"></a>15. 3Sum</h2><blockquote>
<p>Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.<br>Note: The solution set must not contain duplicate triplets.<br>For example, given array S = [-1, 0, 1, 2, -1, -4],<br>A solution set is:<br>[<br>  [-1, 0, 1],<br>  [-1, -1, 2]<br>]</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">&apos;&apos;&apos;</div><div class="line">Solution:</div><div class="line">- convert to 2-sum problem, avoid duplicate triplets: sort the array, move pointers to skip duplicates</div><div class="line"></div><div class="line">Attention:</div><div class="line">- when avoiding duplicates, keep in mind start&lt;end, consider corner case [0,0,0] with 0</div><div class="line"></div><div class="line">&apos;&apos;&apos;</div><div class="line">class Solution(object):</div><div class="line">    def threeSum(self, nums):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type nums: List[int]</div><div class="line">        :rtype: List[List[int]]</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        if len(nums)&lt;3:</div><div class="line">            return []</div><div class="line">        nums=sorted(nums)</div><div class="line">        result=[]</div><div class="line">        for i in range(len(nums)-2):</div><div class="line">            if i&gt;0 and nums[i]==nums[i-1]:</div><div class="line">                continue</div><div class="line">            result+=self.twoSum(nums[i:],0-nums[i])</div><div class="line">        return result</div><div class="line"></div><div class="line"></div><div class="line">    def twoSum(self,nums,target):</div><div class="line">        if len(nums)&lt;3:</div><div class="line">            return []</div><div class="line">        start,end=1,len(nums)-1</div><div class="line">        cur_res=[]</div><div class="line">        while start&lt;end:</div><div class="line">            cur_sum=nums[start]+nums[end]</div><div class="line">            if cur_sum&lt;target:</div><div class="line">                start+=1</div><div class="line">            elif cur_sum&gt;target:</div><div class="line">                end-=1</div><div class="line">            else:</div><div class="line">                cur_res.append([nums[0],nums[start],nums[end]])</div><div class="line">                start+=1</div><div class="line">                end-=1</div><div class="line">                while start&lt;end and nums[start]==nums[start-1]:</div><div class="line">                    start+=1</div><div class="line">                while start&lt;end and nums[end]==nums[end+1]:</div><div class="line">                    end-=1</div><div class="line">        return cur_res</div></pre></td></tr></table></figure>
<h2 id="259-3Sum-Smaller"><a href="#259-3Sum-Smaller" class="headerlink" title="259. 3Sum Smaller"></a>259. 3Sum Smaller</h2><blockquote>
<p>Given an array of n integers nums and a target, find the number of index triplets i, j, k with 0 &lt;= i &lt; j &lt; k &lt; n that satisfy the condition nums[i] + nums[j] + nums[k] &lt; target.<br>For example, given nums = [-2, 0, 1, 3], and target = 2.<br>Return 2. Because there are two triplets which sums are less than 2:<br>[-2, 0, 1]<br>[-2, 0, 3]<br>Follow up:<br>Could you solve it in O(n2) runtime?</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&apos;&apos;&apos;</div><div class="line">Same with normal 3sum problem, just consider all possibilities.</div><div class="line"></div><div class="line">Solution:</div><div class="line">- sort nums, for nums[i] in nums, search if nums[start]+nums[end]&lt;target-nums[i] for nums[i+1:], if it is, count+=end-start and keep going</div><div class="line">&apos;&apos;&apos;</div><div class="line">class Solution(object):</div><div class="line">    def threeSumSmaller(self, nums, target):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type nums: List[int]</div><div class="line">        :type target: int</div><div class="line">        :rtype: int</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        if len(nums)&lt;3:</div><div class="line">            return 0</div><div class="line">        count=0</div><div class="line">        nums=sorted(nums)</div><div class="line">        for i in range(len(nums)):</div><div class="line">            start=i+1</div><div class="line">            end=len(nums)-1</div><div class="line">            while start&lt;end:</div><div class="line">                cur_sum=nums[start]+nums[end]</div><div class="line">                new_target=target-nums[i]</div><div class="line">                if cur_sum&lt;new_target:</div><div class="line">                    count+=end-start</div><div class="line">                    start+=1</div><div class="line">                else:</div><div class="line">                    end-=1</div><div class="line">        return count</div></pre></td></tr></table></figure>
<h2 id="16-3Sum-Closest"><a href="#16-3Sum-Closest" class="headerlink" title="16. 3Sum Closest"></a>16. 3Sum Closest</h2><blockquote>
<p>Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.<br>    For example, given array S = {-1 2 1 -4}, and target = 1.<br>    The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&apos;&apos;&apos;</div><div class="line">Simliar to 3sum problem, but have a global_diff to record current minimum difference (remember it should be absolute value) and global_sum to record current closet result</div><div class="line">&apos;&apos;&apos;</div><div class="line">class Solution(object):</div><div class="line">    def threeSumClosest(self, nums, target):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type nums: List[int]</div><div class="line">        :type target: int</div><div class="line">        :rtype: int</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        if len(nums)&lt;3:</div><div class="line">            return None</div><div class="line">        nums=sorted(nums)</div><div class="line">        global_diff=abs(target-nums[0])</div><div class="line">        global_sum=sum(nums[0:3])</div><div class="line">        for i in range(len(nums)-2):</div><div class="line">            start=i+1</div><div class="line">            end=len(nums)-1</div><div class="line">            cur_target=target-nums[i]</div><div class="line">            while start&lt;end:</div><div class="line">                sum2=nums[start]+nums[end]</div><div class="line">                if sum2&lt;cur_target:</div><div class="line">                    if abs(cur_target-sum2)&lt;global_diff:</div><div class="line">                        global_sum=sum2+nums[i]</div><div class="line">                        global_diff=abs(cur_target-sum2)</div><div class="line">                    start+=1</div><div class="line">                elif sum2&gt;cur_target:</div><div class="line">                    if abs(sum2-cur_target)&lt;global_diff:</div><div class="line">                        global_diff=abs(sum2-cur_target)</div><div class="line">                        global_sum=sum2+nums[i]</div><div class="line">                    end-=1</div><div class="line">                else:</div><div class="line">                    return target</div><div class="line">        return global_sum</div></pre></td></tr></table></figure>
<h2 id="18-4Sum"><a href="#18-4Sum" class="headerlink" title="18. 4Sum"></a>18. 4Sum</h2><blockquote>
<p>Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.<br>Note: The solution set must not contain duplicate quadruplets.<br>For example, given array S = [1, 0, -1, 0, -2, 2], and target = 0.<br>A solution set is:<br>[<br>  [-1,  0, 0, 1],<br>  [-2, -1, 1, 2],<br>  [-2,  0, 0, 2]<br>]</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">class Solution(object):</div><div class="line">    def fourSum(self, nums, target):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type nums: List[int]</div><div class="line">        :type target: int</div><div class="line">        :rtype: List[List[int]]</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        if len(nums)&lt;4:</div><div class="line">            return []</div><div class="line">        res=[]</div><div class="line">        nums=sorted(nums)</div><div class="line">        for i in range(len(nums)-3):</div><div class="line">            if i&gt;0 and nums[i]==nums[i-1]:</div><div class="line">                continue</div><div class="line">            res+=self.sum_3(nums[i:],target-nums[i])</div><div class="line">        return res</div><div class="line"></div><div class="line">    def sum_3(self,nums,target):</div><div class="line">        if len(nums)&lt;4:</div><div class="line">            return []</div><div class="line">        res=[]</div><div class="line">        cur=nums[0]</div><div class="line">        nums=nums[1:]</div><div class="line">        for i in range(len(nums)-2):</div><div class="line">            if i&gt;0 and nums[i]==nums[i-1]:</div><div class="line">                continue</div><div class="line">            new_target=target-nums[i]</div><div class="line">            start=i+1</div><div class="line">            end=len(nums)-1</div><div class="line">            while start&lt;end:</div><div class="line">                cur_sum=nums[start]+nums[end]</div><div class="line">                if cur_sum&gt;new_target:</div><div class="line">                    end-=1</div><div class="line">                elif cur_sum&lt;new_target:</div><div class="line">                    start+=1</div><div class="line">                else:</div><div class="line">                    res.append([cur,nums[i],nums[start],nums[end]])</div><div class="line">                    start+=1</div><div class="line">                    end-=1</div><div class="line">                    while start&lt;end and nums[start]==nums[start-1]:</div><div class="line">                        start+=1</div><div class="line">                    while start&lt;end and nums[end]==nums[end+1]:</div><div class="line">                        end-=1</div><div class="line">        return res</div></pre></td></tr></table></figure>
<h1 id="dict-&#x8BE6;&#x89E3;"><a href="#dict-&#x8BE6;&#x89E3;" class="headerlink" title="dict &#x8BE6;&#x89E3;"></a>dict &#x8BE6;&#x89E3;</h1><h2 id="&#x5185;&#x7F6E;&#x51FD;&#x6570;&#x548C;&#x65B9;&#x6CD5;"><a href="#&#x5185;&#x7F6E;&#x51FD;&#x6570;&#x548C;&#x65B9;&#x6CD5;" class="headerlink" title="&#x5185;&#x7F6E;&#x51FD;&#x6570;&#x548C;&#x65B9;&#x6CD5;"></a>&#x5185;&#x7F6E;&#x51FD;&#x6570;&#x548C;&#x65B9;&#x6CD5;</h2><table><tr><th style="width:5%">&#x5E8F;&#x53F7;</th><th style="width:95%">&#x51FD;&#x6570;&#x53CA;&#x63CF;&#x8FF0;</th></tr><tr><td>1</td><td><a href="att-dictionary-cmp.html">cmp(dict1, dict2)</a><br>&#x6BD4;&#x8F83;&#x4E24;&#x4E2A;&#x5B57;&#x5178;&#x5143;&#x7D20;&#x3002;</td></tr><tr><td>2</td><td><a href="att-dictionary-len.html">len(dict)</a><br>&#x8BA1;&#x7B97;&#x5B57;&#x5178;&#x5143;&#x7D20;&#x4E2A;&#x6570;&#xFF0C;&#x5373;&#x952E;&#x7684;&#x603B;&#x6570;&#x3002;</td></tr><tr><td>3</td><td><a href="att-dictionary-str.html">str(dict)</a><br>&#x8F93;&#x51FA;&#x5B57;&#x5178;&#x53EF;&#x6253;&#x5370;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x8868;&#x793A;&#x3002;</td></tr><tr><td>4</td><td><a href="att-dictionary-type.html">type(variable)</a><br>&#x8FD4;&#x56DE;&#x8F93;&#x5165;&#x7684;&#x53D8;&#x91CF;&#x7C7B;&#x578B;&#xFF0C;&#x5982;&#x679C;&#x53D8;&#x91CF;&#x662F;&#x5B57;&#x5178;&#x5C31;&#x8FD4;&#x56DE;&#x5B57;&#x5178;&#x7C7B;&#x578B;&#x3002;</td></tr></table>

<p>Python&#x5B57;&#x5178;&#x5305;&#x542B;&#x4E86;&#x4EE5;&#x4E0B;&#x5185;&#x7F6E;&#x65B9;&#x6CD5;&#xFF1A;</p>
<table><tr><th style="width:5%">&#x5E8F;&#x53F7;</th><th style="width:95%">&#x51FD;&#x6570;&#x53CA;&#x63CF;&#x8FF0;</th></tr><tr><td>1</td><td><a href="att-dictionary-clear.html">radiansdict.clear()</a><br>&#x5220;&#x9664;&#x5B57;&#x5178;&#x5185;&#x6240;&#x6709;&#x5143;&#x7D20; </td></tr><tr><td>2</td><td><a href="att-dictionary-copy.html">radiansdict.copy()</a><br>&#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x5B57;&#x5178;&#x7684;&#x6D45;&#x590D;&#x5236;</td></tr><tr><td>3</td><td><a href="att-dictionary-fromkeys.html">radiansdict.fromkeys()</a><br> &#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x65B0;&#x5B57;&#x5178;&#xFF0C;&#x4EE5;&#x5E8F;&#x5217;seq&#x4E2D;&#x5143;&#x7D20;&#x505A;&#x5B57;&#x5178;&#x7684;&#x952E;&#xFF0C;val&#x4E3A;&#x5B57;&#x5178;&#x6240;&#x6709;&#x952E;&#x5BF9;&#x5E94;&#x7684;&#x521D;&#x59CB;&#x503C;</td></tr><tr><td>4</td><td><a href="att-dictionary-get.html">radiansdict.get(key, default=None)</a><br>&#x8FD4;&#x56DE;&#x6307;&#x5B9A;&#x952E;&#x7684;&#x503C;&#xFF0C;&#x5982;&#x679C;&#x503C;&#x4E0D;&#x5728;&#x5B57;&#x5178;&#x4E2D;&#x8FD4;&#x56DE;default&#x503C;</td></tr><tr><td>5</td><td><a href="att-dictionary-has_key.html">radiansdict.has_key(key)</a><br>&#x5982;&#x679C;&#x952E;&#x5728;&#x5B57;&#x5178;dict&#x91CC;&#x8FD4;&#x56DE;true&#xFF0C;&#x5426;&#x5219;&#x8FD4;&#x56DE;false</td></tr><tr><td>6</td><td><a href="att-dictionary-items.html">radiansdict.items()</a><br>&#x4EE5;&#x5217;&#x8868;&#x8FD4;&#x56DE;&#x53EF;&#x904D;&#x5386;&#x7684;(&#x952E;, &#x503C;) &#x5143;&#x7EC4;&#x6570;&#x7EC4;</td></tr><tr><td>7</td><td><a href="att-dictionary-keys.html">radiansdict.keys()</a><br>&#x4EE5;&#x5217;&#x8868;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x5B57;&#x5178;&#x6240;&#x6709;&#x7684;&#x952E;</td></tr><tr><td>8</td><td><a href="att-dictionary-setdefault.html">radiansdict.setdefault(key, default=None)</a><br><br>&#x548C;get()&#x7C7B;&#x4F3C;, &#x4F46;&#x5982;&#x679C;&#x952E;&#x4E0D;&#x5B58;&#x5728;&#x4E8E;&#x5B57;&#x5178;&#x4E2D;&#xFF0C;&#x5C06;&#x4F1A;&#x6DFB;&#x52A0;&#x952E;&#x5E76;&#x5C06;&#x503C;&#x8BBE;&#x4E3A;default</td></tr><tr><td>9</td><td><a href="att-dictionary-update.html">radiansdict.update(dict2)</a><br>&#x628A;&#x5B57;&#x5178;dict2&#x7684;&#x952E;/&#x503C;&#x5BF9;&#x66F4;&#x65B0;&#x5230;dict&#x91CC;</td></tr><tr><td>10</td><td><a href="att-dictionary-values.html">radiansdict.values()</a><br>&#x4EE5;&#x5217;&#x8868;&#x8FD4;&#x56DE;&#x5B57;&#x5178;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x503C;</td></tr></table>

<h2 id="&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;"><a href="#&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;" class="headerlink" title="&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;"></a>&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;</h2><p>&#x4E0B;&#x8868; python 3 &#x4E2D; dictinoary (&#x5305;&#x62EC; dict &#x548C; defaultdict) &#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF0C;&#x8981;&#x6CE8;&#x610F;&#x7684; d.keys() &#x5728; python 2 &#x4E2D;&#x7684;&#x590D;&#x6742;&#x5EA6;&#x662F; O(n)&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x8FD4;&#x56DE;&#x7684;&#x662F;&#x4E00;&#x4E2A; list</p>
<table>
<thead>
<tr>
<th>Operation</th>
<th>Example</th>
<th>Class</th>
<th>Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td>Index</td>
<td>d[k]</td>
<td>O(1)</td>
<td>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</td>
</tr>
<tr>
<td>Store</td>
<td>d[k] = v</td>
<td>O(1)</td>
<td>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</td>
</tr>
<tr>
<td>Length</td>
<td>len(d)</td>
<td>O(1)</td>
<td>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</td>
</tr>
<tr>
<td>Delete</td>
<td>del d[k]</td>
<td>O(1)</td>
<td>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</td>
</tr>
<tr>
<td>get/setdefault</td>
<td>d.method</td>
<td>O(1)</td>
<td>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</td>
</tr>
<tr>
<td>Pop</td>
<td>d.pop(k)</td>
<td>O(1)</td>
<td>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</td>
</tr>
<tr>
<td>Pop item</td>
<td>d.popitem()</td>
<td>O(1)</td>
<td>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</td>
</tr>
<tr>
<td>Clear</td>
<td>d.clear()</td>
<td>O(1)</td>
<td>similar to s = {} or = dict()</td>
</tr>
<tr>
<td>Views</td>
<td>d.keys()</td>
<td>O(1)</td>
<td>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</td>
</tr>
<tr>
<td>Construction</td>
<td>dict(&#x2026;)</td>
<td>O(len(&#x2026;))</td>
<td>depends # (key,value) 2-tuples</td>
</tr>
<tr>
<td>Iteration</td>
<td>for k in d:</td>
<td>O(N)</td>
<td>all forms: keys, values, items</td>
</tr>
</tbody>
</table>
<p>So, most dict operations are O(1).</p>
<p>defaultdicts support all operations that dicts support, with the same complexity classes (because it inherits all the operations); this assumes that calling the constructor when a values isn&#x2019;t found in the defaultdict is O(1) - which is true for int(), list(), set(), &#x2026; (the things commonly used)</p>
<blockquote>
<p>&#x53C2;&#x8003;&#x94FE;&#x63A5;<br><a href="https://wiki.python.org/moin/TimeComplexity" target="_blank" rel="external">Python TimeComplexity</a><br><a href="https://www.ics.uci.edu/~pattis/ICS-33/lectures/complexitypython.txt" target="_blank" rel="external">Complexity of Python Operations</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#x6253;&amp;#x5C3D; two-sum &amp;#x95EE;&amp;#x9898;&amp;#x3002;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构和算法" scheme="http://www.shuang0420.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="python" scheme="http://www.shuang0420.com/tags/python/"/>
    
      <category term="array" scheme="http://www.shuang0420.com/tags/array/"/>
    
      <category term="two-sum" scheme="http://www.shuang0420.com/tags/two-sum/"/>
    
  </entry>
  
  <entry>
    <title>Search Engines笔记 - Query Processing</title>
    <link href="http://www.shuang0420.com/2016/09/11/Search%20Engines%E7%AC%94%E8%AE%B0%20-%20Query%20Processing/"/>
    <id>http://www.shuang0420.com/2016/09/11/Search Engines笔记 - Query Processing/</id>
    <published>2016-09-12T01:59:21.000Z</published>
    <updated>2016-10-18T00:33:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>&#x641C;&#x7D22;&#x5F15;&#x64CE;&#x662F;&#x600E;&#x4E48;&#x5904;&#x7406; query &#x7684;&#xFF1F;&#x4E09;&#x79CD;&#x65B9;&#x6CD5;&#xFF0C;Term-at-a-time(TAAT)&#xFF0C;Document-at-a-time(DAAT)&#xFF0C;TAAT/DAAT hybrids&#x3002;<br><a id="more"></a></p>
<h1 id="TAAT"><a href="#TAAT" class="headerlink" title="TAAT"></a>TAAT</h1><p>&#x4E3B;&#x8981;&#x601D;&#x8DEF;&#xFF1A;</p>
<ul>
<li>&#x5904;&#x7406;&#x5B8C;&#x4E00;&#x4E2A; inverted list &#x518D;&#x5904;&#x7406;&#x4E0B;&#x4E00;&#x4E2A;&#x3002;</li>
<li>&#x6BCF;&#x5904;&#x7406;&#x5B8C;&#x4E00;&#x4E2A; inverted list&#xFF0C;&#x90E8;&#x5206;&#x66F4;&#x65B0; document score&#x3002;</li>
</ul>
<p><strong>&#x4F18;&#x70B9;&#xFF1A;</strong></p>
<ul>
<li>conceptually, easy to understand</li>
<li>very efficient, little wasted effort</li>
</ul>
<p><strong>&#x7F3A;&#x70B9;&#xFF1A;</strong></p>
<ul>
<li>memory usage is uncontrolled<br>&#x6BCF;&#x4E2A; operator &#x90FD;&#x4F1A;&#x540C;&#x65F6;&#x5728;&#x5185;&#x5B58;&#x91CC;&#x5B58; 3 &#x4E2A; list(arg1,arg2,result)<br>&#x6BCF;&#x4E2A;&#x6DF1;&#x5EA6;&#x4E3A; d &#x7684; query &#x90FD;&#x4F1A;&#x540C;&#x65F6;&#x5728;&#x5185;&#x5B58;&#x91CC;&#x5B58; d+2 &#x4E2A; list&#x3002;</li>
<li>can run out of memory<br>&#x5305;&#x542B;&#x6709; frequent term &#x7684; query (&#x5F88;&#x957F;&#x7684; inverted list)<br>&#x590D;&#x6742;&#x7684; query (&#x66F4;&#x591A;&#x7684; inverted list)<br>&#x540C;&#x65F6;&#x5904;&#x7406;&#x591A;&#x4E2A; query &#x7684;&#x7CFB;&#x7EDF;</li>
</ul>
<p>&#x6240;&#x4EE5; TAAT &#x5F88;&#x5C11;&#x7528;&#x5728; large-scale systems&#x3002;</p>
<p>Eg.#AND(a b #OR (c #NEAR/3(d e)) f)<br>&#x8F6C;&#x5316;&#x6210; query tree<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">          AND</div><div class="line">(a   b     OR            f)</div><div class="line">         (c  NEAR/3</div><div class="line">              (d  e))</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Retrieve a</div><div class="line">Retrieve b</div><div class="line">a AND b -&gt; Result(AND_1)</div><div class="line">Retrieve c</div><div class="line">Retrieve d</div><div class="line">Retrieve e</div><div class="line">d NEAR/3 e -&gt; Result(NEAR)</div><div class="line">c OR Result(NEAR) -&gt; Result(OR)</div><div class="line">Result(AND_1) AND Result(OR) -&gt; Result(AND_2)</div><div class="line">Retrieve f</div><div class="line">Result(AND_2) AND f -&gt; Result(Q)</div></pre></td></tr></table></figure>
<p><strong>Memory usage</strong><br>&#x5185;&#x5B58;&#x4E2D;&#x540C;&#x65F6;&#x5B58;&#x5728; 5 &#x4E2A; list<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">size(a AND b) +</div><div class="line">size(c) +</div><div class="line">size(d) + size(e) + size(d NEAR/3 e) bytes</div></pre></td></tr></table></figure></p>
<h1 id="DAAT"><a href="#DAAT" class="headerlink" title="DAAT"></a>DAAT</h1><p>&#x4E3B;&#x8981;&#x601D;&#x8DEF;&#xFF1A;</p>
<ul>
<li>&#x5904;&#x7406;&#x5B8C;&#x4E00;&#x7BC7;&#x6587;&#x6863;&#x540E;&#xFF0C;&#x518D;&#x5904;&#x7406;&#x4E0B;&#x4E00;&#x7BC7;&#x6587;&#x6863;&#x3002;</li>
<li>&#x6BCF;&#x5904;&#x7406;&#x4E00;&#x7BC7;&#x6587;&#x6863;&#xFF0C;&#x5C31;&#x7B97;&#x51FA; complete score</li>
</ul>
<p>&#x627E;&#x5230;&#x6240;&#x6709; term &#x7684; inverted list&#xFF0C;&#x6BCF;&#x4E2A; inverted list &#x5206;&#x914D;&#x4E00;&#x4E2A; iterator&#xFF0C;&#x5206;&#x914D;&#x4E00;&#x4E2A;&#x7A7A;&#x7684; result list&#x3002;&#x4E4B;&#x540E;&#x627E;&#x5230;&#x6BCF;&#x4E2A; inverted list &#x5F53;&#x524D;&#x7684; doc id&#xFF0C;&#x53D6;&#x6700;&#x5C0F;&#x7684; doc id&#xFF0C;&#x7B97;&#x51FA;&#x5F53;&#x524D;&#x5206;&#x6570;&#xFF0C;&#x4FDD;&#x5B58;&#x5230; result list &#x4E2D;&#xFF0C;&#x7136;&#x540E;&#x628A;&#x8FD9;&#x4E2A; iterator &#x5F80;&#x4E0B;&#x79FB;&#x4E00;&#x4E2A; doc id&#xFF0C;&#x91CD;&#x590D;&#x8FD9;&#x4E2A;&#x8FC7;&#x7A0B;&#x3002;</p>
<p>&#x7B80;&#x5316;&#x4E00;&#x4E0B;&#xFF0C;if this list has the current docid&#xFF0C;&#x505A;&#x4E24;&#x4EF6;&#x4E8B;&#xFF0C;</p>
<ul>
<li>update the score</li>
<li>advance the pointer</li>
</ul>
<p>&#x4EE3;&#x7801;&#x63CF;&#x8FF0;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">q.initialize()</div><div class="line">while (q.hasNext())</div><div class="line">  q.evalNext() returns next [docid,score] tuple</div></pre></td></tr></table></figure></p>
<p>&#x4F18;&#x70B9;&#xFF1A;</p>
<ul>
<li>memory usage is easy to control<br>&#x9700;&#x8981;&#x540C;&#x65F6; access &#x6240;&#x6709; args &#x7684; inverted list (seems bad)&#xFF0C;&#x7136;&#x800C;&#xFF0C;&#x8FD9;&#x4E9B; inverted list &#x53EF;&#x4EE5;&#x4EE5; block &#x7684;&#x5F62;&#x5F0F;&#x5206;&#x6279;&#x4ECE; disk &#x8BFB;&#x8FDB; RAM&#x3002;&#x7B49;&#x5F53;&#x524D; block &#x5904;&#x7406;&#x5B8C;&#x4E86;&#x518D;&#x8BFB;&#x4E0B;&#x4E00;&#x4E2A; block&#xFF0C;&#x8FD9;&#x6837;&#x5904;&#x7406;&#x4E00;&#x4E2A; query &#x6240;&#x9700;&#x7684;&#x5185;&#x5B58;&#x5C31;&#x53D6;&#x51B3;&#x4E8E; block &#x7684;&#x5927;&#x5C0F;&#x3002;</li>
<li>Many query evaluation optimizations are possible<br>only partial evaluation of documents with low scores</li>
</ul>
<p>&#x6240;&#x4EE5; TAAT &#x7ECF;&#x5E38;&#x7528;&#x5728; large-scale systems&#x3002;</p>
<h1 id="TAAT-DAAT-hybrids"><a href="#TAAT-DAAT-hybrids" class="headerlink" title="TAAT/DAAT hybrids"></a>TAAT/DAAT hybrids</h1><p>&#x5E73;&#x8861; Efficiency &#x548C; memory control&#x3002;Eg. block-based TAAT(compute TAAT over blocks of document ids)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#x641C;&amp;#x7D22;&amp;#x5F15;&amp;#x64CE;&amp;#x662F;&amp;#x600E;&amp;#x4E48;&amp;#x5904;&amp;#x7406; query &amp;#x7684;&amp;#xFF1F;&amp;#x4E09;&amp;#x79CD;&amp;#x65B9;&amp;#x6CD5;&amp;#xFF0C;Term-at-a-time(TAAT)&amp;#xFF0C;Document-at-a-time(DAAT)&amp;#xFF0C;TAAT/DAAT hybrids&amp;#x3002;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Search Engines" scheme="http://www.shuang0420.com/categories/Search-Engines/"/>
    
    
      <category term="NLP" scheme="http://www.shuang0420.com/tags/NLP/"/>
    
      <category term="Search Engines" scheme="http://www.shuang0420.com/tags/Search-Engines/"/>
    
  </entry>
  
  <entry>
    <title>数据结构和算法 -- 栈和队列</title>
    <link href="http://www.shuang0420.com/2016/09/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%20--%20%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
    <id>http://www.shuang0420.com/2016/09/08/数据结构和算法 -- 栈和队列/</id>
    <published>2016-09-08T13:55:12.000Z</published>
    <updated>2016-10-26T18:00:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Stack-implementation"><a href="#Stack-implementation" class="headerlink" title="Stack implementation"></a>Stack implementation</h1><p>&#x5B9E;&#x73B0;&#x4E00;&#x4E2A; stack &#x53EF;&#x4EE5;&#x7528;&#x4E24;&#x79CD;&#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF0C;dynamic array &#x6216;&#x8005;&#x662F; linked list&#x3002;</p>
<p><strong>dynamic array</strong> &#x7684;&#x4F18;&#x52BF;&#x662F;&#x652F;&#x6301; random access&#xFF0C;&#x56E0;&#x4E3A;&#x53EF;&#x4EE5;&#x901A;&#x8FC7; index &#x83B7;&#x53D6;&#x6570;&#x636E;&#xFF0C;&#x7136;&#x800C; stack &#x4E3B;&#x8981;&#x4F5C;&#x7528;&#x662F; pop&#xFF0C;&#x6240;&#x4EE5; dynamic array &#x7684;&#x8FD9;&#x4E2A;&#x4F18;&#x52BF; gains you little&#x3002;dynamic array &#x53E6;&#x4E00;&#x4E2A;&#x4F18;&#x52BF;&#x662F; resize&#xFF0C;&#x8FD9;&#x4E2A;&#x975E;&#x5E38;&#x7684; time-consuming &#x56E0;&#x4E3A;&#x9700;&#x8981; copy array to a new one&#x3002;</p>
<p><strong>linked list</strong> &#x4F1A;&#x4E3A;&#x6BCF;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x5206;&#x914D;&#x5185;&#x5B58;&#xFF0C;&#x8FD9;&#x6BD4; dynamic array &#x7684; resize &#x66F4;&#x8D39;&#x65F6;&#xFF0C;&#x56E0;&#x6B64;&#x57FA;&#x4E8E; dynamic array &#x7684; stack &#x901A;&#x5E38;&#x8981;&#x6BD4;&#x57FA;&#x4E8E; linked list &#x7684; stack &#x5FEB;&#x4E00;&#x4E9B;&#x3002;&#x7136;&#x800C;&#xFF0C;&#x57FA;&#x4E8E; linked list &#x7684; stack &#x66F4;&#x5BB9;&#x6613;&#x5B9E;&#x73B0;&#x3002;</p>
<p><strong>Proper functionality</strong><br>&#x57FA;&#x672C;&#x65B9;&#x6CD5;&#xFF1A;</p>
<ul>
<li>push<br>allocate new element, checks for failure, sets the data of the new element, places it at the top of the stack, adjust the stack pointer</li>
<li>pop<br>check the stack isn&#x2019;t empty, fetches data from top element, adjusts the stack pointer, free the element that is no longer on the stack</li>
</ul>
<p>&#x5B8C;&#x6574;&#x65B9;&#x6CD5;&#xFF1A;</p>
<ul>
<li>createStack<br>push a null pointer</li>
<li>deleteStack<br>call pop repeatedly</li>
</ul>
<p><strong>Error handling</strong></p>
<ul>
<li>pop<br>&#x5982;&#x679C; stack &#x4E3A;&#x7A7A;&#xFF0C;&#x8FD4;&#x56DE; null? &#x95EE;&#x9898;&#x662F;&#x9700;&#x8981;&#x4FDD;&#x8BC1; stack &#x91CC;&#x6CA1;&#x6709;&#x5B58; null pointer&#xFF1B;&#x8FD4;&#x56DE; special value(or negative value)&#xFF1F;&#x95EE;&#x9898;&#x662F;&#x9700;&#x8981; assume stack &#x91CC;&#x6CA1;&#x6709;&#x8FD9;&#x4E9B;&#x5143;&#x7D20;&#x3002;&#x611F;&#x89C9; raise error &#x6BD4;&#x8F83;&#x7B80;&#x5355;&#x3002;</li>
<li>push<br>&#x5982;&#x679C;&#x4F20;&#x8FDB;&#x53BB;&#x7684;&#x503C;&#x4E3A; null&#xFF0C;raise error</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"># implement a stack using linkedlist</div><div class="line">class Stack(object):</div><div class="line"></div><div class="line">    class Node(object):</div><div class="line"></div><div class="line">        def __init__(self, val=None, next=None):</div><div class="line">            self.val = val</div><div class="line">            self.next = next</div><div class="line"></div><div class="line">    def __init__(self):</div><div class="line">        self.head = None</div><div class="line"></div><div class="line">    &apos;&apos;&apos;</div><div class="line">    check the stack isn&apos;t empty, fetches data from top element, adjusts the stack pointer, free the element that is no longer on the stack</div><div class="line">    &apos;&apos;&apos;</div><div class="line"></div><div class="line">    def pop(self):</div><div class="line">        if not self.head: raise ValueError(&quot;Empty stack!&quot;)</div><div class="line">        val = self.head.val</div><div class="line">        self.head = self.head.next</div><div class="line">        return val</div><div class="line"></div><div class="line">    &apos;&apos;&apos;</div><div class="line">    allocate new element, checks for failure, sets the data of the new element, places it at the top of the stack, adjust the stack pointer</div><div class="line">    &apos;&apos;&apos;</div><div class="line"></div><div class="line">    def push(self, val):</div><div class="line">        if not val:</div><div class="line">            raise ValueError(&quot;Invalid value!&quot;)</div><div class="line">        node = self.Node(val, self.head)</div><div class="line">        self.head = node</div><div class="line"></div><div class="line">&apos;&apos;&apos;</div><div class="line">push a null pointer</div><div class="line">&apos;&apos;&apos;</div><div class="line"></div><div class="line">def createStack(stack):</div><div class="line">    stack.head = Node()</div><div class="line">    return True</div><div class="line"></div><div class="line">&apos;&apos;&apos;</div><div class="line">call pop repeatedly</div><div class="line">&apos;&apos;&apos;</div><div class="line"></div><div class="line">def deleteStack(stack):</div><div class="line">    while stack.head:</div><div class="line">        stack.pop()</div><div class="line">    return True</div><div class="line"></div><div class="line">stack=Stack()</div><div class="line">stack.push(1)</div><div class="line">stack.push(2)</div><div class="line">stack.push(3)</div><div class="line">print stack.pop()</div><div class="line">print stack.pop()</div><div class="line">print stack.pop()</div><div class="line">print stack.pop()</div></pre></td></tr></table></figure>
<h1 id="Leetcode-&#x5B9E;&#x4F8B;"><a href="#Leetcode-&#x5B9E;&#x4F8B;" class="headerlink" title="Leetcode &#x5B9E;&#x4F8B;"></a>Leetcode &#x5B9E;&#x4F8B;</h1><h2 id="232-Implement-Queue-using-Stacks"><a href="#232-Implement-Queue-using-Stacks" class="headerlink" title="232.Implement Queue using Stacks"></a>232.Implement Queue using Stacks</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Implement the following operations of a queue using stacks.<br>push(x) &#x2013; Push element x to the back of queue.<br>pop() &#x2013; Removes the element from in front of queue.<br>peek() &#x2013; Get the front element.<br>empty() &#x2013; Return whether the queue is empty.<br>Notes:<br>You must use only standard operations of a stack &#x2013; which means only push to top, peek/pop from top, size, and is empty operations are valid.<br>Depending on your language, stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack.<br>You may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue).</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">class Queue(object):</div><div class="line">    def __init__(self):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        initialize your data structure here.</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        self.stack1=list()</div><div class="line">        self.stack2=list()</div><div class="line"></div><div class="line">    def push(self, x):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type x: int</div><div class="line">        :rtype: nothing</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        self.stack1.append(x)</div><div class="line"></div><div class="line">    def pop(self):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :rtype: nothing</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        self.helper()</div><div class="line">        return self.stack2.pop()</div><div class="line"></div><div class="line">    def peek(self):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :rtype: int</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        self.helper()</div><div class="line">        &apos;&apos;&apos;</div><div class="line">        element=self.stack2.pop()</div><div class="line">        self.stack2.append(element)</div><div class="line">        return element</div><div class="line">        &apos;&apos;&apos;</div><div class="line">        return self.stack2[-1]</div><div class="line"></div><div class="line">    def empty(self):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :rtype: bool</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        if self.stack1 or self.stack2:</div><div class="line">            return False</div><div class="line">        return True</div><div class="line"></div><div class="line">    def helper(self):</div><div class="line">        if not self.stack2:</div><div class="line">            while self.stack1:</div><div class="line">                self.stack2.append(self.stack1.pop())</div></pre></td></tr></table></figure>
<h2 id="225-Implement-Stack-using-Queues"><a href="#225-Implement-Stack-using-Queues" class="headerlink" title="225.Implement Stack using Queues"></a>225.Implement Stack using Queues</h2><h3 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h3><p>Implement the following operations of a stack using queues.<br>push(x) &#x2013; Push element x onto stack.<br>pop() &#x2013; Removes the element on top of the stack.<br>top() &#x2013; Get the top element.<br>empty() &#x2013; Return whether the stack is empty.<br>Notes:<br>You must use only standard operations of a queue &#x2013; which means only push to back, peek/pop from front, size, and is empty operations are valid.<br>Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.<br>You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).<br>Update (2015-06-11):<br>The class name of the Java function had been updated to MyStack instead of Stack.</p>
<p>&#x7528;&#x4E24;&#x4E2A;&#x961F;&#x5217;&#xFF0C;push: O(n)&#xFF0C;pop: O(1)&#xFF0C;top: O(1)</p>
<h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">from collections import deque</div><div class="line">class Stack(object):</div><div class="line">    def __init__(self):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        initialize your data structure here.</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        self.queue1=deque()</div><div class="line">        self.queue2=deque()</div><div class="line"></div><div class="line">    def push(self, x):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type x: int</div><div class="line">        :rtype: nothing</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        if not self.queue2:</div><div class="line">            self.queue2.append(x)</div><div class="line">            while self.queue1:</div><div class="line">                self.queue2.append(self.queue1.popleft())</div><div class="line">            self.queue1,self.queue2=self.queue2,self.queue1</div><div class="line"></div><div class="line"></div><div class="line">    def pop(self):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :rtype: nothing</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        self.queue1.popleft()</div><div class="line"></div><div class="line">    def top(self):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :rtype: int</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        return self.queue1[0]</div><div class="line"></div><div class="line"></div><div class="line">    def empty(self):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :rtype: bool</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        if not self.queue1:</div><div class="line">            return True</div><div class="line">        return False</div></pre></td></tr></table></figure>
<h2 id="20-Valid-Parentheses"><a href="#20-Valid-Parentheses" class="headerlink" title="20.Valid Parentheses"></a>20.Valid Parentheses</h2><h3 id="Problem-2"><a href="#Problem-2" class="headerlink" title="Problem"></a>Problem</h3><p>Given a string containing just the characters &#x2018;(&#x2018;, &#x2018;)&#x2019;, &#x2018;{&#x2018;, &#x2018;}&#x2019;, &#x2018;[&#x2018; and &#x2018;]&#x2019;, determine if the input string is valid.</p>
<p>The brackets must close in the correct order, &#x201C;()&#x201D; and &#x201C;()[]{}&#x201D; are all valid but &#x201C;(]&#x201D; and &#x201C;([)]&#x201D; are not.</p>
<h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&apos;&apos;&apos;</div><div class="line">Solution:</div><div class="line">- check when right meet; just need the last unpaired left =&gt; first in,last out =&gt; stack</div><div class="line">- create a dictionary for parenthese pairs, for each element in s, if it exists in dictionary.keys(), then append it into the stack, else, pop from the stack and check if the popped value and current element is a pair. Time complexity: O(n)</div><div class="line">- remember to check if stack is empty in every check and also in final check (look back for previous left parentheses)</div><div class="line">&apos;&apos;&apos;</div><div class="line">class Solution(object):</div><div class="line">    def isValid(self, s):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type s: str</div><div class="line">        :rtype: bool</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        if not s:</div><div class="line">            return None</div><div class="line">        dictionary={&apos;(&apos;:&apos;)&apos;,&apos;[&apos;:&apos;]&apos;,&apos;{&apos;:&apos;}&apos;}</div><div class="line">        s=list(s)</div><div class="line">        stack=[]</div><div class="line">        for i in s:</div><div class="line">            if i in dictionary:</div><div class="line">                stack.append(i)</div><div class="line">            else:</div><div class="line">                if not stack or dictionary[stack.pop()]!=i:</div><div class="line">                    return False</div><div class="line">        return not stack</div></pre></td></tr></table></figure>
<h2 id="150-Evaluate-Reverse-Polish-Notation"><a href="#150-Evaluate-Reverse-Polish-Notation" class="headerlink" title="150. Evaluate Reverse Polish Notation"></a>150. Evaluate Reverse Polish Notation</h2><h3 id="Problem-3"><a href="#Problem-3" class="headerlink" title="Problem"></a>Problem</h3><p>Evaluate the value of an arithmetic expression in Reverse Polish Notation.</p>
<p>Valid operators are +, -, *, /. Each operand may be an integer or another expression.</p>
<p>Some examples:<br>  [&#x201C;2&#x201D;, &#x201C;1&#x201D;, &#x201C;+&#x201D;, &#x201C;3&#x201D;, &#x201C;*&#x201C;] -&gt; ((2 + 1) * 3) -&gt; 9<br>  [&#x201C;4&#x201D;, &#x201C;13&#x201D;, &#x201C;5&#x201D;, &#x201C;/&#x201C;, &#x201C;+&#x201D;] -&gt; (4 + (13 / 5)) -&gt; 6</p>
<h3 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&apos;&apos;&apos;</div><div class="line">Solution:</div><div class="line">- each operation requires two operands and one operator, operator always appear after operands, so we search element from left to right, store numbers in the stack till we meet up with an operator, and with the operator, we pop two elements from the stack and caculate the results and push it back to stack, and continue, till the end of tokens, finally return the final value of the stack.</div><div class="line"></div><div class="line">Attention(negative integer division):</div><div class="line">- division in python, pls consider when one of the operand is negative, you would get surprising result. eg. -7/2=-4.</div><div class="line">    in order to avoid that, use int(float(a)/b) whenever there&apos;s a division operation</div><div class="line">&apos;&apos;&apos;</div><div class="line">class Solution(object):</div><div class="line">    def evalRPN(self, tokens):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type tokens: List[str]</div><div class="line">        :rtype: int</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        stack=[]</div><div class="line">        for t in tokens:</div><div class="line">            if t==&apos;+&apos;:</div><div class="line">                stack.append(stack.pop()+stack.pop())</div><div class="line">            elif t==&apos;-&apos;:</div><div class="line">                a=stack.pop()</div><div class="line">                b=stack.pop()</div><div class="line">                stack.append(b-a)</div><div class="line">            elif t==&apos;*&apos;:</div><div class="line">                stack.append(stack.pop()*stack.pop())</div><div class="line">            elif t==&apos;/&apos;:</div><div class="line">                a=stack.pop()</div><div class="line">                b=stack.pop()</div><div class="line">                stack.append(int(float(b)/a))</div><div class="line">            else:</div><div class="line">                stack.append(int(t))</div><div class="line">        return stack.pop()</div></pre></td></tr></table></figure>
<p>Followup<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">&apos;&apos;&apos;</div><div class="line">Followup:</div><div class="line">- infix notation</div><div class="line">    ( =&gt; operator stack</div><div class="line">    number =&gt; number stack</div><div class="line">    ) =&gt; pop and calculate till a &apos;(&apos; is met</div><div class="line">    +,- =&gt; higher precedence met-&gt; push into the operator stack, lower precedence met-&gt; calculate higher operator in stack first and then push</div><div class="line">- test case:</div><div class="line">  input: [&quot;(&quot;,&quot;(&quot;,&quot;3&quot;,&quot;+&quot;,&quot;4&quot;,&quot;)&quot;,&quot;*&quot;,&quot;(&quot;,&quot;4&quot;,&quot;+&quot;,&quot;1&quot;,&quot;)&quot;,&quot;-&quot;,&quot;4&quot;,&quot;*&quot;,&quot;2&quot;,&quot;)&quot;,&quot;+&quot;,&quot;1&quot;]</div><div class="line">  output: 28</div><div class="line">&apos;&apos;&apos;</div><div class="line">class Solution(object):</div><div class="line">    def evalRPN(self,tokens):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type tokens: List[str]</div><div class="line">        :rtype: int</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        op_stack=[]</div><div class="line">        num_stack=[]</div><div class="line">        for i in tokens:</div><div class="line">            # case &apos;(&apos;</div><div class="line">            if i==&apos;(&apos;:</div><div class="line">                op_stack.append(i)</div><div class="line">            # case &apos;)&apos;</div><div class="line">            elif i==&apos;)&apos;:</div><div class="line">                while op_stack[-1]!=&apos;(&apos;:</div><div class="line">                    num_stack.append(self.cal(op_stack.pop(),num_stack.pop(),num_stack.pop()))</div><div class="line">                op_stack.pop()</div><div class="line">            # case &apos;+&apos;,&apos;-&apos;,&apos;*&apos;,&apos;/&apos;</div><div class="line">            elif i==&apos;+&apos; or i==&apos;-&apos; or i==&apos;*&apos; or i==&apos;/&apos;:</div><div class="line">                while op_stack and self.isLowerThan(i,op_stack[-1]):</div><div class="line">                    num_stack.append(self.cal(op_stack.pop(),num_stack.pop(),num_stack.pop()))</div><div class="line">                op_stack.append(i)</div><div class="line">            # case number</div><div class="line">            else:</div><div class="line">                num_stack.append(int(i))</div><div class="line">        while op_stack:</div><div class="line">            num_stack.append(self.cal(op_stack.pop(),num_stack.pop(),num_stack.pop()))</div><div class="line">        return num_stack.pop()</div><div class="line"></div><div class="line"></div><div class="line">    def cal(self,op,num1,num2):</div><div class="line">        if op==&apos;+&apos;:</div><div class="line">            return num1+num2</div><div class="line">        if op==&apos;-&apos;:</div><div class="line">            return num2-num1</div><div class="line">        if op==&apos;*&apos;:</div><div class="line">            return num1*num2</div><div class="line">        if op==&apos;/&apos;:</div><div class="line">            return int(float(num2)/num1)</div><div class="line">        raise ValueError(&quot;Not valid operator&quot;)</div><div class="line"></div><div class="line">    def isLowerThan(self,op1,op2):</div><div class="line">        if (op1==&apos;+&apos; or op1==&apos;-&apos;) and (op2==&apos;*&apos; or op2==&apos;/&apos;):</div><div class="line">            return True</div><div class="line">        return False</div></pre></td></tr></table></figure></p>
<h2 id="71-Simplify-Path"><a href="#71-Simplify-Path" class="headerlink" title="71. Simplify Path"></a>71. Simplify Path</h2><h3 id="Problem-4"><a href="#Problem-4" class="headerlink" title="Problem"></a>Problem</h3><p>Given an absolute path for a file (Unix-style), simplify it.</p>
<p>For example,<br>path = &#x201C;/home/&#x201C;, =&gt; &#x201C;/home&#x201D;<br>path = &#x201C;/a/./b/../../c/&#x201C;, =&gt; &#x201C;/c&#x201D;<br>click to show corner cases.</p>
<p>Corner Cases:<br>Did you consider the case where path = &#x201C;/../&#x201C;?<br>In this case, you should return &#x201C;/&#x201C;.<br>Another corner case is the path might contain multiple slashes &#x2018;/&#x2018; together, such as &#x201C;/home//foo/&#x201C;.<br>In this case, you should ignore redundant slashes and return &#x201C;/home/foo&#x201D;.</p>
<h3 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&apos;&apos;&apos;</div><div class="line">Solution:</div><div class="line">- ignore &apos;.&apos;, when met &apos;..&apos;, pop from stack if stack is not empty, and finally join the stack</div><div class="line"></div><div class="line">Attention:</div><div class="line">- corner case: /../a =&gt; /a</div><div class="line">- always remember if you wanna pop from a stack check if it is empty first</div><div class="line">&apos;&apos;&apos;</div><div class="line">class Solution(object):</div><div class="line">    def simplifyPath(self, path):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type path: str</div><div class="line">        :rtype: str</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        vals=path.split(&apos;/&apos;)</div><div class="line">        stack=[]</div><div class="line">        for v in vals:</div><div class="line">            if v==&apos;&apos; or v==&apos;.&apos;: continue</div><div class="line">            if v==&apos;..&apos;:</div><div class="line">                if stack: stack.pop()</div><div class="line">            else: stack.append(v)</div><div class="line">        return &apos;/&apos;+&apos;/&apos;.join(stack)</div></pre></td></tr></table></figure>
<h2 id="84-Largest-Rectangle-in-Histogram"><a href="#84-Largest-Rectangle-in-Histogram" class="headerlink" title="84. Largest Rectangle in Histogram"></a>84. Largest Rectangle in Histogram</h2><h3 id="Problem-5"><a href="#Problem-5" class="headerlink" title="Problem"></a>Problem</h3><p>Given n non-negative integers representing the histogram&#x2019;s bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.</p>
<p>Above is a histogram where width of each bar is 1, given height = [2,1,5,6,2,3].</p>
<p>The largest rectangle is shown in the shaded area, which has area = 10 unit.</p>
<p>For example,<br>Given heights = [2,1,5,6,2,3],<br>return 10.</p>
<h3 id="Solution-5"><a href="#Solution-5" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">&apos;&apos;&apos;</div><div class="line">Solution:</div><div class="line">- primitive idea: find all rectangles and get max one, time complexity O(n^2)</div><div class="line"></div><div class="line">Followup:</div><div class="line">- O(n)?</div><div class="line">    - avoid repeated work</div><div class="line">    - identify a rectangle: identify 2 boundaries</div><div class="line">    - if cur&gt;stack.peek() --&gt; offer, else --&gt; continously poll</div><div class="line"></div><div class="line">Corner case: [0]</div><div class="line">&apos;&apos;&apos;</div><div class="line">class Solution(object):</div><div class="line">    def largestRectangleArea(self, heights):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type heights: List[int]</div><div class="line">        :rtype: int</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        if not heights: return 0</div><div class="line">        stack=[]</div><div class="line">        max_area=0</div><div class="line">        for i in range(len(heights)+1):</div><div class="line">            cur=0 if i==len(heights) else heights[i]</div><div class="line">            while stack and cur&lt;=heights[stack[-1]]:</div><div class="line">                height=heights[stack.pop()]</div><div class="line">                leftBound=0 if not stack else stack[-1]+1</div><div class="line">                rightBound=i</div><div class="line">                cur_area=(rightBound-leftBound)*height</div><div class="line">                max_area=max(cur_area,max_area)</div><div class="line">            stack.append(i)</div><div class="line">        return max_area</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    &apos;&apos;&apos;</div><div class="line">    # primitive, 2 loops</div><div class="line">    def largestRectangleArea(self, heights):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type heights: List[int]</div><div class="line">        :rtype: int</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        if not heights: return 0</div><div class="line">        max_area=0</div><div class="line">        for i in range(len(heights)):</div><div class="line">            max_area=max(heights[i],max_area)</div><div class="line">            min_height=heights[i]</div><div class="line">            for j in range(i,len(heights)):</div><div class="line">                min_height=min(min_height,heights[j])</div><div class="line">                max_area=max(min_height*(j-i+1),max_area)</div><div class="line">        return max_area</div><div class="line">        &apos;&apos;&apos;</div></pre></td></tr></table></figure>
<h1 id="Python-stack-amp-deque"><a href="#Python-stack-amp-deque" class="headerlink" title="Python stack &amp; deque"></a>Python stack &amp; deque</h1><p>&#x8FD9;&#x7BC7;&#x7528;&#x5230;&#x7684; python &#x7684;&#x77E5;&#x8BC6;&#x70B9;/&#x9700;&#x8981;&#x6CE8;&#x610F;&#x7684;&#x5730;&#x65B9;&#x3002;</p>
<h2 id="use-lists-as-stacks"><a href="#use-lists-as-stacks" class="headerlink" title="use lists as stacks"></a>use lists as stacks</h2><p>LIFO<br>add, use append()<br>retrieve, use pop()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; stack = [3, 4, 5]</div><div class="line">&gt;&gt;&gt; stack.append(6)</div><div class="line">&gt;&gt;&gt; stack.append(7)</div><div class="line">&gt;&gt;&gt; stack</div><div class="line">[3, 4, 5, 6, 7]</div><div class="line">&gt;&gt;&gt; stack.pop()</div><div class="line">7</div><div class="line">&gt;&gt;&gt; stack</div><div class="line">[3, 4, 5, 6]</div><div class="line">&gt;&gt;&gt; stack.pop()</div><div class="line">6</div><div class="line">&gt;&gt;&gt; stack.pop()</div><div class="line">5</div><div class="line">&gt;&gt;&gt; stack</div><div class="line">[3, 4]</div></pre></td></tr></table></figure></p>
<h2 id="use-lists-as-queues"><a href="#use-lists-as-queues" class="headerlink" title="use lists as queues"></a>use lists as queues</h2><p>FIFO&#xFF0C;python list &#x4F5C; queue &#x5E76;&#x4E0D; efficent&#xFF0C;&#x7528; collections.deque<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from collections import deque</div><div class="line">&gt;&gt;&gt; queue = deque([&quot;Eric&quot;, &quot;John&quot;, &quot;Michael&quot;])</div><div class="line">&gt;&gt;&gt; queue.append(&quot;Terry&quot;)           # Terry arrives</div><div class="line">&gt;&gt;&gt; queue.append(&quot;Graham&quot;)          # Graham arrives</div><div class="line">&gt;&gt;&gt; queue.popleft()                 # The first to arrive now leaves</div><div class="line">&apos;Eric&apos;</div><div class="line">&gt;&gt;&gt; queue.pop()                 # The second to arrive now leaves</div><div class="line">&apos;Graham&apos;</div><div class="line">&gt;&gt;&gt; queue                           # Remaining queue in order of arrival</div><div class="line">deque([&apos;John&apos;, &apos;Michael&apos;, &apos;Terry&apos;])</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Stack-implementation&quot;&gt;&lt;a href=&quot;#Stack-implementation&quot; class=&quot;headerlink&quot; title=&quot;Stack implementation&quot;&gt;&lt;/a&gt;Stack implementation&lt;/h1&gt;&lt;
    
    </summary>
    
      <category term="数据结构和算法" scheme="http://www.shuang0420.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="栈" scheme="http://www.shuang0420.com/tags/%E6%A0%88/"/>
    
      <category term="队列" scheme="http://www.shuang0420.com/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>数据结构和算法 -- 排序算法</title>
    <link href="http://www.shuang0420.com/2016/09/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%20--%20%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://www.shuang0420.com/2016/09/07/数据结构和算法 -- 排序算法/</id>
    <published>2016-09-07T13:55:12.000Z</published>
    <updated>2016-09-09T19:27:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>&#x5F80;&#x5F80;&#x6392;&#x5E8F;&#x662F;&#x4F5C;&#x4E3A;&#x5176;&#x4ED6;&#x7B97;&#x6CD5;&#x7684;&#x9884;&#x5904;&#x7406;&#x7B97;&#x6CD5;&#xFF0C;&#x5176;&#x91CD;&#x8981;&#x6027;&#x5374;&#x4E0D;&#x5BB9;&#x5C0F;&#x89D1;&#x3002;&#x672C;&#x7BC7;&#x8BB2;&#x5192;&#x6CE1;&#x6392;&#x5E8F;&#xFF0F;&#x9009;&#x62E9;&#x6392;&#x5E8F;&#xFF0F;&#x63D2;&#x5165;&#x6392;&#x5E8F;&#xFF0F;&#x5E0C;&#x5C14;&#x6392;&#x5E8F;&#xFF0F;&#x5F52;&#x5E76;&#x6392;&#x5E8F;&#xFF0F;&#x5FEB;&#x901F;&#x6392;&#x5E8F;&#xFF0F;&#x6876;&#x6392;&#x5E8F;&#xFF0F;&#x8BA1;&#x6570;&#x6392;&#x5E8F;&#x3002;<br><a id="more"></a></p>
<h1 id="&#x6982;&#x89C8;"><a href="#&#x6982;&#x89C8;" class="headerlink" title="&#x6982;&#x89C8;"></a>&#x6982;&#x89C8;</h1><table>
<thead>
<tr>
<th>algorithm</th>
<th>in-place</th>
<th>worst</th>
<th>average</th>
<th>best</th>
<th>space complexity</th>
<th>remark</th>
</tr>
</thead>
<tbody>
<tr>
<td>bubble</td>
<td>yes</td>
<td>$N^2$</td>
<td>$N^2$</td>
<td>N</td>
<td>$O(1)$</td>
<td>&#x2014;&#x2014;</td>
</tr>
<tr>
<td>selection</td>
<td>yes</td>
<td>$N^2$</td>
<td>$N^2$</td>
<td>$N^2$</td>
<td>$O(1)$</td>
<td>&#x2014;&#x2014;</td>
</tr>
<tr>
<td>insertion</td>
<td>yes</td>
<td>$N^2$</td>
<td>$N^2$</td>
<td>N</td>
<td>$O(1)$</td>
<td>&#x2014;&#x2014;</td>
</tr>
<tr>
<td>shell</td>
<td>yes</td>
<td>&#x2014;&#x2013;</td>
<td>&#x2014;&#x2014;-</td>
<td>N</td>
<td>$O(1)$</td>
<td>&#x2014;&#x2014;</td>
</tr>
<tr>
<td>merge</td>
<td></td>
<td>$NlogN$</td>
<td>$NlogN$</td>
<td>$NlogN$</td>
<td>$O(N)$</td>
<td>&#x2014;&#x2014;</td>
</tr>
<tr>
<td>quick</td>
<td>yes</td>
<td>$N^2$</td>
<td>$NlogN$</td>
<td>$NlogN$</td>
<td>$O(logN)$</td>
<td>&#x2014;&#x2014;</td>
</tr>
<tr>
<td>heap</td>
<td>yes</td>
<td>$NlogN$</td>
<td>$NlogN$</td>
<td>$NlogN$</td>
<td>$O(1)$</td>
<td>&#x2014;&#x2014;</td>
</tr>
</tbody>
</table>
<h1 id="Bubble-sort-&#x5192;&#x6CE1;&#x6392;&#x5E8F;"><a href="#Bubble-sort-&#x5192;&#x6CE1;&#x6392;&#x5E8F;" class="headerlink" title="Bubble sort &#x5192;&#x6CE1;&#x6392;&#x5E8F;"></a>Bubble sort &#x5192;&#x6CE1;&#x6392;&#x5E8F;</h1><p>&#x5192;&#x6CE1;&#x6392;&#x5E8F;&#x7684;&#x539F;&#x7406;&#x975E;&#x5E38;&#x7B80;&#x5355;&#xFF0C;&#x91CD;&#x590D;&#x5730;&#x8D70;&#x8BBF;&#x8FC7;&#x8981;&#x6392;&#x5E8F;&#x7684;&#x6570;&#x5217;&#xFF0C;&#x4E00;&#x6B21;&#x6BD4;&#x8F83;&#x4E24;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x5982;&#x679C;&#x4ED6;&#x4EEC;&#x7684;&#x987A;&#x5E8F;&#x9519;&#x8BEF;&#x5C31;&#x628A;&#x4ED6;&#x4EEC;&#x4EA4;&#x6362;&#x8FC7;&#x6765;&#x3002;<br>&#x5185;&#x90E8;&#x7A33;&#x5B9A;&#x6392;&#x5E8F;&#xFF0C;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6; $O(N^2)$&#xFF0C;&#x7A7A;&#x95F4;&#x590D;&#x6742;&#x5EA6; $O(1)$</p>
<p>&#x6B65;&#x9AA4;&#xFF1A;</p>
<ol>
<li>&#x6BD4;&#x8F83;&#x76F8;&#x90BB;&#x7684;&#x5143;&#x7D20;&#x3002;&#x5982;&#x679C;&#x524D;&#x4E00;&#x4E2A;&#x6BD4;&#x540E;&#x4E00;&#x4E2A;&#x5927;&#xFF0C;&#x5C31;&#x4EA4;&#x6362;&#x4ED6;&#x4EEC;&#x4E24;&#x4E2A;&#x3002;</li>
<li>&#x5BF9;&#x7B2C; 0 &#x4E2A;&#x5230;&#x7B2C; n-1 &#x4E2A;&#x6570;&#x636E;&#x505A;&#x540C;&#x6837;&#x7684;&#x5DE5;&#x4F5C;&#x3002;&#x8FD9;&#x65F6;&#xFF0C;&#x6700;&#x5927;&#x7684;&#x6570;&#x5C31;&#x201C;&#x6D6E;&#x201D;&#x5230;&#x4E86;&#x6570;&#x7EC4;&#x6700;&#x540E;&#x7684;&#x4F4D;&#x7F6E;&#x4E0A;&#x3002;</li>
<li>&#x6301;&#x7EED;&#x6BCF;&#x6B21;&#x5BF9;&#x8D8A;&#x6765;&#x8D8A;&#x5C11;&#x7684;&#x5143;&#x7D20;&#x91CD;&#x590D;&#x4E0A;&#x9762;&#x7684;&#x6B65;&#x9AA4;&#xFF0C;&#x76F4;&#x5230;&#x6CA1;&#x6709;&#x4EFB;&#x4F55;&#x4E00;&#x5BF9;&#x6570;&#x5B57;&#x9700;&#x8981;&#x6BD4;&#x8F83;&#x3002;</li>
</ol>
<p>&#x6BCF;&#x8F6E;&#x64CD;&#x4F5C;&#x90FD;&#x5C06;&#x4E00;&#x4E2A;&#x6700;&#x5927;&#x7684;&#x6570;&#x201C;&#x6D6E;&#x201D;&#x5230;&#x6700;&#x540E;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x6BCF;&#x8F6E;&#x90FD;&#x6709;&#x6700;&#x540E; N-i &#x4E2A;&#x6570;&#x5DF2;&#x7ECF;&#x6392;&#x5E8F;&#xFF0C;&#x6240;&#x4EE5;&#x5185;&#x5FAA;&#x73AF;&#x662F;&#x4ECE; 1 &#x5230; N-i&#x3002;</p>
<h2 id="&#x57FA;&#x672C;&#x6B3E;"><a href="#&#x57FA;&#x672C;&#x6B3E;" class="headerlink" title="&#x57FA;&#x672C;&#x6B3E;"></a>&#x57FA;&#x672C;&#x6B3E;</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">#=======================================================================</div><div class="line"># Time Complexity of Solution:</div><div class="line">#  Best O(n^2); Average O(n^2); Worst O(n^2).</div><div class="line">#</div><div class="line">#  Approach:</div><div class="line">#   Bubblesort is an elementarray sorting algorithm. The idea is to</div><div class="line">#   imagine bubbling the smallest elements of a (vertical) array to the</div><div class="line">#   top; then bubble the next smallest; then so on until the entire</div><div class="line">#   array is sorted. Bubble sort is worse than both insertion sort and</div><div class="line">#   selection sort. It moves elements as many times as insertion sort</div><div class="line">#   (bad) and it takes as long as selection sort (bad). On the positive</div><div class="line">#   side, bubble sort is easy to understand. Also there are highly</div><div class="line">#   improved variants of bubble sort.</div><div class="line">#=======================================================================</div><div class="line"></div><div class="line"></div><div class="line">def bubble_sort(array):</div><div class="line">    n = len(array)</div><div class="line">    for i in range(n):</div><div class="line">        for j in range(1, n - i):</div><div class="line">            if array[j - 1] &gt; array[j]:</div><div class="line">                array[j - 1], array[j] = array[j], array[j - 1]</div><div class="line">    return array</div></pre></td></tr></table></figure>
<h2 id="&#x4F18;&#x5316;&#x4E00;"><a href="#&#x4F18;&#x5316;&#x4E00;" class="headerlink" title="&#x4F18;&#x5316;&#x4E00;"></a>&#x4F18;&#x5316;&#x4E00;</h2><p>&#x4F18;&#x5316;1&#xFF1A;&#x67D0;&#x4E00;&#x8D9F;&#x904D;&#x5386;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x6570;&#x636E;&#x4EA4;&#x6362;&#xFF0C;&#x5219;&#x8BF4;&#x660E;&#x5DF2;&#x7ECF;&#x6392;&#x597D;&#x5E8F;&#x4E86;&#xFF0C;&#x56E0;&#x6B64;&#x4E0D;&#x7528;&#x518D;&#x8FDB;&#x884C;&#x8FED;&#x4EE3;&#x4E86;&#x3002;&#x7528;&#x4E00;&#x4E2A;&#x6807;&#x8BB0;&#x8BB0;&#x5F55;&#x8FD9;&#x4E2A;&#x72B6;&#x6001;&#x5373;&#x53EF;&#x3002;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">def bubble_sort2(array):</div><div class="line">    n = len(array)</div><div class="line">    for i in range(n):</div><div class="line">        sorted = True</div><div class="line">        for j in range(1, n - i):</div><div class="line">            if array[j - 1] &gt; array[j]:</div><div class="line">                flag = False</div><div class="line">                array[j - 1], array[j] = array[j], array[j - 1]</div><div class="line">        if sorted:</div><div class="line">            return array  # or break</div><div class="line">    return array</div></pre></td></tr></table></figure></p>
<h2 id="&#x4F18;&#x5316;&#x4E8C;"><a href="#&#x4F18;&#x5316;&#x4E8C;" class="headerlink" title="&#x4F18;&#x5316;&#x4E8C;"></a>&#x4F18;&#x5316;&#x4E8C;</h2><p>&#x4F18;&#x5316;2&#xFF1A;&#x8BB0;&#x5F55;&#x67D0;&#x6B21;&#x904D;&#x5386;&#x65F6;&#x6700;&#x540E;&#x53D1;&#x751F;&#x6570;&#x636E;&#x4EA4;&#x6362;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x8FD9;&#x4E2A;&#x4F4D;&#x7F6E;&#x4E4B;&#x540E;&#x7684;&#x6570;&#x636E;&#x663E;&#x7136;&#x5DF2;&#x7ECF;&#x6709;&#x5E8F;&#xFF0C;&#x4E0D;&#x7528;&#x518D;&#x6392;&#x5E8F;&#x4E86;&#x3002;&#x56E0;&#x6B64;&#x901A;&#x8FC7;&#x8BB0;&#x5F55;&#x6700;&#x540E;&#x53D1;&#x751F;&#x6570;&#x636E;&#x4EA4;&#x6362;&#x7684;&#x4F4D;&#x7F6E;&#x5C31;&#x53EF;&#x4EE5;&#x786E;&#x5B9A;&#x4E0B;&#x6B21;&#x5FAA;&#x73AF;&#x7684;&#x8303;&#x56F4;&#x4E86;&#x3002;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">def bubble_sort3(array):</div><div class="line">    n = len(array)</div><div class="line">    k = n</div><div class="line">    for i in range(n):</div><div class="line">        flag = False  # &#x6709;&#x6CA1;&#x6709;&#x4EA4;&#x6362;</div><div class="line">        for j in range(1, k):  # &#x53EA;&#x904D;&#x5386;&#x5230;&#x6700;&#x540E;&#x4EA4;&#x6362;&#x7684;&#x4F4D;&#x7F6E;</div><div class="line">            if array[j - 1] &gt; array[j]:</div><div class="line">                flag = True</div><div class="line">                k = j  # &#x8BB0;&#x5F55;&#x6700;&#x540E;&#x7684;&#x4EA4;&#x6362;&#x4F4D;&#x7F6E;</div><div class="line">                array[j - 1], array[j] = array[j], array[j - 1]</div><div class="line">        if not flag:</div><div class="line">            return array  # or break</div><div class="line">    return array</div></pre></td></tr></table></figure></p>
<h1 id="Selection-sort-&#x9009;&#x62E9;&#x6392;&#x5E8F;"><a href="#Selection-sort-&#x9009;&#x62E9;&#x6392;&#x5E8F;" class="headerlink" title="Selection sort &#x9009;&#x62E9;&#x6392;&#x5E8F;"></a>Selection sort &#x9009;&#x62E9;&#x6392;&#x5E8F;</h1><p>&#x9009;&#x62E9;&#x6392;&#x5E8F;&#x65E0;&#x7591;&#x662F;&#x6700;&#x7B80;&#x5355;&#x76F4;&#x89C2;&#x7684;&#x6392;&#x5E8F;&#x3002;<br>&#x5185;&#x90E8;&#x4E0D;&#x7A33;&#x5B9A;&#x6392;&#x5E8F;&#xFF0C;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6; $O(N^2)$&#xFF0C;&#x7A7A;&#x95F4;&#x590D;&#x6742;&#x5EA6; $O(1)$</p>
<p>&#x6B65;&#x9AA4;&#xFF1A;</p>
<ol>
<li>&#x5728;&#x672A;&#x6392;&#x5E8F;&#x5E8F;&#x5217;&#x4E2D;&#x627E;&#x5230;&#x6700;&#x5C0F;&#xFF08;&#x5927;&#xFF09;&#x5143;&#x7D20;&#xFF0C;&#x5B58;&#x653E;&#x5230;&#x6392;&#x5E8F;&#x5E8F;&#x5217;&#x7684;&#x8D77;&#x59CB;&#x4F4D;&#x7F6E;&#x3002;</li>
<li>&#x518D;&#x4ECE;&#x5269;&#x4F59;&#x672A;&#x6392;&#x5E8F;&#x5143;&#x7D20;&#x4E2D;&#x7EE7;&#x7EED;&#x5BFB;&#x627E;&#x6700;&#x5C0F;&#xFF08;&#x5927;&#xFF09;&#x5143;&#x7D20;&#xFF0C;&#x7136;&#x540E;&#x653E;&#x5230;&#x5DF2;&#x6392;&#x5E8F;&#x5E8F;&#x5217;&#x7684;&#x672B;&#x5C3E;&#x3002;<br>&#x4EE5;&#x6B64;&#x7C7B;&#x63A8;&#xFF0C;&#x76F4;&#x5230;&#x6240;&#x6709;&#x5143;&#x7D20;&#x5747;&#x6392;&#x5E8F;&#x5B8C;&#x6BD5;&#x3002;</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">#=======================================================================</div><div class="line">#  Time Complexity of Solution:</div><div class="line">#  Best O(n^2); Average O(n^2); Worst O(n^2).</div><div class="line">#</div><div class="line">#  Approach:</div><div class="line">#  Selection sort is a step up from insertion sort from a memory</div><div class="line">#  viewpoint. It only swaps elements that need to be swapped. In terms</div><div class="line">#  of time complexity, however, insertion sort is better.</div><div class="line">#=======================================================================</div><div class="line"></div><div class="line"></div><div class="line">def select_sort(array):</div><div class="line">    n = len(array)</div><div class="line">    for i in range(n):</div><div class="line">        min = i</div><div class="line">        for j in range(i + 1, n):</div><div class="line">            if array[j] &lt; array[min]:</div><div class="line">                min = j</div><div class="line">        array[i], array[min] = array[min], array[i]</div><div class="line">    return array</div></pre></td></tr></table></figure>
<h1 id="Insertion-sort-&#x63D2;&#x5165;&#x6392;&#x5E8F;"><a href="#Insertion-sort-&#x63D2;&#x5165;&#x6392;&#x5E8F;" class="headerlink" title="Insertion sort &#x63D2;&#x5165;&#x6392;&#x5E8F;"></a>Insertion sort &#x63D2;&#x5165;&#x6392;&#x5E8F;</h1><p>&#x6BCF;&#x8F6E;&#x5728;&#x5DF2;&#x7ECF;&#x6392;&#x597D;&#x7684;&#x5E8F;&#x5217;&#x4E2D;&#x63D2;&#x5165;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x6570;&#x5B57;&#x3002;&#x63D2;&#x5165;&#x6392;&#x5E8F;&#x7684;&#x5DE5;&#x4F5C;&#x539F;&#x7406;&#x662F;&#xFF0C;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x672A;&#x6392;&#x5E8F;&#x6570;&#x636E;&#xFF0C;&#x5728;&#x5DF2;&#x6392;&#x5E8F;&#x5E8F;&#x5217;&#x4E2D;&#x4ECE;&#x540E;&#x5411;&#x524D;&#x626B;&#x63CF;&#xFF0C;&#x627E;&#x5230;&#x76F8;&#x5E94;&#x4F4D;&#x7F6E;&#x5E76;&#x63D2;&#x5165;&#x3002;<br>&#x5185;&#x90E8;&#x7A33;&#x5B9A;&#x6392;&#x5E8F;&#xFF0C;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6; $O(N^2)$&#xFF0C;&#x7A7A;&#x95F4;&#x590D;&#x6742;&#x5EA6; $O(1)$<br>&#x6B65;&#x9AA4;&#xFF1A;</p>
<ol>
<li>&#x4ECE;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x5F00;&#x59CB;&#xFF0C;&#x8BE5;&#x5143;&#x7D20;&#x53EF;&#x4EE5;&#x8BA4;&#x4E3A;&#x5DF2;&#x7ECF;&#x88AB;&#x6392;&#x5E8F;</li>
<li>&#x53D6;&#x51FA;&#x4E0B;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x5728;&#x5DF2;&#x7ECF;&#x6392;&#x5E8F;&#x7684;&#x5143;&#x7D20;&#x5E8F;&#x5217;&#x4E2D;&#x4ECE;&#x540E;&#x5411;&#x524D;&#x626B;&#x63CF;</li>
<li>&#x5982;&#x679C;&#x88AB;&#x626B;&#x63CF;&#x7684;&#x5143;&#x7D20;&#xFF08;&#x5DF2;&#x6392;&#x5E8F;&#xFF09;&#x5927;&#x4E8E;&#x65B0;&#x5143;&#x7D20;&#xFF0C;&#x5C06;&#x8BE5;&#x5143;&#x7D20;&#x540E;&#x79FB;&#x4E00;&#x4F4D;</li>
<li>&#x91CD;&#x590D;&#x6B65;&#x9AA4;3&#xFF0C;&#x76F4;&#x5230;&#x627E;&#x5230;&#x5DF2;&#x6392;&#x5E8F;&#x7684;&#x5143;&#x7D20;&#x5C0F;&#x4E8E;&#x6216;&#x8005;&#x7B49;&#x4E8E;&#x65B0;&#x5143;&#x7D20;&#x7684;&#x4F4D;&#x7F6E;</li>
<li>&#x5C06;&#x65B0;&#x5143;&#x7D20;&#x63D2;&#x5165;&#x5230;&#x8BE5;&#x4F4D;&#x7F6E;&#x540E;</li>
<li>&#x91CD;&#x590D;&#x6B65;&#x9AA4;2~5</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">#=======================================================================</div><div class="line">#  Time Complexity of Solution:</div><div class="line">#  Best O(n); Average O(n^2); Worst O(n^2).</div><div class="line">#</div><div class="line">#  Approach:</div><div class="line">#  Insertion sort is good for collections that are very small</div><div class="line">#  or nearly sorted. Otherwise it&apos;s not a good sorting algorithm:</div><div class="line">#  it moves data around too much. Each time an insertion is made,</div><div class="line">#  all elements in a greater position are shifted.</div><div class="line">#=======================================================================</div><div class="line"></div><div class="line"></div><div class="line">def insertion_sort(array):</div><div class="line">    n = len(array)</div><div class="line">    for i in range(1, n):</div><div class="line">        val = array[i]</div><div class="line">        position = i</div><div class="line">        while position &gt; 0 and array[position - 1] &gt; val:</div><div class="line">            array[position] = array[position - 1]</div><div class="line">            position -= 1</div><div class="line">        array[position] = val</div><div class="line">    return array</div></pre></td></tr></table></figure>
<h1 id="Shell-Sort-&#x5E0C;&#x5C14;&#x6392;&#x5E8F;"><a href="#Shell-Sort-&#x5E0C;&#x5C14;&#x6392;&#x5E8F;" class="headerlink" title="Shell Sort &#x5E0C;&#x5C14;&#x6392;&#x5E8F;"></a>Shell Sort &#x5E0C;&#x5C14;&#x6392;&#x5E8F;</h1><p>&#x5E0C;&#x5C14;&#x6392;&#x5E8F;&#xFF0C;&#x4E5F;&#x79F0;&#x9012;&#x51CF;&#x589E;&#x91CF;&#x6392;&#x5E8F;&#x7B97;&#x6CD5;&#xFF0C;&#x5B9E;&#x8D28;&#x662F;&#x5206;&#x7EC4;&#x63D2;&#x5165;&#x6392;&#x5E8F;&#x3002;<br>&#x5185;&#x90E8;&#x975E;&#x7A33;&#x5B9A;&#x6392;&#x5E8F;&#x7B97;&#x6CD5;&#x3002;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E0D;&#x5B9A;&#xFF0C;&#x7A7A;&#x95F4;&#x590D;&#x6742;&#x5EA6;$O(1)$</p>
<p>&#x5E0C;&#x5C14;&#x6392;&#x5E8F;&#x7684;&#x57FA;&#x672C;&#x601D;&#x60F3;&#x662F;&#xFF1A;&#x5C06;&#x6570;&#x7EC4;&#x5217;&#x5728;&#x4E00;&#x4E2A;&#x8868;&#x4E2D;&#x5E76;&#x5BF9;&#x5217;&#x5206;&#x522B;&#x8FDB;&#x884C;&#x63D2;&#x5165;&#x6392;&#x5E8F;&#xFF0C;&#x91CD;&#x590D;&#x8FD9;&#x8FC7;&#x7A0B;&#xFF0C;&#x4E0D;&#x8FC7;&#x6BCF;&#x6B21;&#x7528;&#x66F4;&#x957F;&#x7684;&#x5217;&#xFF08;&#x6B65;&#x957F;&#x66F4;&#x957F;&#x4E86;&#xFF0C;&#x5217;&#x6570;&#x66F4;&#x5C11;&#x4E86;&#xFF09;&#x6765;&#x8FDB;&#x884C;&#x3002;&#x6700;&#x540E;&#x6574;&#x4E2A;&#x8868;&#x5C31;&#x53EA;&#x6709;&#x4E00;&#x5217;&#x4E86;&#x3002;&#x5C06;&#x6570;&#x7EC4;&#x8F6C;&#x6362;&#x81F3;&#x8868;&#x662F;&#x4E3A;&#x4E86;&#x66F4;&#x597D;&#x5730;&#x7406;&#x89E3;&#x8FD9;&#x7B97;&#x6CD5;&#xFF0C;&#x7B97;&#x6CD5;&#x672C;&#x8EAB;&#x8FD8;&#x662F;&#x4F7F;&#x7528;&#x6570;&#x7EC4;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#x3002;</p>
<p>&#x4F8B;&#x5982;&#xFF0C;&#x5047;&#x8BBE;&#x6709;&#x8FD9;&#x6837;&#x4E00;&#x7EC4;&#x6570;[ 13 14 94 33 82 25 59 94 65 23 45 27 73 25 39 10 ]&#xFF0C;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x4EE5;&#x6B65;&#x957F;&#x4E3A;5&#x5F00;&#x59CB;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x5C06;&#x8FD9;&#x5217;&#x8868;&#x653E;&#x5728;&#x6709;5&#x5217;&#x7684;&#x8868;&#x4E2D;&#x6765;&#x66F4;&#x597D;&#x5730;&#x63CF;&#x8FF0;&#x7B97;&#x6CD5;&#xFF0C;&#x8FD9;&#x6837;&#x4ED6;&#x4EEC;&#x5C31;&#x5E94;&#x8BE5;&#x770B;&#x8D77;&#x6765;&#x662F;&#x8FD9;&#x6837;&#xFF1A;</p>
<pre>
13 14 94 33 82
25 59 94 65 23
45 27 73 25 39
10
</pre>

<p>&#x7136;&#x540E;&#x6211;&#x4EEC;&#x5BF9;&#x6BCF;&#x5217;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF1A;</p>
<pre>
10 14 73 25 23
13 27 94 33 39
25 59 94 65 82
45
</pre>

<p>&#x5C06;&#x4E0A;&#x8FF0;&#x56DB;&#x884C;&#x6570;&#x5B57;&#xFF0C;&#x4F9D;&#x5E8F;&#x63A5;&#x5728;&#x4E00;&#x8D77;&#x65F6;&#x6211;&#x4EEC;&#x5F97;&#x5230;&#xFF1A;[ 10 14 73 25 23 13 27 94 33 39 25 59 94 65 82 45 ]&#x3002;&#x8FD9;&#x65F6;10&#x5DF2;&#x7ECF;&#x79FB;&#x81F3;&#x6B63;&#x786E;&#x4F4D;&#x7F6E;&#x4E86;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x4EE5;3&#x4E3A;&#x6B65;&#x957F;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF1A;</p>
<pre>
10 14 73
25 23 13
27 94 33
39 25 59
94 65 82
45
</pre>

<p>&#x6392;&#x5E8F;&#x4E4B;&#x540E;&#x53D8;&#x4E3A;&#xFF1A;</p>
<pre>
10 14 13
25 23 33
27 25 59
39 65 73
45 94 82
94
</pre>

<p>&#x6700;&#x540E;&#x4EE5;1&#x6B65;&#x957F;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF08;&#x6B64;&#x65F6;&#x5C31;&#x662F;&#x7B80;&#x5355;&#x7684;&#x63D2;&#x5165;&#x6392;&#x5E8F;&#x4E86;&#xFF09;&#x3002;</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">def shell_sort(array):</div><div class="line">    n = len(array)</div><div class="line">    gap = n / 2 # &#x521D;&#x59CB;&#x6B65;&#x957F;</div><div class="line">    while gap &gt; 0:</div><div class="line">        for i in range(gap, n):# &#x6BCF;&#x4E00;&#x5217;&#x8FDB;&#x884C;&#x63D2;&#x5165;&#x6392;&#x5E8F; , &#x4ECE;gap &#x5230; n-1</div><div class="line">            position = i</div><div class="line">            val = array[i]</div><div class="line">            while position &gt; 0 and array[position - 1] &gt; val:</div><div class="line">                array[position] = array[position - 1]</div><div class="line">                position -= 1</div><div class="line">            array[position] = val</div><div class="line">        gap = gap / 2 # &#x91CD;&#x65B0;&#x8BBE;&#x7F6E;&#x6B65;&#x957F;</div><div class="line">    return array</div></pre></td></tr></table></figure>
<p>&#x4E0A;&#x9762;&#x6E90;&#x7801;&#x7684;&#x6B65;&#x957F;&#x7684;&#x9009;&#x62E9;&#x662F;&#x4ECE;n/2&#x5F00;&#x59CB;&#xFF0C;&#x6BCF;&#x6B21;&#x518D;&#x51CF;&#x534A;&#xFF0C;&#x76F4;&#x81F3;&#x4E3A;0&#x3002;&#x6B65;&#x957F;&#x7684;&#x9009;&#x62E9;&#x76F4;&#x63A5;&#x51B3;&#x5B9A;&#x4E86;&#x5E0C;&#x5C14;&#x6392;&#x5E8F;&#x7684;&#x590D;&#x6742;&#x5EA6;</p>
<h1 id="Merge-Sort-&#x5F52;&#x5E76;&#x6392;&#x5E8F;"><a href="#Merge-Sort-&#x5F52;&#x5E76;&#x6392;&#x5E8F;" class="headerlink" title="Merge Sort &#x5F52;&#x5E76;&#x6392;&#x5E8F;"></a>Merge Sort &#x5F52;&#x5E76;&#x6392;&#x5E8F;</h1><p>&#x5F52;&#x5E76;&#x6392;&#x5E8F;&#x662F;&#x91C7;&#x7528;&#x5206;&#x6CBB;&#x6CD5;&#x7684;&#x4E00;&#x4E2A;&#x975E;&#x5E38;&#x5178;&#x578B;&#x7684;&#x5E94;&#x7528;&#x3002;&#x5F52;&#x5E76;&#x6392;&#x5E8F;&#x7684;&#x601D;&#x60F3;&#x5C31;&#x662F;&#x5148;&#x9012;&#x5F52;&#x5206;&#x89E3;&#x6570;&#x7EC4;&#xFF0C;&#x89E3;&#x51B3;&#x5B50;&#x96C6;&#x7684;&#x6392;&#x5E8F;&#x95EE;&#x9898;&#xFF0C;&#x518D;&#x5408;&#x5E76;&#x4E24;&#x4E2A;&#x6709;&#x5E8F;&#x6570;&#x7EC4;&#x3002;&#x7531;&#x4E8E;&#x57FA;&#x672C;&#x7684;&#x903B;&#x8F91;&#x601D;&#x7EF4;&#x7ED3;&#x6784;&#x662F;&#x4E8C;&#x53C9;&#x6811;&#xFF0C;&#x4E5F;&#x53EB;&#x4E8C;&#x8DEF;&#x5F52;&#x5E76;&#x6392;&#x5E8F;&#x3002;</p>
<p>&#x5148;&#x8003;&#x8651;&#x5408;&#x5E76;&#x4E24;&#x4E2A;&#x6709;&#x5E8F;&#x6570;&#x7EC4;&#xFF0C;&#x57FA;&#x672C;&#x601D;&#x8DEF;&#x662F;&#x6BD4;&#x8F83;&#x4E24;&#x4E2A;&#x6570;&#x7EC4;&#x7684;&#x6700;&#x524D;&#x9762;&#x7684;&#x6570;&#xFF0C;&#x8C01;&#x5C0F;&#x5C31;&#x5148;&#x53D6;&#x8C01;&#xFF0C;&#x53D6;&#x4E86;&#x540E;&#x76F8;&#x5E94;&#x7684;&#x6307;&#x9488;&#x5C31;&#x5F80;&#x540E;&#x79FB;&#x4E00;&#x4F4D;&#x3002;&#x7136;&#x540E;&#x518D;&#x6BD4;&#x8F83;&#xFF0C;&#x76F4;&#x81F3;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#x4E3A;&#x7A7A;&#xFF0C;&#x6700;&#x540E;&#x628A;&#x53E6;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#x7684;&#x5269;&#x4F59;&#x90E8;&#x5206;&#x590D;&#x5236;&#x8FC7;&#x6765;&#x5373;&#x53EF;&#x3002;</p>
<p>&#x518D;&#x8003;&#x8651;&#x9012;&#x5F52;&#x5206;&#x89E3;&#xFF0C;&#x57FA;&#x672C;&#x601D;&#x8DEF;&#x662F;&#x5C06;&#x6570;&#x7EC4;&#x5206;&#x89E3;&#x6210; left &#x548C; right&#xFF0C;&#x5982;&#x679C;&#x8FD9;&#x4E24;&#x4E2A;&#x6570;&#x7EC4;&#x5185;&#x90E8;&#x6570;&#x636E;&#x662F;&#x6709;&#x5E8F;&#x7684;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x53EF;&#x4EE5;&#x7528;&#x4E0A;&#x9762;&#x5408;&#x5E76;&#x6570;&#x7EC4;&#x7684;&#x65B9;&#x6CD5;&#x5C06;&#x8FD9;&#x4E24;&#x4E2A;&#x6570;&#x7EC4;&#x5408;&#x5E76;&#x6392;&#x5E8F;&#x3002;&#x5982;&#x4F55;&#x8BA9;&#x8FD9;&#x4E24;&#x4E2A;&#x6570;&#x7EC4;&#x5185;&#x90E8;&#x662F;&#x6709;&#x5E8F;&#x7684;&#xFF1F;&#x53EF;&#x4EE5;&#x518D;&#x4E8C;&#x5206;&#xFF0C;&#x76F4;&#x81F3;&#x5206;&#x89E3;&#x51FA;&#x7684;&#x5C0F;&#x7EC4;&#x53EA;&#x542B;&#x6709;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x65F6;&#x4E3A;&#x6B62;&#xFF0C;&#x6B64;&#x65F6;&#x8BA4;&#x4E3A;&#x8BE5;&#x5C0F;&#x7EC4;&#x5185;&#x90E8;&#x5DF2;&#x6709;&#x5E8F;&#x3002;&#x7136;&#x540E;&#x5408;&#x5E76;&#x6392;&#x5E8F;&#x76F8;&#x90BB;&#x4E8C;&#x4E2A;&#x5C0F;&#x7EC4;&#x5373;&#x53EF;&#x3002;</p>
<p>&#x5916;&#x90E8;&#x7A33;&#x5B9A;&#x6392;&#x5E8F;&#x3002;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6; $O(nlog(n))$&#xFF0C;&#x7A7A;&#x95F4;&#x590D;&#x6742;&#x5EA6; $O(n)$&#x3002;&#x5806;&#x6392;&#x5E8F;&#x548C;&#x5FEB;&#x901F;&#x6392;&#x5E8F;&#x7684;&#x590D;&#x6742;&#x5EA6;&#x4E5F;&#x90FD;&#x662F; $O(nlog(n))$&#xFF0C;&#x4F46;&#x5B83;&#x4EEC;&#x662F;&#x4E0D;&#x7A33;&#x5B9A;&#x7684;&#x3002;&#x5728;&#x6392;&#x5E8F;&#x7B97;&#x6CD5;&#x4E2D;&#xFF0C;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x662F; $O(nlog(n))$ &#x7684;&#x6392;&#x5E8F;&#x7B97;&#x6CD5;&#x53EA;&#x6709;&#x5F52;&#x5E76;&#x6392;&#x5E8F;&#x3002;</p>
<h2 id="&#x57FA;&#x672C;&#x6B3E;-1"><a href="#&#x57FA;&#x672C;&#x6B3E;-1" class="headerlink" title="&#x57FA;&#x672C;&#x6B3E;"></a>&#x57FA;&#x672C;&#x6B3E;</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">#=======================================================================</div><div class="line">#  Time Complexity of Solution:</div><div class="line">#  Best = Average = Worst = O(nlog(n)).</div><div class="line">#</div><div class="line">#  Approach:</div><div class="line">#   Merge sort is a divide and conquer algorithm. In the divide and</div><div class="line">#   conquer paradigm, a problem is broken into pieces where each piece</div><div class="line">#   still retains all the properties of the larger problem -- except</div><div class="line">#   its size. To solve the original problem, each piece is solved</div><div class="line">#   individually; then the pieces are merged back together.</div><div class="line">#</div><div class="line">#   For illustration, imagine needing to sort an array of 200 elements</div><div class="line">#   using selection sort. Since selection sort takes O(n^2), it would</div><div class="line">#   take about 40,000 time units to sort the array. Now imagine</div><div class="line">#   splitting the array into ten equal pieces and sorting each piece</div><div class="line">#   individually still using selection sort. Now it would take 400</div><div class="line">#   time units to sort each piece; for a grand total of 4000.</div><div class="line">#   Once each piece is sorted, merging them back together would take</div><div class="line">#   about 200 time units; for a grand total of 200+4000 = 4,200.</div><div class="line">#   Clearly 4,200 is an impressive improvement over 40,000. Now</div><div class="line">#   imagine greater. Imagine splitting the original array into</div><div class="line">#   groups of two and then sorting them. In the end, it would take about</div><div class="line">#   1,000 time units to sort the array. That&apos;s how merge sort works.</div><div class="line">#</div><div class="line">#  NOTE to the Python experts:</div><div class="line">#     While it might seem more &quot;Pythonic&quot; to take such approach as</div><div class="line">#</div><div class="line">#         mid = len(aList) / 2</div><div class="line">#         left = mergesort(aList[:mid])</div><div class="line">#         right = mergesort(aList[mid:])</div><div class="line">#</div><div class="line">#     That approach take too much memory for creating sublists.</div><div class="line">#=======================================================================</div><div class="line"></div><div class="line"></div><div class="line">def merge_sort(array):</div><div class="line">    if len(array) &lt;= 1:</div><div class="line">        return array</div><div class="line">    mid = len(array) / 2</div><div class="line">    left = merge_sort(array[:mid])</div><div class="line">    right = merge_sort(array[mid:])</div><div class="line">    return merge(left, right)</div><div class="line"></div><div class="line"></div><div class="line">def merge(left, right):</div><div class="line">    l, r = 0, 0</div><div class="line">    result = []</div><div class="line">    while l &lt; len(left) and r &lt; len(right):</div><div class="line">        if left[l] &lt; right[r]:</div><div class="line">            result.append(left[l])</div><div class="line">            l += 1</div><div class="line">        else:</div><div class="line">            result.append(right[r])</div><div class="line">            r += 1</div><div class="line">    # &#x5982;&#x679C;&#x6709;&#x9057;&#x7559;&#x6CA1;&#x6709;&#x6BD4;&#x8F83;&#x7684;</div><div class="line">    result += left[l:]</div><div class="line">    result += right[r:]</div><div class="line">    return result</div></pre></td></tr></table></figure>
<h2 id="&#x4F18;&#x5316;"><a href="#&#x4F18;&#x5316;" class="headerlink" title="&#x4F18;&#x5316;"></a>&#x4F18;&#x5316;</h2><h3 id="&#x7ED3;&#x5408;&#x5176;&#x4ED6;&#x6392;&#x5E8F;"><a href="#&#x7ED3;&#x5408;&#x5176;&#x4ED6;&#x6392;&#x5E8F;" class="headerlink" title="&#x7ED3;&#x5408;&#x5176;&#x4ED6;&#x6392;&#x5E8F;"></a>&#x7ED3;&#x5408;&#x5176;&#x4ED6;&#x6392;&#x5E8F;</h3><p>&#x5728;&#x6570;&#x7EC4;&#x957F;&#x5EA6;&#x6BD4;&#x8F83;&#x77ED;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x4E0D;&#x8FDB;&#x884C;&#x9012;&#x5F52;&#xFF0C;&#x800C;&#x662F;&#x91C7;&#x7528;&#x5176;&#x4ED6;&#x6392;&#x5E8F;&#x65B9;&#x6848;&#xFF0C;&#x5982; high - low &lt; 50 &#x65F6;&#xFF0C;&#x53EF;&#x4EE5;&#x7528;&#x5FEB;&#x901F;&#xFF0F;&#x63D2;&#x5165;&#x6392;&#x5E8F;&#xFF0C;&#x9002;&#x5408;&#x6574;&#x4F53;&#x65F6;&#x95F4;&#x6700;&#x4F18;</p>
<h3 id="&#x5EFA;&#x7ACB;&#x7D22;&#x5F15;"><a href="#&#x5EFA;&#x7ACB;&#x7D22;&#x5F15;" class="headerlink" title="&#x5EFA;&#x7ACB;&#x7D22;&#x5F15;"></a>&#x5EFA;&#x7ACB;&#x7D22;&#x5F15;</h3><p>&#x5B9E;&#x9645;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x53EF;&#x80FD;&#x6392;&#x5E8F;&#x7684;&#x4E0D;&#x662F; int, &#x800C;&#x662F;&#x4E00;&#x4E2A;&#x7ED3;&#x6784;&#x4F53;&#xFF0C;&#x5728;&#x6B64;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x8BB0;&#x5F55;&#x6570;&#x7EC4;&#x4E0B;&#x6807;(index)&#x6765;&#x4EE3;&#x66FF;&#x7533;&#x8BF7;&#x65B0;&#x5185;&#x5B58;&#x7A7A;&#x95F4;&#xFF0C;&#x4ECE;&#x800C;&#x907F;&#x514D; A &#x548C;&#x8F85;&#x52A9;&#x6570;&#x7EC4;&#x95F4;&#x7684;&#x9891;&#x7E41;&#x6570;&#x636E;&#x79FB;&#x52A8;&#x3002;</p>
<h2 id="&#x5E94;&#x7528;"><a href="#&#x5E94;&#x7528;" class="headerlink" title="&#x5E94;&#x7528;"></a>&#x5E94;&#x7528;</h2><p>&#x5F52;&#x5E76;&#x6392;&#x5E8F;&#x975E;&#x5E38;&#x9002;&#x5408;&#x505A;&#x5916;&#x6392;&#x5E8F;(external sorting)&#x3002;</p>
<h3 id="&#x4F8B;1-9-&#x8DEF;&#x5F52;&#x5E76;&#x6392;&#x5E8F;"><a href="#&#x4F8B;1-9-&#x8DEF;&#x5F52;&#x5E76;&#x6392;&#x5E8F;" class="headerlink" title="&#x4F8B;1: 9 &#x8DEF;&#x5F52;&#x5E76;&#x6392;&#x5E8F;"></a>&#x4F8B;1: 9 &#x8DEF;&#x5F52;&#x5E76;&#x6392;&#x5E8F;</h3><p>&#x7528; 100M &#x5185;&#x5B58;&#x5BF9; 900M &#x6570;&#x636E;&#x8FDB;&#x884C;&#x6392;&#x5E8F;</p>
<ul>
<li>&#x8BFB;&#x5165; 100M &#x6570;&#x636E;&#x81F3;&#x5185;&#x5B58;&#xFF0C;&#x7528;&#x5E38;&#x89C4;&#x65B9;&#x5F0F;&#xFF08;&#x5806;&#x6392;&#x5E8F;&#xFF09;&#x6392;&#x5E8F;</li>
<li>&#x5C06;&#x6392;&#x5E8F;&#x540E;&#x7684;&#x6570;&#x636E;&#x5199;&#x5165;&#x78C1;&#x76D8;</li>
<li>&#x91CD;&#x590D;&#x524D;&#x4E24;&#x4E2A;&#x6B65;&#x9AA4;&#xFF0C;&#x5F97;&#x5230; 9 &#x4E2A; 100M &#x7684;&#x6587;&#x4EF6;&#x5757;&#x3002;</li>
<li>&#x5C06; 100M &#x5185;&#x5B58;&#x5212;&#x5206;&#x4E3A; 10 &#x5757;&#xFF0C;&#x524D; 9 &#x4EFD;&#x4E3A;&#x8F93;&#x5165;&#x7F13;&#x51B2;&#x533A;&#xFF0C;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x4E3A;&#x8F93;&#x51FA;&#x7F13;&#x51B2;&#x533A;&#x3002;&#x5982;&#x5C06; 9 &#x4E2A; 100M &#x7684;&#x6587;&#x4EF6;&#x5757;&#x6BCF;&#x4E2A;&#x5206;&#x524D; 10M &#x653E;&#x5230;&#x8F93;&#x5165;&#x7F13;&#x51B2;&#x533A;&#xFF0C;&#x7136;&#x540E;&#x540C;&#x65F6;&#x6307;&#x5411;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x628A;&#x6700;&#x5C0F;&#x7684;&#x90A3;&#x4E2A;&#x653E;&#x5230;&#x8F93;&#x51FA;&#x7F13;&#x51B2;&#x533A;&#xFF0C;&#x7136;&#x540E;&#x6307;&#x9488;&#x540E;&#x79FB;&#x4E00;&#x4F4D;&#x3002;</li>
<li>&#x6267;&#x884C; 9 &#x8DEF;&#x5F52;&#x5E76;&#x7B97;&#x6CD5;&#xFF0C;&#x5C06;&#x7ED3;&#x679C;&#x8F93;&#x51FA;&#x5230;&#x8F93;&#x51FA;&#x7F13;&#x51B2;&#x533A;&#x3002;<ul>
<li>&#x8F93;&#x51FA;&#x7F13;&#x51B2;&#x533A;&#x6EE1;&#xFF0C;&#x5199;&#x5165;&#x76EE;&#x6807;&#x6587;&#x4EF6;&#xFF0C;&#x6E05;&#x7A7A;&#x7F13;&#x51B2;&#x533A;</li>
<li>&#x8F93;&#x5165;&#x7F13;&#x51B2;&#x533A;&#x7A7A;&#xFF0C;&#x8BFB;&#x5165;&#x76F8;&#x5E94;&#x6587;&#x4EF6;&#x7684;&#x4E0B;&#x4E00;&#x4EFD;&#x6570;&#x636E;&#x3002;</li>
</ul>
</li>
</ul>
<h3 id="&#x4F8B;2-&#x9006;&#x5E8F;&#x6570;&#x95EE;&#x9898;"><a href="#&#x4F8B;2-&#x9006;&#x5E8F;&#x6570;&#x95EE;&#x9898;" class="headerlink" title="&#x4F8B;2: &#x9006;&#x5E8F;&#x6570;&#x95EE;&#x9898;"></a>&#x4F8B;2: &#x9006;&#x5E8F;&#x6570;&#x95EE;&#x9898;</h3><p>&#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;&#x6570;&#x7EC4; A[0..N-1]&#xFF0C;&#x5982;&#x679C;&#x5BF9;&#x4E8E;&#x4E24;&#x4E2A;&#x5143;&#x7D20; a[i],a[j]&#xFF0C;&#x6709; i<j 且="" a[j]="">a[i]&#xFF0C;&#x90A3;&#x4E48;&#x79F0; a[i],a[j] &#x4E3A;&#x9006;&#x5E8F;&#x5BF9;&#xFF0C;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#x4E2D;&#x5305;&#x542B;&#x7684;&#x9006;&#x5E8F;&#x5BF9;&#x7684;&#x6570;&#x76EE;&#x4E3A;&#x9006;&#x5E8F;&#x6570;&#x3002;&#x5982; 3,10,2,6 &#x7684;&#x9006;&#x5E8F;&#x6570;&#x4E3A; 3&#x3002;&#x5982;&#x4F55;&#x6C42;&#x6570;&#x7EC4;&#x7684;&#x9006;&#x5E8F;&#x6570;&#xFF1F;</j></p>
<p>&#x5F53;&#x7136;&#x53EF;&#x4EE5;&#x9009;&#x62E9;&#x66B4;&#x529B;&#x6C42;&#x89E3;&#xFF0C;&#x4E24;&#x4E2A;&#x5FAA;&#x73AF;&#xFF0C;&#x5BF9;&#x6BCF;&#x4E2A;&#x6570;&#x90FD;&#x8981;&#x626B;&#x63CF;&#x5B83;&#x524D;&#x9762;&#x7684;&#x6240;&#x6709;&#x6570;&#xFF0C;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E3A; $O(N^2)$<br>i -&gt; [0,N-1]<br>j -&gt; [i+1,N-1]</p>
<p>&#x8FD9;&#x91CC;&#x4E5F;&#x53EF;&#x4EE5;&#x7528;&#x5F52;&#x5E76;&#x6392;&#x5E8F;&#x7684;&#x601D;&#x60F3;&#x3002;&#x6BD4;&#x5982;&#x89C2;&#x5BDF;&#x5F52;&#x5E76;&#x6392;&#x5E8F;&#x2014;&#x2014;&#x5408;&#x5E76;&#x6570;&#x5217;(1&#xFF0C;3&#xFF0C;5)&#x4E0E;(2&#xFF0C;4)&#xFF1A;</p>
<ol>
<li>&#x5148;&#x53D6;&#x51FA;&#x524D;&#x9762;&#x6570;&#x5217;&#x4E2D;&#x7684;1&#x3002;</li>
<li>&#x7136;&#x540E;&#x53D6;&#x51FA;&#x540E;&#x9762;&#x6570;&#x5217;&#x4E2D;&#x7684;2&#xFF0C;&#x660E;&#x663E;&#x8FD9;&#x4E2A;2&#x548C;&#x524D;&#x9762;&#x7684;3&#xFF0C;5&#x90FD;&#x53EF;&#x4EE5;&#x7EC4;&#x6210;&#x9006;&#x5E8F;&#x6570;&#x5BF9;&#x5373;3&#x548C;2&#xFF0C;5&#x548C;2&#x90FD;&#x662F;&#x9006;&#x5E8F;&#x6570;&#x5BF9;&#x3002;</li>
<li>&#x7136;&#x540E;&#x53D6;&#x51FA;&#x524D;&#x9762;&#x6570;&#x5217;&#x4E2D;&#x7684;3&#x3002;</li>
<li>&#x7136;&#x540E;&#x53D6;&#x51FA;&#x540E;&#x9762;&#x6570;&#x5217;&#x4E2D;&#x7684;4&#xFF0C;&#x540C;&#x7406;&#xFF0C;&#x53EF;&#x77E5;&#x8FD9;&#x4E2A;4&#x548C;&#x524D;&#x9762;&#x6570;&#x5217;&#x4E2D;&#x7684;5&#x53EF;&#x4EE5;&#x7EC4;&#x6210;&#x4E00;&#x4E2A;&#x9006;&#x5E8F;&#x6570;&#x5BF9;&#x3002;</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">def merge_sort(array):</div><div class="line">    if len(array) &lt;= 1:</div><div class="line">        return array</div><div class="line">    mid = len(array) / 2</div><div class="line">    left = merge_sort(array[:mid])</div><div class="line">    right = merge_sort(array[mid:])</div><div class="line">    count = 0</div><div class="line">    return merge(left, right)</div><div class="line"></div><div class="line">count = 0</div><div class="line"></div><div class="line"></div><div class="line">def merge(left, right):</div><div class="line">    global count</div><div class="line">    l, r = 0, 0</div><div class="line">    result = []</div><div class="line">    while l &lt; len(left) and r &lt; len(right):</div><div class="line">        if left[l] &lt;= right[r]:</div><div class="line">            result.append(left[l])</div><div class="line">            l += 1</div><div class="line">        else:</div><div class="line">            result.append(right[r])</div><div class="line">            r += 1</div><div class="line">            count += len(left) - l</div><div class="line">    result += left[l:]</div><div class="line">    result += right[r:]</div><div class="line">    return result</div><div class="line"></div><div class="line">print count # count &#x5373;&#x4E3A;&#x9006;&#x5E8F;&#x6570;</div></pre></td></tr></table></figure>
<h2 id="&#x5176;&#x4ED6;&#x601D;&#x8003;"><a href="#&#x5176;&#x4ED6;&#x601D;&#x8003;" class="headerlink" title="&#x5176;&#x4ED6;&#x601D;&#x8003;"></a>&#x5176;&#x4ED6;&#x601D;&#x8003;</h2><p>&#x601D;&#x8003;&#xFF1A;&#x539F;&#x5730;&#x6392;&#x5E8F;&#xFF1F;&#x8BA9;&#x7A7A;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E3A; $O(1)$</p>
<h1 id="Quick-sort-&#x5FEB;&#x901F;&#x6392;&#x5E8F;"><a href="#Quick-sort-&#x5FEB;&#x901F;&#x6392;&#x5E8F;" class="headerlink" title="Quick sort &#x5FEB;&#x901F;&#x6392;&#x5E8F;"></a>Quick sort &#x5FEB;&#x901F;&#x6392;&#x5E8F;</h1><p>&#x5FEB;&#x901F;&#x6392;&#x5E8F;&#x901A;&#x5E38;&#x660E;&#x663E;&#x6BD4;&#x540C;&#x4E3A;&#x39F;(nlogn)&#x7684;&#x5176;&#x4ED6;&#x7B97;&#x6CD5;&#x66F4;&#x5FEB;&#xFF0C;&#x56E0;&#x6B64;&#x5E38;&#x88AB;&#x91C7;&#x7528;&#xFF0C;&#x800C;&#x4E14;&#x5FEB;&#x6392;&#x91C7;&#x7528;&#x4E86;&#x5206;&#x6CBB;&#x6CD5;&#x7684;&#x601D;&#x60F3;&#xFF0C;&#x6240;&#x4EE5;&#x5728;&#x5F88;&#x591A;&#x7B14;&#x8BD5;&#x9762;&#x8BD5;&#x4E2D;&#x80FD;&#x7ECF;&#x5E38;&#x770B;&#x5230;&#x5FEB;&#x6392;&#x7684;&#x5F71;&#x5B50;&#x3002;&#x53EF;&#x89C1;&#x638C;&#x63E1;&#x5FEB;&#x6392;&#x7684;&#x91CD;&#x8981;&#x6027;&#x3002;<br>&#x5185;&#x90E8;&#x4E0D;&#x7A33;&#x5B9A;&#x6392;&#x5E8F;&#xFF0C;&#x6700;&#x5DEE;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6; $O(N^2)$&#xFF0C;&#x5E73;&#x5747;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6; $O(nlogn)$<br>&#x6B65;&#x9AA4;&#xFF1A;</p>
<ol>
<li>&#x4ECE;&#x6570;&#x5217;&#x4E2D;&#x6311;&#x51FA;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x4F5C;&#x4E3A;&#x57FA;&#x51C6;&#x6570;&#x3002;</li>
<li>&#x5206;&#x533A;&#x8FC7;&#x7A0B;&#xFF0C;&#x5C06;&#x6BD4;&#x57FA;&#x51C6;&#x6570;&#x5927;&#x7684;&#x653E;&#x5230;&#x53F3;&#x8FB9;&#xFF0C;&#x5C0F;&#x4E8E;&#x6216;&#x7B49;&#x4E8E;&#x5B83;&#x7684;&#x6570;&#x90FD;&#x653E;&#x5230;&#x5DE6;&#x8FB9;&#x3002;</li>
<li>&#x518D;&#x5BF9;&#x5DE6;&#x53F3;&#x533A;&#x95F4;&#x9012;&#x5F52;&#x6267;&#x884C;&#x7B2C;&#x4E8C;&#x6B65;&#xFF0C;&#x76F4;&#x81F3;&#x5404;&#x533A;&#x95F4;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x6570;&#x3002;</li>
</ol>
<h2 id="&#x57FA;&#x672C;&#x6B3E;-2"><a href="#&#x57FA;&#x672C;&#x6B3E;-2" class="headerlink" title="&#x57FA;&#x672C;&#x6B3E;"></a>&#x57FA;&#x672C;&#x6B3E;</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">#=======================================================================</div><div class="line">#  Time Complexity of Solution:</div><div class="line">#  Best = Average = O(nlog(n)); Worst = O(n^2).</div><div class="line"></div><div class="line">#</div><div class="line">#  Approach:</div><div class="line">#  Quicksort is admirably known as the algorithm that sorts an array</div><div class="line">#  while preparing to sort it. For contrast, recall that merge sort</div><div class="line">#  start partitions an array into smaller pieces, then sorts each piece,</div><div class="line">#  then merge the pieces back. Quicksort actually sorts the array</div><div class="line">#  during the partition phase.</div><div class="line">#</div><div class="line">#  Quicksort works by selecting an element called a pivot and splitting</div><div class="line">#  the array around that pivot such that all the elements in, say, the</div><div class="line">#  left sub-array are less than pivot and all the elements in the right</div><div class="line">#  sub-array are greater than pivot. The splitting continues until the</div><div class="line">#  array can no longer be broken into pieces. That&apos;s it. Quicksort is</div><div class="line">#  done.</div><div class="line">#</div><div class="line">#  All this fussing about quicksort sorting while preparing to sort</div><div class="line">#  may give the impression that it is better than mergesort, but its</div><div class="line">#  not. In practice their time complexity is about the same -- with</div><div class="line">#  one funny exception. Because quicksort picks its pivot randomly,</div><div class="line">#  there is a practically impossible possibility that the algorithm</div><div class="line">#    may take O(n^2) to compute.</div><div class="line">#</div><div class="line">#  The aforementioned notwithstanding, quicksort is better than</div><div class="line">#    mergesort if you consider memory usage. Quicksort is an in-place</div><div class="line">#    algorithm, requiring no additional storage to work.</div><div class="line">#=======================================================================</div><div class="line">def quick_sort(array):</div><div class="line">    if len(array) &lt; 2: return array</div><div class="line">    lesser = quick_sort([x for x in array[1:] if x &lt;= array[0]])</div><div class="line">    bigger = quick_sort([x for x in array[1:] if x &gt;  array[0]])</div><div class="line">    return sum([lesser, [array[0]], bigger], [])</div></pre></td></tr></table></figure>
<p>&#x4E0A;&#x9762;&#x7684;&#x4EE3;&#x7801;&#x9009;&#x62E9;&#x7B2C;&#x4E00;&#x4E2A;&#x6570;&#x4F5C;&#x4E3A;&#x57FA;&#x51C6;&#x6570;&#x3002;</p>
<h2 id="&#x5E94;&#x7528;-1"><a href="#&#x5E94;&#x7528;-1" class="headerlink" title="&#x5E94;&#x7528;"></a>&#x5E94;&#x7528;</h2><p>&#x6B63;&#x6574;&#x6570;&#x6570;&#x5B57;&#x5E8F;&#x5217;&#xFF0C;&#x6C42;&#x6700;&#x5927; K &#x4E2A;&#x6570;&#x3002;<br>&#x8F93;&#x5165;&#x9879;&#xFF1A;&#x4E00;&#x4E2A;&#x65E0;&#x5E8F;&#x7684;&#x6570;&#x5B57;&#x5E8F;&#x5217;&#xFF0C;&#x548C;&#x4E00;&#x4E2A;&#x6570;&#x5B57; K<br>&#x8F93;&#x51FA;&#x9879;&#xFF1A;K &#x4E2A;&#x6570;&#x5B57;&#xFF0C;&#x4EE3;&#x8868;&#x6700;&#x5927;&#x7684; K &#x4E2A;&#x6570;&#x5B57;&#x662F;&#x4EC0;&#x4E48;<br>&#x903B;&#x8F91;&#xFF1A;&#x5C06;&#x65E0;&#x5E8F;&#x6570;&#x5217;&#x63D2;&#x5165;&#x5230;&#x4E8C;&#x53C9;&#x6392;&#x5E8F;&#x6570;&#x4E2D;&#xFF0C;&#x91C7;&#x7528;&#x4E2D;&#x5E8F;&#x904D;&#x5386;&#x7684;&#x65B9;&#x5F0F;&#x8F93;&#x51FA;&#x524D; K &#x4E2A;&#x6570;&#x5B57;&#x3002;</p>
<h1 id="Heap-sort-&#x5806;&#x6392;&#x5E8F;"><a href="#Heap-sort-&#x5806;&#x6392;&#x5E8F;" class="headerlink" title="Heap sort &#x5806;&#x6392;&#x5E8F;"></a>Heap sort &#x5806;&#x6392;&#x5E8F;</h1><p>&#x5806;&#x6392;&#x5E8F;&#x5728; top K &#x95EE;&#x9898;&#x4E2D;&#x4F7F;&#x7528;&#x6BD4;&#x8F83;&#x9891;&#x7E41;&#x3002;&#x5806;&#x6392;&#x5E8F;&#x662F;&#x91C7;&#x7528;&#x4E8C;&#x53C9;&#x5806;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x6765;&#x5B9E;&#x73B0;&#x7684;&#xFF0C;&#x867D;&#x7136;&#x5B9E;&#x8D28;&#x4E0A;&#x8FD8;&#x662F;&#x4E00;&#x7EF4;&#x6570;&#x7EC4;&#x3002;&#x4E8C;&#x53C9;&#x5806;&#x662F;&#x4E00;&#x4E2A;&#x8FD1;&#x4F3C;&#x5B8C;&#x5168;&#x4E8C;&#x53C9;&#x6811; &#x3002;<br>&#x5185;&#x90E8;&#x4E0D;&#x7A33;&#x5B9A;&#x6392;&#x5E8F;&#xFF0C;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6; $O(nlogn)$&#xFF0C;&#x7A7A;&#x95F4;&#x590D;&#x6742;&#x5EA6; $O(1)$</p>
<p>&#x6B65;&#x9AA4;&#xFF1A;</p>
<ol>
<li>&#x6784;&#x9020;&#x6700;&#x5927;&#x5806;&#xFF08;Build_Max_Heap&#xFF09;&#xFF1A;&#x82E5;&#x6570;&#x7EC4;&#x4E0B;&#x6807;&#x8303;&#x56F4;&#x4E3A;0~n&#xFF0C;&#x8003;&#x8651;&#x5230;&#x5355;&#x72EC;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x662F;&#x6700;&#x5927;&#x5806;&#xFF0C;&#x5219;&#x4ECE;&#x4E0B;&#x6807;n/2&#x5F00;&#x59CB;&#x7684;&#x5143;&#x7D20;&#x5747;&#x4E3A;&#x6700;&#x5927;&#x5806;&#x3002;&#x4E8E;&#x662F;&#x53EA;&#x8981;&#x4ECE;n/2-1&#x5F00;&#x59CB;&#xFF0C;&#x5411;&#x524D;&#x4F9D;&#x6B21;&#x6784;&#x9020;&#x6700;&#x5927;&#x5806;&#xFF0C;&#x8FD9;&#x6837;&#x5C31;&#x80FD;&#x4FDD;&#x8BC1;&#xFF0C;&#x6784;&#x9020;&#x5230;&#x67D0;&#x4E2A;&#x8282;&#x70B9;&#x65F6;&#xFF0C;&#x5B83;&#x7684;&#x5DE6;&#x53F3;&#x5B50;&#x6811;&#x90FD;&#x5DF2;&#x7ECF;&#x662F;&#x6700;&#x5927;&#x5806;&#x3002;</li>
<li>&#x5806;&#x6392;&#x5E8F;&#xFF08;HeapSort&#xFF09;&#xFF1A;&#x7531;&#x4E8E;&#x5806;&#x662F;&#x7528;&#x6570;&#x7EC4;&#x6A21;&#x62DF;&#x7684;&#x3002;&#x5F97;&#x5230;&#x4E00;&#x4E2A;&#x6700;&#x5927;&#x5806;&#x540E;&#xFF0C;&#x6570;&#x7EC4;&#x5185;&#x90E8;&#x5E76;&#x4E0D;&#x662F;&#x6709;&#x5E8F;&#x7684;&#x3002;&#x56E0;&#x6B64;&#x9700;&#x8981;&#x5C06;&#x5806;&#x5316;&#x6570;&#x7EC4;&#x6709;&#x5E8F;&#x5316;&#x3002;&#x601D;&#x60F3;&#x662F;&#x79FB;&#x9664;&#x6839;&#x8282;&#x70B9;&#xFF0C;&#x5E76;&#x505A;&#x6700;&#x5927;&#x5806;&#x8C03;&#x6574;&#x7684;&#x9012;&#x5F52;&#x8FD0;&#x7B97;&#x3002;&#x7B2C;&#x4E00;&#x6B21;&#x5C06;heap[0]&#x4E0E;heap[n-1]&#x4EA4;&#x6362;&#xFF0C;&#x518D;&#x5BF9;heap[0&#x2026;n-2]&#x505A;&#x6700;&#x5927;&#x5806;&#x8C03;&#x6574;&#x3002;&#x7B2C;&#x4E8C;&#x6B21;&#x5C06;heap[0]&#x4E0E;heap[n-2]&#x4EA4;&#x6362;&#xFF0C;&#x518D;&#x5BF9;heap[0&#x2026;n-3]&#x505A;&#x6700;&#x5927;&#x5806;&#x8C03;&#x6574;&#x3002;&#x91CD;&#x590D;&#x8BE5;&#x64CD;&#x4F5C;&#x76F4;&#x81F3;heap[0]&#x548C;heap[1]&#x4EA4;&#x6362;&#x3002;&#x7531;&#x4E8E;&#x6BCF;&#x6B21;&#x90FD;&#x662F;&#x5C06;&#x6700;&#x5927;&#x7684;&#x6570;&#x5E76;&#x5165;&#x5230;&#x540E;&#x9762;&#x7684;&#x6709;&#x5E8F;&#x533A;&#x95F4;&#xFF0C;&#x6545;&#x64CD;&#x4F5C;&#x5B8C;&#x540E;&#x6574;&#x4E2A;&#x6570;&#x7EC4;&#x5C31;&#x662F;&#x6709;&#x5E8F;&#x7684;&#x4E86;&#x3002;</li>
<li>&#x6700;&#x5927;&#x5806;&#x8C03;&#x6574;&#xFF08;Max_Heapify&#xFF09;&#xFF1A;&#x8BE5;&#x65B9;&#x6CD5;&#x662F;&#x63D0;&#x4F9B;&#x7ED9;&#x4E0A;&#x8FF0;&#x4E24;&#x4E2A;&#x8FC7;&#x7A0B;&#x8C03;&#x7528;&#x7684;&#x3002;&#x76EE;&#x7684;&#x662F;&#x5C06;&#x5806;&#x7684;&#x672B;&#x7AEF;&#x5B50;&#x8282;&#x70B9;&#x4F5C;&#x8C03;&#x6574;&#xFF0C;&#x4F7F;&#x5F97;&#x5B50;&#x8282;&#x70B9;&#x6C38;&#x8FDC;&#x5C0F;&#x4E8E;&#x7236;&#x8282;&#x70B9;&#x3002;</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">#=======================================================================</div><div class="line">#  Time Complexity of Solution:</div><div class="line">#  Best O(nlog(n)); Average O(nlog(n)); Worst O(nlog(n)).</div><div class="line">#</div><div class="line">#  Approach:</div><div class="line">#  Heap sort happens in two phases. In the start phase, the array</div><div class="line">#  is transformed into a heap. A heap is a binary tree where</div><div class="line">#  1) each node is greater than each of its children</div><div class="line">#  2) the tree is perfectly balanced</div><div class="line">#  3) all leaves are in the leftmost position available.</div><div class="line">#  In phase two the heap is continuously reduced to a sorted array:</div><div class="line">#  1) while the heap is not empty</div><div class="line">#  - remove the top of the head into an array</div><div class="line">#  - fix the heap.</div><div class="line">#  Heap sort was invented by John Williams not by B. R. Heap.</div><div class="line">#</div><div class="line">#  MoveDown:</div><div class="line">#  The movedown method checks and verifies that the structure is a heap.</div><div class="line">#</div><div class="line">#  Technical Details:</div><div class="line">#  A heap is based on an array just as a hashmap is based on an</div><div class="line">#  array. For a heap, the children of an element n are at index</div><div class="line">#  2n+1 for the left child and 2n+2 for the right child.</div><div class="line">#</div><div class="line">#  The movedown function checks that an element is greater than its</div><div class="line">#  children. If not the values of element and child are swapped. The</div><div class="line">#  function continues to check and swap until the element is at a</div><div class="line">#  position where it is greater than its children.</div><div class="line">#=======================================================================</div><div class="line"></div><div class="line"></div><div class="line">def heap_sort(array):</div><div class="line">    # convert aList to heap &#x6784;&#x9020;&#x6700;&#x5927;&#x5806;</div><div class="line">    n = len(array)</div><div class="line">    leastParent = n / 2 - 1  # n&#x7684;&#x7236;&#x8282;&#x70B9;&#x4E0B;&#x6807;</div><div class="line">    for i in range(leastParent, -1, -1):</div><div class="line">        max_heapify(array, i, n - 1)  # &#x5C0F;&#x5806;&#x8F6C;&#x5316;&#x4E3A;&#x6700;&#x5927;&#x5806;</div><div class="line"></div><div class="line">    # flatten heap into sorted array &#x5C06;&#x6700;&#x5927;&#x5806;&#x8F6C;&#x5316;&#x4E3A;&#x6709;&#x5E8F;&#x6570;&#x7EC4;</div><div class="line">    for i in range(n - 1, 0, -1):</div><div class="line">        if array[0] &gt; array[i]:</div><div class="line">            array[i], array[0] = array[0], array[i]</div><div class="line">            max_heapify(array, 0, i - 1)  # &#x8C03;&#x6574;&#x6700;&#x5927;&#x5806;</div><div class="line">    return array</div><div class="line"></div><div class="line"></div><div class="line"># &#x6700;&#x5927;&#x5806;&#x8C03;&#x6574;&#xFF1A;&#x5C06;&#x5806;&#x7684;&#x672B;&#x7AEF;&#x5B50;&#x8282;&#x70B9;&#x4F5C;&#x8C03;&#x6574;&#xFF0C;&#x4F7F;&#x5F97;&#x5B50;&#x8282;&#x70B9;&#x6C38;&#x8FDC;&#x5C0F;&#x4E8E;&#x7236;&#x8282;&#x70B9;</div><div class="line"># start &#x4E3A;&#x5F53;&#x524D;&#x9700;&#x8981;&#x8C03;&#x6574;&#x6700;&#x5927;&#x5806;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;end&#x4E3A;&#x8C03;&#x6574;&#x8FB9;&#x754C;</div><div class="line"></div><div class="line"></div><div class="line">def max_heapify(array, start, end):</div><div class="line">    largest = 2 * start + 1  # consider left child is larger than right</div><div class="line">    while largest &lt;= end:</div><div class="line">        # right child exists and is larger than left child</div><div class="line">        if largest &lt; end and array[largest] &lt; array[largest + 1]:</div><div class="line">            largest += 1</div><div class="line"></div><div class="line">        # right child is larger than parent</div><div class="line">        if array[largest] &gt; array[start]:</div><div class="line">            array[largest], array[start] = array[start], array[largest]</div><div class="line">            # move down to largest child</div><div class="line">            start = largest</div><div class="line">            largest = 2 * start + 1</div><div class="line">        else:</div><div class="line">            return</div></pre></td></tr></table></figure>
<h1 id="Bucket-Sort-&#x6876;&#x6392;&#x5E8F;"><a href="#Bucket-Sort-&#x6876;&#x6392;&#x5E8F;" class="headerlink" title="Bucket Sort &#x6876;&#x6392;&#x5E8F;"></a>Bucket Sort &#x6876;&#x6392;&#x5E8F;</h1><p>&#x6876;&#x6392;&#x5E8F;&#x548C;&#x5F52;&#x5E76;&#x6392;&#x5E8F;&#x975E;&#x5E38;&#x7C7B;&#x4F3C;&#xFF0C;&#x4E5F;&#x4F7F;&#x7528;&#x4E86;&#x5F52;&#x5E76;&#x7684;&#x601D;&#x60F3;&#x3002;&#x5927;&#x81F4;&#x6B65;&#x9AA4;&#x5982;&#x4E0B;&#xFF1A;<br>&#x5916;&#x90E8;&#x6392;&#x5E8F;&#xFF0C;&#x7A33;&#x5B9A;&#x6027;&#x53D6;&#x51B3;&#x4E8E;&#x6876;&#x5185;&#x6392;&#x5E8F;&#x7B97;&#x6CD5;&#x3002;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E0E;&#x5206;&#x6876;&#x6570;&#x91CF; K &#x6709;&#x5173;<br>&#x6B65;&#x9AA4;&#xFF1A;</p>
<ol>
<li>&#x8BBE;&#x7F6E;&#x4E00;&#x4E2A;&#x5B9A;&#x91CF;&#x7684;&#x6570;&#x7EC4;&#x5F53;&#x4F5C;&#x7A7A;&#x6876;&#x3002;&#x6876;&#x6392;&#x5E8F;&#x7684;&#x7279;&#x70B9;&#x5C31;&#x662F;&#x6570;&#x636E;&#x8981;&#x6709;&#x8303;&#x56F4;&#xFF08;&#x6876;&#x4E0D;&#x80FD;&#x65E0;&#x9650;&#x591A;&#xFF09;&#x3002;</li>
<li>Divide - &#x4ECE;&#x5F85;&#x6392;&#x5E8F;&#x6570;&#x7EC4;&#x4E2D;&#x53D6;&#x51FA;&#x5143;&#x7D20;&#xFF0C;&#x5C06;&#x5143;&#x7D20;&#x6309;&#x7167;&#x4E00;&#x5B9A;&#x7684;&#x89C4;&#x5219;&#x585E;&#x8FDB;&#x5BF9;&#x5E94;&#x7684;&#x6876;&#x5B50;&#x53BB;&#x3002;</li>
<li>&#x5BF9;&#x6BCF;&#x4E2A;&#x975E;&#x7A7A;&#x6876;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;&#x901A;&#x5E38;&#x53EF;&#x5728;&#x585E;&#x5143;&#x7D20;&#x5165;&#x6876;&#x65F6;&#x8FDB;&#x884C;&#x63D2;&#x5165;&#x6392;&#x5E8F;&#x3002;</li>
<li>Conquer - &#x4ECE;&#x975E;&#x7A7A;&#x6876;&#x628A;&#x5143;&#x7D20;&#x518D;&#x653E;&#x56DE;&#x539F;&#x6765;&#x7684;&#x6570;&#x7EC4;&#x4E2D;&#x3002;&#x201D;</li>
</ol>
<p>&#x5047;&#x8BBE;&#x8F93;&#x5165;&#x6570;&#x636E;&#x670D;&#x4ECE;&#x5747;&#x5300;&#x5206;&#x5E03;&#xFF0C;&#x7136;&#x540E;&#x5C06;&#x8F93;&#x5165;&#x6570;&#x636E;&#x5747;&#x5300;&#x5730;&#x5206;&#x914D;&#x5230;&#x6709;&#x9650;&#x6570;&#x91CF;&#x7684;&#x6876;&#x4E2D;&#xFF0C;&#x7136;&#x540E;&#x5BF9;&#x6BCF;&#x4E2A;&#x6876;&#x518D;&#x5206;&#x522B;&#x6392;&#x5E8F;&#xFF0C;&#x5BF9;&#x6BCF;&#x4E2A;&#x6876;&#x518D;&#x4F7F;&#x7528;&#x63D2;&#x5165;&#x6392;&#x5E8F;&#x7B97;&#x6CD5;&#xFF0C;&#x6700;&#x540E;&#x5C06;&#x6BCF;&#x4E2A;&#x6876;&#x4E2D;&#x7684;&#x6570;&#x636E;&#x6709;&#x5E8F;&#x7684;&#x7EC4;&#x5408;&#x8D77;&#x6765;&#x3002;&#x524D;&#x9762;&#x4E86;&#x89E3;&#x5230;&#x57FA;&#x6570;&#x6392;&#x5E8F;&#x5047;&#x8BBE;&#x8F93;&#x5165;&#x6570;&#x636E;&#x5C5E;&#x4E8E;&#x4E00;&#x4E2A;&#x5C0F;&#x533A;&#x95F4;&#x5185;&#x7684;&#x6574;&#x6570;&#xFF0C;&#x800C;&#x6876;&#x6392;&#x5E8F;&#x5219;&#x662F;&#x5047;&#x8BBE;&#x8F93;&#x5165;&#x662F;&#x7531;&#x4E00;&#x4E2A;&#x968F;&#x673A;&#x8FC7;&#x7A0B;&#x751F;&#x6210;&#xFF0C;&#x8BE5;&#x8FC7;&#x7A0B;&#x5C06;&#x5143;&#x7D20;&#x5747;&#x5300;&#x7684;&#x5206;&#x5E03;&#x5728;&#x4E00;&#x4E2A;&#x533A;&#x95F4;[a,b]&#x4E0A;&#x3002;&#x7531;&#x4E8E;&#x6876;&#x6392;&#x5E8F;&#x548C;&#x8BA1;&#x6570;&#x6392;&#x5E8F;&#x4E00;&#x6837;&#x5747;&#x5BF9;&#x8F93;&#x5165;&#x7684;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x4E86;&#x67D0;&#x4E9B;&#x5047;&#x8BBE;&#x9650;&#x5236;&#xFF0C;&#x56E0;&#x6B64;&#x6BD4;&#x4E00;&#x822C;&#x7684;&#x57FA;&#x4E8E;&#x6BD4;&#x8F83;&#x7684;&#x6392;&#x5E8F;&#x7B97;&#x6CD5;&#x590D;&#x6742;&#x5EA6;&#x4F4E;&#x3002;</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line">#=======================================================================</div><div class="line">#  Time Complexity of Solution:</div><div class="line">#  Best Case O(n); Average Case O(n); Worst Case O(n).</div><div class="line">#</div><div class="line"># Approach:</div><div class="line"># If it sounds too good to be true, then most likely it&apos;s not true.</div><div class="line"># Bucketsort is not an exception to this adage. For bucketsort to</div><div class="line">#   work at its blazing efficiency, there are multiple prerequisites.</div><div class="line">#   First the hash function that is used to partition the elements need</div><div class="line">#   to be very good and must produce ordered hash: if i &lt; k then</div><div class="line">#   hash(i) &lt; hash(k). Second, the elements to be sorted must be</div><div class="line">#   uniformly distributed.</div><div class="line">#</div><div class="line"># The aforementioned aside, bucket sort is actually very good</div><div class="line">#   considering that counting sort is reasonably speaking its upper</div><div class="line">#   bound. And counting sort is very fast. The particular distinction</div><div class="line">#   for bucket sort is that it uses a hash function to partition the</div><div class="line">#   keys of the input array, so that multiple keys may hash to the same</div><div class="line">#   bucket. Hence each bucket must effectively be a growable list;</div><div class="line">#   similar to radix sort.</div><div class="line">#</div><div class="line"># Numerous Internet sites, including university pages, have</div><div class="line">#   erroneously written counting sort code and call them bucket sort.</div><div class="line">#   Bucket sort uses a hash function to distribute keys; counting sort</div><div class="line">#   creates a bucket for each key. Indeed there are perhaps greater</div><div class="line">#   similarities between radix sort and bucket sort, than there are</div><div class="line">#   between counting sort and bucket sort.</div><div class="line">#</div><div class="line"># In the presented program insertionsort is used to sort</div><div class="line">#   each bucket. This is to inculcate that the bucket sort algorithm</div><div class="line">#   does not specify which sorting technique to use on the buckets.</div><div class="line">#   A programmer may choose to continuously use bucket sort on each</div><div class="line">#   bucket until the collection is sorted (in the manner of the radix</div><div class="line">#   sort program below). Whichever sorting method is used on the</div><div class="line">#   buckets, bucket sort still tends toward O(n).</div><div class="line">#=======================================================================</div><div class="line"></div><div class="line"></div><div class="line">def bucket_sort(array):</div><div class="line">    # get hash codes</div><div class="line">    code = hashing(array)</div><div class="line">    # number of buckets: math.sqrt(len(array))</div><div class="line">    buckets = [list() for _ in range(code[1])]</div><div class="line">    # distribute data into buckets: O(n)</div><div class="line">    for i in array:</div><div class="line">        x = re_hashing(i, code)</div><div class="line">        buck = buckets[x]</div><div class="line">        buck.append(i)</div><div class="line"></div><div class="line">  # Sort each bucket: O(n).</div><div class="line">  # I mentioned above that the worst case for bucket sort is counting</div><div class="line">  # sort. That&apos;s because in the worst case, bucket sort may end up</div><div class="line">  # with one bucket per key. In such case, sorting each bucket would</div><div class="line">  # take 1^2 = O(1). Even after allowing for some probabilistic</div><div class="line">  # variance, to sort each bucket would still take 2-1/n, which is</div><div class="line">  # still a constant. Hence, sorting all the buckets takes O(n).</div><div class="line">    for bucket in buckets:</div><div class="line">        insertion_sort(bucket)</div><div class="line">    ndx = 0</div><div class="line">    # merge the buckets: O(n)</div><div class="line">    for i in range(len(buckets)):</div><div class="line">        print buckets[i]</div><div class="line">        for v in buckets[i]:</div><div class="line">            array[ndx] = v</div><div class="line">            ndx += 1</div><div class="line">    return array</div><div class="line"></div><div class="line"></div><div class="line">import math</div><div class="line"></div><div class="line"></div><div class="line">def hashing(array):</div><div class="line">    m = array[0]</div><div class="line">    for i in range(1, len(array)):</div><div class="line">        if(m &lt; array[i]):</div><div class="line">            m = array[i]</div><div class="line">    result = [m, int(math.sqrt(len(array)))]</div><div class="line">    print result</div><div class="line">    return result</div><div class="line"></div><div class="line"></div><div class="line">def re_hashing(i, code):</div><div class="line">    # &#x6876;&#x662F;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x6392;&#x7684;</div><div class="line">    return int(i / code[0] * (code[1] - 1))</div></pre></td></tr></table></figure>
<h1 id="Counting-Sort-&#x8BA1;&#x6570;&#x6392;&#x5E8F;"><a href="#Counting-Sort-&#x8BA1;&#x6570;&#x6392;&#x5E8F;" class="headerlink" title="Counting Sort &#x8BA1;&#x6570;&#x6392;&#x5E8F;"></a>Counting Sort &#x8BA1;&#x6570;&#x6392;&#x5E8F;</h1><p>&#x6876;&#x7684;&#x4E2A;&#x6570;&#xFF1D;&#x5F85;&#x6392;&#x5E8F;&#x4E2A;&#x6570;&#xFF0C;&#x5C31;&#x662F;&#x8BA1;&#x6570;&#x6392;&#x5E8F;&#xFF0C;&#x662F;&#x6876;&#x6392;&#x5E8F;&#x7684;&#x7279;&#x4F8B;&#x3002;<br>&#x8BA1;&#x6570;&#x6392;&#x5E8F;&#xFF0C;&#x987E;&#x540D;&#x601D;&#x4E49;&#xFF0C;&#x5C31;&#x662F;&#x5BF9;&#x5F85;&#x6392;&#x5E8F;&#x6570;&#x7EC4;&#x6309;&#x5143;&#x7D20;&#x8FDB;&#x884C;&#x8BA1;&#x6570;&#x3002;&#x4F7F;&#x7528;&#x524D;&#x63D0;&#x662F;&#x9700;&#x8981;&#x5148;&#x77E5;&#x9053;&#x5F85;&#x6392;&#x5E8F;&#x6570;&#x7EC4;&#x7684;&#x5143;&#x7D20;&#x8303;&#x56F4;&#xFF0C;&#x5C06;&#x8FD9;&#x4E9B;&#x4E00;&#x5B9A;&#x8303;&#x56F4;&#x7684;&#x5143;&#x7D20;&#x7F6E;&#x4E8E;&#x65B0;&#x6570;&#x7EC4;&#x4E2D;&#xFF0C;&#x65B0;&#x6570;&#x7EC4;&#x7684;&#x5927;&#x5C0F;&#x4E3A;&#x5F85;&#x6392;&#x5E8F;&#x6570;&#x7EC4;&#x4E2D;&#x6700;&#x5927;&#x5143;&#x7D20;&#x4E0E;&#x6700;&#x5C0F;&#x5143;&#x7D20;&#x7684;&#x5DEE;&#x503C;&#x3002;</p>
<p>&#x672C;&#x8D28;&#x662F;&#x7A7A;&#x95F4;&#x6362;&#x65F6;&#x95F4;&#xFF0C;&#x7A7A;&#x95F4;&#x590D;&#x6742;&#x5EA6; O(max-min)&#x3002;&#x672C;&#x8D28;&#x662F;&#x54C8;&#x5E0C;&#x8FC7;&#x7A0B;<br>&#x524D;&#x63D0;&#xFF1A;&#x6570;&#x636E;&#x662F; int &#x503C;</p>
<p>&#x6B65;&#x9AA4;&#xFF1A;</p>
<ol>
<li>&#x5B9A;&#x65B0;&#x6570;&#x7EC4;&#x5927;&#x5C0F;&#x2014;&#x2014;&#x627E;&#x51FA;&#x5F85;&#x6392;&#x5E8F;&#x7684;&#x6570;&#x7EC4;&#x4E2D;&#x6700;&#x5927;&#x548C;&#x6700;&#x5C0F;&#x7684;&#x5143;&#x7D20;</li>
<li>&#x7EDF;&#x8BA1;&#x6B21;&#x6570;&#x2014;&#x2014;&#x7EDF;&#x8BA1;&#x6570;&#x7EC4;&#x4E2D;&#x6BCF;&#x4E2A;&#x503C;&#x4E3A;i&#x7684;&#x5143;&#x7D20;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;&#xFF0C;&#x5B58;&#x5165;&#x65B0;&#x6570;&#x7EC4;C&#x7684;&#x7B2C;i&#x9879;</li>
<li>&#x5BF9;&#x7EDF;&#x8BA1;&#x6B21;&#x6570;&#x9010;&#x4E2A;&#x7D2F;&#x52A0;&#x2014;&#x2014;&#x5BF9;&#x6240;&#x6709;&#x7684;&#x8BA1;&#x6570;&#x7D2F;&#x52A0;&#xFF08;&#x4ECE;C&#x4E2D;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x5F00;&#x59CB;&#xFF0C;&#x6BCF;&#x4E00;&#x9879;&#x548C;&#x524D;&#x4E00;&#x9879;&#x76F8;&#x52A0;&#xFF09;</li>
<li>&#x53CD;&#x5411;&#x586B;&#x5145;&#x76EE;&#x6807;&#x6570;&#x7EC4;&#x2014;&#x2014;&#x5C06;&#x6BCF;&#x4E2A;&#x5143;&#x7D20;i&#x653E;&#x5728;&#x65B0;&#x6570;&#x7EC4;&#x7684;&#x7B2C;C(i)&#x9879;&#xFF0C;&#x6BCF;&#x653E;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x5C31;&#x5C06;C(i)&#x51CF;&#x53BB;1</li>
<li>&#x5176;&#x4E2D;&#x53CD;&#x5411;&#x586B;&#x5145;&#x4E3B;&#x8981;&#x662F;&#x4E3A;&#x4E86;&#x907F;&#x514D;&#x91CD;&#x590D;&#x5143;&#x7D20;&#x843D;&#x5165;&#x65B0;&#x6570;&#x7EC4;&#x7684;&#x540C;&#x4E00;&#x7D22;&#x5F15;&#x5904;&#x3002;</li>
</ol>
<blockquote>
<p>&#x53C2;&#x8003;&#x94FE;&#x63A5;&#xFF1A;<br><a href="https://www.bittiger.io/blog/post/4Q4iNNbRYXkWkrAM3#quicksort" target="_blank" rel="external">https://www.bittiger.io/blog/post/4Q4iNNbRYXkWkrAM3#quicksort</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#x5F80;&amp;#x5F80;&amp;#x6392;&amp;#x5E8F;&amp;#x662F;&amp;#x4F5C;&amp;#x4E3A;&amp;#x5176;&amp;#x4ED6;&amp;#x7B97;&amp;#x6CD5;&amp;#x7684;&amp;#x9884;&amp;#x5904;&amp;#x7406;&amp;#x7B97;&amp;#x6CD5;&amp;#xFF0C;&amp;#x5176;&amp;#x91CD;&amp;#x8981;&amp;#x6027;&amp;#x5374;&amp;#x4E0D;&amp;#x5BB9;&amp;#x5C0F;&amp;#x89D1;&amp;#x3002;&amp;#x672C;&amp;#x7BC7;&amp;#x8BB2;&amp;#x5192;&amp;#x6CE1;&amp;#x6392;&amp;#x5E8F;&amp;#xFF0F;&amp;#x9009;&amp;#x62E9;&amp;#x6392;&amp;#x5E8F;&amp;#xFF0F;&amp;#x63D2;&amp;#x5165;&amp;#x6392;&amp;#x5E8F;&amp;#xFF0F;&amp;#x5E0C;&amp;#x5C14;&amp;#x6392;&amp;#x5E8F;&amp;#xFF0F;&amp;#x5F52;&amp;#x5E76;&amp;#x6392;&amp;#x5E8F;&amp;#xFF0F;&amp;#x5FEB;&amp;#x901F;&amp;#x6392;&amp;#x5E8F;&amp;#xFF0F;&amp;#x6876;&amp;#x6392;&amp;#x5E8F;&amp;#xFF0F;&amp;#x8BA1;&amp;#x6570;&amp;#x6392;&amp;#x5E8F;&amp;#x3002;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构和算法" scheme="http://www.shuang0420.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="排序" scheme="http://www.shuang0420.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Search Engines笔记 - Exact-match retrieval</title>
    <link href="http://www.shuang0420.com/2016/09/06/Search%20Engines%E7%AC%94%E8%AE%B0%20-%20Exact-match%20retrieval/"/>
    <id>http://www.shuang0420.com/2016/09/06/Search Engines笔记 - Exact-match retrieval/</id>
    <published>2016-09-06T16:21:21.000Z</published>
    <updated>2016-10-18T00:28:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Exact match retrieval models &#x5BF9;&#x4E13;&#x5BB6;&#x6765;&#x8BF4;&#x5F88;&#x9002;&#x7528;&#xFF0C;&#x5B83;&#x5047;&#x5B9A;&#x4EBA;&#x80FD;&#x5C06;&#x9700;&#x6C42;&#x63CF;&#x8FF0;&#x4E3A;&#x4E00;&#x4E2A; boolean query&#xFF0C;&#x6587;&#x6863;&#x8981;&#x4E48;&#x5B8C;&#x5168;&#x5339;&#x914D;&#x8981;&#x4E48;&#x5B8C;&#x5168;&#x4E0D;&#x5339;&#x914D;&#xFF0C;&#x4E0D;&#x5339;&#x914D;&#x7684;&#x6587;&#x6863;&#x5206;&#x6570;&#x5C31;&#x4E3A; 0&#x3002;<br><a id="more"></a></p>
<h1 id="Unranked-Boolean-Model"><a href="#Unranked-Boolean-Model" class="headerlink" title="Unranked Boolean Model"></a>Unranked Boolean Model</h1><p>document score &#x4E3A; 1 &#x6216;&#x8005; 0&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x5339;&#x914D;&#x6216;&#x8005;&#x4E0D;&#x5339;&#x914D;&#xFF0C;&#x6CA1;&#x6709;&#x5339;&#x914D;&#x7A0B;&#x5EA6;&#x7684;&#x5206;&#x6570;&#xFF0C;&#x8FD4;&#x56DE;&#x7ED3;&#x679C;&#x901A;&#x5E38;&#x7B80;&#x5355;&#x7684;&#x6309;&#x65F6;&#x95F4;&#x987A;&#x5E8F;&#x6392;&#x5217;&#x3002;<br>&#x5F88;&#x591A;&#x7CFB;&#x7EDF;&#x5728;&#x7528;&#xFF0C;&#x50CF; WestLaw, PubMed &#x7B49;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x901F;&#x5EA6;&#x975E;&#x5E38;&#x5FEB;&#xFF0C;&#x5BF9;&#x4E00;&#x4E9B;&#x95EE;&#x7B54;&#x7CFB;&#x7EDF;&#x6765;&#x8BF4;&#xFF0C;unranked boolean model &#x8DB3;&#x591F;&#x7528;&#x4E86;&#x3002;</p>
<h1 id="Ranked-Boolean-Model"><a href="#Ranked-Boolean-Model" class="headerlink" title="Ranked Boolean Model"></a>Ranked Boolean Model</h1><p>&#x4E3A;&#x6587;&#x6863;&#x8BA1;&#x7B97;&#x7279;&#x5B9A;&#x5206;&#x6570;&#xFF0C;&#x6587;&#x6863; j &#x5BF9; query $Q_{AND}(q_1&#x2026;q_n)$ &#x7684;&#x5206;&#x6570;&#xFF0C;&#x4E00;&#x822C;&#x53D6;&#x6700;&#x5C0F;&#x503C;&#x3002;<br>$score(Q_{AND}(q_1&#x2026;q_n),d_j) = MIN(score(q_1,d_j),score(q_n,d_j))$</p>
<p>&#x6587;&#x6863; j &#x5BF9; query $Q_{OR}(q_1&#x2026;q_n)$ &#x7684;&#x5206;&#x6570;&#xFF0C;&#x5B9E;&#x8DF5;&#x4E2D; MEAN &#x6BD4; MAX &#x66F4;&#x6709;&#x6548;&#x3002;<br>$score(Q_{OR}(q_1&#x2026;q_n),d_j) = MAX(score(q_1,d_j),score(q_n,d_j))$<br>$score(Q_{OR}(q_1&#x2026;q_n),d_j) = MEAN(score(q_1,d_j),score(q_n,d_j))$</p>
<p><strong>&#x4F18;&#x70B9;&#xFF1A;</strong></p>
<ul>
<li>Very efficient</li>
<li>Predictable, easy to explain, structured queries</li>
<li>Works well enough when searchers know exactly what is wanted</li>
<li>Results ordered by how redundantly a document satisfies a query</li>
<li>Other term weighting methods can be used, too</li>
</ul>
<p><strong>&#x7F3A;&#x70B9;&#xFF1A;</strong></p>
<ul>
<li>Still an Exact-Match model</li>
<li>Difficult to get a good balance of Precision and Recall</li>
</ul>
<h1 id="Inverted-list"><a href="#Inverted-list" class="headerlink" title="Inverted list"></a>Inverted list</h1><h2 id="Binary-inverted-lists"><a href="#Binary-inverted-lists" class="headerlink" title="Binary inverted lists"></a>Binary inverted lists</h2><p>&#x7528;&#x4E8E; unranked retrieval<br>Operators: AND, OR, AND-NOT, FIELD</p>
<h2 id="Frequency-inverted-lists"><a href="#Frequency-inverted-lists" class="headerlink" title="Frequency inverted lists"></a>Frequency inverted lists</h2><p>&#x7528;&#x4E8E; ranked retrieval<br>Operators: AND, OR, AND-NOT, FIELD, SUM, SYNONYM</p>
<h2 id="Positional-inverted-lists"><a href="#Positional-inverted-lists" class="headerlink" title="Positional inverted lists"></a>Positional inverted lists</h2><p>&#x7528;&#x4E8E; ranked retrieval<br>Operators: AND, OR, AND-NOT, NEAR/n, SENTENCE/n, PASSAGE/n, WINDOW/n</p>
<h2 id="Fixed-length-inverted-list"><a href="#Fixed-length-inverted-list" class="headerlink" title="Fixed-length inverted list"></a>Fixed-length inverted list</h2><p>&#x65E9;&#x671F;&#x7684;&#x641C;&#x7D22;&#x5F15;&#x64CE;&#x4F1A;&#x7528;&#xFF0C;&#x5B83;&#x7684;&#x4F18;&#x70B9;&#x662F;</p>
<ul>
<li>simple to manage</li>
<li>bit-vector operations are fast and easy to parallelize</li>
</ul>
<p>&#x7136;&#x800C;&#x2026;&#x6548;&#x7387;&#x4E0D;&#x9AD8;&#x3002;<br>&#x5047;&#x5B9A; inverted list &#x957F;&#x5EA6;&#x4E3A; |C| bits (C &#x662F; corpus &#x91CC;&#x7684;&#x6587;&#x6863;&#x603B;&#x6570;)&#xFF0C;&#x90A3;&#x4E48;&#x5728;&#x67D0;&#x4E2A; inverted list &#x91CC;&#x4E3A; 1 &#x7684; bits &#x7684;&#x4E2A;&#x6570;&#x5C31;&#x662F; df(&#x591A;&#x5C11;&#x7BC7;&#x6587;&#x6863;&#x51FA;&#x73B0;&#x4E86;&#x8FD9;&#x4E2A; term)&#xFF0C;&#x6211;&#x4EEC;&#x770B; term with median tf &#x7684; df&#xFF0C;&#x8BB0;&#x4F5C; $df_{median}$&#xFF0C;&#x89C2;&#x5BDF;&#x4E00;&#x4E9B;&#x8BED;&#x6599;&#x53EF;&#x4EE5;&#x53D1;&#x73B0;&#xFF0C;$|C|&gt;&gt;|df_{median}|$&#xFF0C;(Wall Street Journal&#xFF0C;|C|=174K, $df_{median}=2$)</p>
<h2 id="Data-structure"><a href="#Data-structure" class="headerlink" title="Data structure"></a>Data structure</h2><h3 id="B-tree-B-tree-B-tree-etc"><a href="#B-tree-B-tree-B-tree-etc" class="headerlink" title="B tree(B+ tree, B* tree, etc)"></a>B tree(B+ tree, B* tree, etc)</h3><ul>
<li>$O(log n)$</li>
<li>&#x6613;&#x4E8E;&#x6269;&#x5C55;</li>
<li>&#x53EF;&#x4EE5;&#x7528;&#x4E8E;&#x5B8C;&#x5168;&#x5339;&#x914D;(exact-match lookup)&#xFF0C;&#x8303;&#x56F4;&#x5BFB;&#x627E;(range lookup)&#xFF0C;&#x524D;&#x7F00;&#x5BFB;&#x627E;&#xFF08;prefix lookup&#xFF09;</li>
</ul>
<h3 id="Hash-table"><a href="#Hash-table" class="headerlink" title="Hash table"></a>Hash table</h3><ul>
<li>$O(1)$</li>
<li>&#x4E0D;&#x6613;&#x4E8E;&#x6269;&#x5C55;</li>
<li>&#x7528;&#x4E8E;&#x5B8C;&#x5168;&#x5339;&#x914D;(exact-match lookup)</li>
</ul>
<h1 id="Term-dictionary"><a href="#Term-dictionary" class="headerlink" title="Term dictionary"></a>Term dictionary</h1><p>string &#x2013;&gt; integer&#xFF0C;&#x901F;&#x5EA6;&#x66F4;&#x5FEB;&#x3002;</p>
<p><strong>&#x95EE;&#x9898;&#xFF1A;&#x591A;&#x5C11;&#x5B58;&#x5728;&#x5185;&#x5B58;&#xFF0C;&#x591A;&#x5C11;&#x5B58;&#x5728;&#x786C;&#x76D8;</strong></p>
<ul>
<li>frequent terms in RAM (eg.,ctf&gt;=1,000)</li>
<li>less frequent terms to dis (eg.,ctf&lt;1,000)</li>
</ul>
<p>ctf &lt; 1000&#xFF0C;&#x6839;&#x636E; Zipf&#x2019;s law &#x7B97;&#x51FA; 99.9% &#x7684;&#x8BCD;&#x53EF;&#x4EE5;&#x5B58;&#x5728;&#x786C;&#x76D8;&#x3002;<br>((A<em>N/1)-(A</em>N/1000))/(A*N)=999/1000=99.9%</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Exact match retrieval models &amp;#x5BF9;&amp;#x4E13;&amp;#x5BB6;&amp;#x6765;&amp;#x8BF4;&amp;#x5F88;&amp;#x9002;&amp;#x7528;&amp;#xFF0C;&amp;#x5B83;&amp;#x5047;&amp;#x5B9A;&amp;#x4EBA;&amp;#x80FD;&amp;#x5C06;&amp;#x9700;&amp;#x6C42;&amp;#x63CF;&amp;#x8FF0;&amp;#x4E3A;&amp;#x4E00;&amp;#x4E2A; boolean query&amp;#xFF0C;&amp;#x6587;&amp;#x6863;&amp;#x8981;&amp;#x4E48;&amp;#x5B8C;&amp;#x5168;&amp;#x5339;&amp;#x914D;&amp;#x8981;&amp;#x4E48;&amp;#x5B8C;&amp;#x5168;&amp;#x4E0D;&amp;#x5339;&amp;#x914D;&amp;#xFF0C;&amp;#x4E0D;&amp;#x5339;&amp;#x914D;&amp;#x7684;&amp;#x6587;&amp;#x6863;&amp;#x5206;&amp;#x6570;&amp;#x5C31;&amp;#x4E3A; 0&amp;#x3002;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Search Engines" scheme="http://www.shuang0420.com/categories/Search-Engines/"/>
    
    
      <category term="NLP" scheme="http://www.shuang0420.com/tags/NLP/"/>
    
      <category term="Search Engines" scheme="http://www.shuang0420.com/tags/Search-Engines/"/>
    
  </entry>
  
  <entry>
    <title>数据结构和算法 -- 链表</title>
    <link href="http://www.shuang0420.com/2016/09/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%20--%20%E9%93%BE%E8%A1%A8/"/>
    <id>http://www.shuang0420.com/2016/09/04/数据结构和算法 -- 链表/</id>
    <published>2016-09-04T13:55:12.000Z</published>
    <updated>2016-10-26T02:26:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>&#x94FE;&#x8868;&#x5B9E;&#x73B0;&#xFF0F;&#x79FB;&#x9664;&#x8282;&#x70B9;&#xFF0F;&#x94FE;&#x8868;&#x76F8;&#x52A0;&#xFF0F;&#x94FE;&#x8868;&#x90E8;&#x5206;&#x7FFB;&#x8F6C;&#xFF0F;&#x94FE;&#x8868;&#x6539;&#x5E8F;/&#x94FE;&#x8868;&#x53BB;&#x91CD;&#xFF0F;&#x94FE;&#x8868;&#x5212;&#x5206;&#xFF0F;&#x94FE;&#x8868;&#x7684;&#x73AF;/&#x94FE;&#x8868;&#x516C;&#x5171;&#x8282;&#x70B9;&#x95EE;&#x9898;/&#x94FE;&#x8868;&#x590D;&#x5236;<br><a id="more"></a></p>
<h1 id="&#x7B80;&#x4ECB;"><a href="#&#x7B80;&#x4ECB;" class="headerlink" title="&#x7B80;&#x4ECB;"></a>&#x7B80;&#x4ECB;</h1><p>&#x7EBF;&#x6027;&#x8868;&#x662F;&#x6700;&#x57FA;&#x672C;&#x3001;&#x6700;&#x7B80;&#x5355;&#x3001;&#x4E5F;&#x662F;&#x6700;&#x5E38;&#x7528;&#x7684;&#x4E00;&#x79CD;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x3002;&#x7EBF;&#x6027;&#x8868;&#x4E2D;&#x6570;&#x636E;&#x5143;&#x7D20;&#x4E4B;&#x95F4;&#x7684;&#x5173;&#x7CFB;&#x662F;&#x4E00;&#x5BF9;&#x4E00;&#x7684;&#x5173;&#x7CFB;&#xFF0C;&#x5373;&#x9664;&#x4E86;&#x7B2C;&#x4E00;&#x4E2A;&#x548C;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x6570;&#x636E;&#x5143;&#x7D20;&#x4E4B;&#x5916;&#xFF0C;&#x5176;&#x5B83;&#x6570;&#x636E;&#x5143;&#x7D20;&#x90FD;&#x662F;&#x9996;&#x5C3E;&#x76F8;&#x63A5;&#x7684;&#x3002;</p>
<p><strong>&#x7EBF;&#x6027;&#x8868;&#x7684;&#x4E24;&#x79CD;&#x5B58;&#x50A8;&#x65B9;&#x5F0F;</strong></p>
<ul>
<li>&#x987A;&#x5E8F;&#x5B58;&#x50A8;&#x7ED3;&#x6784;&#xFF1A;&#x968F;&#x673A;&#x8BFB;&#x53D6;&#xFF0C;&#x8BBF;&#x95EE;&#x65F6;&#x662F; O(1)</li>
<li>&#x94FE;&#x5F0F;&#x5B58;&#x50A8;&#x7ED3;&#x6784;&#xFF1A;&#x63D2;&#x5165;&#x548C;&#x5220;&#x9664; O(1)&#xFF0C;&#x8BBF;&#x95EE;&#x65F6;&#x6700;&#x574F;&#x662F; O(n)</li>
</ul>
<p><strong>&#x7EBF;&#x6027;&#x8868;&#x7684;&#x5206;&#x7C7B;&#xFF08;&#x6839;&#x636E;&#x6307;&#x9488;&#x57DF;&#xFF09;</strong></p>
<ul>
<li>&#x5355;&#x5411;&#x94FE;&#x8868;</li>
<li>&#x53CC;&#x5411;&#x94FE;&#x8868;</li>
<li>&#x5FAA;&#x73AF;&#x94FE;&#x8868;</li>
</ul>
<p>&#x8FD9;&#x4E00;&#x7BC7;&#x4E3B;&#x8981;&#x8BB2;&#x7684;&#x662F;&#x94FE;&#x8868;&#xFF08;linked list&#xFF09;&#x3002;&#x94FE;&#x8868;&#x662F;&#x4E00;&#x79CD;&#x5E38;&#x89C1;&#x7684;&#x7EBF;&#x6027;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x3002;<strong>&#x5355;&#x5411;&#x94FE;&#x8868;(singly linked list)</strong>&#xFF0C;&#x6BCF;&#x4E2A;&#x8282;&#x70B9;&#x6709;&#x4E00;&#x4E2A; next &#x6307;&#x9488;&#x6307;&#x5411;&#x540E;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#xFF0C;&#x8FD8;&#x6709;&#x4E00;&#x4E2A;&#x6210;&#x5458;&#x53D8;&#x91CF;&#x7528;&#x4EE5;&#x5B58;&#x50A8;&#x6570;&#x503C;&#xFF1B;<strong>&#x53CC;&#x5411;&#x94FE;&#x8868;(doubly Linked List)</strong>&#xFF0C;&#x591A;&#x4E86;&#x4E00;&#x4E2A; prev &#x6307;&#x9488;&#x6307;&#x5411;&#x524D;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x3002;&#x4E0E;&#x6570;&#x7EC4;&#x7C7B;&#x4F3C;&#xFF0C;&#x641C;&#x7D22;&#x94FE;&#x8868;&#x9700;&#x8981;O(n)&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF0C;&#x4F46;&#x662F;&#x94FE;&#x8868;&#x4E0D;&#x80FD;&#x901A;&#x8FC7;&#x5E38;&#x6570;&#x65F6;&#x95F4; O(1) &#x8BFB;&#x53D6;&#x7B2C; k &#x4E2A;&#x6570;&#x636E;&#x3002;&#x94FE;&#x8868;&#x7684;&#x4F18;&#x52BF;&#x5728;&#x4E8E;&#x80FD;&#x591F;&#x4EE5;&#x8F83;&#x9AD8;&#x7684;&#x6548;&#x7387;&#x5728;&#x4EFB;&#x610F;&#x4F4D;&#x7F6E;&#x63D2;&#x5165;&#x6216;&#x5220;&#x9664;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x3002;</p>
<h2 id="array"><a href="#array" class="headerlink" title="array"></a>array</h2><p>locate: O(1)<br>insert/delete: O(N)<br>search: not sorted -&gt; linear search =&gt; O(N), sorted -&gt; binary search =&gt; O(logN)<br>iteration: O(N)</p>
<table>
<thead>
<tr>
<th>data structure</th>
<th>locate</th>
<th>insert/delete</th>
<th>search</th>
<th>iteration</th>
</tr>
</thead>
<tbody>
<tr>
<td>array</td>
<td>O(1)</td>
<td>O(N)</td>
<td>$N^2$</td>
<td>N</td>
<td>$O(1)$</td>
<td>&#x2014;&#x2014;</td>
</tr>
<tr>
<td>selection</td>
<td>yes</td>
<td>$N^2$</td>
<td>$N^2$</td>
<td>$N^2$</td>
<td>$O(1)$</td>
<td>&#x2014;&#x2014;</td>
</tr>
<tr>
<td>insertion</td>
<td>yes</td>
<td>$N^2$</td>
<td>$N^2$</td>
<td>N</td>
<td>$O(1)$</td>
<td>&#x2014;&#x2014;</td>
</tr>
<tr>
<td>shell</td>
<td>yes</td>
<td>&#x2014;&#x2013;</td>
<td>&#x2014;&#x2014;-</td>
<td>N</td>
<td>$O(1)$</td>
<td>&#x2014;&#x2014;</td>
</tr>
<tr>
<td>merge</td>
<td></td>
<td>$NlogN$</td>
<td>$NlogN$</td>
<td>$NlogN$</td>
<td>$O(N)$</td>
<td>&#x2014;&#x2014;</td>
</tr>
<tr>
<td>quick</td>
<td>yes</td>
<td>$N^2$</td>
<td>$NlogN$</td>
<td>$NlogN$</td>
<td>$O(logN)$</td>
<td>&#x2014;&#x2014;</td>
</tr>
<tr>
<td>heap</td>
<td>yes</td>
<td>$NlogN$</td>
<td>$NlogN$</td>
<td>$NlogN$</td>
<td>$O(1)$</td>
<td>&#x2014;&#x2014;</td>
</tr>
</tbody>
</table>
<h1 id="&#x57FA;&#x672C;&#x7B56;&#x7565;"><a href="#&#x57FA;&#x672C;&#x7B56;&#x7565;" class="headerlink" title="&#x57FA;&#x672C;&#x7B56;&#x7565;"></a>&#x57FA;&#x672C;&#x7B56;&#x7565;</h1><h2 id="&#x6D89;&#x53CA;&#x5934;&#x8282;&#x70B9;"><a href="#&#x6D89;&#x53CA;&#x5934;&#x8282;&#x70B9;" class="headerlink" title="&#x6D89;&#x53CA;&#x5934;&#x8282;&#x70B9;"></a>&#x6D89;&#x53CA;&#x5934;&#x8282;&#x70B9;</h2><p>&#x5F53;&#x6D89;&#x53CA;&#x5BF9;&#x5934;&#x8282;&#x70B9;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;&#x8003;&#x8651;&#x521B;&#x5EFA;&#x54D1;&#x8282;&#x70B9;</p>
<h2 id="&#x4FEE;&#x6539;&#x5355;&#x5411;&#x94FE;&#x8868;&#x7684;&#x64CD;&#x4F5C;"><a href="#&#x4FEE;&#x6539;&#x5355;&#x5411;&#x94FE;&#x8868;&#x7684;&#x64CD;&#x4F5C;" class="headerlink" title="&#x4FEE;&#x6539;&#x5355;&#x5411;&#x94FE;&#x8868;&#x7684;&#x64CD;&#x4F5C;"></a>&#x4FEE;&#x6539;&#x5355;&#x5411;&#x94FE;&#x8868;&#x7684;&#x64CD;&#x4F5C;</h2><p>&#x8003;&#x8651;&#x54EA;&#x4E2A;&#x8282;&#x70B9;&#x7684;next&#x6307;&#x9488;&#x4F1A;&#x53D7;&#x5230;&#x5F71;&#x54CD;&#xFF0C;&#x5219;&#x9700;&#x8981;&#x4FEE;&#x6B63;&#x8BE5;&#x6307;&#x9488;&#xFF1B;</p>
<h2 id="&#x53CD;&#x8F6C;&#x94FE;&#x8868;"><a href="#&#x53CD;&#x8F6C;&#x94FE;&#x8868;" class="headerlink" title="&#x53CD;&#x8F6C;&#x94FE;&#x8868;"></a>&#x53CD;&#x8F6C;&#x94FE;&#x8868;</h2><p>&#x8981;&#x628A;&#x53CD;&#x8F6C;&#x540E;&#x7684;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#xFF08;&#x5373;&#x7B2C;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#xFF09;&#x6307;&#x5411; null</p>
<h2 id="&#x5220;&#x9664;&#x67D0;&#x4E2A;&#x8282;&#x70B9;"><a href="#&#x5220;&#x9664;&#x67D0;&#x4E2A;&#x8282;&#x70B9;" class="headerlink" title="&#x5220;&#x9664;&#x67D0;&#x4E2A;&#x8282;&#x70B9;"></a>&#x5220;&#x9664;&#x67D0;&#x4E2A;&#x8282;&#x70B9;</h2><ul>
<li>&#x7531;&#x4E8E;&#x9700;&#x8981;&#x77E5;&#x9053;&#x524D;&#x7EE7;&#x8282;&#x70B9;&#x7684;&#x4FE1;&#x606F;&#xFF0C;&#x800C;&#x524D;&#x7EE7;&#x8282;&#x70B9;&#x53EF;&#x80FD;&#x4F1A;&#x5BFC;&#x81F4;&#x8868;&#x5934;&#x4EA7;&#x751F;&#x53D8;&#x5316;&#xFF0C;&#x6240;&#x4EE5;&#x9700;&#x8981;&#x4E00;&#x4E9B;&#x6280;&#x5DE7; Dummy Node</li>
<li>&#x5168;&#x90E8;&#x64CD;&#x4F5C;&#x7ED3;&#x675F;&#x540E;&#xFF0C;&#x5224;&#x65AD;&#x662F;&#x5426;&#x6709;&#x73AF;&#xFF1B;&#x82E5;&#x6709;&#xFF0C;&#x5219;&#x7F6E;&#x5176;&#x4E2D;&#x4E00;&#x7AEF;&#x4E3A; null</li>
</ul>
<h2 id="&#x5FEB;&#x6162;&#x6307;&#x9488;"><a href="#&#x5FEB;&#x6162;&#x6307;&#x9488;" class="headerlink" title="&#x5FEB;&#x6162;&#x6307;&#x9488;"></a>&#x5FEB;&#x6162;&#x6307;&#x9488;</h2><p>&#x5FEB;&#x901F;&#x627E;&#x51FA;&#x672A;&#x77E5;&#x957F;&#x5EA6;&#x5355;&#x94FE;&#x8868;&#x7684;&#x4E2D;&#x95F4;&#x8282;&#x70B9;&#xFF0F;&#x6D89;&#x53CA;&#x5728;&#x94FE;&#x8868;&#x4E2D;&#x5BFB;&#x627E;&#x7279;&#x5B9A;&#x4F4D;&#x7F6E;</p>
<ul>
<li>&#x8BBE;&#x7F6E;&#x4E24;&#x4E2A;&#x6307;&#x9488; *fast &#x548C; *slow &#x90FD;&#x6307;&#x5411;&#x5934;&#x8282;&#x70B9;</li>
<li>*fast &#x79FB;&#x52A8;&#x901F;&#x5EA6;&#x662F; *slow &#x7684;&#x4E24;&#x500D;</li>
<li>*fast &#x6307;&#x5411;&#x672B;&#x5C3E;&#x8282;&#x70B9;&#x65F6;&#xFF0C;*slow &#x6B63;&#x597D;&#x5C31;&#x5728;&#x4E2D;&#x95F4;</li>
</ul>
<h2 id="&#x5224;&#x65AD;&#x5355;&#x94FE;&#x8868;&#x662F;&#x5426;&#x6709;&#x73AF;"><a href="#&#x5224;&#x65AD;&#x5355;&#x94FE;&#x8868;&#x662F;&#x5426;&#x6709;&#x73AF;" class="headerlink" title="&#x5224;&#x65AD;&#x5355;&#x94FE;&#x8868;&#x662F;&#x5426;&#x6709;&#x73AF;"></a>&#x5224;&#x65AD;&#x5355;&#x94FE;&#x8868;&#x662F;&#x5426;&#x6709;&#x73AF;</h2><ul>
<li>&#x8BBE;&#x7F6E;&#x4E24;&#x4E2A;&#x6307;&#x9488; *fast &#x548C; *slow &#x90FD;&#x6307;&#x5411;&#x5934;&#x8282;&#x70B9;</li>
<li>*fast &#x79FB;&#x52A8;&#x901F;&#x5EA6;&#x662F; *slow &#x7684;&#x4E24;&#x500D;</li>
<li>&#x5982;&#x679C; *fast == null &#x8BF4;&#x660E;&#x8BE5;&#x5355;&#x94FE;&#x8868;&#x4E0D;&#x662F;&#x5FAA;&#x73AF;&#x94FE;&#x8868;</li>
<li>&#x5982;&#x679C; *fast == *slow &#x8BF4;&#x660E;&#x8BE5;&#x94FE;&#x8868;&#x662F;&#x5FAA;&#x73AF;&#x94FE;&#x8868;</li>
</ul>
<h2 id="&#x627E;&#x5012;&#x6570;&#x7B2C;-N-&#x4E2A;&#x8282;&#x70B9;"><a href="#&#x627E;&#x5012;&#x6570;&#x7B2C;-N-&#x4E2A;&#x8282;&#x70B9;" class="headerlink" title="&#x627E;&#x5012;&#x6570;&#x7B2C; N &#x4E2A;&#x8282;&#x70B9;"></a>&#x627E;&#x5012;&#x6570;&#x7B2C; N &#x4E2A;&#x8282;&#x70B9;</h2><ul>
<li>&#x8BBE;&#x7F6E;&#x4E24;&#x4E2A;&#x6307;&#x9488; fast &#x548C; slow &#x90FD;&#x6307;&#x5411;&#x5934;&#x8282;&#x70B9;</li>
<li>*fast &#x5148;&#x79FB;&#x52A8; N &#x6B65;&#xFF0C;&#x7136;&#x540E;&#x4E24;&#x4E2A;&#x6307;&#x9488;&#x4E00;&#x8D77;&#x524D;&#x8FDB;</li>
<li>*fast &#x5230;&#x8FBE;&#x672B;&#x5C3E;&#x65F6;&#xFF0C;*slow &#x5373;&#x4E3A;&#x5012;&#x6570;&#x7B2C; N &#x4E2A;&#x8282;&#x70B9;</li>
</ul>
<h2 id="&#x68C0;&#x9A8C;&#x6709;&#x6548;&#x6027;"><a href="#&#x68C0;&#x9A8C;&#x6709;&#x6548;&#x6027;" class="headerlink" title="&#x68C0;&#x9A8C;&#x6709;&#x6548;&#x6027;"></a>&#x68C0;&#x9A8C;&#x6709;&#x6548;&#x6027;</h2><p>&#x8BBF;&#x95EE;&#x67D0;&#x4E2A;&#x8282;&#x70B9; cur.next &#x65F6;&#xFF0C;&#x8981;&#x68C0;&#x9A8C; cur &#x662F;&#x5426;&#x4E3A; null&#x3002;&#xFF08;&#x540C;&#x7406;&#xFF0C;&#x8BBF;&#x95EE; cur.next.next&#xFF0C;&#x68C0;&#x9A8C; cur.next&#xFF09;</p>
<h1 id="&#x94FE;&#x8868;&#x5B9E;&#x73B0;"><a href="#&#x94FE;&#x8868;&#x5B9E;&#x73B0;" class="headerlink" title="&#x94FE;&#x8868;&#x5B9E;&#x73B0;"></a>&#x94FE;&#x8868;&#x5B9E;&#x73B0;</h1><h2 id="Singly-linked-list-Implementation"><a href="#Singly-linked-list-Implementation" class="headerlink" title="Singly-linked list Implementation"></a>Singly-linked list Implementation</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"># implement a singly-linked list</div><div class="line">class Node(object):</div><div class="line"></div><div class="line">    def __init__(self, val=None, next=None):</div><div class="line">        self.val = val</div><div class="line">        self.next = next</div><div class="line"></div><div class="line"></div><div class="line">class LinkedList(object):</div><div class="line"></div><div class="line">    def __init__(self, head=None):</div><div class="line">        self.head = head</div><div class="line"></div><div class="line">    # insert in front</div><div class="line">    def insert(self, val):</div><div class="line">        node = Node(val, self.head)</div><div class="line">        self.head = node</div><div class="line">        return True</div><div class="line"></div><div class="line">    def size(self):</div><div class="line">        length = 0</div><div class="line">        cur = self.head</div><div class="line">        while cur:</div><div class="line">            cur = cur.next</div><div class="line">            length += 1</div><div class="line">        return length</div><div class="line"></div><div class="line">    def delete(self, data):</div><div class="line">        if not self.head or not data:</div><div class="line">            return False</div><div class="line">        cur = self.head</div><div class="line">        # special case for head</div><div class="line">        if data == cur:</div><div class="line">            cur = cur.next</div><div class="line">            return True</div><div class="line">        while cur.next:</div><div class="line">            if cur.next == data:</div><div class="line">                cur.next = cur.next.next</div><div class="line">                return True</div><div class="line">            cur = cur.next</div><div class="line">        return False</div><div class="line">        #raise ValueError(&quot;Data not in list&quot;)</div><div class="line"></div><div class="line">    def deleteList(self):</div><div class="line">        cur = self.head</div><div class="line">        self.head = None</div><div class="line">        return True</div><div class="line"></div><div class="line">    def search(self, data):</div><div class="line">        cur = self.head</div><div class="line">        while cur and cur.val != data:</div><div class="line">            cur = cur.next</div><div class="line">        return cur</div><div class="line"></div><div class="line">    def printAll(self):</div><div class="line">        cur = self.head</div><div class="line">        while cur:</div><div class="line">            print cur.val,</div><div class="line">            cur = cur.next</div><div class="line">        print</div></pre></td></tr></table></figure>
<h1 id="Leetcode-&#x5B9E;&#x4F8B;"><a href="#Leetcode-&#x5B9E;&#x4F8B;" class="headerlink" title="Leetcode &#x5B9E;&#x4F8B;"></a>Leetcode &#x5B9E;&#x4F8B;</h1><h2 id="&#x79FB;&#x9664;&#x8282;&#x70B9;-19-Remove-Nth-Node-From-End-of-List"><a href="#&#x79FB;&#x9664;&#x8282;&#x70B9;-19-Remove-Nth-Node-From-End-of-List" class="headerlink" title="&#x79FB;&#x9664;&#x8282;&#x70B9;(19.Remove Nth Node From End of List)"></a>&#x79FB;&#x9664;&#x8282;&#x70B9;(19.Remove Nth Node From End of List)</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Given a linked list, remove the nth node from the end of list and return its head.</p>
<p>For example,</p>
<p>   Given linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n = 2.</p>
<p>   After removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5.<br>Note:<br>Given n will always be valid.<br>Try to do this in one pass.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">&apos;&apos;&apos;</div><div class="line">A singly list is a particularly poor choice for a data structure when you frequently need to find the mth-to-last element!</div><div class="line"></div><div class="line">Assumption:</div><div class="line">- m is less than the length of linked list?</div><div class="line">  if not, check first!</div><div class="line"></div><div class="line">Solution:</div><div class="line">You cannot traverse backward through a singly linked list, so may be we can store elements into another data structure so that we can look back, or for this problem, we can traverse from beginning of list.</div><div class="line"></div><div class="line">Two-pass solution:</div><div class="line">- first get the length of linked list, and then find the node before (length-n)th node, and node.next=node.next.next</div><div class="line">- use dummy node</div><div class="line"></div><div class="line">Follow-up:</div><div class="line">one-pass solution:</div><div class="line">- how to access nth node from the end?</div><div class="line">    use two pointers, fast and slow, keep the distance n between fast and slow node</div><div class="line">&apos;&apos;&apos;</div><div class="line"></div><div class="line"># Definition for singly-linked list.</div><div class="line"># class ListNode(object):</div><div class="line">#     def __init__(self, x):</div><div class="line">#         self.val = x</div><div class="line">#         self.next = None</div><div class="line"></div><div class="line">class Solution(object):</div><div class="line">    def removeNthFromEnd(self, head, n):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type head: ListNode</div><div class="line">        :type n: int</div><div class="line">        :rtype: ListNode</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        if not head or not head.next:</div><div class="line">            return None</div><div class="line">        dummy=ListNode(0)</div><div class="line">        dummy.next=head</div><div class="line">        slow,fast=dummy,dummy</div><div class="line">        for i in range(n):</div><div class="line">            fast=fast.next</div><div class="line">        while fast.next:</div><div class="line">            fast,slow=fast.next,slow.next</div><div class="line">        slow.next=slow.next.next</div><div class="line">        return dummy.next</div><div class="line">    &apos;&apos;&apos;</div><div class="line">    # Two pass solution</div><div class="line"></div><div class="line">    def removeNthFromEnd(self, head, n):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type head: ListNode</div><div class="line">        :type n: int</div><div class="line">        :rtype: ListNode</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        if not head or not head.next:</div><div class="line">            return None</div><div class="line">        length=0</div><div class="line">        dummy=ListNode(0)</div><div class="line">        dummy.next=head</div><div class="line">        pointer1,pointer2=dummy,dummy</div><div class="line">        while pointer1.next:</div><div class="line">            length+=1</div><div class="line">            pointer1=pointer1.next</div><div class="line">        # find nth node</div><div class="line">        for i in range(length-n):</div><div class="line">            pointer2=pointer2.next</div><div class="line">        pointer2.next=pointer2.next.next</div><div class="line">        return dummy.next</div><div class="line">        &apos;&apos;&apos;</div></pre></td></tr></table></figure>
<h2 id="&#x94FE;&#x8868;&#x76F8;&#x52A0;-2-Add-Two-Numbers"><a href="#&#x94FE;&#x8868;&#x76F8;&#x52A0;-2-Add-Two-Numbers" class="headerlink" title="&#x94FE;&#x8868;&#x76F8;&#x52A0;(2.Add Two Numbers)"></a>&#x94FE;&#x8868;&#x76F8;&#x52A0;(2.Add Two Numbers)</h2><h3 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h3><p>You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.<br>Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>Output: 7 -&gt; 0 -&gt; 8</p>
<h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">class Solution(object):</div><div class="line">    def addTwoNumbers(self, l1, l2):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type l1: ListNode</div><div class="line">        :type l2: ListNode</div><div class="line">        :rtype: ListNode</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        head = ListNode(0)</div><div class="line">        output = head</div><div class="line">        carry = 0</div><div class="line">        while True:</div><div class="line">            if l1 != None:</div><div class="line">                carry += l1.val</div><div class="line">                l1 = l1.next</div><div class="line">            if l2 != None:</div><div class="line">                carry += l2.val</div><div class="line">                l2 = l2.next</div><div class="line">            output.val = carry % 10</div><div class="line">            carry = carry / 10</div><div class="line">            if l1 != None or l2 != None or carry:</div><div class="line">                output.next = ListNode(0)</div><div class="line">                output = output.next</div><div class="line">            else:</div><div class="line">                break</div><div class="line">        return head</div></pre></td></tr></table></figure>
<p>&#x6CE8;&#x610F;&#x8003;&#x8651;&#x4E24;&#x4E2A;&#x6570;&#x4F4D;&#x6570;&#x4E0D;&#x540C;&#x7684;&#x60C5;&#x51B5;&#x3002;<br>&#x56E0;&#x4E3A;&#x4E24;&#x4F4D;&#x6570;&#x76F8;&#x52A0;&#x8FDB;&#x4F4D;&#x6700;&#x591A;&#x5F71;&#x54CD;&#x540E;&#x4E00;&#x4F4D;&#xFF0C;&#x4E0D;&#x4F1A;&#x5F71;&#x54CD; i+2 &#x4F4D;&#xFF0C;&#x6240;&#x4EE5;&#x53D1;&#x73B0;&#x4E00;&#x4E2A;&#x94FE;&#x8868;&#x4E3A;&#x7A7A;&#x540E;&#xFF0C;&#x76F4;&#x63A5;&#x7ED3;&#x675F;&#x5FAA;&#x73AF;&#xFF0C;&#x6700;&#x540E;&#x53EA;&#x7528;&#x8FDB;&#x4F4D;&#x548C;&#x8F83;&#x957F;&#x94FE;&#x8868;&#x7684;&#x5F53;&#x524D;&#x8282;&#x70B9;&#x76F8;&#x52A0;&#xFF0C;&#x4E4B;&#x540E;&#x8F83;&#x957F;&#x94FE;&#x8868;&#x7684; i+2 &#x4F4D;&#x76F4;&#x63A5;&#x7167;&#x642C;&#x3002;<br>&#x7528;&#x8FD9;&#x4E2A;&#x7ED3;&#x6784;&#x53EF;&#x4EE5;&#x5B9E;&#x73B0;&#x5927;&#x6574;&#x6570;&#x7684;&#x8BA1;&#x7B97;&#x3002;</p>
<h2 id="&#x94FE;&#x8868;&#x7684;&#x7FFB;&#x8F6C;-206-92-Reverse-Linked-List"><a href="#&#x94FE;&#x8868;&#x7684;&#x7FFB;&#x8F6C;-206-92-Reverse-Linked-List" class="headerlink" title="&#x94FE;&#x8868;&#x7684;&#x7FFB;&#x8F6C;(206.92.Reverse Linked List)"></a>&#x94FE;&#x8868;&#x7684;&#x7FFB;&#x8F6C;(206.92.Reverse Linked List)</h2><h3 id="Problem-I"><a href="#Problem-I" class="headerlink" title="Problem(I)"></a>Problem(I)</h3><p>Reverse a singly linked list.<br>Hint:<br>A linked list can be reversed either iteratively or recursively. Could you implement both?</p>
<h3 id="&#x521D;&#x6B65;&#x601D;&#x8003;"><a href="#&#x521D;&#x6B65;&#x601D;&#x8003;" class="headerlink" title="&#x521D;&#x6B65;&#x601D;&#x8003;"></a>&#x521D;&#x6B65;&#x601D;&#x8003;</h3><p>&#x6BCF;&#x6B21;&#x8D70;&#x5230;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x6570;&#xFF0C;&#x628A;&#x5B83;&#x653E;&#x5230;&#x6700;&#x524D;&#x9762;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5</div><div class="line">=&gt;</div><div class="line">5 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4</div><div class="line">4 -&gt; 5 -&gt; 1 -&gt; 2 -&gt; 3</div><div class="line">...</div><div class="line">5 -&gt; 4 -&gt; 3 -&gt; 2 -&gt; 1</div></pre></td></tr></table></figure></p>
<p>&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6; $O(n^2)$</p>
<h3 id="&#x5934;&#x63D2;&#x6CD5;"><a href="#&#x5934;&#x63D2;&#x6CD5;" class="headerlink" title="&#x5934;&#x63D2;&#x6CD5;"></a>&#x5934;&#x63D2;&#x6CD5;</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5</div><div class="line">=&gt;</div><div class="line">2 -&gt; 1 -&gt; 3 -&gt; 4 -&gt; 5</div><div class="line">3 -&gt; 2 -&gt; 1 -&gt; 4 -&gt; 5</div><div class="line">...</div><div class="line">5 -&gt; 4 -&gt; 3 -&gt; 2 -&gt; 1</div></pre></td></tr></table></figure>
<p>&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6; $O(n)$&#xFF0C;&#x7A7A;&#x95F4;&#x590D;&#x6742;&#x5EA6; $O(1)$</p>
<p>&#x8981;&#x6CE8;&#x610F;&#x7684;&#x662F;&#xFF0C;&#x628A;&#x7FFB;&#x8F6C;&#x540E;&#x7684;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#xFF08;&#x5373;&#x539F;&#x6765;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#xFF09;&#x6307;&#x5411; Null(None)&#x3002;<br>&#x8BBF;&#x95EE;&#x67D0;&#x4E2A;&#x8282;&#x70B9; cur.next&#xFF0C;&#x8981;&#x68C0;&#x9A8C; cur &#x662F;&#x5426;&#x4E3A; None.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5</div><div class="line">=&gt;</div><div class="line">1 -&gt; None -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5</div><div class="line">2 -&gt; 1 -&gt; None -&gt; 3 -&gt; 4 -&gt; 5</div><div class="line">3 -&gt; 2 -&gt; 1 -&gt; None -&gt; 4 -&gt; 5</div><div class="line">...</div><div class="line">5 -&gt; 4 -&gt; 3 -&gt; 2 -&gt; 1 -&gt; None</div></pre></td></tr></table></figure>
<h4 id="&#x8FED;&#x4EE3;&#x6CD5;"><a href="#&#x8FED;&#x4EE3;&#x6CD5;" class="headerlink" title="&#x8FED;&#x4EE3;&#x6CD5;"></a>&#x8FED;&#x4EE3;&#x6CD5;</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">class Solution(object):</div><div class="line">    def reverseList(self, head):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type head: ListNode</div><div class="line">        :rtype: ListNode</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        dummy = None</div><div class="line">        while head:</div><div class="line">            curr = head</div><div class="line">            head = head.next</div><div class="line">            curr.next= dummy</div><div class="line">            dummy = curr</div><div class="line">        return dummy</div></pre></td></tr></table></figure>
<p>&#x66F4;&#x7B80;&#x5355;&#x3002;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">class Solution(object):</div><div class="line">    def reverseList(self, head):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type head: ListNode</div><div class="line">        :rtype: ListNode</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        dummy = None</div><div class="line">        while head:</div><div class="line">            head.next,dummy,head=dummy,head,head.next # head.next=dummy &#x5FC5;&#x987B;&#x5728; head=head.next&#x4E4B;&#x524D;</div><div class="line">        return dummy</div></pre></td></tr></table></figure></p>
<h4 id="&#x9012;&#x5F52;"><a href="#&#x9012;&#x5F52;" class="headerlink" title="&#x9012;&#x5F52;"></a>&#x9012;&#x5F52;</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class Solution(object):</div><div class="line">    def reverseList(self, head):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type head: ListNode</div><div class="line">        :rtype: ListNode</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        return self._reverse(head)</div><div class="line"></div><div class="line">    def _reverse(self, node, prev=None):</div><div class="line">        if not node:</div><div class="line">            return prev</div><div class="line">        n = node.next</div><div class="line">        node.next = prev</div><div class="line">        return self._reverse(n, node)</div></pre></td></tr></table></figure>
<h3 id="Problem-II"><a href="#Problem-II" class="headerlink" title="Problem(II)"></a>Problem(II)</h3><p>Reverse a linked list from position m to n. Do it in-place and in one-pass.<br>For example:<br>Given 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, m = 2 and n = 4,<br>return 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;NULL.<br>Note:<br>Given m, n satisfy the following condition:<br>1 &#x2264; m &#x2264; n &#x2264; length of list.</p>
<p>oup, &#x6700;&#x540E;&#x8981;&#x8FD4;&#x56DE;&#x7684;&#x662F; oup.next &#x6307;&#x9488;<br>dummy &#x6307;&#x9488;&#xFF0C;&#x5728;&#x539F;&#x6765;&#x7684; m-1 &#x4F4D;&#x7F6E;<br>cur &#x6307;&#x9488;&#xFF0C;&#x5728;&#x539F;&#x6765;&#x7684; n &#x4F4D;&#x7F6E;<br>reverse&#xFF0C;&#x5728;&#x539F;&#x6765;&#x7684; m &#x4F4D;&#x7F6E;</p>
<p>dummy &#x6307;&#x9488;&#xFF0C;&#x7A7A;&#x8F6C; m-1 &#x6B21;&#xFF0C;&#x627E;&#x5230;&#x7B2C; m-1 &#x4E2A;&#x8282;&#x70B9;&#xFF0C;&#x5373;&#x5F00;&#x59CB;&#x7FFB;&#x8F6C;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x7ED3;&#x70B9;&#x7684;&#x524D;&#x4E00;&#x4E2A;&#xFF1B;<br>&#x5229;&#x7528; cur, reverse &#x6309;&#x5B8C;&#x5168;&#x7FFB;&#x8F6C;&#x7684;&#x65B9;&#x6CD5;&#x7FFB;&#x8F6C;[m,n]&#x90E8;&#x5206;<br>&#x6700;&#x540E;&#x4FEE;&#x6539;&#x4E24;&#x4E2A;&#x6307;&#x9488;&#xFF0C;dummy.next &#x6307;&#x5411; reverse&#xFF0C;dummy.next.next &#x6307;&#x5411;&#x7B2C; n+1 &#x4E2A;&#x8282;&#x70B9;&#x3002;</p>
<h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">class Solution(object):</div><div class="line">    def reverseBetween(self, head, m, n):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type head: ListNode</div><div class="line">        :type m: int</div><div class="line">        :type n: int</div><div class="line">        :rtype: ListNode</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        if m==n:</div><div class="line">            return head</div><div class="line"></div><div class="line">        # [1,m-1] nodes</div><div class="line">        oup = ListNode(0)</div><div class="line">        oup.next = head</div><div class="line">        dummy = oup</div><div class="line"></div><div class="line">        for i in range(m-1):</div><div class="line">            dummy = dummy.next</div><div class="line"></div><div class="line">        # reverse [m,n] nodes</div><div class="line">        reverse = None</div><div class="line">        cur = dummy.next</div><div class="line">        for i in range(m,n+1):</div><div class="line">            cur.next,reverse,cur = reverse,cur,cur.next</div><div class="line"></div><div class="line">        # [n,end] nodes</div><div class="line">        dummy.next.next = cur</div><div class="line">        dummy.next = reverse</div><div class="line"></div><div class="line">        return oup.next</div></pre></td></tr></table></figure>
<h2 id="&#x94FE;&#x8868;&#x6539;&#x5E8F;&#xFF08;143-Reorder-List&#xFF09;"><a href="#&#x94FE;&#x8868;&#x6539;&#x5E8F;&#xFF08;143-Reorder-List&#xFF09;" class="headerlink" title="&#x94FE;&#x8868;&#x6539;&#x5E8F;&#xFF08;143. Reorder List&#xFF09;"></a>&#x94FE;&#x8868;&#x6539;&#x5E8F;&#xFF08;143. Reorder List&#xFF09;</h2><h3 id="Problem-2"><a href="#Problem-2" class="headerlink" title="Problem"></a>Problem</h3><p>Given a singly linked list L: L0&#x2192;L1&#x2192;&#x2026;&#x2192;Ln-1&#x2192;Ln,<br>reorder it to: L0&#x2192;Ln&#x2192;L1&#x2192;Ln-1&#x2192;L2&#x2192;Ln-2&#x2192;&#x2026;</p>
<p>You must do this in-place without altering the nodes&#x2019; values.</p>
<p>For example,<br>Given {1,2,3,4}, reorder it to {1,4,2,3}.</p>
<h3 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">&apos;&apos;&apos;</div><div class="line">Solution:</div><div class="line">- Two-pass</div><div class="line">    store all nodes in a stack, create a dummy node, every time while i &lt; len(linked list), linked one node from linked list and one node from stack, and finally deal with odd or even number of length</div><div class="line"></div><div class="line">Followup:</div><div class="line">- One-pass and O(1)</div><div class="line">    - find middle: use fast,slow pointers</div><div class="line">    - reverse second half list: 1-&gt;2-&gt;3-&gt;4-&gt;null =&gt; null&lt;-1&lt;-2&lt;-3&lt;-4, for each node, point the next node of current to previous one, update the previous and next node, do the same thing</div><div class="line">    - merge two lists</div><div class="line">&apos;&apos;&apos;</div><div class="line"># Definition for singly-linked list.</div><div class="line"># class ListNode(object):</div><div class="line">#     def __init__(self, x):</div><div class="line">#         self.val = x</div><div class="line">#         self.next = None</div><div class="line">class Solution(object):</div><div class="line">    def reorderList(self,head):</div><div class="line">        if not head:</div><div class="line">            return None</div><div class="line">        # find middle</div><div class="line">        fast,slow=head,head</div><div class="line">        while fast and fast.next:</div><div class="line">            fast=fast.next.next</div><div class="line">            slow=slow.next</div><div class="line">        # reverse list</div><div class="line">        pre=None</div><div class="line">        cur=slow</div><div class="line">        while cur:</div><div class="line">            # one line solution</div><div class="line">            pre, cur.next, cur = node, pre, cur.next</div><div class="line">            next=cur.next</div><div class="line">            cur.next=pre</div><div class="line">            pre=cur</div><div class="line">            cur=next</div><div class="line"></div><div class="line">        # merge list</div><div class="line">        first,second=head,pre</div><div class="line">        while second.next:</div><div class="line">            first.next,first=second,first.next</div><div class="line">            second.next,second=first,second.next</div><div class="line">        return</div><div class="line"></div><div class="line">    &apos;&apos;&apos;</div><div class="line">    def reorderList(self, head):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type head: ListNode</div><div class="line">        :rtype: void Do not return anything, modify head in-place instead.</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        if not head or not head.next: return</div><div class="line">        stack=[]</div><div class="line">        dummy=ListNode(0)</div><div class="line">        dummy.next=head</div><div class="line">        while dummy.next:</div><div class="line">            stack.append(dummy.next)</div><div class="line">            dummy=dummy.next</div><div class="line">        dummy=ListNode(0)</div><div class="line">        dummy.next=head</div><div class="line">        length=len(stack)</div><div class="line">        half_len=len(stack)/2</div><div class="line">        for i in range(half_len):</div><div class="line">            node,dummy=dummy.next.next,dummy.next</div><div class="line">            # dummy.next,dummy=stack.pop(),dummy.next</div><div class="line">            # this is wrong. suppose a=0,a,b=3,a =&gt; a=3,b=0</div><div class="line">            dummy.next=stack.pop()</div><div class="line">            dummy,dummy.next=dummy.next,node</div><div class="line">        if length%2==1:</div><div class="line">            dummy.next.next=None</div><div class="line">        else:</div><div class="line">            dummy.next=None</div><div class="line">            &apos;&apos;&apos;</div></pre></td></tr></table></figure>
<h2 id="&#x6392;&#x5E8F;&#x94FE;&#x8868;&#x53BB;&#x91CD;-82-83-Remove-Duplicates-from-Sorted-List-I-amp-II"><a href="#&#x6392;&#x5E8F;&#x94FE;&#x8868;&#x53BB;&#x91CD;-82-83-Remove-Duplicates-from-Sorted-List-I-amp-II" class="headerlink" title="&#x6392;&#x5E8F;&#x94FE;&#x8868;&#x53BB;&#x91CD;(82.83. Remove Duplicates from Sorted List I&amp;II)"></a>&#x6392;&#x5E8F;&#x94FE;&#x8868;&#x53BB;&#x91CD;(82.83. Remove Duplicates from Sorted List I&amp;II)</h2><h3 id="Problem-I-1"><a href="#Problem-I-1" class="headerlink" title="Problem(I)"></a>Problem(I)</h3><p>Given a sorted linked list, delete all duplicates such that each element appear only once.<br>For example,<br>Given 1-&gt;1-&gt;2, return 1-&gt;2.<br>Given 1-&gt;1-&gt;2-&gt;3-&gt;3, return 1-&gt;2-&gt;3.</p>
<h3 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">class Solution(object):</div><div class="line">    def deleteDuplicates(self, head):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type head: ListNode</div><div class="line">        :rtype: ListNode</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        dummy = head</div><div class="line">        while head and head.next:</div><div class="line">            if head.val == head.next.val:</div><div class="line">                head.next = head.next.next</div><div class="line">            else:</div><div class="line">                head = head.next</div><div class="line">        return dummy</div></pre></td></tr></table></figure>
<p>&#x6CE8;&#x610F;&#x7528;&#x5230; head.next &#x4E00;&#x5B9A;&#x8981;&#x5224;&#x65AD;&#x524D;&#x4E00;&#x4E2A;&#x8282;&#x70B9; head &#x662F;&#x5426;&#x4E3A;&#x7A7A;&#xFF0C;&#x540C;&#x7406;&#xFF0C;head.next.next &#x5224;&#x65AD; head.next &#x662F;&#x5426;&#x4E3A;&#x7A7A;&#x3002;</p>
<h3 id="Problem-II-1"><a href="#Problem-II-1" class="headerlink" title="Problem(II)"></a>Problem(II)</h3><p>Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.<br>For example,<br>Given 1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5, return 1-&gt;2-&gt;5.<br>Given 1-&gt;1-&gt;1-&gt;2-&gt;3, return 2-&gt;3.</p>
<h3 id="Solution-5"><a href="#Solution-5" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">class Solution(object):</div><div class="line">    def deleteDuplicates(self, head):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type head: ListNode</div><div class="line">        :rtype: ListNode</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        dummy = ListNode(0)</div><div class="line">        cur = dummy</div><div class="line">        while head:</div><div class="line">            while head.next and head.val == head.next.val:</div><div class="line">                head = head.next</div><div class="line">                if not head.next or head.val != head.next.val:</div><div class="line">                    break</div><div class="line">            else:</div><div class="line">                cur.next = head</div><div class="line">                cur = head</div><div class="line">            head = head.next</div><div class="line">        cur.next = None</div><div class="line">        return dummy.next</div></pre></td></tr></table></figure>
<p>&#x8003;&#x8651;&#x7684; bad case: [1,1],[1,1,1]&#xFF0C;&#x6240;&#x4EE5;&#x6700;&#x540E;&#x7684; cur.next = None &#x4E0D;&#x80FD;&#x5C11;&#xFF0C;&#x5426;&#x5219;&#x8FD8;&#x4F1A;&#x8FD4;&#x56DE; [1]</p>
<h2 id="&#x94FE;&#x8868;&#x7684;&#x5408;&#x5E76;-21-Merge-Two-Sorted-Lists"><a href="#&#x94FE;&#x8868;&#x7684;&#x5408;&#x5E76;-21-Merge-Two-Sorted-Lists" class="headerlink" title="&#x94FE;&#x8868;&#x7684;&#x5408;&#x5E76;(21. Merge Two Sorted Lists)"></a>&#x94FE;&#x8868;&#x7684;&#x5408;&#x5E76;(21. Merge Two Sorted Lists)</h2><p>&#x5FEB;&#x901F;&#x6392;&#x5E8F;&#x5BF9;&#x94FE;&#x8868;&#x7ED3;&#x6784;&#x9002;&#x7528;&#xFF0C;&#x7136;&#x800C;&#x4E0D;&#x662F;&#x6240;&#x6709;&#x6392;&#x5E8F;&#x90FD;&#x9002;&#x5408;&#x4F7F;&#x7528;&#x94FE;&#x8868;&#x5B58;&#x50A8;&#xFF0C;&#x5982;&#x5806;&#x6392;&#x5E8F;&#xFF0C;&#x4E0D;&#x65AD;&#x5BFB;&#x627E;&#x6570;&#x7EC4;&#x7684; n/2 &#x548C; n &#x4F4D;&#x7F6E;&#xFF0C;&#x7528;&#x94FE;&#x8868;&#x4E0D;&#x5927;&#x65B9;&#x4FBF;&#x3002;</p>
<h3 id="Problem-3"><a href="#Problem-3" class="headerlink" title="Problem"></a>Problem</h3><p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p>
<h3 id="Solution-6"><a href="#Solution-6" class="headerlink" title="Solution"></a>Solution</h3><p><strong>Recursive</strong><br>&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6; O(N),&#x7A7A;&#x95F4;&#x590D;&#x6742;&#x5EA6; O(1)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">class Solution(object):</div><div class="line">    def mergeTwoLists(self, l1, l2):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type l1: ListNode</div><div class="line">        :type l2: ListNode</div><div class="line">        :rtype: ListNode</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        if l2 is None:</div><div class="line">            return l1</div><div class="line">        if l1 is None:</div><div class="line">            return l2</div><div class="line">        if l1.val &lt; l2.val:</div><div class="line">            head = l1</div><div class="line">            head.next = self.mergeTwoLists(l1.next,l2)</div><div class="line">        else:</div><div class="line">            head = l2</div><div class="line">            head.next = self.mergeTwoLists(l1,l2.next)</div><div class="line">        return head</div></pre></td></tr></table></figure></p>
<h2 id="&#x94FE;&#x8868;&#x7684;&#x5212;&#x5206;&#xFF08;89-Partition-List&#xFF09;"><a href="#&#x94FE;&#x8868;&#x7684;&#x5212;&#x5206;&#xFF08;89-Partition-List&#xFF09;" class="headerlink" title="&#x94FE;&#x8868;&#x7684;&#x5212;&#x5206;&#xFF08;89.Partition List&#xFF09;"></a>&#x94FE;&#x8868;&#x7684;&#x5212;&#x5206;&#xFF08;89.Partition List&#xFF09;</h2><h3 id="Problem-4"><a href="#Problem-4" class="headerlink" title="Problem"></a>Problem</h3><p>Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.<br>You should preserve the original relative order of the nodes in each of the two partitions.<br>For example,<br>Given 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;2 and x = 3,<br>return 1-&gt;2-&gt;2-&gt;4-&gt;3-&gt;5.</p>
<h3 id="Solution-7"><a href="#Solution-7" class="headerlink" title="Solution"></a>Solution</h3><p>&#x7528;&#x4E24;&#x4E2A;&#x6307;&#x9488; left,right&#xFF0C;&#x5C0F;&#x4E8E; x &#x7684;&#x7528; left&#xFF0C;&#x5927;&#x4E8E; x &#x7684;&#x7528; right&#xFF0C;&#x6700;&#x540E;&#x8FDE;&#x63A5; left,right<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"># Definition for singly-linked list.</div><div class="line"># class ListNode(object):</div><div class="line">#     def __init__(self, x):</div><div class="line">#         self.val = x</div><div class="line">#         self.next = None</div><div class="line">&apos;&apos;&apos;</div><div class="line">Solution:</div><div class="line">- create two lists less and greater, for each node in linkedlist, if it is less than x, add to less, else, add to greater, finally merge two lists. Time complexity: O(n), space complexity: O(1)</div><div class="line">&apos;&apos;&apos;</div><div class="line"></div><div class="line">class Solution(object):</div><div class="line">    def partition(self,head,x):</div><div class="line">        if not head:</div><div class="line">            return None</div><div class="line">        less,greater=ListNode(0),ListNode(0)</div><div class="line">        less_cur,greater_cur=less,greater</div><div class="line">        while head:</div><div class="line">            if head.val&lt;x:</div><div class="line">                less_cur.next=head</div><div class="line">                less_cur=less_cur.next</div><div class="line">            else:</div><div class="line">                greater_cur.next=head</div><div class="line">                greater_cur=greater_cur.next</div><div class="line">            head=head.next</div><div class="line">        less_cur.next=greater.next</div><div class="line">        greater_cur.next=None</div><div class="line">        return less.next</div></pre></td></tr></table></figure></p>
<p>&#x8FD9;&#x91CC;&#x8981;&#x6CE8;&#x610F;&#x7684;&#x662F;&#x6700;&#x540E; right &#x8981;&#x6307;&#x5411;&#x7A7A;&#xFF0C;&#x4E0D;&#x7136;&#x8003;&#x8651; case [2,1]&#xFF0C;&#x4F1A;&#x9677;&#x5165;[1,2,1,2&#x2026;]&#x7684;&#x6B7B;&#x5FAA;&#x73AF;&#x4E2D;&#xFF0C;&#x56E0;&#x4E3A; right_cur.next &#x6307;&#x5411;&#x4E86; head&#xFF0C;&#x5F62;&#x6210;&#x4E86;&#x73AF;&#x3002;</p>
<h2 id="&#x94FE;&#x8868;&#x7684;&#x73AF;-141-142-Linked-List-Cycle-I-amp-II"><a href="#&#x94FE;&#x8868;&#x7684;&#x73AF;-141-142-Linked-List-Cycle-I-amp-II" class="headerlink" title="&#x94FE;&#x8868;&#x7684;&#x73AF; (141.142.Linked List Cycle I &amp; II)"></a>&#x94FE;&#x8868;&#x7684;&#x73AF; (141.142.Linked List Cycle I &amp; II)</h2><h3 id="Problem-I-2"><a href="#Problem-I-2" class="headerlink" title="Problem(I)"></a>Problem(I)</h3><p>Given a linked list, determine if it has a cycle in it.</p>
<p>Follow up:<br>Can you solve it without using extra space?</p>
<h3 id="Solution-8"><a href="#Solution-8" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"># Definition for singly-linked list.</div><div class="line"># class ListNode(object):</div><div class="line">#     def __init__(self, x):</div><div class="line">#         self.val = x</div><div class="line">#         self.next = None</div><div class="line">&apos;&apos;&apos;</div><div class="line">Solution:</div><div class="line">- For every node in linkedlist, check if it is in hashset, if not, add it, else, return True. Time complexity: O(n)</div><div class="line"></div><div class="line">Followup:</div><div class="line">- no extra space</div><div class="line">    slow and fast pointers</div><div class="line"></div><div class="line">&apos;&apos;&apos;</div><div class="line">class Solution(object):</div><div class="line">    def hasCycle(self, head):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type head: ListNode</div><div class="line">        :rtype: bool</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        if not head:</div><div class="line">            return False</div><div class="line">        fast,slow=head,head</div><div class="line">        while fast and fast.next:</div><div class="line">            fast=fast.next.next</div><div class="line">            slow=slow.next</div><div class="line">            if fast==slow:</div><div class="line">                return True</div><div class="line">        return False</div><div class="line"></div><div class="line">    &apos;&apos;&apos;</div><div class="line">    def hasCycle(self, head):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type head: ListNode</div><div class="line">        :rtype: bool</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        if not head:</div><div class="line">            return False</div><div class="line">        nodelist=set()</div><div class="line">        while head.next:</div><div class="line">            if head in nodelist:</div><div class="line">                return True</div><div class="line">            nodelist.add(head)</div><div class="line">            head=head.next</div><div class="line">        return False</div><div class="line">    &apos;&apos;&apos;</div></pre></td></tr></table></figure>
<h3 id="Problem-II-2"><a href="#Problem-II-2" class="headerlink" title="Problem(II)"></a>Problem(II)</h3><p>Given a linked list, return the node where the cycle begins. If there is no cycle, return null.</p>
<p>Note: Do not modify the linked list.</p>
<p>Follow up:<br>Can you solve it without using extra space?</p>
<h3 id="Solution-9"><a href="#Solution-9" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">&apos;&apos;&apos;</div><div class="line">Solution:</div><div class="line">- check if there&apos;s cycle</div><div class="line">- Let&apos;s say, the cycle starts at node u, and the length of the cycle is L, Moreover, after x steps, fast catches slow, and the length between current node and u is p.</div><div class="line">    then we can get for slow pointer, x=u+aL+p,</div><div class="line">    for fast pointer, 2x=u+bL+p,</div><div class="line">    =&gt; 2x-x=(b-a)L =&gt; x=nL.</div><div class="line">    Now, think about that, at step x, if we travels u more steps, where are we?</div><div class="line">    =&gt; u+x=u+nL.</div><div class="line">    =&gt; We are at the start of the cycle, because we have covered the first u nodes once and the entire cycle n times.</div><div class="line"></div><div class="line">Followup:</div><div class="line">- find the length of cycle</div><div class="line">    let slow move foward till meet with fast again</div><div class="line">&apos;&apos;&apos;</div><div class="line"></div><div class="line"># Definition for singly-linked list.</div><div class="line"># class ListNode(object):</div><div class="line">#     def __init__(self, x):</div><div class="line">#         self.val = x</div><div class="line">#         self.next = None</div><div class="line"></div><div class="line">class Solution(object):</div><div class="line">    def detectCycle(self, head):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type head: ListNode</div><div class="line">        :rtype: ListNode</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        if not head: return None</div><div class="line">        fast,slow=head,head</div><div class="line">        while True:</div><div class="line">            if not fast or not fast.next:return None</div><div class="line">            fast=fast.next.next</div><div class="line">            slow=slow.next</div><div class="line">            if fast==slow: break</div><div class="line">        while head != fast:</div><div class="line">            head,fast=head.next,fast.next</div><div class="line">        return head</div></pre></td></tr></table></figure>
<h2 id="&#x5355;&#x94FE;&#x516C;&#x5171;&#x8282;&#x70B9;&#x95EE;&#x9898;"><a href="#&#x5355;&#x94FE;&#x516C;&#x5171;&#x8282;&#x70B9;&#x95EE;&#x9898;" class="headerlink" title="&#x5355;&#x94FE;&#x516C;&#x5171;&#x8282;&#x70B9;&#x95EE;&#x9898;"></a>&#x5355;&#x94FE;&#x516C;&#x5171;&#x8282;&#x70B9;&#x95EE;&#x9898;</h2><h3 id="Problem-5"><a href="#Problem-5" class="headerlink" title="Problem"></a>Problem</h3><p>Write a program to find the node at which the intersection of two singly linked lists begins.</p>
<p><img src="http://7xu83c.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-09-04%20%E4%B8%8B%E5%8D%885.30.48.png" alt=""><br>&#x5047;&#x8BBE;&#x4E24;&#x4E2A;&#x94FE;&#x8868;&#x957F;&#x5EA6;&#x4E3A; m&#xFF0C;n&#xFF0C;&#x8BA4;&#x4E3A; m &gt; n&#xFF0C;&#x4E24;&#x94FE;&#x8868;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x516C;&#x5171;&#x8282;&#x70B9;&#x5230;&#x5C3E;&#x8282;&#x70B9;&#x4E00;&#x5B9A;&#x662F;&#x91CD;&#x5408;&#x7684;&#x3002;&#x4E8E;&#x662F;&#xFF0C;&#x53EF;&#x4EE5;&#x5206;&#x522B;&#x904D;&#x5386;&#x4E24;&#x4E2A;&#x94FE;&#x8868;&#x5F97;&#x5230;&#x94FE;&#x8868;&#x957F;&#x5EA6; m,n, &#x957F;&#x94FE;&#x8868;&#x7A7A;&#x8F6C; m-n &#x6B21;&#xFF0C;&#x7136;&#x540E;&#x4E24;&#x94FE;&#x8868;&#x9F50;&#x5934;&#x5E76;&#x8FDB;&#xFF0C;&#x540C;&#x6B65;&#x904D;&#x5386;&#xFF0C;&#x76F4;&#x5230;&#x627E;&#x5230;&#x516C;&#x5171;&#x8282;&#x70B9;&#x3002;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E3A; $O(m+n)$</p>
<p>&#x5982;&#x679C;&#x94FE;&#x8868;&#x5B58;&#x5728;&#x73AF;&#xFF0C;&#x5219;&#x9700;&#x8981;&#x7528;&#x5FEB;&#x6162;&#x6307;&#x9488;&#x7684;&#x65B9;&#x5F0F;&#x8BA1;&#x7B97;&#x516C;&#x5171;&#x8282;&#x70B9;&#x3002;&#x4E24;&#x4E2A;&#x6307;&#x9488;&#xFF0C;&#x6BCF;&#x6B21;&#x5206;&#x522B;&#x79FB;&#x52A8; 1 &#x4E2A;&#xFF0F;2 &#x4E2A;&#x8282;&#x70B9;&#x3002;</p>
<h3 id="Solution-10"><a href="#Solution-10" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"># Definition for singly-linked list.</div><div class="line"># class ListNode(object):</div><div class="line">#     def __init__(self, x):</div><div class="line">#         self.val = x</div><div class="line">#         self.next = None</div><div class="line"></div><div class="line">class Solution(object):</div><div class="line">    def getIntersectionNode(self, headA, headB):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type head1, head1: ListNode</div><div class="line">        :rtype: ListNode</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        curA,curB = headA,headB</div><div class="line">        lenA,lenB=0,0</div><div class="line">        while curA:</div><div class="line">            lenA += 1</div><div class="line">            curA = curA.next</div><div class="line">        while curB:</div><div class="line">            lenB += 1</div><div class="line">            curB = curB.next</div><div class="line">        curA,curB = headA,headB</div><div class="line">        if lenA &gt; lenB:</div><div class="line">            for i in range(lenA-lenB):</div><div class="line">                curA = curA.next</div><div class="line">        else:</div><div class="line">            for i in range(lenB-lenA):</div><div class="line">                curB = curB.next</div><div class="line">        while curA != curB:</div><div class="line">            curA = curA.next</div><div class="line">            curB = curB.next</div><div class="line">        return curA</div></pre></td></tr></table></figure>
<p>&#x4E00;&#x4E2A;&#x4ECE;&#x4EE3;&#x7801;&#x5C42;&#x9762;&#x6765;&#x8BB2;&#x7684;&#x7B80;&#x6D01;&#x7248;&#x672C;&#x3002;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">class Solution:</div><div class="line">    # @param two ListNodes</div><div class="line">    # @return the intersected ListNode</div><div class="line">    def getIntersectionNode(self, headA, headB):</div><div class="line">        if headA is None or headB is None:</div><div class="line">            return None</div><div class="line"></div><div class="line">        pa = headA # 2 pointers</div><div class="line">        pb = headB</div><div class="line"></div><div class="line">        while pa is not pb:</div><div class="line">            # if either pointer hits the end, switch head and continue the second traversal,</div><div class="line">            # if not hit the end, just move on to next</div><div class="line">            pa = headB if pa is None else pa.next</div><div class="line">            pb = headA if pb is None else pb.next</div><div class="line"></div><div class="line">        return pa # only 2 ways to get out of the loop, they meet or the both hit the end=None</div><div class="line"></div><div class="line"># the idea is if you switch head, the possible difference between length would be countered.</div><div class="line"># On the second traversal, they either hit or miss.</div><div class="line"># if they meet, pa or pb would be the node we are looking for,</div><div class="line"># if they didn&apos;t meet, they will hit the end at the same iteration, pa == pb == None, return either one of them is the same,None</div></pre></td></tr></table></figure></p>
<h2 id="&#x94FE;&#x8868;&#x590D;&#x5236;-138-Copy-List-with-Random-Pointer"><a href="#&#x94FE;&#x8868;&#x590D;&#x5236;-138-Copy-List-with-Random-Pointer" class="headerlink" title="&#x94FE;&#x8868;&#x590D;&#x5236;(138. Copy List with Random Pointer)"></a>&#x94FE;&#x8868;&#x590D;&#x5236;(138. Copy List with Random Pointer)</h2><h3 id="Problem-6"><a href="#Problem-6" class="headerlink" title="Problem"></a>Problem</h3><p>A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.</p>
<p>Return a deep copy of the list.</p>
<h3 id="Solution-11"><a href="#Solution-11" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">&apos;&apos;&apos;</div><div class="line">Solution:</div><div class="line">- two-pass: consider normal copy of linkedlist, do similar stuff. first copy nodes and next pointer, then copy random pointer</div><div class="line">            how to find new nodes in second pass? find with O(1) time =&gt; hashmap</div><div class="line">- one-pass: first copy all nodes and store them into hashmap, then connect all nodes. time complexity: O(n), space complexity: O(n)</div><div class="line"></div><div class="line">Followup:</div><div class="line">- without hashmap?</div><div class="line"></div><div class="line">&apos;&apos;&apos;</div><div class="line"></div><div class="line"># Definition for singly-linked list with a random pointer.</div><div class="line"># class RandomListNode(object):</div><div class="line">#     def __init__(self, x):</div><div class="line">#         self.label = x</div><div class="line">#         self.next = None</div><div class="line">#         self.random = None</div><div class="line"></div><div class="line">class Solution(object):</div><div class="line">    # copy nodes and next pointer</div><div class="line">    def copyRandomList(self, head):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type head: RandomListNode</div><div class="line">        :rtype: RandomListNode</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        if not head: return None</div><div class="line">        cur=head</div><div class="line">        hashmap={}</div><div class="line">        while cur:</div><div class="line">            # create nodes</div><div class="line">            if cur not in hashmap:</div><div class="line">                curCopy=RandomListNode(cur.label)</div><div class="line">                hashmap[cur]=curCopy</div><div class="line">            if cur.next and cur.next not in hashmap:</div><div class="line">                nextCopy=RandomListNode(cur.next.label)</div><div class="line">                hashmap[cur.next]=nextCopy</div><div class="line">            if cur.random and cur.random not in hashmap:</div><div class="line">                randomCopy=RandomListNode(cur.random.label)</div><div class="line">                hashmap[cur.random]=randomCopy</div><div class="line">            # connect nodes</div><div class="line">            if cur.next: hashmap[cur].next=hashmap[cur.next]</div><div class="line">            if cur.random: hashmap[cur].random=hashmap[cur.random]</div><div class="line">            # next round</div><div class="line">            cur=cur.next</div><div class="line">        return hashmap[head]</div></pre></td></tr></table></figure>
<blockquote>
<p>&#x53C2;&#x8003;&#x94FE;&#x63A5;&#xFF1A;<br><a href="http://wdxtub.com/2016/01/22/programmer-startline-5/" target="_blank" rel="external">&#x7F16;&#x7A0B;&#x8D77;&#x8DD1;&#x7EBF; &#x7B2C; 5 &#x8BFE; &#x94FE;&#x8868;</a><br><a href="https://www.codefellows.org/blog/implementing-a-singly-linked-list-in-python/" target="_blank" rel="external">Implementing a Singly Linked List in Python</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#x94FE;&amp;#x8868;&amp;#x5B9E;&amp;#x73B0;&amp;#xFF0F;&amp;#x79FB;&amp;#x9664;&amp;#x8282;&amp;#x70B9;&amp;#xFF0F;&amp;#x94FE;&amp;#x8868;&amp;#x76F8;&amp;#x52A0;&amp;#xFF0F;&amp;#x94FE;&amp;#x8868;&amp;#x90E8;&amp;#x5206;&amp;#x7FFB;&amp;#x8F6C;&amp;#xFF0F;&amp;#x94FE;&amp;#x8868;&amp;#x6539;&amp;#x5E8F;/&amp;#x94FE;&amp;#x8868;&amp;#x53BB;&amp;#x91CD;&amp;#xFF0F;&amp;#x94FE;&amp;#x8868;&amp;#x5212;&amp;#x5206;&amp;#xFF0F;&amp;#x94FE;&amp;#x8868;&amp;#x7684;&amp;#x73AF;/&amp;#x94FE;&amp;#x8868;&amp;#x516C;&amp;#x5171;&amp;#x8282;&amp;#x70B9;&amp;#x95EE;&amp;#x9898;/&amp;#x94FE;&amp;#x8868;&amp;#x590D;&amp;#x5236;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构和算法" scheme="http://www.shuang0420.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="链表" scheme="http://www.shuang0420.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
</feed>
