{"pages":[{"title":"项目实战--搜索引擎","url":"/2016/10/28/项目实战-搜索引擎/","text":"CMU 11642 &#x7684; project&#x3002; &#x9879;&#x76EE;&#x4ECB;&#x7ECD;&#x7B80;&#x4ECB;&#x6570;&#x636E;&#xFF1A;ClueWeb09 dataset&#xFF0C;&#x5171; 553,202 &#x7BC7;&#x6587;&#x6863;&#xFF0C;&#x7528; Lucene &#x5EFA;&#x7ACB;&#x7684;&#x7D22;&#x5F15;&#x3002;&#x90E8;&#x5206;&#x6846;&#x67B6;&#x662F;&#x73B0;&#x6210;&#x7684;&#xFF0C;&#x6709; api &#x6587;&#x6863;&#x6211;&#x4EEC;&#x8981;&#x505A;&#x7684;&#x662F;&#x5B9E;&#x73B0;&#x90E8;&#x5206; operator &#x4EE5;&#x53CA; ranking algorithm&#x3002; &#x8F93;&#x5165;&#x7A0B;&#x5E8F;&#x8F93;&#x5165;: one parameter (name of parameter file) parameter file &#x5FC5;&#x987B;&#x5305;&#x62EC;&#x4EE5;&#x4E0B;&#x53C2;&#x6570;&#xFF1A;1234- queryFilePath= The path to the query file.- indexPath= The path to the Lucene index directory. Typically this will be something like &quot;indexPath=index&quot;.- trecEvalOutputPath= The path to the file where your software will write its output for trec_eval.- retrievalAlgorithm= &quot;UnrankedBoolean&quot; &#xFF0F; &quot;RankedBoolean&quot; &#xFF0F; &quot;BM25&quot; / &quot;Indri&quot; &#x53EF;&#x9009;&#x53C2;&#x6570;123456&#x7528;&#x4E8E; &quot;BM25&quot; / &quot;Indri&quot; &#x6A21;&#x578B;&#x3002;- BM25:k_1= Values are real numbers &gt;= 0.0.- BM25:b= Values are real numbers between 0.0 and 1.0.- BM25:k_3= Values are real numbers &gt;= 0.0.- Indri:mu= Values are integers &gt;= 0.- Indri:lambda= Values are real numbers between 0.0 and 1.0 &#x7528;&#x4E8E; query expansion&#x3002;1234567- fb= Acceptable values are &quot;true&quot; and &quot;false&quot;. This value controls whether query expansion is performed (fb=true).- fbDocs= Acceptable values are integers &gt; 0. This value determines the number of documents to use for query expansion.- fbTerms= Acceptable values are integers &gt; 0. This value determines the number of terms that are added to the query.- fbMu= Acceptable values are integers &gt;= 0. This value determines the amount of smoothing used to calculate p(r|d).- fbOrigWeight= Acceptable values are between 0.0 and 1.0. This value determines the weight on the original query. The weight on the expanded query is (1-fbOrigWeight).- fbInitialRankingFile= The value is a string that contains the name of a file (in trec_eval input format) that contains an initial document ranking for the query.- fbExpansionQueryFile= The value is a string that contains the name of a file where your software must write its expansion query. The file format is described below. &#x8F93;&#x51FA;&#x7A0B;&#x5E8F;&#x8F93;&#x51FA;&#xFF1A;&#x5728; trecEvalOutputPath &#x6307;&#x5B9A;&#x7684;&#x6587;&#x4EF6;&#x4E2D;&#xFF1A;123456QueryID Q0 DocID Rank Score RunID10 Q0 clueweb09-enwp03-35-1378 1 16 run-110 Q0 clueweb09-enwp00-78-1360 2 11 run-110 Q0 clueweb09-enwp00-67-0958 3 9 run-1: : : : : :11 Q0 clueweb09-enwp00-63-1141 1 18 run-1 &#x5982;&#x679C;&#x6709; query expansion&#xFF0C;&#x5728; fbExpansionQueryFile &#x6307;&#x5B9A;&#x7684;&#x6587;&#x4EF6;&#x4E2D;&#xFF1A;1234567qid1: query1qid2: query2 : :eg.1: #wand (0.73 obama 0.43 family 0.40 white 0.65 tree 0.33 politics ...)2: #wand (0.69 french 0.83 lick 0.76 indiana ...) &#x57FA;&#x672C;&#x7B56;&#x7565;&#x8981;&#x6C42; &#x4ECE; query file &#x4E2D;&#x9010;&#x6761;&#x8BFB;&#x53D6; query &#x5C06; query parse &#x4E3A; query tree&#xFF0C;internal nodes &#x662F; operators&#xFF0C;leaves &#x662F; index terms &#x5982;&#x679C;&#x4E00;&#x4E2A; query &#x6CA1;&#x6709; explicit operator&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A; #OR &#x5982;&#x679C;&#x4E00;&#x4E2A; query &#x6CA1;&#x6709; explicit field&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A; body &#x5BF9; query term &#x8FDB;&#x884C; stemming &#x548C; stopwords &#x5904;&#x7406; &#x8BC4;&#x4F30; query&#xFF0C;&#x7528; DAAT &#x7B56;&#x7565;&#xFF0C;&#x5BF9; leaf node &#x7684; evaluation &#x5C31;&#x662F;&#x5982;&#x679C;&#x8FD9;&#x4E2A; term &#x7684; inverted list &#x5B58;&#x5728;&#xFF0C;&#x5C31;&#x83B7;&#x53D6;&#x5B83;&#xFF0C;&#x6CE8;&#x610F;&#x6709;&#x4E9B; query term &#x662F;&#x6CA1;&#x6709; inverted list &#x7684;&#x3002; &#x5BF9;&#x6240;&#x6709;&#x6587;&#x6863;&#x6309;&#x6587;&#x6863;&#x5206;&#x6570;&#x964D;&#x5E8F;&#x6392;&#x5E8F;&#xFF0C;&#x5982;&#x679C;&#x5206;&#x6570;&#x76F8;&#x540C;&#xFF0C;&#x6309; external document id &#x5347;&#x5E8F;&#x6392;&#x5E8F;&#x3002; Operator&#x4E0D;&#x540C;&#x6A21;&#x578B;&#x652F;&#x6301;&#x7684; operator &#x5404;&#x6709;&#x4E0D;&#x540C;&#x7CFB;&#x7EDF;&#x9700;&#x8981;&#x652F;&#x6301;&#x7684; Operator &#x6709; #OR, #AND, #SYN, #NEAR/n, #WINDOW/n, &#x5BF9; BM25 &#x6A21;&#x578B;&#x6765;&#x8BF4;&#xFF0C;&#x8FD8;&#x9700;&#x8981;&#x652F;&#x6301; #SUM&#xFF0C;&#x5BF9; Indri &#x6A21;&#x578B;&#x6765;&#x8BF4;&#xFF0C;&#x8FD8;&#x9700;&#x8981;&#x652F;&#x6301; #AND, #WAND, #WSUM, #WINDOW Fields&#x7CFB;&#x7EDF;&#x652F;&#x6301;&#x7684; fields &#x6709; &#x2018;url&#x2019;, &#x2018;keywords&#x2019; (from the html &#x2018;meta&#x2019; tag), &#x2018;title&#x2019;, &#x2018;body&#x2019;, &#x548C; &#x2018;inlink&#x2019; 5 &#x79CD;&#xFF0C;query &#x5F62;&#x5F0F;&#x4E3A; apple.title&#x3002; Query#Operator( term_1.field term_2.field ... term_n.field ) apples #AND (apple bananas) #OR (apple bananas) #NEAR/3 (apple pie) #NEAR/5 (pie apple) &#x6392;&#x5E8F;&#x6A21;&#x578B;Exact-matchBoolean retrieval &#x9700;&#x8981;&#x652F;&#x6301;&#x7684; Operator &#x6709; #OR, #AND, #SYN, #NEAR/n, #WINDOW/n #OR &#x53EA;&#x8981;&#x6709;&#x4E00;&#x4E2A; query term &#x5728;&#x6587;&#x6863;&#x4E2D;&#x51FA;&#x73B0;&#xFF0C;&#x5C31;&#x7B97; match&#xFF0C;&#x5728; ranked boolean retrieval &#x4E2D;&#x5206;&#x6570;&#x4E3A;&#x6240;&#x6709;&#x5339;&#x914D;&#x7684; query term &#x7684; tf &#x7684;&#x6700;&#x5927;&#x503C;&#x3002; #AND &#x53EA;&#x6709;&#x5728;&#x6240;&#x6709; query term &#x90FD;&#x5728;&#x6587;&#x6863;&#x4E2D;&#x51FA;&#x73B0;&#x65F6;&#xFF0C;&#x624D;&#x7B97; match&#xFF0C;&#x5728; ranked boolean retrieval &#x4E2D;&#x5206;&#x6570;&#x4E3A;&#x6240;&#x6709; query term &#x7684; tf &#x7684;&#x6700;&#x5C0F;&#x503C;&#x3002; #NEAR/n &#x5982;&#x679C;&#x6BCF;&#x5BF9;&#x76F8;&#x90BB;&#x4E24;&#x4E2A; query term &#x4E4B;&#x95F4;&#x7684;&#x8DDD;&#x79BB;&#x5C0F;&#x4E8E; n&#xFF0C;&#x624D;&#x7B97; match&#xFF0C;&#x5728; ranked boolean retrieval &#x4E2D;&#x5206;&#x6570;&#x4E3A; match &#x7684;&#x6B21;&#x6570;&#x3002;&#xFF08;For example, #NEAR/2(a b c) matches &#x201C;a b c&#x201D;, &#x201C;a x b c&#x201D;, &#x201C;a b x c&#x201D;, and &#x201C;a x b x c&#x201D;, but not &#x201C;a x x b c&#x201D;&#xFF09;&#x3002; #WINDOW/n &#x548C; #NEAR/n &#x7C7B;&#x4F3C;&#xFF0C;&#x4F46;&#x662F;&#x4E0D;&#x8981;&#x6C42;&#x987A;&#x5E8F;&#x3002; Search Engines&#x7B14;&#x8BB0; - Exact-match retrieval Unranked boolean retrieval&#x5BF9;&#x6BCF;&#x4E2A;&#x6587;&#x6863;&#x6765;&#x8BF4;&#xFF0C;&#x5982;&#x679C; match&#xFF0C;&#x5206;&#x6570;&#x4E3A; 1&#xFF0C;&#x4E0D; match &#x5C31;&#x4E3A; 0&#x3002; Ranked boolean retrieval&#x6BCF;&#x4E2A;&#x6587;&#x6863;&#x7684;&#x5206;&#x6570;&#x662F; query term &#x5728;&#x8BE5;&#x6587;&#x6863;&#x4E2D;&#x7684; term frequency&#x3002; Best-matchSearch Engines&#x7B14;&#x8BB0; - Best-Match BM25&#x9700;&#x8981;&#x652F;&#x6301;&#x7684; Operator &#x6709; #SYN, #NEAR/n, #SUM Indri&#x9700;&#x8981;&#x652F;&#x6301;&#x7684; Operator &#x6709; #AND(Indri #and), #WAND, #WSUM, #WINDOW&#x3002;&#x9ED8;&#x8BA4;&#x7684; operator &#x662F; #AND&#xFF0C;&#x6CE8;&#x610F;&#x8FD9;&#x91CC;&#x7684; #AND &#x548C; boolean retrieval &#x4E2D;&#x7684;&#x7B97;&#x6CD5;&#x4E0D;&#x4E00;&#x6837;&#x3002; Query expansion&#x57FA;&#x672C;&#x903B;&#x8F91;&#x662F;&#x628A; initial query &#x5F53;&#x505A; classifier&#xFF0C;&#x7528;&#x5B83;&#x6765; label &#x90E8;&#x5206; data&#xFF0C;&#x5F97;&#x5230; top-ranked documents&#xFF0C;&#x7136;&#x540E;&#x7528; labeled data &#x6765;&#x4EA7;&#x751F;&#x66F4;&#x4F18;&#x7684; classifier&#x3002;&#x57FA;&#x672C;&#x8FC7;&#x7A0B;&#xFF1A; &#x7528;&#x539F;&#x59CB; query &#x68C0;&#x7D22;&#x6587;&#x6863; &#x53D6;&#x7ED3;&#x679C;&#x7684;&#x524D; N &#x7BC7;&#x6587;&#x6863;&#x4F5C;&#x4E3A;&#x8BAD;&#x7EC3;&#x96C6;&#xFF0C;&#x8FD9;&#x4E9B;&#x6587;&#x6863;&#x76F8;&#x5173;&#x5EA6;&#x53EF;&#x80FD;&#x4E0D;&#x9AD8;&#xFF0C;&#x7136;&#x800C;&#x6211;&#x4EEC;&#x7684;&#x76EE;&#x7684;&#x662F;&#x5B66;&#x4E60; vocabulary pattern&#x3002; &#x5E94;&#x7528; relevance feedback algorithm &#x9009;&#x53D6; term &#x548C; term weight &#x7EC4;&#x6210;&#x65B0;&#x7684; query &#x6765;&#x68C0;&#x7D22;&#x6587;&#x6863; Search Engines&#x7B14;&#x8BB0; - Pseudo Relevance Feedback","tags":"mysql hbase webserver"},{"title":"Search Engines笔记 - Learning to Rank","url":"/2016/10/25/Search Engines笔记 - Learning to Rank/","text":"&#x4F20;&#x7EDF;&#x7684;&#x6392;&#x5E8F;&#x6A21;&#x578B;&#x76F8;&#x5173;&#x5EA6;&#x6392;&#x5E8F;&#x6A21;&#x578B;(Relevance Ranking Model)&#x76F8;&#x5173;&#x5EA6;&#x6392;&#x5E8F;&#x6A21;&#x578B;&#x6839;&#x636E;&#x67E5;&#x8BE2;&#x548C;&#x6587;&#x6863;&#x4E4B;&#x95F4;&#x7684;&#x76F8;&#x4F3C;&#x5EA6;&#x6765;&#x5BF9;&#x6587;&#x6863;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#x3002;&#x5E38;&#x7528;&#x7684;&#x6A21;&#x578B;&#x5305;&#x62EC;&#xFF1A;&#x5E03;&#x5C14;&#x6A21;&#x578B;(Boolean Model)&#xFF0C;&#x5411;&#x91CF;&#x7A7A;&#x95F4;&#x6A21;&#x578B;(Vector Space Model)&#xFF0C;&#x9690;&#x8BED;&#x4E49;&#x5206;&#x6790;(Latent Semantic Analysis)&#xFF0C;BM25&#xFF0C;LMIR&#x6A21;&#x578B;&#x7B49;&#x7B49;&#x3002; &#x91CD;&#x8981;&#x6027;&#x6392;&#x5E8F;&#x6A21;&#x578B;(Importance Ranking Model)&#x91CD;&#x8981;&#x6027;&#x6392;&#x5E8F;&#x6A21;&#x578B;&#x4E0D;&#x8003;&#x8651;&#x67E5;&#x8BE2;&#xFF0C;&#x800C;&#x4EC5;&#x4EC5;&#x6839;&#x636E;&#x7F51;&#x9875;(&#x4EA6;&#x5373;&#x6587;&#x6863;)&#x4E4B;&#x95F4;&#x7684;&#x56FE;&#x7ED3;&#x6784;&#x6765;&#x5224;&#x65AD;&#x6587;&#x6863;&#x7684;&#x6743;&#x5A01;&#x7A0B;&#x5EA6;&#xFF0C;&#x5178;&#x578B;&#x7684;&#x6743;&#x5A01;&#x7F51;&#x7AD9;&#x5305;&#x62EC;Google&#xFF0C;Yahoo!&#x7B49;&#x3002;&#x5E38;&#x7528;&#x7684;&#x6A21;&#x578B;&#x5305;&#x62EC;PageRank&#xFF0C;HITS&#xFF0C;HillTop&#xFF0C;TrustRank&#x7B49;&#x7B49;&#x3002; Learning to RankWhy&#x5BF9;&#x4E8E;&#x4F20;&#x7EDF;&#x7684;&#x6392;&#x5E8F;&#x6A21;&#x578B;&#xFF0C;&#x5355;&#x4E2A;&#x6A21;&#x578B;&#x5F80;&#x5F80;&#x53EA;&#x80FD;&#x8003;&#x8651;&#x67D0;&#x4E00;&#x4E2A;&#x65B9;&#x9762;(&#x76F8;&#x5173;&#x5EA6;&#x6216;&#x8005;&#x91CD;&#x8981;&#x6027;)&#xFF0C;&#x6240;&#x4EE5;&#x53EA;&#x662F;&#x7528;&#x5355;&#x4E2A;&#x6A21;&#x578B;&#x8FBE;&#x4E0D;&#x5230;&#x8981;&#x6C42;&#x3002;&#x641C;&#x7D22;&#x5F15;&#x64CE;&#x901A;&#x5E38;&#x4F1A;&#x7EC4;&#x5408;&#x591A;&#x79CD;&#x6392;&#x5E8F;&#x6A21;&#x578B;&#x6765;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;&#x4F46;&#x662F;&#xFF0C;&#x5982;&#x4F55;&#x7EC4;&#x5408;&#x591A;&#x4E2A;&#x6392;&#x5E8F;&#x6A21;&#x578B;&#x6765;&#x5F62;&#x6210;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x6392;&#x5E8F;&#x6A21;&#x578B;&#xFF0C;&#x4EE5;&#x53CA;&#x5982;&#x4F55;&#x8C03;&#x8282;&#x8FD9;&#x4E9B;&#x53C2;&#x6570;&#xFF0C;&#x90FD;&#x662F;&#x4E00;&#x4E2A;&#x5F88;&#x5927;&#x7684;&#x95EE;&#x9898;&#x3002;&#x4F7F;&#x7528;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x628A;&#x5404;&#x4E2A;&#x73B0;&#x6709;&#x6392;&#x5E8F;&#x6A21;&#x578B;&#x7684;&#x8F93;&#x51FA;&#x4F5C;&#x4E3A;&#x7279;&#x5F81;&#xFF0C;&#x7136;&#x540E;&#x8BAD;&#x7EC3;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x6A21;&#x578B;&#xFF0C;&#x5E76;&#x81EA;&#x52A8;&#x5B66;&#x5F97;&#x8FD9;&#x4E2A;&#x65B0;&#x7684;&#x6A21;&#x578B;&#x7684;&#x53C2;&#x6570;&#xFF0C;&#x4ECE;&#x800C;&#x5F88;&#x65B9;&#x4FBF;&#x7684;&#x53EF;&#x4EE5;&#x7EC4;&#x5408;&#x591A;&#x4E2A;&#x73B0;&#x6709;&#x7684;&#x6392;&#x5E8F;&#x6A21;&#x578B;&#x6765;&#x751F;&#x6210;&#x65B0;&#x7684;&#x6392;&#x5E8F;&#x6A21;&#x578B;&#x3002; &#x7279;&#x5F81;&#x9009;&#x53D6;&#x4E0E;&#x6587;&#x672C;&#x5206;&#x7C7B;&#x4E0D;&#x540C;&#xFF0C;L2R&#x8003;&#x8651;&#x7684;&#x662F;&#x7ED9;&#x5B9A;&#x67E5;&#x8BE2;&#x7684;&#x6587;&#x6863;&#x96C6;&#x5408;&#x7684;&#x6392;&#x5E8F;&#x3002;&#x6240;&#x4EE5;&#xFF0C;L2R&#x7528;&#x5230;&#x7684;&#x7279;&#x5F81;&#x4E0D;&#x4EC5;&#x4EC5;&#x5305;&#x542B;&#x6587;&#x6863;d&#x672C;&#x8EAB;&#x7684;&#x4E00;&#x4E9B;&#x7279;&#x5F81;(&#x6BD4;&#x5982;&#x662F;&#x5426;&#x662F;Spam)&#x7B49;&#xFF0C;&#x4E5F;&#x5305;&#x62EC;&#x6587;&#x6863;d&#x548C;&#x7ED9;&#x5B9A;&#x67E5;&#x8BE2;q&#x4E4B;&#x95F4;&#x7684;&#x76F8;&#x5173;&#x5EA6;&#xFF0C;&#x4EE5;&#x53CA;&#x6587;&#x6863;&#x5728;&#x6574;&#x4E2A;&#x7F51;&#x7EDC;&#x4E0A;&#x7684;&#x91CD;&#x8981;&#x6027;(&#x6BD4;&#x5982;PageRank&#x503C;&#x7B49;)&#xFF0C;&#x4EA6;&#x5373;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x76F8;&#x5173;&#x6027;&#x6392;&#x5E8F;&#x6A21;&#x578B;&#x548C;&#x91CD;&#x8981;&#x6027;&#x6392;&#x5E8F;&#x6A21;&#x578B;&#x7684;&#x8F93;&#x51FA;&#x6765;&#x4F5C;&#x4E3A;L2R&#x7684;&#x7279;&#x5F81;&#x3002; &#x4F20;&#x7EDF;&#x6392;&#x5E8F;&#x6A21;&#x578B;&#x7684;&#x8F93;&#x51FA;&#xFF0C;&#x65E2;&#x5305;&#x62EC;&#x76F8;&#x5173;&#x6027;&#x6392;&#x5E8F;&#x6A21;&#x578B;&#x7684;&#x8F93;&#x51FA;f(q,d)&#xFF0C;&#x4E5F;&#x5305;&#x62EC;&#x91CD;&#x8981;&#x6027;&#x6392;&#x5E8F;&#x6A21;&#x578B;&#x7684;&#x8F93;&#x51FA;&#x3002; &#x6587;&#x6863;&#x672C;&#x8EAB;&#x7684;&#x4E00;&#x4E9B;&#x7279;&#x5F81;&#xFF0C;&#x6BD4;&#x5982;&#x662F;&#x5426;&#x662F;Spam&#x7B49;&#x3002; &#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x83B7;&#x53D6;L2R&#x7684;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x53EF;&#x4EE5;&#x6709;&#x4E09;&#x79CD;&#x5F62;&#x5F0F;&#xFF1A;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x67E5;&#x8BE2;&#xFF0C;&#x5404;&#x4E2A;&#x6587;&#x6863;&#x7684;&#x7EDD;&#x5BF9;&#x76F8;&#x5173;&#x503C;(&#x975E;&#x5E38;&#x76F8;&#x5173;&#xFF0C;&#x6BD4;&#x8F83;&#x76F8;&#x5173;&#xFF0C;&#x4E0D;&#x76F8;&#x5173;&#xFF0C;&#x7B49;&#x7B49;)&#xFF1B;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x67E5;&#x8BE2;&#xFF0C;&#x4E24;&#x4E24;&#x6587;&#x6863;&#x4E4B;&#x95F4;&#x7684;&#x76F8;&#x5BF9;&#x76F8;&#x5173;&#x503C;(&#x6587;&#x6863;1&#x6BD4;&#x6587;&#x6863;2&#x76F8;&#x5173;&#xFF0C;&#x6587;&#x6863;4&#x6BD4;&#x6587;&#x6863;3&#x76F8;&#x5173;&#xFF0C;&#x7B49;&#x7B49;)&#xFF1B;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x67E5;&#x8BE2;&#xFF0C;&#x6240;&#x6709;&#x6587;&#x6863;&#x7684;&#x6309;&#x76F8;&#x5173;&#x5EA6;&#x6392;&#x5E8F;&#x7684;&#x5217;&#x8868;(&#x6587;&#x6863;1&gt;&#x6587;&#x6863;2&gt;&#x6587;&#x6863;3)&#x3002;&#x8FD9;&#x4E09;&#x79CD;&#x5F62;&#x5F0F;&#x7684;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x4E4B;&#x95F4;&#x53EF;&#x4EE5;&#x76F8;&#x4E92;&#x8F6C;&#x6362;&#xFF0C;&#x8BE6;&#x89C1;[1]&#x3002; &#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x7684;&#x83B7;&#x53D6;&#x6709;&#x4E24;&#x79CD;&#x4E3B;&#x8981;&#x65B9;&#x6CD5;&#xFF1A;&#x4EBA;&#x5DE5;&#x6807;&#x6CE8;[3]&#x548C;&#x4ECE;&#x65E5;&#x5FD7;&#x6587;&#x4EF6;&#x4E2D;&#x6316;&#x6398;[4]&#x3002; &#x4EBA;&#x5DE5;&#x6807;&#x6CE8;&#xFF1A;&#x9996;&#x5148;&#x4ECE;&#x641C;&#x7D22;&#x5F15;&#x64CE;&#x7684;&#x641C;&#x7D22;&#x8BB0;&#x5F55;&#x4E2D;&#x968F;&#x673A;&#x62BD;&#x53D6;&#x4E00;&#x4E9B;&#x67E5;&#x8BE2;&#xFF0C;&#x5C06;&#x8FD9;&#x4E9B;&#x67E5;&#x8BE2;&#x63D0;&#x4EA4;&#x7ED9;&#x591A;&#x4E2A;&#x4E0D;&#x540C;&#x7684;&#x641C;&#x7D22;&#x5F15;&#x64CE;&#xFF0C;&#x7136;&#x540E;&#x9009;&#x53D6;&#x5404;&#x4E2A;&#x641C;&#x7D22;&#x5F15;&#x64CE;&#x8FD4;&#x56DE;&#x7ED3;&#x679C;&#x7684;&#x524D;K&#x4E2A;&#xFF0C;&#x6700;&#x540E;&#x7531;&#x4E13;&#x4E1A;&#x4EBA;&#x5458;&#x6765;&#x5BF9;&#x8FD9;&#x4E9B;&#x6587;&#x6863;&#x6309;&#x7167;&#x548C;&#x67E5;&#x8BE2;&#x7684;&#x76F8;&#x5173;&#x5EA6;&#x8FDB;&#x884C;&#x6807;&#x6CE8;&#x3002; &#x4ECE;&#x65E5;&#x5FD7;&#x4E2D;&#x6316;&#x6398;&#xFF1A;&#x641C;&#x7D22;&#x5F15;&#x64CE;&#x90FD;&#x6709;&#x5927;&#x91CF;&#x7684;&#x65E5;&#x5FD7;&#x8BB0;&#x5F55;&#x7528;&#x6237;&#x7684;&#x884C;&#x4E3A;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4ECE;&#x4E2D;&#x63D0;&#x53D6;&#x51FA;L2R&#x7684;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x3002;Joachims&#x63D0;&#x51FA;&#x4E86;&#x4E00;&#x79CD;&#x5F88;&#x6709;&#x610F;&#x601D;&#x7684;&#x65B9;&#x6CD5;[4]&#xFF1A;&#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;&#x67E5;&#x8BE2;&#xFF0C;&#x641C;&#x7D22;&#x5F15;&#x64CE;&#x8FD4;&#x56DE;&#x7684;&#x7ED3;&#x679C;&#x5217;&#x8868;&#x4E3A;L&#xFF0C;&#x7528;&#x6237;&#x70B9;&#x51FB;&#x7684;&#x6587;&#x6863;&#x7684;&#x96C6;&#x5408;&#x4E3A;C&#xFF0C;&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x6587;&#x6863;di&#x88AB;&#x70B9;&#x51FB;&#x8FC7;&#xFF0C;&#x53E6;&#x5916;&#x4E00;&#x4E2A;&#x6587;&#x6863;dj&#x6CA1;&#x6709;&#x88AB;&#x70B9;&#x51FB;&#x8FC7;&#xFF0C;&#x5E76;&#x4E14;dj&#x5728;&#x7ED3;&#x679C;&#x5217;&#x8868;&#x4E2D;&#x6392;&#x5728;di&#x4E4B;&#x524D;&#xFF0C;&#x5219;di&gt;dj&#x5C31;&#x662F;&#x4E00;&#x6761;&#x8BAD;&#x7EC3;&#x8BB0;&#x5F55;&#x3002;&#x4EA6;&#x5373;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x4E3A;&#xFF1A;{di&gt;dj|di&#x5C5E;&#x4E8E;C&#xFF0C;dj&#x5C5E;&#x4E8E;L-C&#xFF0C;p(dj)&lt;p(di)}&#xFF0C;&#x5176;&#x4E2D;p(d)&#x8868;&#x793A;&#x6587;&#x6863;d&#x5728;&#x67E5;&#x8BE2;&#x7ED3;&#x679C;&#x5217;&#x8868;&#x4E2D;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x8D8A;&#x5C0F;&#x8868;&#x793A;&#x8D8A;&#x9760;&#x524D;&#x3002; &#x6A21;&#x578B;&#x8BAD;&#x7EC3;L2R&#x662F;&#x4E00;&#x4E2A;&#x6709;&#x76D1;&#x7763;&#x5B66;&#x4E60;&#x8FC7;&#x7A0B;&#x3002; &#x5BF9;&#x4E0E;&#x6BCF;&#x4E2A;&#x7ED9;&#x5B9A;&#x7684;&#x67E5;&#x8BE2;-&#x6587;&#x6863;&#x5BF9;(query document pair)&#xFF0C;&#x62BD;&#x53D6;&#x76F8;&#x5E94;&#x7684;&#x7279;&#x5F81;(&#x65E2;&#x5305;&#x62EC;&#x67E5;&#x8BE2;&#x548C;&#x6587;&#x6863;&#x4E4B;&#x95F4;&#x7684;&#x5404;&#x79CD;&#x76F8;&#x5173;&#x5EA6;&#xFF0C;&#x4E5F;&#x5305;&#x62EC;&#x6587;&#x6863;&#x672C;&#x8EAB;&#x7684;&#x7279;&#x5F81;&#x4EE5;&#x53CA;&#x91CD;&#x8981;&#x6027;&#x7B49;)&#xFF0C;&#x53E6;&#x5916;&#x901A;&#x8FC7;&#x6216;&#x8005;&#x4EBA;&#x5DE5;&#x6807;&#x6CE8;&#x6216;&#x8005;&#x4ECE;&#x65E5;&#x5FD7;&#x4E2D;&#x6316;&#x6398;&#x7684;&#x65B9;&#x6CD5;&#x6765;&#x5F97;&#x5230;&#x7ED9;&#x5B9A;&#x67E5;&#x8BE2;&#x4E0B;&#x6587;&#x6863;&#x96C6;&#x5408;&#x7684;&#x771F;&#x5B9E;&#x5E8F;&#x5217;&#x3002;&#x7136;&#x540E;&#x6211;&#x4EEC;&#x4F7F;&#x7528;L2R&#x7684;&#x5404;&#x79CD;&#x7B97;&#x6CD5;&#x6765;&#x5B66;&#x5230;&#x4E00;&#x4E2A;&#x6392;&#x5E8F;&#x6A21;&#x578B;&#xFF0C;&#x4F7F;&#x5176;&#x8F93;&#x51FA;&#x7684;&#x6587;&#x6863;&#x5E8F;&#x5217;&#x548C;&#x771F;&#x5B9E;&#x5E8F;&#x5217;&#x5C3D;&#x53EF;&#x80FD;&#x76F8;&#x4F3C;&#x3002; &#x7B97;&#x6CD5;&#x5206;&#x7C7B;&#x548C;&#x7B80;&#x4ECB;L2R&#x7B97;&#x6CD5;&#x4E3B;&#x8981;&#x5305;&#x62EC;&#x4E09;&#x79CD;&#x7C7B;&#x522B;&#xFF1A;PointWise&#xFF0C;PairWise&#xFF0C;ListWise&#x3002; PointWise L2RPointWise&#x65B9;&#x6CD5;&#x53EA;&#x8003;&#x8651;&#x7ED9;&#x5B9A;&#x67E5;&#x8BE2;&#x4E0B;&#xFF0C;&#x5355;&#x4E2A;&#x6587;&#x6863;&#x7684;&#x7EDD;&#x5BF9;&#x76F8;&#x5173;&#x5EA6;&#xFF0C;&#x800C;&#x4E0D;&#x8003;&#x8651;&#x5176;&#x4ED6;&#x6587;&#x6863;&#x548C;&#x7ED9;&#x5B9A;&#x67E5;&#x8BE2;&#x7684;&#x76F8;&#x5173;&#x5EA6;&#x3002;&#x4EA6;&#x5373;&#x7ED9;&#x5B9A;&#x67E5;&#x8BE2;q&#x7684;&#x4E00;&#x4E2A;&#x771F;&#x5B9E;&#x6587;&#x6863;&#x5E8F;&#x5217;&#xFF0C;&#x6211;&#x4EEC;&#x53EA;&#x9700;&#x8981;&#x8003;&#x8651;&#x5355;&#x4E2A;&#x6587;&#x6863;di&#x548C;&#x8BE5;&#x67E5;&#x8BE2;&#x7684;&#x76F8;&#x5173;&#x7A0B;&#x5EA6;ci&#xFF0C;&#x4EA6;&#x5373;&#x8F93;&#x5165;&#x6570;&#x636E;&#x5E94;&#x8BE5;&#x662F;&#x5982;&#x4E0B;&#x7684;&#x5F62;&#x5F0F;&#xFF1A; Pointwise&#x65B9;&#x6CD5;&#x4E3B;&#x8981;&#x5305;&#x62EC;&#x4EE5;&#x4E0B;&#x7B97;&#x6CD5;&#xFF1A;Pranking (NIPS 2002), OAP-BPM (EMCL 2003), Ranking with Large Margin Principles (NIPS 2002), Constraint Ordinal Regression (ICML 2005)&#x3002; Pointwise&#x65B9;&#x6CD5;&#x4EC5;&#x4EC5;&#x4F7F;&#x7528;&#x4F20;&#x7EDF;&#x7684;&#x5206;&#x7C7B;&#xFF0C;&#x56DE;&#x5F52;&#x6216;&#x8005;Ordinal Regression&#x65B9;&#x6CD5;&#x6765;&#x5BF9;&#x7ED9;&#x5B9A;&#x67E5;&#x8BE2;&#x4E0B;&#x5355;&#x4E2A;&#x6587;&#x6863;&#x7684;&#x76F8;&#x5173;&#x5EA6;&#x8FDB;&#x884C;&#x5EFA;&#x6A21;&#x3002;&#x8FD9;&#x79CD;&#x65B9;&#x6CD5;&#x6CA1;&#x6709;&#x8003;&#x8651;&#x5230;&#x6392;&#x5E8F;&#x7684;&#x4E00;&#x4E9B;&#x7279;&#x5F81;&#xFF0C;&#x6BD4;&#x5982;&#x6587;&#x6863;&#x4E4B;&#x95F4;&#x7684;&#x6392;&#x5E8F;&#x7ED3;&#x679C;&#x9488;&#x5BF9;&#x7684;&#x662F;&#x7ED9;&#x5B9A;&#x67E5;&#x8BE2;&#x4E0B;&#x7684;&#x6587;&#x6863;&#x96C6;&#x5408;&#xFF0C;&#x800C;Pointwise&#x65B9;&#x6CD5;&#x4EC5;&#x4EC5;&#x8003;&#x8651;&#x5355;&#x4E2A;&#x6587;&#x6863;&#x7684;&#x7EDD;&#x5BF9;&#x76F8;&#x5173;&#x5EA6;&#xFF1B;&#x53E6;&#x5916;&#xFF0C;&#x5728;&#x6392;&#x5E8F;&#x4E2D;&#xFF0C;&#x6392;&#x5728;&#x6700;&#x524D;&#x7684;&#x51E0;&#x4E2A;&#x6587;&#x6863;&#x5BF9;&#x6392;&#x5E8F;&#x6548;&#x679C;&#x7684;&#x5F71;&#x54CD;&#x975E;&#x5E38;&#x91CD;&#x8981;&#xFF0C;Pointwise&#x6CA1;&#x6709;&#x8003;&#x8651;&#x8FD9;&#x65B9;&#x9762;&#x7684;&#x5F71;&#x54CD;&#x3002; Pairwise L2RPairwise&#x65B9;&#x6CD5;&#x8003;&#x8651;&#x7ED9;&#x5B9A;&#x67E5;&#x8BE2;&#x4E0B;&#xFF0C;&#x4E24;&#x4E2A;&#x6587;&#x6863;&#x4E4B;&#x95F4;&#x7684;&#x76F8;&#x5BF9;&#x76F8;&#x5173;&#x5EA6;&#x3002;&#x4EA6;&#x5373;&#x7ED9;&#x5B9A;&#x67E5;&#x8BE2;q&#x7684;&#x4E00;&#x4E2A;&#x771F;&#x5B9E;&#x6587;&#x6863;&#x5E8F;&#x5217;&#xFF0C;&#x6211;&#x4EEC;&#x53EA;&#x9700;&#x8981;&#x8003;&#x8651;&#x4EFB;&#x610F;&#x4E24;&#x4E2A;&#x76F8;&#x5173;&#x5EA6;&#x4E0D;&#x540C;&#x7684;&#x6587;&#x6863;&#x4E4B;&#x95F4;&#x7684;&#x76F8;&#x5BF9;&#x76F8;&#x5173;&#x5EA6;&#xFF1A;di&gt;dj&#xFF0C;&#x6216;&#x8005;di&lt;dj&#x3002; Pairwise&#x65B9;&#x6CD5;&#x4E3B;&#x8981;&#x5305;&#x62EC;&#x4EE5;&#x4E0B;&#x51E0;&#x79CD;&#x7B97;&#x6CD5;&#xFF1A;Learning to Retrieve Information (SCC 1995), Learning to Order Things (NIPS 1998), Ranking SVM (ICANN 1999), RankBoost (JMLR 2003), LDM (SIGIR 2005), RankNet (ICML 2005), Frank (SIGIR 2007), MHR(SIGIR 2007), Round Robin Ranking (ECML 2003), GBRank (SIGIR 2007), QBRank (NIPS 2007), MPRank (ICML 2007), IRSVM (SIGIR 2006) &#x3002; &#x76F8;&#x6BD4;&#x4E8E;Pointwise&#x65B9;&#x6CD5;&#xFF0C;Pairwise&#x65B9;&#x6CD5;&#x901A;&#x8FC7;&#x8003;&#x8651;&#x4E24;&#x4E24;&#x6587;&#x6863;&#x4E4B;&#x95F4;&#x7684;&#x76F8;&#x5BF9;&#x76F8;&#x5173;&#x5EA6;&#x6765;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;&#x6709;&#x4E00;&#x5B9A;&#x7684;&#x8FDB;&#x6B65;&#x3002;&#x4F46;&#x662F;&#xFF0C;Pairwise&#x4F7F;&#x7528;&#x7684;&#x8FD9;&#x79CD;&#x57FA;&#x4E8E;&#x4E24;&#x4E24;&#x6587;&#x6863;&#x4E4B;&#x95F4;&#x76F8;&#x5BF9;&#x76F8;&#x5173;&#x5EA6;&#x7684;&#x635F;&#x5931;&#x51FD;&#x6570;&#xFF0C;&#x548C;&#x771F;&#x6B63;&#x8861;&#x91CF;&#x6392;&#x5E8F;&#x6548;&#x679C;&#x7684;&#x4E00;&#x4E9B;&#x6307;&#x6807;&#x4E4B;&#x95F4;&#xFF0C;&#x53EF;&#x80FD;&#x5B58;&#x5728;&#x5F88;&#x5927;&#x7684;&#x4E0D;&#x540C;&#xFF0C;&#x6709;&#x65F6;&#x751A;&#x81F3;&#x662F;&#x8D1F;&#x76F8;&#x5173;&#xFF0C;&#x5982;&#x4E0B;&#x56FE;&#x6240;&#x793A;(pairwise&#x7684;&#x635F;&#x5931;&#x51FD;&#x6570;&#x548C;NDCG&#x4E4B;&#x5448;&#x73B0;&#x51FA;&#x8D1F;&#x76F8;&#x5173;&#x6027;)&#xFF1A; &#x53E6;&#x5916;&#xFF0C;&#x6709;&#x7684;Pairwise&#x65B9;&#x6CD5;&#x6CA1;&#x6709;&#x8003;&#x8651;&#x5230;&#x6392;&#x5E8F;&#x7ED3;&#x679C;&#x524D;&#x51E0;&#x540D;&#x5BF9;&#x6574;&#x4E2A;&#x6392;&#x5E8F;&#x7684;&#x91CD;&#x8981;&#x6027;&#xFF0C;&#x4E5F;&#x6CA1;&#x6709;&#x8003;&#x8651;&#x4E0D;&#x540C;&#x67E5;&#x8BE2;&#x5BF9;&#x5E94;&#x7684;&#x6587;&#x6863;&#x96C6;&#x5408;&#x7684;&#x5927;&#x5C0F;&#x5BF9;&#x67E5;&#x8BE2;&#x7ED3;&#x679C;&#x7684;&#x5F71;&#x54CD;(&#x4F46;&#x662F;&#x6709;&#x7684;Pairwise&#x65B9;&#x6CD5;&#x5BF9;&#x8FD9;&#x4E9B;&#x8FDB;&#x884C;&#x4E86;&#x6539;&#x8FDB;&#xFF0C;&#x6BD4;&#x5982;IR SVM&#x5C31;&#x662F;&#x5BF9;Ranking SVM&#x9488;&#x5BF9;&#x4EE5;&#x4E0A;&#x7F3A;&#x70B9;&#x8FDB;&#x884C;&#x6539;&#x8FDB;&#x5F97;&#x5230;&#x7684;&#x7B97;&#x6CD5;)&#x3002; Listwise L2R &#x4E0E;Pointwise&#x548C;Pairwise&#x65B9;&#x6CD5;&#x4E0D;&#x540C;&#xFF0C;Listwise&#x65B9;&#x6CD5;&#x76F4;&#x63A5;&#x8003;&#x8651;&#x7ED9;&#x5B9A;&#x67E5;&#x8BE2;&#x4E0B;&#x7684;&#x6587;&#x6863;&#x96C6;&#x5408;&#x7684;&#x6574;&#x4F53;&#x5E8F;&#x5217;&#xFF0C;&#x76F4;&#x63A5;&#x4F18;&#x5316;&#x6A21;&#x578B;&#x8F93;&#x51FA;&#x7684;&#x6587;&#x6863;&#x5E8F;&#x5217;&#xFF0C;&#x4F7F;&#x5F97;&#x5176;&#x5C3D;&#x53EF;&#x80FD;&#x63A5;&#x8FD1;&#x771F;&#x5B9E;&#x6587;&#x6863;&#x5E8F;&#x5217;&#x3002; Listwise&#x7B97;&#x6CD5;&#x4E3B;&#x8981;&#x5305;&#x62EC;&#x4EE5;&#x4E0B;&#x51E0;&#x79CD;&#x7B97;&#x6CD5;&#xFF1A;LambdaRank (NIPS 2006), AdaRank (SIGIR 2007), SVM-MAP (SIGIR 2007), SoftRank (LR4IR 2007), GPRank (LR4IR 2007), CCA (SIGIR 2007), RankCosine (IP&amp;M 2007), ListNet (ICML 2007), ListMLE (ICML 2008) &#x3002; &#x76F8;&#x6BD4;&#x4E8E;Pointwise&#x548C;Pairwise&#x65B9;&#x6CD5;&#xFF0C;Listwise&#x65B9;&#x6CD5;&#x76F4;&#x63A5;&#x4F18;&#x5316;&#x7ED9;&#x5B9A;&#x67E5;&#x8BE2;&#x4E0B;&#xFF0C;&#x6574;&#x4E2A;&#x6587;&#x6863;&#x96C6;&#x5408;&#x7684;&#x5E8F;&#x5217;&#xFF0C;&#x6240;&#x4EE5;&#x6BD4;&#x8F83;&#x597D;&#x7684;&#x89E3;&#x51B3;&#x4E86;&#x514B;&#x670D;&#x4E86;&#x4EE5;&#x4E0A;&#x7B97;&#x6CD5;&#x7684;&#x7F3A;&#x9677;&#x3002;Listwise&#x65B9;&#x6CD5;&#x4E2D;&#x7684;LambdaMART(&#x662F;&#x5BF9;RankNet&#x548C;LambdaRank&#x7684;&#x6539;&#x8FDB;)&#x5728;Yahoo Learning to Rank Challenge&#x8868;&#x73B0;&#x51FA;&#x6700;&#x597D;&#x7684;&#x6027;&#x80FD;&#x3002; &#x6548;&#x679C;&#x8BC4;&#x4EF7;L2R&#x662F;&#x7528;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x7684;&#x65B9;&#x6CD5;&#x6765;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;&#x6240;&#x4EE5;&#x8BC4;&#x4EF7;L2R&#x6548;&#x679C;&#x7684;&#x6307;&#x6807;&#x5C31;&#x662F;&#x8BC4;&#x4EF7;&#x6392;&#x5E8F;&#x7684;&#x6307;&#x6807;&#xFF0C;&#x4E3B;&#x8981;&#x5305;&#x62EC;&#x4E00;&#x4E0B;&#x51E0;&#x79CD;&#xFF1A; WTA(Winners take all) &#x5BF9;&#x4E8E;&#x7ED9;&#x5B9A;&#x7684;&#x67E5;&#x8BE2;q&#xFF0C;&#x5982;&#x679C;&#x6A21;&#x578B;&#x8FD4;&#x56DE;&#x7684;&#x7ED3;&#x679C;&#x5217;&#x8868;&#x4E2D;&#xFF0C;&#x7B2C;&#x4E00;&#x4E2A;&#x6587;&#x6863;&#x662F;&#x76F8;&#x5173;&#x7684;&#xFF0C;&#x5219;WTA(q)=1&#xFF0C;&#x5426;&#x5219;&#x4E3A;0. MRR(Mean Reciprocal Rank) &#x5BF9;&#x4E8E;&#x7ED9;&#x5B9A;&#x67E5;&#x8BE2;q&#xFF0C;&#x5982;&#x679C;&#x7B2C;&#x4E00;&#x4E2A;&#x76F8;&#x5173;&#x7684;&#x6587;&#x6863;&#x7684;&#x4F4D;&#x7F6E;&#x662F;R(q)&#xFF0C;&#x5219;MRR(q)=1/R(q)&#x3002; MAP(Mean Average Precision) &#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x771F;&#x5B9E;&#x76F8;&#x5173;&#x7684;&#x6587;&#x6863;d&#xFF0C;&#x8003;&#x8651;&#x5176;&#x5728;&#x6A21;&#x578B;&#x6392;&#x5E8F;&#x7ED3;&#x679C;&#x4E2D;&#x7684;&#x4F4D;&#x7F6E;P(d)&#xFF0C;&#x7EDF;&#x8BA1;&#x8BE5;&#x4F4D;&#x7F6E;&#x4E4B;&#x524D;&#x7684;&#x6587;&#x6863;&#x96C6;&#x5408;&#x7684;&#x5206;&#x7C7B;&#x51C6;&#x786E;&#x7387;&#xFF0C;&#x53D6;&#x6240;&#x6709;&#x8FD9;&#x4E9B;&#x51C6;&#x786E;&#x7387;&#x7684;&#x5E73;&#x5747;&#x503C;&#x3002; NDCG(Normalized Discounted Cumulative Gain) &#x662F;&#x4E00;&#x79CD;&#x7EFC;&#x5408;&#x8003;&#x8651;&#x6A21;&#x578B;&#x6392;&#x5E8F;&#x7ED3;&#x679C;&#x548C;&#x771F;&#x5B9E;&#x5E8F;&#x5217;&#x4E4B;&#x95F4;&#x7684;&#x5173;&#x7CFB;&#x7684;&#x4E00;&#x79CD;&#x6307;&#x6807;&#xFF0C;&#x4E5F;&#x662F;&#x6700;&#x5E38;&#x7528;&#x7684;&#x8861;&#x91CF;&#x6392;&#x5E8F;&#x7ED3;&#x679C;&#x7684;&#x6307;&#x6807;&#xFF0C;&#x8BE6;&#x89C1;Wikipedia&#x3002; RC(Rank Correlation) &#x4F7F;&#x7528;&#x76F8;&#x5173;&#x5EA6;&#x6765;&#x8861;&#x91CF;&#x6392;&#x5E8F;&#x7ED3;&#x679C;&#x548C;&#x771F;&#x5B9E;&#x5E8F;&#x5217;&#x4E4B;&#x95F4;&#x7684;&#x76F8;&#x4F3C;&#x5EA6;&#xFF0C;&#x5E38;&#x7528;&#x7684;&#x6307;&#x6807;&#x662F;Kendall&#x2019;s Tau&#x3002; Learning to rankA Short Introduction to Learning to RankLearning to Rank &#x7B80;&#x4ECB;","tags":"nlp search-engines"},{"title":"Search Engines笔记 - Cache","url":"/2016/10/15/Search Engines笔记 - Cache/","text":"Web traffic is highly skewed&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x7F13;&#x5B58;&#x63D0;&#x9AD8; performance&#x3002;&#x7F13;&#x5B58;&#x5185;&#x5BB9;&#x53EF;&#x4EE5;&#x662F; query, result page, inverted list&#x3002; Caching of Popular ResultsQuery distributionquery rank &#x548C; frequency &#x7B26;&#x5408;&#x957F;&#x5C3E;&#x5206;&#x5E03;&#x3002;Top 25 queries &#x5360;&#x4E86; 1% &#x7684;&#x6D41;&#x91CF;&#x3002;&#x5728; distinct queries &#x91CC;&#xFF0C; 64% occur once 16% occur twice 7% occur three times 14% occur &gt;=3 times average query frequency: 4 RAM &amp; DISK &#x7ED9; query cache &#x5206;&#x914D; RAM&#x50A8;&#x5B58;&#x6807;&#x51C6; queries&#xFF0C;&#x6309;&#x5B57;&#x6BCD;&#x987A;&#x5E8F;&#x6392;&#x5217; term1.6GB cache &#x50A8;&#x5B58; 40 million queries (40 bytes/query) &#x7ED9; result page cache &#x5206;&#x914D;&#x78C1;&#x76D8;&#x4E00;&#x9875; 30KB uncompressed, 10KB compressed400GB cache &#x53EF;&#x4EE5;&#x5B58; 40 million result pages Cache misses use RAM only(very fast) Cache hits use RAM+disk&#x6BD4;&#x6B63;&#x5E38; evaluate query &#x8981;&#x5FEB;&#x53EA;&#x7528;&#x4E00;&#x53F0;&#x673A;&#x5668; RAM only &#x7ED9; query cache &#x5206;&#x914D; RAM&#x50A8;&#x5B58;&#x6807;&#x51C6; queries&#xFF0C;&#x6309;&#x5B57;&#x6BCD;&#x987A;&#x5E8F;&#x6392;&#x5217; term9MB cache &#x50A8;&#x5B58; 300,000 queries &#x7ED9; result page cache &#x5206;&#x914D; RAM&#x4E00;&#x9875; 30KB uncompressed, 10KB compressed2.1GB cache &#x5B58; 210,000 compressed result pages Cache misses and hits only use RAM (very fast)&#x56E0;&#x4E3A;&#x7F13;&#x5B58;&#x7684;&#x6BD4;&#x8F83;&#x5C11;&#xFF0C;&#x6240;&#x4EE5;&#x66F4;&#x591A;&#x7684; query &#x4F1A;&#x88AB; miss Could partition caches across multiple machines&#x9700;&#x8981;&#x66F4;&#x590D;&#x6742;&#x7684; design Cache size?Markatos &#x63D0;&#x51FA;&#xFF0C;30% &#x7684; queries &#x4F1A;&#x4E0E;&#x7F13;&#x5B58;&#x91CC;&#x7684; query &#x5339;&#x914D;&#xFF0C;&#x7136;&#x800C;&#x589E;&#x52A0; cache size &#x53EA;&#x80FD;&#x975E;&#x5E38;&#x5C0F;&#x5E45;&#x5EA6;&#x7684;&#x63D0;&#x9AD8; hit rate&#x3002;&#x89C1;&#x4E0B;&#x56FE;&#xFF1A;&#x6839;&#x636E; UK2007 &#x7684; query log&#xFF0C;44% &#x7684; query &#x53EA;&#x51FA;&#x73B0;&#x4E86;&#x4E00;&#x6B21;&#xFF0C;56% &#x7684; query &#x51FA;&#x73B0;&#x4E86;&#x8D85;&#x8FC7;&#x4E00;&#x6B21;&#xFF0C;cache &#x8FD9; 56% &#x91CC;&#x7684; query &#x6709;&#x52A9;&#x4E8E;&#x63D0;&#x9AD8; performance&#xFF0C;&#x7136;&#x800C;&#x5E76;&#x4E0D;&#x80FD;&#x5E2E;&#x52A9; first occurrence of a query&#x3002; Caching Inverted List&#x6839;&#x636E; UK2007 &#x7684; query log&#xFF0C;4% &#x7684; query term &#x53EA;&#x51FA;&#x73B0;&#x4E86;&#x4E00;&#x6B21;&#xFF0C;96% &#x7684; query term &#x51FA;&#x73B0;&#x4E0D;&#x6B62;&#x4E00;&#x6B21;&#xFF0C;&#x5BF9; 96% &#x91CC;&#x5BF9; query term &#x8FDB;&#x884C; inverted list &#x7684; cache &#x624D;&#x662F;&#x6709;&#x7528;&#x7684;&#x3002;&#x5728;&#x6BCF;&#x4E2A; partition &#x4E0A;&#x5206;&#x914D;&#x4E00;&#x90E8;&#x5206; RAM (a few GB)&#x7ED9; inverted list&#x3002;&#x8FD9;&#x91CC;&#x7684;&#x91CD;&#x70B9;&#x5728;&#x4E8E; which terms should be cached? &#x4E24;&#x4E2A;&#x539F;&#x5219;&#xFF1A; Terms that are frequent in a query log (improve the hit rage) Terms that don&#x2019;t have massive inverted lists (consume limited cache space) &#x5BF9; term &#x7684;&#x6392;&#x5E8F;&#xFF1A; $$Score(t)={qtf(t) \\over df(t)}$$&#x3002;","tags":"nlp search-engines"},{"title":"Search Engines笔记 - Index Construction","url":"/2016/10/14/Search Engines笔记 - Index/","text":"&#x8FD9;&#x7BC7;&#x8BB2;&#x4E86;&#x641C;&#x7D22;&#x5F15;&#x64CE;&#x4E2D;&#x521B;&#x5EFA; index &#x7684;&#x4E3B;&#x8981;&#x539F;&#x5219;&#x3001;&#x65B9;&#x6CD5;&#x4EE5;&#x53CA;&#x4F18;&#x5316;&#x65B9;&#x6848;&#x3002; Overview Basic facts &#x7528; Integer &#x4EE3;&#x66FF; String&#xFF0C;&#x7701;&#x7A7A;&#x95F4;&#x7701;&#x65F6;&#x95F4;&#x3002; &#x4E00;&#x822C;&#x6765;&#x8BF4; corpus &#x6BD4; RAM &#x8981;&#x5927;&#xFF0C;&#x4E0D;&#x80FD;&#x5728;&#x5185;&#x5B58;&#x4E2D;&#x5B8C;&#x6210;&#x6574;&#x4E2A;&#x4EFB;&#x52A1;&#xFF0C;&#x6240;&#x4EE5;&#x4E00;&#x5B9A;&#x4F1A;&#x6709;&#x90E8;&#x5206;&#x5199;&#x5230;&#x78C1;&#x76D8;&#x4E2D;&#xFF0C;&#x8BBF;&#x95EE;&#x78C1;&#x76D8;&#x6570;&#x636E;&#x6BD4;&#x8BBF;&#x95EE;&#x5185;&#x5B58;&#x6570;&#x636E;&#x6162;&#x5F97;&#x591A;&#xFF0C;&#x6240;&#x4EE5;&#x53EF;&#x4EE5;&#x505A;&#x7684;&#x662F; &#x53EA;&#x5728;&#x5FC5;&#x8981;&#x7684;&#x65F6;&#x5019;&#x5199;&#x5165;&#x78C1;&#x76D8; &#x538B;&#x7F29;&#x6570;&#x636E;&#x51CF;&#x5C11; I/O&#x3002;&#x6570;&#x636E;&#x4ECE;&#x78C1;&#x76D8;&#x4F20;&#x8F93;&#x5230;&#x5185;&#x5B58;&#x662F;&#x7531;&#x7CFB;&#x7EDF;&#x603B;&#x7EBF;&#x800C;&#x4E0D;&#x662F;&#x5904;&#x7406;&#x5668;&#x6765;&#x5B9E;&#x73B0;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x78C1;&#x76D8; I/O &#x65F6;&#x5904;&#x7406;&#x5668;&#x4ECD;&#x7136;&#x53EF;&#x4EE5;&#x5904;&#x7406;&#x6570;&#x636E;&#x3002; &#x987A;&#x5E8F;&#x8BFB;&#x53D6;&#xFF08;&#x6BD4; random access &#x5FEB;&#xFF09;&#x3002;&#x56E0;&#x4E3A;&#x78C1;&#x76D8;&#x8BFB;&#x5199;&#x65F6;&#xFF0C;&#x78C1;&#x5934;&#x79FB;&#x5230;&#x6570;&#x636E;&#x6240;&#x5728;&#x7684;&#x78C1;&#x9053;&#x6709;&#x4E00;&#x6BB5;&#x65F6;&#x95F4;&#xFF0C;&#x5927;&#x6982; 5ms&#xFF0C;&#x79F0;&#x4E3A;&#x5BFB;&#x9053;&#x65F6;&#x95F4;&#xFF0C;&#x8FD9;&#x6BB5;&#x65F6;&#x95F4;&#x5E76;&#x4E0D;&#x8FDB;&#x884C;&#x6570;&#x636E;&#x7684;&#x4F20;&#x8F93;&#xFF0C;&#x6240;&#x4EE5;&#x8FDE;&#x7EED;&#x8BFB;&#x53D6;&#x7684;&#x6570;&#x636E;&#x5E94;&#x8BE5;&#x8FDE;&#x7EED;&#x5B58;&#x653E;&#x6765;&#x8282;&#x7701;&#x65F6;&#x95F4;&#x3002; Single Processor(&#x5355;&#x673A;&#x7248;)Block sort-based indexing(BSBI)&#x57FA;&#x4E8E;&#x5757;&#x7684;&#x6392;&#x5E8F;&#x7D22;&#x5F15;&#x65B9;&#x6CD5;(Block sort-based indexing algorithm) &#x8FC7;&#x7A0B;&#x5982;&#x4E0B;: &#x5C06; corpus &#x5206;&#x5272;&#x6210;&#x51E0;&#x4E2A;&#x5927;&#x5C0F;&#x76F8;&#x7B49;&#x7684;&#x90E8;&#x5206; &#x5BF9;&#x6BCF;&#x4E2A;&#x90E8;&#x5206;&#x7684; (termId,docId)&#x6392;&#x5E8F; &#x4E00;&#x65E6; in-memory buffer &#x6EE1;&#x4E86;&#xFF0C;&#x5C31;&#x628A;&#x4E34;&#x65F6;&#x6392;&#x5E8F;&#x7ED3;&#x679C; flush &#x5230;&#x78C1;&#x76D8;&#x4E2D;&#xFF0C;&#x7136;&#x540E;&#x91CD;&#x65B0;&#x521D;&#x59CB;&#x5316;&#xFF0C;&#x91CD;&#x590D;2&#x3001;3&#x8FC7;&#x7A0B; &#x5C06;&#x6240;&#x6709;&#x7684;&#x4E2D;&#x95F4;&#x6587;&#x4EF6;&#x5408;&#x5E76;&#x6210;&#x6700;&#x7EC8;&#x7D22;&#x5F15;&#x3002;(merge index blocks on disk) &#x4E0B;&#x56FE;&#x662F;&#x5408;&#x5E76;&#x4E2D;&#x95F4;&#x7ED3;&#x679C;(block merge step)&#x7684;&#x56FE;&#x793A; BSBI &#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x662F; O(TlogT) Single-pass in-memory indexing(SPIMI)BSBI &#x9700;&#x8981;&#x5C06; term &#x6620;&#x5C04;&#x6210; id&#xFF0C;&#x5BF9;&#x5927;&#x89C4;&#x6A21;&#x7684; corpus &#x6765;&#x8BF4;&#xFF0C;&#x8FD9;&#x79CD;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x4F1A;&#x5F88;&#x5927;&#x4EE5;&#x81F4;&#x5728;&#x5185;&#x5B58;&#x4E2D;&#x96BE;&#x4EE5;&#x5B58;&#x653E;&#xFF0C;SPIMI &#x4F7F;&#x7528; term &#x672C;&#x8EAB;&#xFF0C;&#x5C06;&#x6BCF;&#x4E2A;&#x5757;&#x7684;&#x8BCD;&#x5178;&#x5199;&#x5165;&#x78C1;&#x76D8;&#xFF0C;&#x5BF9;&#x4E8E;&#x4E0B;&#x4E00;&#x4E2A;&#x5757;&#x5219;&#x91CD;&#x65B0;&#x91C7;&#x7528;&#x65B0;&#x7684;&#x8BCD;&#x5178;&#xFF0C;&#x8FD9;&#x6837;&#x5E26;&#x6765;&#x7684;&#x597D;&#x5904;&#x662F;&#xFF0C;&#x53EA;&#x8981;&#x786C;&#x76D8;&#x7A7A;&#x95F4;&#x8DB3;&#x591F;&#x5927;&#xFF0C;SPIMI &#x5C31;&#x80FD;&#x7D22;&#x5F15;&#x4EFB;&#x4F55;&#x5927;&#x5C0F;&#x7684; corpus&#x3002; &#x7B97;&#x6CD5;&#x5982;&#x4E0B;&#xFF0C;&#x53CD;&#x590D;&#x8C03;&#x7528; SPIMI-INVERT &#x51FD;&#x6570;&#x76F4;&#x5230;&#x5C06;&#x5168;&#x90E8; corpus &#x5904;&#x7406;&#x5B8C;&#x3002;token_stream &#x5C31;&#x662F; term-docid stream&#x3002; BSBI &#x548C; SPIMI &#x7684;&#x4E00;&#x4E2A;&#x533A;&#x522B;&#x662F;&#xFF0C; SPIMI &#x76F4;&#x63A5;&#x5728; inverted list &#x4E2D;&#x589E;&#x52A0;&#x4E00;&#x9879;&#xFF0C;&#x8FD9;&#x4E2A; inverted lsit &#x662F;&#x52A8;&#x6001;&#x589E;&#x957F;&#x5BF9;&#xFF0C;&#x5927;&#x5C0F;&#x4F1A;&#x4E0D;&#x65AD;&#x8C03;&#x6574;&#xFF0C;&#x800C; BSBI &#x4E00;&#x5F00;&#x59CB;&#x5C31;&#x6574;&#x7406;&#x51FA;&#x6240;&#x6709;&#x7684; termID-docID &#x5E76;&#x5BF9;&#x5B83;&#x4EEC;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#x3002;&#x8FD9;&#x6837;&#x505A;&#x7684;&#x597D;&#x5904;&#x662F;&#xFF1A; &#x4E0D;&#x9700;&#x8981;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;&#x5904;&#x7406;&#x901F;&#x5EA6;&#x66F4;&#x5FEB; &#x4FDD;&#x7559; inverted list &#x5BF9; term &#x7684;&#x5F52;&#x5C5E;&#x5173;&#x7CFB;&#xFF0C;&#x80FD;&#x8282;&#x7701;&#x5185;&#x5B58;&#xFF0C;&#x4E5F;&#x4E0D;&#x7528;&#x4FDD;&#x5B58; term id&#xFF0C;&#x6240;&#x4EE5;&#x6BCF;&#x6B21;&#x5355;&#x72EC;&#x7684; SPIMI-INVERT &#x8C03;&#x7528;&#x80FD;&#x591F;&#x5904;&#x7406;&#x7684;&#x5757;&#x53EF;&#x4EE5;&#x975E;&#x5E38;&#x5927;&#xFF0C;&#x6574;&#x4E2A;&#x7684;&#x7D22;&#x5F15;&#x6784;&#x5EFA;&#x8FC7;&#x7A0B;&#x4E5F;&#x4F1A;&#x56E0;&#x6B64;&#x975E;&#x5E38;&#x9AD8;&#x6548;&#x3002; SPIMI &#x7684;&#x7A7A;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x662F; O(T)&#x3002; Distributed indexesSize of web search engine indexAssumption: Number of web pages: 50 billion (in 2013), assume 50% are text-like (guess) Average web page size: 37K (in 2013) Average inlink size for non-text pages: 1K (guess) Index size is about 20% the size of the raw text Text: 25billion 37K + 25billion 1K = 925TB Index: 20% * 950TB = 185TB (call it 200TB for convenience) &#x2013;&gt; The index fits on about 50 4TB disk drives Hardware&#x4E00;&#x4E2A; computer cluster&#xFF0C;&#x53C8;&#x53EB;&#x505A; rack&#xFF0C;&#x6709; 40-80 &#x53F0;&#x673A;&#x5668;&#xFF0C;&#x6BCF;&#x4E2A; rack &#x6709;&#x81EA;&#x5DF1;&#x5185;&#x90E8;&#x7684;&#x7F51;&#x7EDC;&#xFF0C;&#x5BF9;&#x5927;&#x516C;&#x53F8;&#x50CF; google &#x800C;&#x8A00;&#xFF0C;&#x673A;&#x5668;&#x7684;&#x9009;&#x62E9;&#x9075;&#x5FAA;&#x7684;&#x539F;&#x5219;&#x662F;&#xFF1A; cheaper is better small number of ordinary disks on each computer large(but not huge) RAM on each computer &#x56E0;&#x4E3A;&#x4E00;&#x53F0;&#x673A;&#x5B50;&#x574F;&#x4E86;&#x5F97;&#x7ACB;&#x523B;&#x6362;&#x4E00;&#x53F0;&#x673A;&#x5B50;&#x4E0A;&#x53BB;&#xFF0C;&#x81EA;&#x52A8; deploy&#xFF0C;&#x968F;&#x65F6;&#x6295;&#x5165;&#x4F7F;&#x7528;&#x3002;&#x800C;&#x5BF9;&#x4E8E;&#x5C0F;&#x7684;&#x7EC4;&#x7EC7;&#x50CF; cmu&#xFF0C;&#x673A;&#x5B50;&#x5C31;&#x4F1A;&#x4E70;&#x597D;&#x4E00;&#x70B9;&#x7684;&#xFF0C;&#x4E00;&#x53F0;&#x574F;&#x4E86;&#x4F1A;&#x53BB;&#x4FEE;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x76F4;&#x63A5;&#x6362;&#x4E00;&#x53F0;&#x3002; Partitioned indexesPartitioned index &#x7528;&#x5230;&#x4E86; sharding &#x548C; replication &#x7684;&#x539F;&#x7406;&#x3002; Shardingindex &#x901A;&#x5E38;&#x662F;&#x88AB;&#x5207;&#x7247;(sharding)&#x7684;&#xFF0C;&#x6BCF;&#x4E2A; partition &#x5305;&#x542B;&#x4E86;&#x4E00;&#x5806;&#x4E0D;&#x91CD;&#x590D;&#x7684; document set&#xFF0C;&#x6BCF;&#x4E2A; partition &#x90FD;&#x88AB;&#x5206;&#x5230;&#x4E86;&#x4E00;&#x53F0;&#x673A;&#x5668;&#xFF0C;&#x6839;&#x636E;&#x4E4B;&#x524D;&#x5BF9; index size &#x7684; assumption&#xFF0C;&#x5C31;&#x6709; 25 partitions 2disks/node 4TB = 200TB&#x3002; &#x90A3;&#x4E48; corpus &#x4F1A;&#x600E;&#x4E48;&#x88AB; partition &#x5462;&#xFF1F; &#x53EF;&#x4EE5;&#x968F;&#x673A;&#x5206;&#x914D;(random assignment)&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x6309;&#x6765;&#x6E90;&#xFF08;source-based assignment&#xFF09;&#xFF0C;&#x603B;&#x7684;&#x6765;&#x8BF4;&#xFF0C;&#x968F;&#x673A;&#x5206;&#x914D;&#x7528;&#x7684;&#x6BD4;&#x8F83;&#x591A;&#xFF0C;&#x56E0;&#x4E3A;&#x968F;&#x673A;&#x53EF;&#x4EE5;&#x5E73;&#x8861; query traffic across partitions&#xFF0C;&#x8BA9;&#x6BCF;&#x53F0;&#x673A;&#x5F97;&#x5230;&#x5145;&#x5206;&#x4F7F;&#x7528;&#x3002; Replicationindex &#x901A;&#x5E38;&#x88AB;&#x5B58;&#x4E86;&#x597D;&#x51E0;&#x4EFD; copy(replication)&#xFF0C;&#x4E3A;&#x4E86;&#x63D0;&#x9AD8;&#x5E76;&#x884C;&#x80FD;&#x529B;&#x548C;&#x5BB9;&#x9519;&#x80FD;&#x529B;&#x3002; &#x6240;&#x4EE5;&#x4E00;&#x4E2A; index server &#x6807;&#x51C6;&#x7684;&#x914D;&#x7F6E;&#xFF1A; 40 machines in a rack 2*4TB disks/machine 320 TB of index/rack Query evalution&#x5206;&#x5E03;&#x5F0F;&#x7CFB;&#x7EDF;&#x7684; query &#x8BC4;&#x4F30;&#x8FC7;&#x7A0B;&#x4E3A; &#x4ECE;&#x6BCF;&#x4E2A; partition &#x4E2D;&#x627E;&#x51FA;&#x4E00;&#x53F0;&#x673A;&#x5668;&#x3002; (select a machine for each index partition) &#x628A; query &#x5206;&#x914D;&#x5230;&#x9009;&#x51FA;&#x7684;&#x673A;&#x5668;&#x4E2D;&#xFF0C;&#x7136;&#x540E;&#x6BCF;&#x53F0;&#x673A;&#x5668;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A; ranked list of matches&#x3002; (broadcast the query to each selected machine) &#x4E00;&#x4E2A; aggregator &#x5C06;&#x8FD9;&#x4E9B; ranked list &#x5408;&#x5E76;(merge-sort)&#x6210;&#x6700;&#x7EC8;&#x7684;&#x6709;&#x5E8F;&#x6587;&#x6863;&#x96C6;&#x5408;&#x3002;(an aggregator assembles them into a final ranked list of doc ids) &#x5176;&#x5B83;&#x673A;&#x5668;&#x5BF9;&#x6BCF;&#x4E2A;&#x7ED3;&#x679C;&#x6765;&#x5BFB;&#x627E; title, urls, etc.&#x3002;&#xFF08;other machines looks up titles, URLs, etc., for each result, a similar partitioning/pooling strategy is used for documents&#xFF09; Tiered indexes&#x53E6;&#x4E00;&#x79CD;&#x5206;&#x5E03;&#x5F0F;&#x7684; index &#x662F;&#x5C06; web page &#x8FDB;&#x884C;&#x5206;&#x5C42;&#xFF0C;10% &#x4E3A; tier 1&#xFF0C;&#x662F;&#x9AD8;&#x4EF7;&#x503C;&#x7684;&#x7F51;&#x9875;&#xFF0C;&#x5176;&#x4F59; 90% &#x662F; tier 2&#xFF0C;&#x662F;&#x4F4E;&#x4EF7;&#x503C;&#x7684;&#x7F51;&#x9875;&#x3002;query &#x8FC7;&#x6765;&#x6211;&#x4EEC;&#x5148;&#x4ECE; tier 1 &#x627E;&#xFF0C;&#x5982;&#x679C; good results &#x4E0D;&#x591F;&#xFF0C;&#x518D;&#x5F80; tier 2 &#x627E;&#x3002; &#x6240;&#x4EE5;&#x95EE;&#x9898;&#x6765;&#x4E86;&#xFF0C;&#x600E;&#x4E48;&#x627E; top tier(s)&#xFF1F; Pages with high page rank, or from sites with high page rank Pages that were important for frequent past queries(ranked highly, high click through, high dwell time) Pages with short URLs (more likely to be home pages) Pages with low spam scores Tiered index &#x7684;&#x4F18;&#x52BF;&#x5982;&#x4E0B;&#xFF1A; &#x964D;&#x4F4E;&#x4E86;&#x5927;&#x591A;&#x6570; query &#x7684;&#x641C;&#x7D22;&#x6210;&#x672C;&#xFF0C;&#x4E00;&#x4E2A;&#x5B8C;&#x6574;&#x7684;&#x641C;&#x7D22;&#x8FC7;&#x7A0B;&#x6BD4; tier 1 &#x7684;&#x641C;&#x7D22;&#x8981;&#x627E; 10x &#x7684;&#x673A;&#x5668;&#x3002; &#x63D0;&#x9AD8;&#x4E86;&#x5927;&#x591A;&#x6570; query &#x7684;&#x641C;&#x7D22;&#x8D28;&#x91CF;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x66F4;&#x5173;&#x6CE8; &#x201C;good&#x201D; pages. &#x4EC0;&#x4E48;&#x60C5;&#x51B5;&#x4E0B;&#x4F1A;&#x53BB;&#x627E; tier 2? &#x5339;&#x914D; query &#x7684; Tier 1 &#x7684;&#x7F51;&#x9875;&#x592A;&#x5C11; query &#x975E;&#x5E38;&#x7684; uncommon Index Construction&#x5EFA;&#x7ACB;&#x5206;&#x5E03;&#x5F0F;&#x7D22;&#x5F15;&#x7528;&#x7684;&#x6846;&#x67B6;&#x662F; MapReduce&#xFF0C;&#x57FA;&#x672C;&#x8FC7;&#x7A0B;&#x662F; Input reader &#x2013;&gt; Map &#x2013;&gt; Combine &#x2013;&gt; Shuffle &#x2013;&gt; Reduce&#x3002;&#x4ECE;&#x6700;&#x57FA;&#x672C;&#x7684; binary inverted list &#x8FDB;&#x884C;&#x793A;&#x8303;&#xFF0C;format &#x662F; (term,[docids]) &#x6216;&#x8005; (term,[docid,docid,&#x2026;])&#xFF0C;&#x6CE8;&#x610F;&#x8FD9;&#x91CC;&#x7684; docid &#x662F; internal document id&#xFF08;&#x8F6C;&#x5316;&#x6210;&#x4E86; integer&#xFF09; &#x800C;&#x4E0D;&#x662F;&#x539F;&#x6765;&#x7684; id&#x3002; Mapper&#x6BCF;&#x4E2A; Map task &#x76F8;&#x5F53;&#x4E8E;&#x4E00;&#x4E2A; document parser input: a stream of documents output: a stream of (term,docid) tupleseg. (men,1)(and,1)(women,1)&#x2026;(once,2)(upon,2) Shuffle&#xFF0F;SortShuffle &#x7684;&#x8FC7;&#x7A0B;&#x76F8;&#x5F53;&#x4E8E; route tuples &#x5230; Reducers &#x91CC;&#x3002;&#x5728; Shuffle/Sort &#x4E2D;&#xFF0C;&#x90FD;&#x662F; shuffle/sort by key&#xFF0C;&#x800C;&#x4E0D;&#x662F; by value&#x3002; input: (t5,docid1)(t1,docid3)(t1,docid1)&#x2026; output: (t1,docid3)(t1,docid1)(t5,docid1)&#x2026; RedcuerReducer &#x7684;&#x4F5C;&#x7528;&#x5C31;&#x662F;&#x5C06; stream of keys &#x8F6C;&#x5316;&#x6210; streams of inverted lists&#x3002;Reducer &#x4F1A; sort values &#x4E5F;&#x5C31;&#x662F; docids&#xFF0C;&#x7136;&#x540E;&#x5EFA;&#x7ACB; inverted list&#xFF0C;&#x8FD9;&#x91CC;&#x8981;&#x4FDD;&#x8BC1;&#x7684;&#x662F;&#x6700;&#x957F;&#x7684; inverted list &#x5FC5;&#x987B;&#x80FD;&#x591F; fit in memory&#x3002; input: (men,1)(men,127)(men,49)(men,23)&#x2026; ouput: (men,[df:492,docids:1,23,49,127,&#x2026;]) Improvement&#x8FD9;&#x4E2A;&#x6D41;&#x7A0B;&#x4E0B;&#x6765;&#x7684;&#x6548;&#x7387;&#x5E76;&#x4E0D;&#x9AD8;&#xFF0C;&#x56E0;&#x4E3A;&#x6BCF;&#x4E2A; unique term in a document &#x90FD;&#x4F1A;&#x4EA7;&#x751F;&#x4E00;&#x4E2A; tuple&#xFF0C;&#x50CF; WSJ&#x2019;87-92 (533 MB of text) &#x5C31;&#x4F1A;&#x4EA7;&#x751F; 20 million &#x7684; tuple&#xFF0C;&#x6BCF;&#x4E2A; tuple &#x90FD;&#x4F1A; shuffle &#x5230; reducers &#x91CC;&#xFF0C;&#x8FDB; reducer &#x524D;&#x8FD8;&#x8981;&#x5148; sort&#xFF0C;&#x8FD9;&#x4E2A;&#x8FC7;&#x7A0B;&#x7279;&#x522B;&#x8017;&#x65F6;&#x3002;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x4F1A;&#x7528; Combiner &#x6765;&#x63D0;&#x9AD8;&#x6548;&#x7387;&#x3002;Combiner &#x7684;&#x4F5C;&#x7528;&#x548C; reducer &#x5DEE;&#x4E0D;&#x591A;&#xFF0C;&#x4E0D;&#x8FC7;&#x5B83;&#x662F;&#x5728;&#x6BCF;&#x4E2A; mapper &#x91CC;&#x8FDB;&#x884C;&#x7684;&#xFF0C;&#x5B83;&#x628A;&#x6BCF;&#x4E2A; mapper &#x91CC;&#x7684; docid &#x5148;&#x8FDB;&#x884C;&#x4E86;&#x5408;&#x5E76;&#x3002;(t1,docid1)(t2,docid1)(t4,docid2)&#x2026;-&gt;(t1,[docid1,docid18,&#x2026;])&#x3002;&#x8FD9;&#x6837;&#x7684;&#x597D;&#x5904;&#x662F;&#x9700;&#x8981; shuffle &#x7684; tuple &#x66F4;&#x5C11;&#xFF0C;&#x9700;&#x8981; hash &#x7684; key &#x66F4;&#x5C11;&#xFF0C;&#x9700;&#x8981;&#x8FDB;&#x884C; movement operation &#x7684;&#x6570;&#x636E;&#x4E5F;&#x66F4;&#x5C11;&#xFF0C;&#x53E6;&#x5916;&#xFF0C;&#x9700;&#x8981; reduce &#x7684; tuple &#x66F4;&#x5C11;&#xFF0C;&#x9700;&#x8981; sort &#x7684; tuple &#x4E5F;&#x66F4;&#x5C11;&#x3002;&#x6539;&#x8FDB;&#x540E;&#x7684;&#x6846;&#x67B6;&#x5982;&#x4E0B;&#xFF1A; Map:$(docid_1,content_1)$ -&gt; $(t_1,ilist_{1,1})(t_2,ilist_{2,1})(t_3,ilist_{3,1})$ Combine:Sort by t &amp; combine $(t_1 [ilist_{1,2} ilist_{1,3} ilist_{1,1},&#x2026;])$-&gt;$(t_1,ilist_{1,27})$&#x6BCF;&#x4E2A; output inverted list &#x5305;&#x542B;&#x4E86; a sequence of documents Shuffle by t Sort by t$(t_4 ilist_{4,1}) (t_1 ilist_{1,3})$-&gt;$(t_1,ilist_{1,2})(t_1,ilist_{1,4})(t_4,ilist_{4,1})$ Reduce$(t_1 [ilist_{1,2} ilist_{1,1} ilist_{1,4},&#x2026;])$-&gt;$(t_1,ilist_final)$ $ilist_{i,j}$: the j&#x2019;th inverted list fragment for term i &#x6CE8;&#x610F;&#x6BCF;&#x4E2A; reducer &#x91CC;&#x7684; inverted list &#x90FD;&#x662F;&#x5B8C;&#x6574;&#x7684;&#xFF0C;&#x6BCF;&#x4E2A; reducer &#x76F8;&#x5F53;&#x4E8E;&#x5B58;&#x4E86;&#x4E2A; result block&#xFF0C;&#x6BCF;&#x4E2A; block &#x5305;&#x62EC;&#x4E0D;&#x540C;&#x7684; term&#xFF0C;&#x6BCF;&#x4E2A; term &#x53EA;&#x5728;&#x4E00;&#x4E2A; block &#x91CC;&#x51FA;&#x73B0;&#x3002; &#x5982;&#x679C;&#x8981;&#x521B;&#x5EFA; partitioned inverted list&#xFF0C;&#x53EA;&#x7528;&#x5728; key &#x91CC;&#x52A0;&#x4E0A;&#x4E00;&#x4E2A; partition id &#x5373;&#x53EF;&#x3002; Map:$(docid_1,content_1)$ -&gt; $([p,t_1],ilist_{1,1})([p,t_2],ilist_{2,1})([p,t_3],ilist_{3,1})$ Combine:Sort by t &amp; combine $([p,t_1] [ilist_{1,2} ilist_{1,3} ilist_{1,1},&#x2026;])$-&gt;$([p,t_1],ilist_{1,27})$&#x6BCF;&#x4E2A; output inverted list &#x5305;&#x542B;&#x4E86; a sequence of documents Shuffle by p Sort by [p,t]$([p,t_4] ilist_{4,1}) ([p,t_1] ilist_{1,3})$-&gt;$([p,t_1],ilist_{1,2})([p,t_1],ilist_{1,4})([p,t_4],ilist_{4,1})$ Reduce$([p,t_1] [ilist_{1,2} ilist_{1,1} ilist_{1,4},&#x2026;])$-&gt;$([p,t_1],ilist_final)$ Inverted list compression&#x6982;&#x5FF5;&#x4E0A;&#x6765;&#x8BB2; inverted list &#x770B;&#x8D77;&#x6765;&#x50CF;&#x4E00;&#x4E2A; object 12345678910# appledf: 4356docid: 42tf: 3locs: 14 83 157 94docid: 94... &#x800C;&#x5B9E;&#x9645;&#x4E0A;&#x5B83;&#x5728;&#x78C1;&#x76D8;&#x4E2D;&#x53EA;&#x662F;&#x4E00;&#x4E32;&#x6570;&#x5B57; 12345674356423148315794 &#x901A;&#x5E38; intered list &#x4F1A;&#x88AB;&#x538B;&#x7F29;&#xFF0C;&#x76EE;&#x7684;&#x4E0D;&#x540C;&#xFF0C;&#x9009;&#x62E9;&#x7684;&#x538B;&#x7F29;&#x65B9;&#x6CD5;&#x4E5F;&#x5C31;&#x4E0D;&#x540C;&#x3002;&#x8981;&#x8282;&#x7701;&#x7A7A;&#x95F4;&#x6211;&#x4EEC;&#x5C31;&#x7528; aggressive compression algorithms&#xFF0C;&#x8981;&#x8282;&#x7701;&#x65F6;&#x95F4;&#x6211;&#x4EEC;&#x5C31;&#x7528; simple compression algorithms&#x3002;&#x73B0;&#x5728;&#x6211;&#x4EEC;&#x6700;&#x4E3B;&#x8981;&#x7684;&#x76EE;&#x7684;&#x662F;&#x8282;&#x7701; query &#x65F6;&#x95F4;&#xFF0C;&#x7528;&#x7684;&#x538B;&#x7F29;&#x7B97;&#x6CD5;&#x4E3B;&#x8981;&#x6709; Gap encoding Restricted variable-length(RVL) encoding Delta GapDelta Gap &#x7684;&#x57FA;&#x672C;&#x601D;&#x60F3;&#x662F;&#x4FDD;&#x5B58;&#x6570;&#x5B57;&#x7684;&#x5DEE;&#x503C;&#x800C;&#x4E0D;&#x662F;&#x6570;&#x5B57;&#x672C;&#x8EAB;&#xFF0C;&#x610F;&#x4E49;&#x5728;&#x4E8E; increase probability of smaller numbers more skewed distribution lower entropy Variable Byte EncodingVariable Byte Encoding &#x5B58;&#x4E86;&#x4E00;&#x4E32; bytes&#xFF0C;&#x6BCF;&#x4E2A; byte &#x7531;&#x5F00;&#x5934; 1 &#x4F4D; flag &#x548C; 7 &#x4F4D;&#x7684; payload&#xFF08;the number&#xFF09;&#x7EC4;&#x6210;&#x3002;flag &#x4E3A; 0&#xFF0C;&#x8868;&#x793A;&#x4E0D;&#x662F;&#x6700;&#x540E;&#x4E00;&#x4E2A; byte&#xFF0C;flag &#x4E3A; 1 &#x8868;&#x793A;&#x8FD9;&#x662F;&#x6700;&#x540E;&#x4E00;&#x4E2A; byte&#x3002;&#x901A;&#x8FC7;&#x8FDE;&#x63A5; payload &#x6765;&#x91CD;&#x5EFA; number&#x3002; &#x597D;&#x5904;&#x662F; encoding &#x548C; decoding &#x7684;&#x6548;&#x7387;&#x90FD;&#x5F88;&#x9AD8;&#xFF0C;&#x53EF;&#x4EE5;&#x627E;&#x5230;&#x7B2C; n &#x4F4D;&#x6570;&#x5B57;&#x800C;&#x4E0D;&#x7528; decode &#x4E4B;&#x524D;&#x7684;&#x6570;&#x5B57;&#x3002; Example 123456789101112131415161718192021222324[0..2^7-1]: 1 byte : 1xxxxxxx[2^7...2^14-1]: 2 bytes: 0xxxxxxx1xxxxxxx[2^14...2^21-1]: 3 bytes: 0xxxxxxx0xxxxxxx1xxxxxxx...Decimal: 5Binary: 00000000 00000000 00000000 00000101# &#x7167;&#x6284;&#x6700;&#x540E;7&#x4F4D;&#xFF0C;&#x7B2C;&#x4E00;&#x4F4D;&#x8865;&#x4E0A;1Compressed: 10000101Decimal: 127Binary: 00000000 00000000 00000000 01111111# &#x7167;&#x6284;&#x6700;&#x540E;7&#x4F4D;&#xFF0C;&#x7B2C;&#x4E00;&#x4F4D;&#x8865;&#x4E0A;1Compressed: 11111111Decimal: 128Binary: 00000000 00000000 00000000 10000000# &#x7167;&#x6284;&#x6700;&#x540E;7&#x4F4D;&#xFF0C;&#x7B2C;&#x4E00;&#x4F4D;&#x8865;&#x4E0A;0&#xFF0C;&#x518D;&#x5F80;&#x524D;&#x627E;7&#x4F4D;&#xFF0C;&#x7167;&#x6284;&#xFF0C;&#x7B2C;&#x4E00;&#x4F4D;&#x8865;&#x4E0A;1Compressed: 00000000 10000001Decimal: 131Binary: 00000000 00000000 00000000 10000011# &#x7167;&#x6284;&#x6700;&#x540E;7&#x4F4D;&#xFF0C;&#x7B2C;&#x4E00;&#x4F4D;&#x8865;&#x4E0A;0&#xFF0C;&#x518D;&#x5F80;&#x524D;&#x627E;7&#x4F4D;&#xFF0C;&#x7167;&#x6284;&#xFF0C;&#x7B2C;&#x4E00;&#x4F4D;&#x8865;&#x4E0A;1Compressed: 00000011 10000001 Summary&#x6700;&#x9AD8;&#x6548;&#x7684;&#x538B;&#x7F29;&#x7B97;&#x6CD5;&#x6BD4; variable byte encoding &#x8282;&#x7701; 15%&#xFF0D;20% &#x7684;&#x7A7A;&#x95F4;&#xFF0C;&#x4F46;&#x662F;&#x6BD4; restricted variable length encoding &#x8981;&#x6162;&#x3002;&#x6CE8;&#x610F;&#x6211;&#x4EEC;&#x8FD9;&#x91CC;&#x8981;&#x628A;&#x63E1;&#x7684;&#x539F;&#x5219;&#x662F; &#x201C;Disks are cheap, and speed is important&#x201D;&#xFF0C;&#x6240;&#x4EE5; Restricted variable length compression &#x8FD8;&#x662F;&#x975E;&#x5E38;&#x901A;&#x7528;&#x7684;&#x3002; &#x538B;&#x7F29;&#x4E0D;&#x5305;&#x542B; positional &#x4FE1;&#x606F;&#x7684; inverted file&#xFF0C;&#x6240;&#x7528;&#x7A7A;&#x95F4;&#x662F; original text &#x7684; 10%&#xFF0C;&#x538B;&#x7F29;&#x5305;&#x542B; positional &#x4FE1;&#x606F;&#x7684; inverted file&#xFF0C;&#x6240;&#x7528;&#x7A7A;&#x95F4;&#x662F; original text &#x7684; 15%-20%&#x3002; Inverted list OptimizationSkip lists&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x8DF3;&#x8FC7;&#x4E00;&#x4E9B;&#x6587;&#x6863;&#x6765;&#x51CF;&#x5C11; I/O&#xFF0C;&#x51CF;&#x5C11;&#x8BA1;&#x7B97;&#x3002; Operators#NEAR,#WINDOW,#SYN,Boolean AND&#xFF0C;skip lists &#x5728;&#x8FD9;&#x4E9B; operator &#x4E2D;&#x4F1A;&#x975E;&#x5E38;&#x6709;&#x6548;&#x3002;&#x56DE;&#x987E; #NEAR &#x7684;&#x7B97;&#x6CD5;&#xFF0C;&#x5047;&#x8BBE; query &#x662F; #NEAR/3(a b)&#xFF0C;&#x5305;&#x542B; a &#x7684;&#x7B2C;&#x4E00;&#x4E2A; docid &#x662F; 59356&#xFF0C;&#x5305;&#x542B; b &#x7684;&#x7B2C;&#x4E00;&#x4E2A; docid &#x662F; 43&#xFF0C;&#x4E4B;&#x524D;&#x7684;&#x505A;&#x6CD5;&#x662F;&#x8BA9; b &#x7684; doc pointer &#x4E0D;&#x65AD;&#x6307;&#x5411; next&#xFF0C;&#x76F4;&#x5230; a,b &#x7684;pointer &#x6307;&#x5411;&#x540C;&#x4E00;&#x7BC7;&#x6587;&#x6863;&#xFF0C;&#x5982;&#x679C;&#x8003;&#x8651; skip lists&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x6307;&#x5411; a &#x7684; docid&#xFF0C;&#xFF08;&#x8C03;&#x7528; docIteratorAdvanceTo(doc_id_a)&#x65B9;&#x6CD5;&#xFF09;&#x3002; Score calculation (Top-Docs)&#x6709;&#x4E9B; inverted list &#x592A;&#x957F;&#x4E86;&#xFF0C;&#x800C;&#x5927;&#x591A; query &#x53EA;&#x9700;&#x8981;&#x8FD4;&#x56DE; &lt;100 &#x7684;&#x6587;&#x6863;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x53EF;&#x4EE5; truncate inverted list that contain only the best docs&#xFF0C;&#x8FD9;&#x6837;&#x5C31;&#x80FD;&#x63D0;&#x9AD8;&#x6548;&#x7387;&#xFF0C;&#x4EE3;&#x4EF7;&#x662F; low recall&#x3002; &#x600E;&#x4E48;&#x627E;&#x5230; Top-Docs tf PageRank &#x600E;&#x4E48;&#x5BF9; Top-Docs &#x6392;&#x5E8F; Order by doc id Order by tf How many terms are frequent enough to have a top-docs list?&#x6839;&#x636E; Zipf&#x2019;s Law$$Rank * Frequency = A * N$$ &#x6240;&#x4EE5; ctf&gt;=800 &#x7684; term &#x5927;&#x6982;&#x5360;&#x6BD4; ${A*N/800 \\over A * N}=1/800=0.125%$ why 800?&#x5047;&#x8BBE;&#x4E00;&#x4E2A; inverted lsit &#x6709;5&#x4E2A; integer&#xFF0C;&#x6CA1;&#x538B;&#x7F29;&#x5C31;&#x6709; 16 bytes&#xFF0C;30%&#x538B;&#x7F29;&#x6BD4;&#xFF0C;&#x538B;&#x7F29;&#x4E86;&#x6709; 5 bytes&#xFF0C;linux filesystem page size&#x662F; 4096 bytes, &#x6240;&#x4EE5;&#x6709;4096/5=819&#x6761; inverted list &#x80FD; fit in one page &#x5047;&#x8BBE; vocabulary &#x6709; 1,000,000 &#x4E2A; term&#xFF0C;&#x90A3;&#x4E48;&#x5927;&#x6982;&#x53EA;&#x6709; 1,250 &#x4E2A; top-docs lists&#xFF0C;&#x6BCF;&#x4E2A; list &#x5927;&#x6982; 4-8KB&#xFF0C;&#x4E00;&#x5171;&#x5360; 5-10 MB&#x3002; Multiple inverted lists per term&#x6709;&#x4E9B; operator &#x5E76;&#x4E0D;&#x9700;&#x8981; tf&#xFF0C;&#x50CF; unranked boolean operators&#xFF0C; &#x6709;&#x4E9B; operator &#x5E76;&#x4E0D;&#x9700;&#x8981; locations&#xFF0C;&#x50CF; #SUM,#WEIGHT,#AND,#OR,#ANDNOT,&#x2026;&#xFF0C;&#x800C; inverted lists with locations &#x4F1A;&#x4EA7;&#x751F; I/O &#x6D6A;&#x8D39;&#xFF0C;&#x5BF9;&#x6CA1;&#x6709; location &#x7684; inverted list&#xFF0C;&#x6211;&#x4EEC;&#x53EA;&#x7528;&#x5B58; docid, tf &#x4E24;&#x4E2A; integer&#xFF0C;&#x800C;&#x5BF9;&#x5B58;&#x4E86; location &#x7684; inverted list,&#x5047;&#x5B9A;&#x6211;&#x4EEC;&#x5BF9;&#x6BCF;&#x7BC7;&#x6587;&#x6863;&#x591A;&#x7528;&#x4E86; 1.5 &#x4E2A; integer&#xFF0C;&#x90A3;&#x4E48;&#x6211;&#x4EEC;&#x5176;&#x5B9E;&#x6D6A;&#x8D39;&#x4E86; 42% &#x7684; I/O&#x3002; &#x6240;&#x4EE5;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A; term&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5B58;&#x4E24;&#x4EFD; inverted list&#xFF0C;&#x4E00;&#x4EFD;&#x6709; location&#xFF0C;&#x4E00;&#x4EFD;&#x6CA1;&#x6709;&#xFF0C;&#x5BF9;&#x4E0D;&#x9700;&#x8981; location &#x7684; operator&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x76F4;&#x63A5;&#x8BBF;&#x95EE;&#x6CA1;&#x6709;location &#x7684; inverted list&#xFF0C;&#x8FD9;&#x6837;&#x5C31;&#x80FD;&#x907F;&#x514D;&#x4E0D;&#x5FC5;&#x8981;&#x7684; I/O&#xFF0C;&#x5F53;&#x7136;&#x4EE3;&#x4EF7;&#x662F;&#x989D;&#x5916;&#x7684;&#x78C1;&#x76D8;&#x7A7A;&#x95F4;&#x3002; &#x6211;&#x4EEC;&#x8981;&#x5BF9;&#x6BCF;&#x4E2A; term &#x90FD;&#x5B58;&#x4E24;&#x4E2A; inverted list &#x5417;&#xFF1F; &#x5176;&#x5B9E;&#x5E76;&#x4E0D;&#x9700;&#x8981;&#x3002;&#x56E0;&#x4E3A;&#x5927;&#x6982;&#x53EA;&#x6709; 0.125% &#x5BF9; term &#x6709; topdocs/champion list&#xFF0C;&#x5176;&#x5B83; term &#x5BF9; inverted list &#x90FD;&#x5F88;&#x77ED;&#x3002;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x53EA;&#x7528;&#x5BF9; frequent terms &#x5EFA;&#x4E24;&#x4E2A; inverted list &#x5C31;&#x53EF;&#x4EE5;&#x5566;&#x3002; Index updatescorpus &#x5E76;&#x4E0D;&#x662F;&#x9759;&#x6001;&#x7684;&#xFF0C;&#x968F;&#x7740;&#x6587;&#x6863;&#x7684;&#x589E;&#x52A0;&#xFF0C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x5C06;&#x65B0;&#x7684; term &#x52A0;&#x5165;&#x8BCD;&#x5178;&#xFF0C;&#x5BF9;&#x5DF2;&#x6709;&#x7684; inverted list &#x8FDB;&#x884C;&#x66F4;&#x65B0;&#xFF0C;&#x7136;&#x800C;&#x8FD9;&#x4E2A;&#x4EE3;&#x4EF7;&#x975E;&#x5E38;&#x7684;&#x5927;&#x3002;&#x6700;&#x7B80;&#x5355;&#x7684;&#x7D22;&#x5F15;&#x66F4;&#x65B0;&#x65B9;&#x6CD5;&#x662F; &#x5468;&#x671F;&#x6027;&#x5730;&#x5BF9; corpus &#x8FDB;&#x884C;&#x7D22;&#x5F15;&#x91CD;&#x6784;&#xFF0C;&#x5982;&#x679C; corpus &#x66F4;&#x65B0;&#x6B21;&#x6570;&#x4E0D;&#x591A;&#xFF0C;&#x800C;&#x4E14;&#x80FD;&#x63A5;&#x53D7;&#x65B0;&#x6587;&#x6863;&#x68C0;&#x7D22;&#x7684;&#x4E00;&#x5B9A;&#x5EF6;&#x8FDF;&#xFF0C;&#x4E5F;&#x6709;&#x8DB3;&#x591F;&#x8D44;&#x6E90;&#x652F;&#x6301;&#x5EFA;&#x7ACB;&#x65B0;&#x7D22;&#x5F15;&#x65F6;&#x8BA9;&#x65E7;&#x7D22;&#x5F15;&#x7EE7;&#x7EED;&#x5DE5;&#x4F5C;&#xFF0C;&#x90A3;&#x4E48;&#x5468;&#x671F;&#x6027;&#x7D22;&#x5F15;&#x91CD;&#x6784;&#x4E0D;&#x5931;&#x4E3A;&#x4E00;&#x79CD;&#x597D;&#x9009;&#x62E9;&#x3002; &#x53E6;&#x5916;&#x4E00;&#x79CD;&#x89E3;&#x51B3;&#x65B9;&#x6CD5;&#x662F;&#x4FDD;&#x6301;&#x4E24;&#x4E2A;&#x7D22;&#x5F15;&#xFF1A;&#x4E00;&#x4E2A;&#x4E3B;&#x7D22;&#x5F15;&#xFF0C;&#x4E00;&#x4E2A;&#x8F85;&#x52A9;&#x7D22;&#x5F15;&#xFF0C;&#x8F85;&#x52A9;&#x7D22;&#x5F15;&#x7528;&#x4E8E;&#x5B58;&#x50A8;&#x65B0;&#x6587;&#x6863;&#x4FE1;&#x606F;&#xFF0C;&#x4FDD;&#x5B58;&#x5728;&#x5185;&#x5B58;&#x4E2D;&#xFF0C;&#x68C0;&#x7D22;&#x65F6;&#x53EF;&#x4EE5;&#x540C;&#x65F6;&#x904D;&#x5386;&#x4E24;&#x4E2A;&#x7D22;&#x5F15;&#x5E76;&#x5C06;&#x7ED3;&#x679C;&#x5408;&#x5E76;&#x3002;&#x5982;&#x679C;&#x6709;&#x6587;&#x6863;&#x5220;&#x9664;&#xFF0C;&#x53EF;&#x4EE5;&#x628A;&#x5220;&#x9664;&#x7684; docid &#x8BB0;&#x5F55;&#x5728;&#x4E00;&#x4E2A; delete list &#x91CC;&#xFF0C;&#x5728;&#x8FD4;&#x56DE;&#x7ED3;&#x679C;&#x4E4B;&#x524D;&#x5229;&#x7528;&#x5B83;&#x8FC7;&#x6EE4;&#x6389;&#x5DF2;&#x7ECF;&#x5220;&#x9664;&#x7684;&#x6587;&#x6863;&#x3002;&#x6587;&#x6863;&#x7684;&#x66F4;&#x65B0;&#x901A;&#x8FC7;&#x5148;&#x5220;&#x9664;&#x540E;&#x91CD;&#x65B0;&#x63D2;&#x5165;&#x5B9E;&#x73B0;&#x3002;&#x5F53;&#x8F85;&#x52A9;&#x7D22;&#x5F15;&#x53D8;&#x5F97;&#x5F88;&#x5927;&#x65F6;&#xFF0C;&#x5C31;&#x5C06;&#x5B83;&#x5408;&#x5E76;&#x5230;&#x4E3B;&#x7D22;&#x5F15;&#x4E2D;&#x3002; Storing document structureTreat each element as independent of other elements&#x7B80;&#x5355;&#x660E;&#x4E86;&#x7684;&#x7ED3;&#x6784;&#xFF0C;&#x7B80;&#x5355;&#x3001;&#x9AD8;&#x6548;&#xFF0C;&#x5BF9; shallow structure &#x7684; document &#x975E;&#x5E38;&#x6709;&#x6548;&#x3002; &#x5728;&#x8FD9;&#x79CD;&#x7ED3;&#x6784;&#x4E0B;&#xFF0C;&#x6211;&#x4EEC;&#x5206;&#x522B;&#x4FDD;&#x5B58;&#x6BCF;&#x4E2A; field &#x4E0B;&#x7684;&#x8BCD;&#x6C47;&#xFF0C;&#x53EF;&#x4EE5;&#x6709;&#x4E00;&#x4E0B;&#x4E24;&#x79CD;&#x5F62;&#x5F0F; FIELD::TERM (FIELD,TERM) Treat elements as part of an element hierarchy$Document \\supset Section \\supset Subsection$ &#x975E;&#x5E38;&#x7075;&#x6D3B;&#x7684;&#x7ED3;&#x6784;&#xFF0C;&#x66F4;&#x597D;&#x7684;&#x7B26;&#x5408;&#x7528;&#x6237;&#x9700;&#x6C42;&#xFF0C;&#x57FA;&#x672C;&#x601D;&#x60F3;&#x662F; &#x201C;Terms in &#x201C;Subsection&#x201D; should also appear in &#x201C;Section&#x201D;&#x201D; &#x5BF9; complex structure &#x975E;&#x5E38;&#x6709;&#x6548;&#x3002; Storing fields as trees &#x8FD9;&#x79CD;&#x65B9;&#x5F0F;&#x4EE3;&#x4EF7;&#x592A;&#x9AD8;&#xFF0C;I/O &#x548C;&#x5185;&#x5B58;&#x4EE3;&#x4EF7;&#x90FD;&#x5F88;&#x9AD8;&#x3002;&#x505A;&#x4E2A;&#x7B80;&#x5355;&#x8BA1;&#x7B97; 120 bytes/node * 100 nodes/doc * 1,000,000 docs=2GB Storing fields as inverted lists&#x591A;&#x5B58;&#x4E00;&#x4EFD; field &#x7684; inverted list&#xFF0C;&#x5305;&#x542B; field &#x8D77;&#x59CB;&#x548C;&#x7EC8;&#x6B62;&#x4F4D;&#x7F6E;&#x3002;&#x7136;&#x540E;&#x901A;&#x8FC7;&#x8FD9;&#x4E2A;&#x4F4D;&#x7F6E;&#x533A;&#x95F4;&#x627E;&#x5230; term inverted list &#x4E2D;&#x7B26;&#x5408;&#x6761;&#x4EF6;&#x7684; location&#x3002; Indri Index ComponentsStatistic files Term dictionaries Inverted files Compressed collection Lucene Index&#x7565; &#x53C2;&#x8003;&#x94FE;&#x63A5;:Search Engines: 11-442 / 11-642&#x672C;&#x6587;&#x56FE;&#x7247;&#x6765;&#x81EA;&#x4E66;&#x672C; Introduction to Information Retrieval &#x548C; Jamie Callen &#x7684; slides&#x3002;","tags":"nlp search-engines"},{"title":"Search Engines笔记 - Pseudo Relevance Feedback","url":"/2016/10/10/Search Engines笔记 - Pseudo Relevance Feedback/","text":"&#x600E;&#x6837;&#x4EA7;&#x751F;&#x66F4;&#x597D;&#x7684; query &#x6765;&#x5F97;&#x5230;&#x66F4;&#x591A;&#x7684;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF1F;&#x4ECE;&#x7528;&#x6237;&#x89D2;&#x5EA6;&#x770B;&#xFF0C;&#x7528;&#x6237;&#x4E00;&#x5F00;&#x59CB;&#x4F1A;&#x7528; short query &#x6765;&#x8FDB;&#x884C;&#x68C0;&#x7D22;&#xFF0C;&#x5728;&#x770B;&#x5230;&#x7ED3;&#x679C;&#x6587;&#x6863;&#x540E;&#x901A;&#x8FC7;&#x589E;&#x52A0;&#x6216;&#x51CF;&#x5C11; term &#x4EE5;&#x53CA;&#x8C03;&#x6574; term weight &#x7684;&#x65B9;&#x5F0F;&#x8FDB;&#x4E00;&#x6B65;&#x4F18;&#x5316; query&#x3002;&#x800C;&#x5BF9;&#x7CFB;&#x7EDF;&#x800C;&#x8A00;&#xFF0C;&#x80FD;&#x81EA;&#x52A8;&#x4EA7;&#x751F; better query &#x7684;&#x65B9;&#x5F0F;&#x83AB;&#x8FC7;&#x4E8E; machine learning&#x3002; relevance feedback &#x5176;&#x5B9E;&#x662F;&#x4E00;&#x4E2A; machine learning(supervised) &#x7684;&#x95EE;&#x9898;&#xFF0C;&#x7406;&#x60F3;&#x4E2D;&#x6211;&#x4EEC;&#x8981;&#x5B66;&#x4E60;&#x7684;&#x662F; f(document)&#x2013;&gt;{relevant, not relevant}&#xFF0C;&#x7136;&#x800C;&#x4E00;&#x822C;&#x6211;&#x4EEC;&#x5B66;&#x4E60;&#x7684;&#x662F; f(document)&#x2013;&gt;score&#x3002;&#x8BAD;&#x7EC3;&#x96C6;&#x7684;&#x5927;&#x5C0F;&#x4E00;&#x822C;&#x6765;&#x8BF4; 10-20 &#x9875;&#x662F; good, 100-200 &#x9875;&#x5C31; great &#x4E86;&#x3002; &#x7136;&#x800C; relevance feedback &#x5E76;&#x4E0D;&#x7ECF;&#x5E38;&#x88AB;&#x4F7F;&#x7528;&#xFF0C;&#x4E00;&#x65B9;&#x9762;&#x662F;&#x56E0;&#x4E3A; users &#x4E0D;&#x559C;&#x6B22;&#x7ED9;&#x8BC4;&#x4EF7;(&#x56E0;&#x6B64; training data &#x4F1A;&#x5F88;&#x5C11;&#xFF0C;&#x51C6;&#x786E;&#x5EA6;&#x4E5F;&#x4E0D;&#x4E00;&#x5B9A;&#x9AD8;)&#xFF0C;&#x53E6;&#x4E00;&#x65B9;&#x9762;&#x662F;&#x8FD9;&#x79CD;&#x8BC4;&#x4EF7;&#x6709;&#x98CE;&#x9669;&#xFF0C;&#x5982;&#x679C;&#x8BC4;&#x4F30;&#x7684;&#x6587;&#x6863;&#x5F88;&#x5C11;&#xFF0C;&#x7ED3;&#x679C;&#x662F; highly variable &#x7684;&#xFF0C;stability &#x548C; consistency &#x53EF;&#x80FD;&#x4F1A;&#x53D7;&#x5230;&#x635F;&#x4F24;&#x3002;&#x6240;&#x4EE5;&#x4E00;&#x822C;&#x6211;&#x4EEC;&#x7528;&#x7684;&#x662F; Pseudo-relevance feedback&#xFF0C;&#x4E00;&#x79CD; unsupervised(or self-supervised) &#x65B9;&#x6CD5;&#x3002; Pseudo-relevance feedback&#x57FA;&#x672C;&#x903B;&#x8F91;&#x662F;&#x628A; initial query &#x5F53;&#x505A; classifier&#xFF0C;&#x7528;&#x5B83;&#x6765; label &#x90E8;&#x5206; data&#xFF0C;&#x5F97;&#x5230; top-ranked documents&#xFF0C;&#x7136;&#x540E;&#x7528; labeled data &#x6765;&#x4EA7;&#x751F;&#x66F4;&#x4F18;&#x7684; classifier&#x3002;&#x57FA;&#x672C;&#x8FC7;&#x7A0B;&#xFF1A; &#x7528;&#x539F;&#x59CB; query &#x68C0;&#x7D22;&#x6587;&#x6863; &#x53D6;&#x7ED3;&#x679C;&#x7684;&#x524D; N &#x7BC7;&#x6587;&#x6863;&#x4F5C;&#x4E3A;&#x8BAD;&#x7EC3;&#x96C6;&#xFF0C;&#x8FD9;&#x4E9B;&#x6587;&#x6863;&#x76F8;&#x5173;&#x5EA6;&#x53EF;&#x80FD;&#x4E0D;&#x9AD8;&#xFF0C;&#x7136;&#x800C;&#x6211;&#x4EEC;&#x7684;&#x76EE;&#x7684;&#x662F;&#x5B66;&#x4E60; vocabulary pattern&#x3002; &#x5E94;&#x7528; relevance feedback algorithm &#x9009;&#x53D6; term &#x548C; term weight &#x7EC4;&#x6210;&#x65B0;&#x7684; query &#x6765;&#x68C0;&#x7D22;&#x6587;&#x6863; Okapi BM25&#x8FC7;&#x7A0B;&#xFF1A; &#x7528;&#x539F;&#x59CB; query &#x68C0;&#x7D22;&#x6587;&#x6863; &#x53D6;&#x524D; N &#x7BC7;&#x6587;&#x6863;&#x7684; term &#x4F5C;&#x4E3A; potential expansion terms &#x4E3A;&#x6BCF;&#x4E2A; potential expansion term &#x8BA1;&#x7B97;&#x5206;&#x6570; &#x7528;&#x524D; m &#x4E2A; term &#x521B;&#x5EFA;&#x65B0;&#x7684; $query_{learned}$ &#x7528;&#x65B0;&#x7684; query &#x68C0;&#x7D22;&#x6587;&#x6863; Inference networks (Indri)&#x8FC7;&#x7A0B;&#xFF1A; &#x7528;&#x539F;&#x59CB; query &#x68C0;&#x7D22;&#x6587;&#x6863; &#x53D6;&#x524D; N &#x7BC7;&#x6587;&#x6863;&#x7684; term &#x4F5C;&#x4E3A; potential expansion terms &#x4E3A;&#x6BCF;&#x4E2A; potential expansion term &#x8BA1;&#x7B97;&#x5206;&#x6570; &#x7528;&#x524D; m &#x4E2A; term &#x521B;&#x5EFA;&#x65B0;&#x7684; $Q_{learned}$ &#x5408;&#x5E76; $Q_{original}$ &#x548C; $Q_{learned}$ &#x521B;&#x5EFA; $Q_{expanded}$ &#x7528;&#x65B0;&#x7684; query &#x68C0;&#x7D22;&#x6587;&#x6863; &#x5BF9;&#x6BCF;&#x4E2A; expansion term&#xFF0C;&#x8BA1;&#x7B97; p(t|I) &#x5E76;&#x6CA1;&#x6709;&#x5BF9; frequent terms in corpus &#x505A;&#x51FA;&#x60E9;&#x7F5A;&#xFF0C;&#x6240;&#x4EE5;&#x52A0;&#x4E0A;&#x4E00;&#x4E2A;&#x7C7B;&#x4F3C; idf &#x5BF9; weight &#x6700;&#x540E;&#x7684; expanded query &#x662F;$$Q_{expanded} &#xFF1D; \\#wand(wQ_{original}, (1-w)Q_{learned})$$ &#x9700;&#x8981;&#x7684;&#x53C2;&#x6570;: fbdocs: number of judged documents fbterms: number of terms to add to the query, indri&#x2019;s default is 10 $\\mu$: smoothing weight to use for new terms, indri&#x2019;s default is 0 $w$: weight of the original query, indri&#x2019;s default is 0.5 How many terms is enough&#x6807;&#x51C6;&#x7B54;&#x6848;&#x6765;&#x4E86;: It depends! &#x56E0; query &#x800C;&#x5F02;&#x3002; Corpus&#x5176;&#x5B9E; initial query &#x548C; final query &#x53EF;&#x4EE5;&#x5728;&#x4E0D;&#x540C;&#x7684;&#x8BED;&#x6599;&#x4E0A;&#x8DD1;&#xFF0C;&#x6BD4;&#x5982;&#x8BF4; initial query &#x5728; wikipedia &#x4E0A;&#x8DD1;&#xFF0C;&#x4EA7;&#x751F;&#x9AD8;&#x8D28;&#x91CF;&#x7684; expansion term&#xFF0C;&#x7136;&#x540E;&#x7528;&#x6269;&#x5145;&#x7684; query &#x5728; web &#x4E0A;&#x8DD1;&#xFF0C;&#x8FD9;&#x80FD;&#x591F;&#x663E;&#x8457;&#x63D0;&#x9AD8; MAP &#x548C; P@10&#x3002; &#x76F4;&#x63A5;&#x4E0A;&#x4EE3;&#x7801;&#xFF1A;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778/** * @param score_list * @return * @throws IOException */private static String expandQuery(ScoreList score_list) throws IOException { double fbMu = Double.parseDouble(parameters.get(&quot;fbMu&quot;)); int fbDocs = Integer.parseInt(parameters.get(&quot;fbDocs&quot;)); int fbTerms = Integer.parseInt(parameters.get(&quot;fbTerms&quot;)); int docNum = Math.min(fbDocs, score_list.size()); Map&lt;String, ArrayList&lt;Integer&gt;&gt; invertedList = new HashMap(); // map&lt;term, score&gt; Map&lt;String, Double&gt; termScore = new HashMap(); // get expanded term for (int i = 0; i &lt; docNum; i++) { int doc_id = score_list.getDocid(i); TermVector vec = new TermVector(doc_id, &quot;body&quot;); // termVecMap.put(doc_id, vec); double docScore = score_list.getDocidScore(i); double docLen = Idx.getFieldLength(&quot;body&quot;, doc_id); // for each term for (int j = 1; j &lt; vec.stemsLength(); j++) { String term = vec.stemString(j); // ignore any candidate expansion term that contains a period // (&apos;.&apos;) or a comma (&apos;,&apos;) if (term.contains(&quot;.&quot;) || term.contains(&quot;,&quot;)) { continue; } // update inverted list for current term if (invertedList.containsKey(term)) { ArrayList&lt;Integer&gt; cur_inverted_list = invertedList.get(term); cur_inverted_list.add(doc_id); invertedList.put(term, cur_inverted_list); } else { ArrayList&lt;Integer&gt; cur_inverted_list = new ArrayList(); cur_inverted_list.add(doc_id); invertedList.put(term, cur_inverted_list); } // score potential expansion term for current doc long tf = vec.stemFreq(j); long ctf = vec.totalStemFreq(j); double mle = ctf / (double) Idx.getSumOfFieldLengths(&quot;body&quot;); double Ptd = (tf + fbMu * mle) / (docLen + fbMu); double idf = Math.log(1 / mle); double cur_doc_score = Ptd * docScore * idf; if (termScore.containsKey(term)) { termScore.put(term, termScore.get(term) + cur_doc_score); } else { termScore.put(term, cur_doc_score); } } } // get top k terms PriorityQueue&lt;Map.Entry&lt;String, Double&gt;&gt; termScorePq = new PriorityQueue&lt;Map.Entry&lt;String, Double&gt;&gt;( termScore.size(), new Comparator&lt;Map.Entry&lt;String, Double&gt;&gt;() { @Override public int compare(Map.Entry&lt;String, Double&gt; m1, Map.Entry&lt;String, Double&gt; m2) { return m2.getValue().compareTo(m1.getValue()); } }); termScorePq.addAll(termScore.entrySet()); // get new query String learnedQuery = &quot;#wand ( &quot;; for (int i = 0; i &lt; fbTerms; i++) { String score = String.format(&quot;%.4f&quot;, termScorePq.peek().getValue()); String term = termScorePq.peek().getKey(); learnedQuery = learnedQuery + &quot; &quot; + score + &quot; &quot; + term; termScorePq.poll(); } learnedQuery += &quot; )&quot;; System.out.println(&quot;learnedQuery &quot; + learnedQuery); return learnedQuery;} &#x5904;&#x7406; query file&#x3002;12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485/** * Process the query file. * * @param queryFilePath * @param model * @throws Exception */static void processQueryFile(String queryFilePath, String trecEvalOutputPath, RetrievalModel model) throws Exception { BufferedReader input = null; BufferedWriter output = null; BufferedWriter bw = null; try { String qLine = null; input = new BufferedReader(new FileReader(queryFilePath)); output = new BufferedWriter(new FileWriter(trecEvalOutputPath)); bw = new BufferedWriter(new FileWriter(parameters.get(&quot;fbExpansionQueryFile&quot;))); // Each pass of the loop processes one query. while ((qLine = input.readLine()) != null) { int d = qLine.indexOf(&apos;:&apos;); if (d &lt; 0) { throw new IllegalArgumentException(&quot;Syntax error: Missing &apos;:&apos; in query line.&quot;); } printMemoryUsage(false); String qid = qLine.substring(0, d); String query = qLine.substring(d + 1); System.out.println(&quot;Query &quot; + qLine); ScoreList r = null; String defaultOp = model.defaultQrySopName(); query = defaultOp + &quot;(&quot; + query + &quot;)&quot;; // if not expand query if (!(parameters.containsKey(&quot;fb&quot;) &amp;&amp; parameters.get(&quot;fb&quot;).equals(&quot;true&quot;))) { r = processQuery(query, model); } else { // if expand query // check parameters if (!(parameters.containsKey(&quot;fbTerms&quot;) &amp;&amp; parameters.containsKey(&quot;fbMu&quot;) &amp;&amp; parameters.containsKey(&quot;fbOrigWeight&quot;) &amp;&amp; parameters.containsKey(&quot;fbExpansionQueryFile&quot;))) { throw new IllegalArgumentException(&quot;Required parameters were missing from the parameter file.&quot;); } // check if there&apos;s ranking file if (!parameters.containsKey(&quot;fbInitialRankingFile&quot;)) { r = processQuery(query, model); r.sort(); } else { Map&lt;Integer, ScoreList&gt; score_list_map = readRankingFile( parameters.get(&quot;fbInitialRankingFile&quot;)); if (!score_list_map.containsKey(Integer.parseInt(qid))) { throw new Exception(&quot;No query &quot; + qid + &quot; in ranking file!&quot;); } r = score_list_map.get(Integer.parseInt(qid)); }// r.sort(); String expandedQuery = expandQuery(r); printExpandedQuery(bw, qid, expandedQuery); double fbOrigWeight = Double.parseDouble(parameters.get(&quot;fbOrigWeight&quot;)); String newQuery = &quot;#wand (&quot; + String.valueOf(fbOrigWeight) + &quot; &quot; + query + &quot; &quot; + String.valueOf(1 - fbOrigWeight) + &quot; &quot; + expandedQuery + &quot; )&quot;; // System.out.println(&quot; new Query &quot; + newQuery); r = processQuery(newQuery, model); } if (r != null) { printResults(qid, r, output); } } } catch (IOException ex) { ex.printStackTrace(); } finally { input.close(); output.close(); bw.close(); }} &#x5982;&#x679C;&#x6709; initial ranking file&#x3002;123456789101112131415161718192021222324252627282930313233/** * * @param fbInitialRankingFile * @return */private static Map&lt;Integer, ScoreList&gt; readRankingFile(String fbInitialRankingFile) { // System.out.println(&quot;filename &quot;+fbInitialRankingFile); Map&lt;Integer, ScoreList&gt; scoreList_map = new HashMap&lt;&gt;(); try (BufferedReader br = new BufferedReader(new FileReader(fbInitialRankingFile))) { String str; int last_qry = -1; ScoreList score_list = new ScoreList(); while ((str = br.readLine()) != null) { String[] data = str.split(&quot; &quot;); int cur_qry = Integer.parseInt(data[0].trim()); if (last_qry == -1) { last_qry = cur_qry; } if (cur_qry != last_qry) { scoreList_map.put(last_qry, score_list); last_qry = cur_qry; score_list = new ScoreList(); } score_list.add(Idx.getInternalDocid(data[2].trim()), Double.parseDouble(data[4].trim())); } // add the last query and scorelist scoreList_map.put(last_qry, score_list); } catch (Exception e) { // TODO Auto-generated catch block e.printStackTrace(); } return scoreList_map;} Effectiveness Query expansion improves MAP by about 20% on average But, you may really annoy 1/3 of your users. &#x6240;&#x4EE5;&#x901A;&#x5E38;&#x6765;&#x8BF4;&#xFF0C;query expansion &#x4F1A;&#x7528;&#x5728; recall &#x5F88;&#x91CD;&#x8981;&#x7684;&#x573A;&#x666F;&#xFF0C;&#x6216;&#x8005; average performance &#x5F88;&#x91CD;&#x8981;&#x7684;&#x573A;&#x666F;&#xFF0C;&#x6BD4;&#x5982; legal retrieval, TREC, research paper &#x7B49;&#x3002;","tags":"nlp search-engines"},{"title":"Hexo local search 错误解决","url":"/2016/10/07/Hexo local search错误解决/","text":"swiftype &#x9002;&#x7528;&#x671F;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x6708;&#xFF0C;&#x4E0D;&#x8981;&#x8DDF;&#x6211;&#x8BF4;&#x662F;&#x9AD8;&#x7EA7;&#x7528;&#x6237;&#x4E00;&#x4E2A;&#x6708;&#xFF0C;&#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x6708;&#x4E4B;&#x540E;&#x641C;&#x7D22;&#x5C31;&#x4E0D;&#x80FD;&#x7528;&#x4E86;&#xFF01;&#xFF01;&#xFF01;&#x8F6C;&#x800C;&#x56DE;&#x5230; local search&#xFF0C;&#x5C31;&#x51FA;&#x73B0;&#x4E86;&#x4E4B;&#x524D;&#x6CA1;&#x6709;&#x51FA;&#x73B0;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x597D;&#x4E45;&#x624D;&#x6574;&#x51FA;&#x4E86;&#x529E;&#x6CD5;&#xFF0C;&#x5FC5;&#x987B;&#x8BB0;&#x5F55;&#x4E00;&#x4E0B;&#x3002; &#x57FA;&#x672C;&#x914D;&#x7F6E;&#x5E38;&#x7528;&#x7684;&#x662F; local search&#x3002; &#x5B89;&#x88C5; hexo-generator-search&#xFF0C;&#x5728;&#x7AD9;&#x70B9;&#x7684;&#x6839;&#x76EE;&#x5F55;&#x4E0B;&#x6267;&#x884C;&#x4EE5;&#x4E0B;&#x547D;&#x4EE4;&#xFF1A; $ npm install hexo-generator-search --save &#x7F16;&#x8F91; &#x7AD9;&#x70B9;&#x914D;&#x7F6E;&#x6587;&#x4EF6;&#xFF0C;&#x65B0;&#x589E;&#x4EE5;&#x4E0B;&#x5185;&#x5BB9;&#x5230;&#x4EFB;&#x610F;&#x4F4D;&#x7F6E;&#xFF1A; search: path: search.xml field: post &#x95EE;&#x9898;1: ERROR Process failed: layout/.DS_Storehexo g &#x8FD0;&#x884C;&#x51FA;&#x73B0;12ERROR Process failed: layout/.DS_StoreTypeError: Cannot read property &apos;compile&apos; of undefined &#x53EF;&#x80FD;&#x4E0D;&#x5F71;&#x54CD;&#x5927;&#x5C40;&#xFF0C;&#x4F46;&#x8FD8;&#x662F;&#x4F1A;&#x5F88;&#x4E0D;&#x723D;&#xFF0C;&#x89E3;&#x51B3;&#x529E;&#x6CD5;&#x4E0D;&#x662F;&#x7B80;&#x5355;&#x7C97;&#x66B4;&#x7684;&#x628A; .DS_Store &#x5220;&#x6389;(command+delete)&#xFF0C;&#x8FD9;&#x6837;&#x662F;&#x6CA1;&#x7528;&#x7684;&#xFF0C;&#x8981;&#x5728;&#x547D;&#x4EE4;&#x884C;&#x91CC; rm -rf &#x5220;&#x3002;&#x67E5;&#x770B;&#x9690;&#x85CF;&#x6587;&#x4EF6;&#x7684;&#x547D;&#x4EE4;&#x662F; ls -al&#x3002; &#x95EE;&#x9898;2: xmlParseEntityRef: no name&#x5728;&#x7F51;&#x7AD9;&#x540E;&#x8F93;&#x5165;/search.xml&#x67E5;&#x770B;&#x9875;&#x9762;&#xFF0C;&#x51FA;&#x73B0; &#x201C;error on line 7 at column 81: xmlParseEntityRef: no name&#x201D; &#x9519;&#x8BEF;&#x3002;&#x539F;&#x56E0;&#xFF1A;&#x6807;&#x9898;&#x4E2D;&#x7684; &amp; &#x4F1A;&#x548C; HTML tags &#x51B2;&#x7A81;&#xFF01;&#x89E3;&#x51B3;&#xFF1A;&#x628A; &amp; &#x6362;&#x6389;&#x554A;&#x6362;&#x6389;&#xFF01;","tags":"hexo"},{"title":"Search Engines笔记 - Information Needs","url":"/2016/10/02/Search Engines笔记 - Information Needs/","text":"&#x600E;&#x6837;&#x4EA7;&#x751F;&#x66F4;&#x597D;&#x7684; query &#x6765;&#x5F97;&#x5230;&#x66F4;&#x591A;&#x7684;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF1F;&#x4ECE;&#x7528;&#x6237;&#x89D2;&#x5EA6;&#x770B;&#xFF0C;&#x7528;&#x6237;&#x4E00;&#x5F00;&#x59CB;&#x4F1A;&#x7528; short query &#x6765;&#x8FDB;&#x884C;&#x68C0;&#x7D22;&#xFF0C;&#x5728;&#x770B;&#x5230;&#x7ED3;&#x679C;&#x6587;&#x6863;&#x540E;&#x901A;&#x8FC7;&#x589E;&#x52A0;&#x6216;&#x51CF;&#x5C11; term &#x4EE5;&#x53CA;&#x8C03;&#x6574; term weight &#x7684;&#x65B9;&#x5F0F;&#x8FDB;&#x4E00;&#x6B65;&#x4F18;&#x5316; query&#x3002;&#x800C;&#x5BF9;&#x7CFB;&#x7EDF;&#x800C;&#x8A00;&#xFF0C;&#x80FD;&#x81EA;&#x52A8;&#x4EA7;&#x751F; better query &#x7684;&#x65B9;&#x5F0F;&#x83AB;&#x8FC7;&#x4E8E; machine learning&#x3002; Query type Informational(39%)&#x50CF; iphones &#x4E4B;&#x7C7B;&#xFF0C;&#x7528;&#x6237;&#x60F3;&#x4E86;&#x89E3;&#x4E00;&#x4E2A; topic&#x3002; Transactional(36%)&#x50CF; shopping, buying airline tickets &#x4E4B;&#x7C7B;&#xFF0C;&#x7528;&#x6237;&#x60F3;&#x627E;&#x4E2A;&#x7F51;&#x7AD9;&#x8FDB;&#x884C;&#x4EA4;&#x6613;&#xFF0C;&#x4F46;&#x662F;&#x5E76;&#x6CA1;&#x6709; specific destination. Navigational(25%)&#x50CF; Greyhound bus, Dell &#x4E4B;&#x7C7B;&#xFF0C;&#x7528;&#x6237;&#x6709;&#x4E00;&#x4E2A; specific location/destination in mind Query language&#x4E00;&#x6761;&#x6807;&#x51C6;&#x7684; query &#x5206;&#x4E3A; 3 &#x90E8;&#x5206;&#x3002; Source of information: fields, XML elements, metadata Query operators: AND, OR, NEAR/n, &#x2026; Rules: how those operators can be used &#x6BCF;&#x4E00;&#x6761; query &#x90FD;&#x4F1A;&#x88AB; transform &#x6210; structured query&#x3002; Query operators1234567Boolean operators: AND, OR, AND-NOTDistance operators: NEAR/n, WINDOW/n, SENTENCE/n, PARAGRAPH/nExtent(field) restrictions: BODY, TITLE, INLINK, ABSTRACT, AUTHOR,...Comparison operators: &lt;, &gt;, BEFORE, AFTER, ...Score operators: WEIGHT, AVERAGE, MAX, MIN, ...SynonymFilter-And-Rank(q1,q2): q1 forms a set, use q2 ranks it Query Processingquery processing&#xFF0C;&#x8FD9;&#x91CC;&#x6700;&#x5E38;&#x7528;&#x7684;&#x662F; #NEAR &#x548C; #SYNONYM&#xFF0C;&#x5BF9;&#x4E8E;&#x4E00;&#x4E9B;&#x8BCD;&#x7EC4;(phrases)&#xFF0C;&#x641C;&#x7D22;&#x5F15;&#x64CE;&#x4F1A;&#x7528; #NEAR &#x8FDB;&#x884C;&#x89C4;&#x8303;&#x5316;&#xFF0C;&#x5982;123die-cast -&gt; #NEAR/1 (die cast)virginia beach -&gt; #NEAR/1 (virginia beach)barack obama -&gt; #NEAR/3 (barack obama) &#x5BF9;&#x4E8E;&#x4E00;&#x4E9B;&#x7F29;&#x5199;&#xFF0C;&#x6216;&#x8005;&#x62FC;&#x5199;&#x9519;&#x8BEF;&#xFF0C;&#x4E00;&#x822C;&#x4F1A;&#x7528; #SYNONYM &#x8FDB;&#x884C;&#x8C03;&#x6574;&#xFF0C;&#x5982;123456# Abbreviationsvirginia -&gt; (virginia,va)# Spelliing correction:brittany -&gt; britneybrittany -&gt; #SYNONYM (brittany,britney) Query ReformulationSequential-Dependency Models(SDM) &#x4F1A;&#x5C06; unstructured queries &#x8F6C;&#x5316;&#x79F0; structured queries&#xFF0C;&#x4E00;&#x4E2A; sequential dependency model query &#x5206;&#x4E3A;&#x4E09;&#x90E8;&#x5206;: Bag of words matches&#x4F5C;&#x7528;&#x662F;&#x4FDD;&#x8BC1;&#x80FD;&#x627E;&#x5230;&#x4E1C;&#x897F;&#x3002;eg. #AND(q1,q2&#x2026;qn) N-gram matches (ordered,phrase-like)&#x63D0;&#x4F9B;&#x4E86; extra weight &#x7ED9;&#x5339;&#x914D;&#x7684; n-gram&#x3002;eg. #NEAR/1(q1,q2) #NEAR/1(q2,q3)&#x2026;#NEAR/1(qn-1,qn) Short window matches (unordered, sentence-like)&#x63D0;&#x4F9B;&#x4E86; extra weight &#x7ED9;&#x5339;&#x914D;&#x7684;&#x7A97;&#x53E3;&#x3002;eg. #WINDOW/8(q1,q2)&#x2026;#WINDOW/8(qn-1,qn) Eg.12345678User Query: sherwood regional libraryA sequential dependency model query: #wand( 0.5 #and( sherwood regional library ) 0.25 #and( #near/1( regional library ) #near/1( sherwood regional ) ) 0.25 #and( #window/8( regional library ) #window/8( sherwood regional ) ) ) Perl &#x4EE3;&#x7801;:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112#!/usr/bin/perl## Perl subroutine that generates Indri dependence model queries.## Written by: Don Metzler (metzler@cs.umass.edu)# Last update: 06/27/2005## Feel free to distribute, edit, modify, or mangle this code as you see fit. If you make any interesting# changes please email me a copy.## For more technical details, see:## * Metzler, D. and Croft, W.B., &quot;A Markov Random Field Model for Term Dependencies,&quot; ACM SIGIR 2005.## * Metzler, D., Strohman T., Turtle H., and Croft, W.B., &quot;Indri at TREC 2004: Terabyte Track&quot;, TREC 2004.## * http://ciir.cs.umass.edu/~metzler/## MODIFICATIONS# - Updated by Jamie Callan: 02/11/2015# Modified to support a less cryptic Indri-like query language.# #combine --&gt; #and, #1 --&gt; #near/1, #weight --&gt; #wand, and #uw --&gt; #window/## NOTES## * this script assumes that the query string has already been parsed and that all characters# that are not compatible with Indri&apos;s query language have been removed.## * it is not advisable to do a &apos;full dependence&apos; variant on long strings because of the exponential# number of terms that will result. it is suggested that the &apos;sequential dependence&apos; variant be# used for long strings. either that, or split up long strings into smaller cohesive chunks and# apply the &apos;full dependence&apos; variant to each of the chunks.## * the unordered features use a window size of 4 * number of terms within the phrase. this has been# found to work well across a wide range of collections and topics. however, this may need to be# modified on an individual basis.## example usageprint formulate_query( &quot;sherwood regional library&quot;, &quot;sd&quot;, 0.02, 0.49, 0.49 ) . &quot;\\n\\n&quot;;#print formulate_query( &quot;sherwood regional library&quot;, &quot;fd&quot;, 0.8, 0.1, 0.1 ) . &quot;\\n\\n&quot;;## formulates a query based on query text and feature weights## arguments:# * query - string containing original query terms separated by spaces# * type - string. &quot;sd&quot; for sequential dependence or &quot;fd&quot; for full dependence variant. defaults to &quot;fd&quot;.# * wt[0] - weight assigned to term features# * wt[1] - weight assigned to ordered (#near) features# * wt[2] - weight assigned to unordered (#window) features#sub formulate_query { my ( $q, $type, @wt ) = @_; # trim whitespace from beginning and end of query string $q =~ s/^\\s+|\\s+$//g; my $queryT = &quot;#and( &quot;; my $queryO = &quot;#and(&quot;; my $queryU = &quot;#and(&quot;; # generate term features (f_T) my @terms = split(/\\s+/ , $q); my $term; foreach $term ( @terms ) { $queryT .= &quot;$term &quot;; } my $num_terms = @terms; # skip the rest of the processing if we&apos;re just # interested in term features or if we only have 1 term if( ( $wt[1] == 0.0 &amp;&amp; $wt[2] == 0.0 ) || $num_terms == 1 ) { return $queryT . &quot;)&quot;; } # generate the rest of the features my $start = 1; if( $type eq &quot;sd&quot; ) { $start = 3; } for( my $i = $start ; $i &lt; 2 ** $num_terms ; $i++ ) { my $bin = unpack(&quot;B*&quot;, pack(&quot;N&quot;, $i)); # create binary representation of i my $num_extracted = 0; my $extracted_terms = &quot;&quot;; # get query terms corresponding to &apos;on&apos; bits for( my $j = 0 ; $j &lt; $num_terms ; $j++ ) { my $bit = substr($bin, $j - $num_terms, 1); if( $bit eq &quot;1&quot; ) { $extracted_terms .= &quot;$terms[$j] &quot;; $num_extracted++; } } if( $num_extracted == 1 ) { next; } # skip these, since we already took care of the term features... if( $bin =~ /^0+11+[^1]*$/ ) { # words in contiguous phrase, ordered features (f_O) $queryO .= &quot; #near/1( $extracted_terms) &quot;; } $queryU .= &quot; #window/&quot; . 4*$num_extracted . &quot;( $extracted_terms) &quot;; # every subset of terms, unordered features (f_U) if( $type eq &quot;sd&quot; ) { $i *= 2; $i--; } } my $query = &quot;#wand(&quot;; if( $wt[0] != 0.0 &amp;&amp; $queryT ne &quot;#and( &quot; ) { $query .= &quot; $wt[0] $queryT)&quot;; } if( $wt[1] != 0.0 &amp;&amp; $queryO ne &quot;#and(&quot; ) { $query .= &quot; $wt[1] $queryO)&quot;; } if( $wt[2] != 0.0 &amp;&amp; $queryU ne &quot;#and(&quot; ) { $query .= &quot; $wt[2] $queryU)&quot;; } if( $query eq &quot;#wand(&quot; ) { return &quot;&quot;; } # return &quot;&quot; if we couldn&apos;t formulate anything return $query . &quot; )&quot;;} &#x53E6;&#x5916;&#x5E38;&#x7528;&#x7684;&#x6A21;&#x578B;&#x8FD8;&#x6709; query expansion","tags":"nlp search-engines"},{"title":"AES 和 RSA 笔记","url":"/2016/10/02/AES 和 RSA笔记/","text":"&#x7B80;&#x5355;&#x56DE;&#x987E; AES &#x548C; RSA &#x7B97;&#x6CD5;&#x3002; Symmetric key &#x5BF9;&#x79F0;&#x52A0;&#x5BC6;&#x52A0;&#x5BC6;&#x548C;&#x89E3;&#x5BC6;&#x5747;&#x91C7;&#x7528;&#x540C;&#x4E00;&#x628A;&#x5BC6;&#x94A5;&#xFF0C;&#x800C;&#x4E14;&#x901A;&#x4FE1;&#x53CC;&#x65B9;&#x90FD;&#x5FC5;&#x987B;&#x83B7;&#x5F97;&#x8FD9;&#x628A;&#x5BC6;&#x94A5;&#x3002;&#x4E00;&#x65B9;&#x901A;&#x8FC7;&#x5BC6;&#x94A5;&#x5C06;&#x4FE1;&#x606F;&#x52A0;&#x5BC6;&#x540E;&#xFF0C;&#x628A;&#x5BC6;&#x6587;&#x4F20;&#x7ED9;&#x53E6;&#x4E00;&#x65B9;&#xFF0C;&#x53E6;&#x4E00;&#x65B9;&#x901A;&#x8FC7;&#x8FD9;&#x4E2A;&#x76F8;&#x540C;&#x7684;&#x5BC6;&#x94A5;&#x5C06;&#x5BC6;&#x6587;&#x89E3;&#x5BC6;&#xFF0C;&#x8F6C;&#x6362;&#x6210;&#x53EF;&#x4EE5;&#x7406;&#x89E3;&#x7684;&#x660E;&#x6587;&#x3002;&#x5E38;&#x89C1;&#x7684;&#x5BF9;&#x79F0;&#x52A0;&#x5BC6;&#x7B97;&#x6CD5;&#x6709;DES&#x3001;3DES&#x3001;AES&#x3001;Blowfish&#x3001;IDEA&#x3001;RC5&#x3001;RC6&#x3001;AES&#x3002; DES&#xFF08;Data Encryption Standard&#xFF09;&#xFF1A;&#x6570;&#x636E;&#x52A0;&#x5BC6;&#x6807;&#x51C6;&#xFF0C;&#x901F;&#x5EA6;&#x8F83;&#x5FEB;&#xFF0C;&#x9002;&#x7528;&#x4E8E;&#x52A0;&#x5BC6;&#x5927;&#x91CF;&#x6570;&#x636E;&#x7684;&#x573A;&#x5408;&#x3002; 3DES&#xFF08;Triple DES&#xFF09;&#xFF1A;&#x662F;&#x57FA;&#x4E8E;DES&#xFF0C;&#x5BF9;&#x4E00;&#x5757;&#x6570;&#x636E;&#x7528;&#x4E09;&#x4E2A;&#x4E0D;&#x540C;&#x7684;&#x5BC6;&#x94A5;&#x8FDB;&#x884C;&#x4E09;&#x6B21;&#x52A0;&#x5BC6;&#xFF0C;&#x5F3A;&#x5EA6;&#x66F4;&#x9AD8;&#x3002; AES&#xFF08;Advanced Encryption Standard&#xFF09;&#xFF1A;&#x9AD8;&#x7EA7;&#x52A0;&#x5BC6;&#x6807;&#x51C6;&#xFF0C;&#x662F;&#x4E0B;&#x4E00;&#x4EE3;&#x7684;&#x52A0;&#x5BC6;&#x7B97;&#x6CD5;&#x6807;&#x51C6;&#xFF0C;&#x901F;&#x5EA6;&#x5FEB;&#xFF0C;&#x5B89;&#x5168;&#x7EA7;&#x522B;&#x9AD8;&#xFF1B; &#x5BF9;&#x79F0;&#x52A0;&#x5BC6;&#x7684;&#x6700;&#x5927;&#x4F18;&#x70B9;&#x662F;&#x901F;&#x5EA6;&#x5FEB;&#xFF0C;&#x7136;&#x800C;&#x5B83;&#x4E5F;&#x5B58;&#x5728;&#x7740;&#x8BF8;&#x591A;&#x95EE;&#x9898;&#x3002; &#x5B58;&#x5728;&#x95EE;&#x9898; &#x8981;&#x6C42;&#x63D0;&#x4F9B;&#x4E00;&#x6761;&#x5B89;&#x5168;&#x7684;&#x6E20;&#x9053;&#x4F7F;&#x901A;&#x8BAF;&#x53CC;&#x65B9;&#x5728;&#x9996;&#x6B21;&#x901A;&#x8BAF;&#x65F6;&#x534F;&#x5546;&#x4E00;&#x4E2A;&#x5171;&#x540C;&#x7684;&#x5BC6;&#x94A5;&#x3002;&#x76F4;&#x63A5;&#x7684;&#x9762;&#x5BF9;&#x9762;&#x534F;&#x5546;&#x53EF;&#x80FD;&#x662F;&#x4E0D;&#x73B0;&#x5B9E;&#x800C;&#x4E14;&#x96BE;&#x4E8E;&#x5B9E;&#x65BD;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x53CC;&#x65B9;&#x53EF;&#x80FD;&#x9700;&#x8981;&#x501F;&#x52A9;&#x4E8E;&#x90AE;&#x4EF6;&#x548C;&#x7535;&#x8BDD;&#x7B49;&#x5176;&#x5B83;&#x76F8;&#x5BF9;&#x4E0D;&#x591F;&#x5B89;&#x5168;&#x7684;&#x624B;&#x6BB5;&#x6765;&#x8FDB;&#x884C;&#x534F;&#x5546;&#xFF1B; &#x5BC6;&#x94A5;&#x7684;&#x6570;&#x76EE;&#x96BE;&#x4E8E;&#x7BA1;&#x7406;&#x3002;&#x56E0;&#x4E3A;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E00;&#x4E2A;&#x5408;&#x4F5C;&#x8005;&#x90FD;&#x9700;&#x8981;&#x4F7F;&#x7528;&#x4E0D;&#x540C;&#x7684;&#x5BC6;&#x94A5;&#xFF0C;&#x5F88;&#x96BE;&#x9002;&#x5E94;&#x5F00;&#x653E;&#x793E;&#x4F1A;&#x4E2D;&#x5927;&#x91CF;&#x7684;&#x4FE1;&#x606F;&#x4EA4;&#x6D41;&#xFF1B;&#x800C;&#x5982;&#x679C;&#x5927;&#x5BB6;&#x90FD;&#x4F7F;&#x7528;&#x540C;&#x4E00;&#x4E2A;&#x5BC6;&#x94A5;&#xFF0C;&#x53EA;&#x8981;&#x5176;&#x4E2D;&#x4E00;&#x4E2A;&#x4EBA;&#x5BC6;&#x94A5;&#x88AB;&#x76D7;&#x7A83;&#x4E86;&#xFF0C;&#x90A3;&#x4E48;&#x6574;&#x4F53;&#x52A0;&#x5BC6;&#x7684;&#x4FE1;&#x606F;&#x5C06;&#x90FD;&#x88AB;&#x7834;&#x89E3;&#x4E86;&#x3002; &#x5BF9;&#x79F0;&#x52A0;&#x5BC6;&#x7B97;&#x6CD5;&#x4E00;&#x822C;&#x4E0D;&#x80FD;&#x63D0;&#x4F9B;&#x4FE1;&#x606F;&#x5B8C;&#x6574;&#x6027;&#x7684;&#x9274;&#x522B;&#x3002;&#x5B83;&#x65E0;&#x6CD5;&#x9A8C;&#x8BC1;&#x53D1;&#x9001;&#x8005;&#x548C;&#x63A5;&#x53D7;&#x8005;&#x7684;&#x8EAB;&#x4EFD;&#xFF1B;-&#x5BF9;&#x79F0;&#x5BC6;&#x94A5;&#x7684;&#x7BA1;&#x7406;&#x548C;&#x5206;&#x53D1;&#x5DE5;&#x4F5C;&#x662F;&#x4E00;&#x4EF6;&#x5177;&#x6709;&#x6F5C;&#x5728;&#x5371;&#x9669;&#x7684;&#x548C;&#x70E6;&#x7410;&#x7684;&#x8FC7;&#x7A0B;&#x3002;&#x5BF9;&#x79F0;&#x52A0;&#x5BC6;&#x662F;&#x57FA;&#x4E8E;&#x5171;&#x540C;&#x4FDD;&#x5B88;&#x79D8;&#x5BC6;&#x6765;&#x5B9E;&#x73B0;&#x7684;&#xFF0C;&#x91C7;&#x7528;&#x5BF9;&#x79F0;&#x52A0;&#x5BC6;&#x6280;&#x672F;&#x7684;&#x8D38;&#x6613;&#x53CC;&#x65B9;&#x5FC5;&#x987B;&#x4FDD;&#x8BC1;&#x91C7;&#x7528;&#x7684;&#x662F;&#x76F8;&#x540C;&#x7684;&#x5BC6;&#x94A5;&#xFF0C;&#x4FDD;&#x8BC1;&#x5F7C;&#x6B64;&#x5BC6;&#x94A5;&#x7684;&#x4EA4;&#x6362;&#x662F;&#x5B89;&#x5168;&#x53EF;&#x9760;&#x7684;&#xFF0C;&#x540C;&#x65F6;&#x8FD8;&#x8981;&#x8BBE;&#x5B9A;&#x9632;&#x6B62;&#x5BC6;&#x94A5;&#x6CC4;&#x5BC6;&#x548C;&#x66F4;&#x6539;&#x5BC6;&#x94A5;&#x7684;&#x7A0B;&#x5E8F;&#x3002; AESAES&#x52A0;&#x5BC6;&#x8FC7;&#x7A0B;&#x6D89;&#x53CA;&#x5230;4&#x79CD;&#x64CD;&#x4F5C;&#xFF1A;&#x5B57;&#x8282;&#x66FF;&#x4EE3;&#xFF08;SubBytes&#xFF09;&#x3001;&#x884C;&#x79FB;&#x4F4D;&#xFF08;ShiftRows&#xFF09;&#x3001;&#x5217;&#x6DF7;&#x6DC6;&#xFF08;MixColumns&#xFF09;&#x548C;&#x8F6E;&#x5BC6;&#x94A5;&#x52A0;&#xFF08;AddRoundKey&#xFF09;&#x3002;&#x4ECE;&#x4E0A;&#x56FE;&#x53EF;&#x4EE5;&#x770B;&#x51FA;&#xFF1A;1&#xFF09;&#x89E3;&#x5BC6;&#x8FC7;&#x7A0B;&#x7684;&#x6BCF;&#x4E00;&#x6B65;&#x5206;&#x522B;&#x5BF9;&#x5E94;&#x64CD;&#x4F5C;&#x7684;&#x9006;&#x64CD;&#x4F5C;&#xFF0C;2&#xFF09;&#x52A0;&#x89E3;&#x5BC6;&#x6240;&#x6709;&#x64CD;&#x4F5C;&#x7684;&#x987A;&#x5E8F;&#x6B63;&#x597D;&#x662F;&#x76F8;&#x53CD;&#x7684;&#x3002;&#x6B63;&#x662F;&#x7531;&#x4E8E;&#x8FD9;&#x4E24;&#x70B9;&#x4FDD;&#x8BC1;&#x4E86;&#x89E3;&#x5BC6;&#x80FD;&#x591F;&#x6B63;&#x786E;&#x5730;&#x6062;&#x590D;&#x660E;&#x6587;&#x3002;&#x52A0;&#x89E3;&#x5BC6;&#x4E2D;&#x6BCF;&#x8F6E;&#x7684;&#x5BC6;&#x94A5;&#x5206;&#x522B;&#x7531;&#x521D;&#x59CB;&#x5BC6;&#x94A5;&#x6269;&#x5C55;&#x5F97;&#x5230;&#x3002;&#x7B97;&#x6CD5;&#x4E2D;16&#x5B57;&#x8282;&#x7684;&#x660E;&#x6587;&#x3001;&#x5BC6;&#x6587;&#x548C;&#x8F6E;&#x5BC6;&#x94A5;&#x90FD;&#x4EE5;&#x4E00;&#x4E2A;4x4&#x7684;&#x77E9;&#x9635;&#x8868;&#x793A;&#x3002; &#x7B97;&#x6CD5;&#x8BE6;&#x89E3; Asymmetric key &#x975E;&#x5BF9;&#x79F0;&#x52A0;&#x5BC6;&#x4F7F;&#x7528;&#x975E;&#x5BF9;&#x79F0;&#x52A0;&#x5BC6;&#x7B97;&#x6CD5;&#xFF0C;&#x9996;&#x5148;&#x8981;&#x6709;&#x4E00;&#x5BF9;key&#xFF0C;&#x4E00;&#x4E2A;&#x662F;private key&#x79C1;&#x94A5;&#xFF0C;&#x53E6;&#x4E00;&#x4E2A;&#x662F;public key&#x516C;&#x94A5;&#xFF0C;&#x5982;&#x679C;&#x7528;&#x516C;&#x5F00;&#x5BC6;&#x94A5;&#x5BF9;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x52A0;&#x5BC6;&#xFF0C;&#x53EA;&#x6709;&#x7528;&#x5BF9;&#x5E94;&#x7684;&#x79C1;&#x6709;&#x5BC6;&#x94A5;&#x624D;&#x80FD;&#x89E3;&#x5BC6;&#xFF1B;&#x5982;&#x679C;&#x7528;&#x79C1;&#x6709;&#x5BC6;&#x94A5;&#x5BF9;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x52A0;&#x5BC6;&#xFF0C;&#x90A3;&#x4E48;&#x53EA;&#x6709;&#x7528;&#x5BF9;&#x5E94;&#x7684;&#x516C;&#x5F00;&#x5BC6;&#x94A5;&#x624D;&#x80FD;&#x89E3;&#x5BC6;&#x3002;&#x56E0;&#x4E3A;&#x52A0;&#x5BC6;&#x548C;&#x89E3;&#x5BC6;&#x4F7F;&#x7528;&#x7684;&#x662F;&#x4E24;&#x4E2A;&#x4E0D;&#x540C;&#x7684;&#x5BC6;&#x94A5;&#xFF0C;&#x6240;&#x4EE5;&#x8FD9;&#x79CD;&#x7B97;&#x6CD5;&#x53EB;&#x4F5C;&#x975E;&#x5BF9;&#x79F0;&#x52A0;&#x5BC6;&#x7B97;&#x6CD5;&#x3002;&#x53EF;&#x4EE5;&#x628A;&#x4F60;&#x7684;public key&#x5206;&#x53D1;&#x7ED9;&#x60F3;&#x7ED9;&#x4F60;&#x4F20;&#x5BC6;&#x6587;&#x7684;&#x7528;&#x6237;&#xFF0C;&#x7136;&#x540E;&#x7528;&#x6237;&#x4F7F;&#x7528;&#x8BE5;public key&#x52A0;&#x5BC6;&#x8FC7;&#x7684;&#x5BC6;&#x6587;&#xFF0C;&#x53EA;&#x6709;&#x4F7F;&#x7528;&#x4F60;&#x7684; private key &#x624D;&#x80FD;&#x89E3;&#x5BC6;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x53EA;&#x8981;&#x4F60;&#x81EA;&#x5DF1;&#x4FDD;&#x5B58;&#x597D;&#x4F60;&#x7684; private key&#xFF0C;&#x5C31;&#x80FD;&#x786E;&#x4FDD;&#xFF0C;&#x522B;&#x4EBA;&#x60F3;&#x7ED9;&#x4F60;&#x53D1;&#x7684;&#x5BC6;&#x6587;&#x4E0D;&#x88AB;&#x7834;&#x89E3;&#xFF0C;&#x6240;&#x4EE5;&#x4F60;&#x4E0D;&#x7528;&#x62C5;&#x5FC3;&#x522B;&#x4EBA;&#x7684;&#x5BC6;&#x94A5;&#x88AB;&#x76D7;&#x3002; &#x8FC7;&#x7A0B;&#xFF1A; &#x4E59;&#x65B9;&#x751F;&#x6210;&#x4E24;&#x628A;&#x5BC6;&#x94A5;&#xFF08;&#x516C;&#x94A5;&#x548C;&#x79C1;&#x94A5;&#xFF09;&#x3002;&#x516C;&#x94A5;&#x662F;&#x516C;&#x5F00;&#x7684;&#xFF0C;&#x4EFB;&#x4F55;&#x4EBA;&#x90FD;&#x53EF;&#x4EE5;&#x83B7;&#x5F97;&#xFF0C;&#x79C1;&#x94A5;&#x5219;&#x662F;&#x4FDD;&#x5BC6;&#x7684;&#x3002; &#x7532;&#x65B9;&#x83B7;&#x53D6;&#x4E59;&#x65B9;&#x7684;&#x516C;&#x94A5;&#xFF0C;&#x7136;&#x540E;&#x7528;&#x5B83;&#x5BF9;&#x4FE1;&#x606F;&#x52A0;&#x5BC6;&#x3002; &#x4E59;&#x65B9;&#x5F97;&#x5230;&#x52A0;&#x5BC6;&#x540E;&#x7684;&#x4FE1;&#x606F;&#xFF0C;&#x7528;&#x79C1;&#x94A5;&#x89E3;&#x5BC6;&#x3002; &#x975E;&#x5BF9;&#x79F0;&#x52A0;&#x5BC6;&#x7B97;&#x6CD5;&#x7684;&#x4FDD;&#x5BC6;&#x6027;&#x6BD4;&#x8F83;&#x597D;&#xFF0C;&#x5B83;&#x6D88;&#x9664;&#x4E86;&#x6700;&#x7EC8;&#x7528;&#x6237;&#x4EA4;&#x6362;&#x5BC6;&#x94A5;&#x7684;&#x9700;&#x8981;&#xFF0C;&#x4F46;&#x52A0;&#x5BC6;&#x548C;&#x89E3;&#x5BC6;&#x82B1;&#x8D39;&#x65F6;&#x95F4;&#x957F;&#x3001;&#x901F;&#x5EA6;&#x6162;&#xFF0C;&#x5728;&#x67D0;&#x4E9B;&#x6781;&#x7AEF;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x751A;&#x81F3;&#x80FD;&#x6BD4;&#x975E;&#x5BF9;&#x79F0;&#x52A0;&#x5BC6;&#x6162;&#x4E0A;1000&#x500D;&#x3002;&#x56E0;&#x6B64;&#x5B83;&#x4E0D;&#x9002;&#x5408;&#x4E8E;&#x5BF9;&#x6587;&#x4EF6;&#x52A0;&#x5BC6;&#x800C;&#x53EA;&#x9002;&#x7528;&#x4E8E;&#x5BF9;&#x5C11;&#x91CF;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x52A0;&#x5BC6;&#x3002; &#x4E3E;&#x4E2A;&#x4F8B;&#x5B50;&#xFF0C;&#x5982;&#x679C;&#x4F01;&#x4E1A;&#x4E2D;&#x6709;n&#x4E2A;&#x7528;&#x6237;&#xFF0C;&#x4F01;&#x4E1A;&#x9700;&#x8981;&#x751F;&#x6210;n&#x5BF9;&#x5BC6;&#x94A5;&#xFF0C;&#x5E76;&#x5206;&#x53D1;n&#x4E2A;&#x516C;&#x94A5;&#x3002;&#x7531;&#x4E8E;&#x516C;&#x94A5;&#x662F;&#x53EF;&#x4EE5;&#x516C;&#x5F00;&#x7684;&#xFF0C;&#x7528;&#x6237;&#x53EA;&#x8981;&#x4FDD;&#x7BA1;&#x597D;&#x81EA;&#x5DF1;&#x7684;&#x79C1;&#x94A5;&#x5373;&#x53EF;(&#x4F01;&#x4E1A;&#x5206;&#x53D1;&#x540E;&#x4E00;&#x822C;&#x4FDD;&#x5B58;&#x7684;&#x662F;&#x79C1;&#x94A5;,&#x7528;&#x6237;&#x62FF;&#x7684;&#x662F;&#x516C;&#x94A5;)&#xFF0C;&#x56E0;&#x6B64;&#x52A0;&#x5BC6;&#x5BC6;&#x94A5;&#x7684;&#x5206;&#x53D1;&#x5C06;&#x53D8;&#x5F97;&#x5341;&#x5206;&#x7B80;&#x5355;&#x3002;&#x540C;&#x65F6;&#xFF0C;&#x7531;&#x4E8E;&#x6BCF;&#x4E2A;&#x7528;&#x6237;&#x7684;&#x79C1;&#x94A5;&#x662F;&#x552F;&#x4E00;&#x7684;&#xFF0C;&#x5176;&#x4ED6;&#x7528;&#x6237;&#x9664;&#x4E86;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x4FE1;&#x606F;&#x53D1;&#x9001;&#x8005;&#x7684;&#x516C;&#x94A5;&#x6765;&#x9A8C;&#x8BC1;&#x4FE1;&#x606F;&#x7684;&#x6765;&#x6E90;&#x662F;&#x5426;&#x771F;&#x5B9E;&#xFF0C;&#x8FD8;&#x53EF;&#x4EE5;&#x786E;&#x4FDD;&#x53D1;&#x9001;&#x8005;&#x65E0;&#x6CD5;&#x5426;&#x8BA4;&#x66FE;&#x53D1;&#x9001;&#x8FC7;&#x8BE5;&#x4FE1;&#x606F;&#x3002; &#x8FD9;&#x79CD;&#x52A0;&#x5BC6;&#x7B97;&#x6CD5;&#x5E94;&#x7528;&#x975E;&#x5E38;&#x5E7F;&#x6CDB;&#xFF0C;SSH, HTTPS, TLS&#xFF0C;&#x7535;&#x5B50;&#x8BC1;&#x4E66;&#xFF0C;&#x7535;&#x5B50;&#x7B7E;&#x540D;&#xFF0C;&#x7535;&#x5B50;&#x8EAB;&#x4EFD;&#x8BC1;&#x7B49;&#x7B49;&#x3002; RSA1977&#x5E74;&#xFF0C;&#x4E09;&#x4F4D;&#x6570;&#x5B66;&#x5BB6;Rivest&#x3001;Shamir &#x548C; Adleman &#x8BBE;&#x8BA1;&#x4E86;&#x4E00;&#x79CD;&#x7B97;&#x6CD5;&#xFF0C;&#x53EF;&#x4EE5;&#x5B9E;&#x73B0;&#x975E;&#x5BF9;&#x79F0;&#x52A0;&#x5BC6;&#x3002;&#x8FD9;&#x79CD;&#x7B97;&#x6CD5;&#x7528;&#x4ED6;&#x4EEC;&#x4E09;&#x4E2A;&#x4EBA;&#x7684;&#x540D;&#x5B57;&#x547D;&#x540D;&#xFF0C;&#x53EB;&#x505A;RSA&#x7B97;&#x6CD5;&#x3002;&#x4ECE;&#x90A3;&#x65F6;&#x76F4;&#x5230;&#x73B0;&#x5728;&#xFF0C;RSA&#x7B97;&#x6CD5;&#x4E00;&#x76F4;&#x662F;&#x6700;&#x5E7F;&#x4E3A;&#x4F7F;&#x7528;&#x7684;&#x201D;&#x975E;&#x5BF9;&#x79F0;&#x52A0;&#x5BC6;&#x7B97;&#x6CD5;&#x201D;&#x3002;&#x6BEB;&#x4E0D;&#x5938;&#x5F20;&#x5730;&#x8BF4;&#xFF0C;&#x53EA;&#x8981;&#x6709;&#x8BA1;&#x7B97;&#x673A;&#x7F51;&#x7EDC;&#x7684;&#x5730;&#x65B9;&#xFF0C;&#x5C31;&#x6709;RSA&#x7B97;&#x6CD5;&#x3002;&#x8FD9;&#x79CD;&#x7B97;&#x6CD5;&#x975E;&#x5E38;&#x53EF;&#x9760;&#xFF0C;&#x5BC6;&#x94A5;&#x8D8A;&#x957F;&#xFF0C;&#x5B83;&#x5C31;&#x8D8A;&#x96BE;&#x7834;&#x89E3;&#x3002;&#x6839;&#x636E;&#x5DF2;&#x7ECF;&#x62AB;&#x9732;&#x7684;&#x6587;&#x732E;&#xFF0C;&#x76EE;&#x524D;&#x88AB;&#x7834;&#x89E3;&#x7684;&#x6700;&#x957F;RSA&#x5BC6;&#x94A5;&#x662F;768&#x4E2A;&#x4E8C;&#x8FDB;&#x5236;&#x4F4D;&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x957F;&#x5EA6;&#x8D85;&#x8FC7;768&#x4F4D;&#x7684;&#x5BC6;&#x94A5;&#xFF0C;&#x8FD8;&#x65E0;&#x6CD5;&#x7834;&#x89E3;&#xFF08;&#x81F3;&#x5C11;&#x6CA1;&#x4EBA;&#x516C;&#x5F00;&#x5BA3;&#x5E03;&#xFF09;&#x3002;&#x56E0;&#x6B64;&#x53EF;&#x4EE5;&#x8BA4;&#x4E3A;&#xFF0C;1024&#x4F4D;&#x7684;RSA&#x5BC6;&#x94A5;&#x57FA;&#x672C;&#x5B89;&#x5168;&#xFF0C;2048&#x4F4D;&#x7684;&#x5BC6;&#x94A5;&#x6781;&#x5176;&#x5B89;&#x5168;&#x3002;&#x4EE3;&#x7801;&#x7406;&#x89E3; RSA &#x7B97;&#x6CD5;&#x3002;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778/* Demonstrate RSA in Java using BigIntegers */import java.math.BigInteger;import java.util.Random;/** * RSA Algorithm from CLR * * 1. Select at random two large prime numbers p and q. * 2. Compute n by the equation n = p * q. * 3. Compute phi(n)= (p - 1) * ( q - 1) * 4. Select a small odd integer e that is relatively prime to phi(n). * 5. Compute d as the multiplicative inverse of e modulo phi(n). A theorem in * number theory asserts that d exists and is uniquely defined. * 6. Publish the pair P = (e,n) as the RSA public key. * 7. Keep secret the pair S = (d,n) as the RSA secret key. * 8. To encrypt a message M compute C = M^e (mod n) * 9. To decrypt a message C compute M = C^d (mod n) */public class RSAExample { public static void main(String[] args) { // Each public and private key consists of an exponent and a modulus BigInteger n; // n is the modulus for both the private and public keys BigInteger e; // e is the exponent of the public key BigInteger d; // d is the exponent of the private key Random rnd = new Random(); // Step 1: Generate two large random primes. // We use 400 bits here, but best practice for security is 2048 bits. // Change 400 to 2048, recompile, and run the program again and you will // notice it takes much longer to do the math with that many bits. BigInteger p = new BigInteger(400,100,rnd); BigInteger q = new BigInteger(400,100,rnd); // Step 2: Compute n by the equation n = p * q. n = p.multiply(q); // Step 3: Compute phi(n) = (p-1) * (q-1) BigInteger phi = (p.subtract(BigInteger.ONE)).multiply(q.subtract(BigInteger.ONE)); // Step 4: Select a small odd integer e that is relatively prime to phi(n). // By convention the prime 65537 is used as the public exponent. e = new BigInteger (&quot;65537&quot;); // Step 5: Compute d as the multiplicative inverse of e modulo phi(n). d = e.modInverse(phi); System.out.println(&quot; e = &quot; + e); // Step 6: (e,n) is the RSA public key System.out.println(&quot; d = &quot; + d); // Step 7: (d,n) is the RSA private key System.out.println(&quot; n = &quot; + n); // Modulus for both keys // Encode a simple message. For example the letter &apos;A&apos; in UTF-8 is 65 BigInteger m = new BigInteger(&quot;65&quot;); // Step 8: To encrypt a message M compute C = M^e (mod n) BigInteger c = m.modPow(e, n); // Step 9: To decrypt a message C compute M = C^d (mod n) BigInteger clear = c.modPow(d, n); System.out.println(&quot;Cypher text = &quot; + c); System.out.println(&quot;Clear text = &quot; + clear); // Should be &quot;65&quot; // Step 8 (reprise) Encrypt the string &apos;Hello&apos; String s = &quot;RSA is way cool.&quot;; m = new BigInteger(s.getBytes()); // m is the original clear text c = m.modPow(e, n); // Do the encryption, c is the cypher text // Step 9 (reprise) Decrypt... clear = c.modPow(d, n); // Decrypt, clear is the resulting clear text String clearStr = new String(clear.toByteArray()); // Decode to a string System.out.println(&quot;Cypher text = &quot; + c); System.out.println(&quot;Clear text = &quot; + clearStr); }} &#x6570;&#x5B66;&#x539F;&#x7406;&#x53C2;&#x89C1;RSA&#x7B97;&#x6CD5;&#x539F;&#x7406;&#xFF08;&#x4E00;&#xFF09;RSA&#x7B97;&#x6CD5;&#x539F;&#x7406;&#xFF08;&#x4E8C;&#xFF09;","tags":"加密"},{"title":"SHA-1和MD5 笔记","url":"/2016/10/01/SHA-1和MD5笔记/","text":"&#x7B80;&#x5355;&#x56DE;&#x987E; SHA-1 &#x548C; MD5 &#x7B97;&#x6CD5;&#x3002; Hash &#x51FD;&#x6570;Hash &#x51FD;&#x6570; H(M)&#xFF0C; &#x4F5C;&#x7528;&#x4E8E;&#x4E00;&#x4EFB;&#x610F;&#x957F;&#x5EA6;&#x7684;&#x6D88;&#x606F; M&#xFF0C;&#x8FD4;&#x56DE;&#x4E00;&#x56FA;&#x5B9A;&#x957F;&#x5EA6;&#x7684;&#x6563;&#x5217;&#x503C;h:h=H(M)&#xFF0C;&#x4F5C;&#x4E3A;&#x521D;&#x59CB;&#x6D88;&#x606F;&#x7684;&#x72EC;&#x4E00;&#x65E0;&#x4E8C;&#x7684;&#x201C;&#x6570;&#x5B57;&#x6307;&#x7EB9;&#x201D;&#xFF0C;&#x4ECE;&#x800C;&#x80FD;&#x4FDD;&#x8BC1;&#x6570;&#x636E;&#x7684;&#x5B8C;&#x6574;&#x6027;&#x548C;&#x60DF;&#x4E00;&#x6027;&#x3002;Hash&#x7B97;&#x6CD5;&#x662F;&#x73B0;&#x4EE3;&#x5BC6;&#x7801;&#x4F53;&#x7CFB;&#x4E2D;&#x7684;&#x4E00;&#x4E2A;&#x91CD;&#x8981;&#x7EC4;&#x6210;&#x90E8;&#x5206;&#x3002;&#x7531;&#x4E8E;&#x975E;&#x5BF9;&#x79F0;&#x7B97;&#x6CD5;&#x7684;&#x8FD0;&#x7B97;&#x901F;&#x5EA6;&#x8F83;&#x6162;&#xFF0C;&#x6240;&#x4EE5;&#x5728;&#x6570;&#x5B57;&#x7B7E;&#x540D;&#x534F;&#x8BAE;&#x4E2D;&#xFF0C;Hash &#x51FD;&#x6570;&#x626E;&#x6F14;&#x4E86;&#x4E00;&#x4E2A;&#x91CD;&#x8981;&#x7684;&#x89D2;&#x8272;&#x3002;&#x5BF9; Hash &#x503C;&#xFF0C;&#x53C8;&#x79F0;&#x201D;&#x6570;&#x5B57;&#x6458;&#x8981;&#x201D;&#x8FDB;&#x884C;&#x6570;&#x5B57;&#x7B7E;&#x540D;&#xFF0C;&#x5728;&#x7EDF;&#x8BA1;&#x4E0A;&#x53EF;&#x4EE5;&#x8BA4;&#x4E3A;&#x4E0E;&#x5BF9;&#x6587;&#x4EF6;&#x672C;&#x8EAB;&#x8FDB;&#x884C;&#x6570;&#x5B57;&#x7B7E;&#x540D;&#x662F;&#x7B49;&#x6548;&#x7684;&#x3002;hash&#x51FD;&#x6570;&#x5E76;&#x4E0D;&#x5B8C;&#x5168;&#x53EF;&#x9760;&#xFF0C;&#x4E0D;&#x540C;&#x6587;&#x4EF6;&#x4EA7;&#x751F;&#x76F8;&#x540C; MD5 &#x548C; SHA1 &#x7684;&#x51E0;&#x7387;&#x8FD8;&#x662F;&#x6709;&#x7684;&#xFF0C;&#x53EA;&#x662F;&#x4E0D;&#x9AD8;&#x3002; &#x901A;&#x8FC7; Hash &#x7B97;&#x6CD5;&#x53EF;&#x5B9E;&#x73B0;&#x6570;&#x5B57;&#x7B7E;&#x540D;&#x5B9E;&#x73B0;&#xFF0C;&#x6570;&#x5B57;&#x7B7E;&#x540D;&#x7684;&#x539F;&#x7406;&#x662F;&#x5C06;&#x8981;&#x4F20;&#x9001;&#x7684;&#x660E;&#x6587;&#x901A;&#x8FC7;&#x4E00;&#x79CD;&#x51FD;&#x6570;&#x8FD0;&#x7B97;&#xFF08;Hash&#xFF09;&#x8F6C;&#x6362;&#x6210;&#x62A5;&#x6587;&#x6458;&#x8981;&#xFF08;&#x4E0D;&#x540C;&#x7684;&#x660E;&#x6587;&#x5BF9;&#x5E94;&#x4E0D;&#x540C;&#x7684;&#x62A5;&#x6587;&#x6458;&#x8981;&#xFF09;&#xFF0C;&#x62A5;&#x6587;&#x6458;&#x8981;&#x52A0;&#x5BC6;&#x540E;&#x4E0E;&#x660E;&#x6587;&#x4E00;&#x8D77;&#x4F20;&#x9001;&#x7ED9;&#x63A5;&#x53D7;&#x65B9;&#xFF0C;&#x63A5;&#x53D7;&#x65B9;&#x5C06;&#x63A5;&#x53D7;&#x7684;&#x660E;&#x6587;&#x4EA7;&#x751F;&#x65B0;&#x7684;&#x62A5;&#x6587;&#x6458;&#x8981;&#x4E0E;&#x53D1;&#x9001;&#x65B9;&#x7684;&#x53D1;&#x6765;&#x62A5;&#x6587;&#x6458;&#x8981;&#x89E3;&#x5BC6;&#x6BD4;&#x8F83;&#xFF0C;&#x6BD4;&#x8F83;&#x7ED3;&#x679C;&#x4E00;&#x81F4;&#x8868;&#x793A;&#x660E;&#x6587;&#x672A;&#x88AB;&#x6539;&#x52A8;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x4E00;&#x81F4;&#x8868;&#x793A;&#x660E;&#x6587;&#x5DF2;&#x88AB;&#x7BE1;&#x6539;&#x3002; Hash &#x51FD;&#x6570;&#x7684;&#x5B89;&#x5168;&#x6027;&#x5728;&#x4E8E;&#x5176;&#x4EA7;&#x751F;&#x6563;&#x5217;&#x503C;&#x7684;&#x64CD;&#x4F5C;&#x8FC7;&#x7A0B;&#x5177;&#x6709;&#x8F83;&#x5F3A;&#x7684;&#x5355;&#x5411;&#x6027;&#xFF08;&#x4E0D;&#x53EF;&#x9006;&#x6027;&#xFF09;&#x3002;&#x5982;&#x679C;&#x5728;&#x8F93;&#x5165;&#x5E8F;&#x5217;&#x4E2D;&#x5D4C;&#x5165;&#x5BC6;&#x7801;&#xFF0C;&#x90A3;&#x4E48;&#x4EFB;&#x4F55;&#x4EBA;&#x5728;&#x4E0D;&#x77E5;&#x9053;&#x5BC6;&#x7801;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x90FD;&#x4E0D;&#x80FD;&#x4EA7;&#x751F;&#x6B63;&#x786E;&#x7684;&#x6563;&#x5217;&#x503C;&#xFF0C;&#x4ECE;&#x800C;&#x4FDD;&#x8BC1;&#x4E86;&#x5176;&#x5B89;&#x5168;&#x6027;&#x3002;&#x8FD9;&#x7B26;&#x5408;&#x4E86;&#x6570;&#x5B57;&#x7B7E;&#x540D;&#x7684;&#x7279;&#x6027;&#xFF0C;&#x6570;&#x5B57;&#x7B7E;&#x540D;&#x53EA;&#x80FD;&#x7528;&#x975E;&#x5BF9;&#x79F0;&#x7B97;&#x6CD5;&#x3002; Hash &#x51FD;&#x6570;&#x4E00;&#x822C;&#x7528;&#x4E8E;&#x4EA7;&#x751F;&#x6D88;&#x606F;&#x6458;&#x8981;&#xFF0C;&#x5BC6;&#x94A5;&#x52A0;&#x5BC6;&#x7B49;&#xFF0C;&#x5E38;&#x89C1;&#x7684;&#x6709;&#xFF1A; MD5&#xFF08;Message Digest Algorithm 5&#xFF09;&#xFF1A;&#x662F;RSA&#x6570;&#x636E;&#x5B89;&#x5168;&#x516C;&#x53F8;&#x5F00;&#x53D1;&#x7684;&#x4E00;&#x79CD;&#x5355;&#x5411;&#x6563;&#x5217;&#x7B97;&#x6CD5;&#x3002; SHA&#xFF08;Secure Hash Algorithm&#xFF09;&#xFF1A;&#x53EF;&#x4EE5;&#x5BF9;&#x4EFB;&#x610F;&#x957F;&#x5EA6;&#x7684;&#x6570;&#x636E;&#x8FD0;&#x7B97;&#x751F;&#x6210;&#x4E00;&#x4E2A;160&#x4F4D;&#x7684;&#x6570;&#x503C;&#xFF1B; MD5MD5&#xFF0C;&#x4E00;&#x79CD;&#x4E0D;&#x53EF;&#x9006;&#x7684;&#x52A0;&#x5BC6;&#x7B97;&#x6CD5;&#xFF0C;&#x76EE;&#x524D;&#x662F;&#x6700;&#x7262;&#x9760;&#x7684;&#x52A0;&#x5BC6;&#x7B97;&#x6CD5;&#x4E4B;&#x4E00;&#xFF0C;&#x5C1A;&#x6CA1;&#x6709;&#x80FD;&#x591F;&#x9006;&#x8FD0;&#x7B97;&#x7684;&#x7A0B;&#x5E8F;&#x88AB;&#x5F00;&#x53D1;&#x51FA;&#x6765;&#xFF0C;&#x5B83;&#x5BF9;&#x5E94;&#x4EFB;&#x4F55;&#x5B57;&#x7B26;&#x4E32;&#x90FD;&#x53EF;&#x4EE5;&#x52A0;&#x5BC6;&#x6210;&#x4E00;&#x6BB5;&#x552F;&#x4E00;&#x7684;&#x56FA;&#x5B9A;&#x957F;&#x5EA6;&#x7684;&#x4EE3;&#x7801;&#x3002; MD5(RFC1321)&#x662F;Rivest&#x4E8E;1991&#x5E74;&#x5BF9;MD4&#x7684;&#x6539;&#x8FDB;&#x7248;&#x672C;&#x3002;&#x5B83;&#x5BF9;&#x8F93;&#x5165;&#x4ECD;&#x4EE5; 512 &#x4F4D;&#x5206;&#x7EC4;&#xFF0C;&#x5176;&#x8F93;&#x51FA;&#x662F; 4&#x4E2A;32&#x4F4D;&#x5B57;&#x7684;&#x7EA7;&#x8054;&#xFF0C;&#x4E0E; MD4 &#x76F8;&#x540C;&#x3002;MD5 &#x6BD4; MD4 &#x6765;&#x5F97;&#x590D;&#x6742;&#xFF0C;&#x5E76;&#x4E14;&#x901F;&#x5EA6;&#x8F83;&#x4E4B;&#x8981;&#x6162;&#x4E00;&#x70B9;&#xFF0C;&#x4F46;&#x66F4;&#x5B89;&#x5168;&#xFF0C;&#x5728;&#x6297;&#x5206;&#x6790;&#x548C;&#x6297;&#x5DEE;&#x5206;&#x65B9;&#x9762;&#x8868;&#x73B0;&#x66F4;&#x597D;&#x3002; MD5 &#x901A;&#x5E38;&#x7528;&#x4E8E;&#x5BC6;&#x7801;&#x7684;&#x52A0;&#x5BC6;&#x5B58;&#x50A8;&#xFF0C;&#x6570;&#x5B57;&#x7B7E;&#x540D;&#xFF0C;&#x6587;&#x4EF6;&#x5B8C;&#x6574;&#x6027;&#x9A8C;&#x8BC1;&#x7B49;&#x3002; Java &#x4EE3;&#x7801;12345678910111213141516import java.security.NoSuchAlgorithmException;public static String computeHash(String input) { byte[] hashed_str = null; String res = null; try { java.security.MessageDigest alg = java.security.MessageDigest.getInstance(&quot;md5&quot;); alg.update(input.getBytes()); hashed_str = alg.digest(); res = javax.xml.bind.DatatypeConverter.printHexBinary(hashed_str); } catch (NoSuchAlgorithmException ex) { System.out.println(&quot;Exception: &quot; + ex); } finally { return res; }} SHA-1SHA-1&#xFF0C;&#x4E00;&#x79CD;&#x4E0D;&#x53EF;&#x9006;&#x7684;&#x3001;&#x9632;&#x51B2;&#x7A81;&#xFF0C;&#x5E76;&#x5177;&#x6709;&#x826F;&#x597D;&#x7684;&#x96EA;&#x5D29;&#x6548;&#x5E94;&#x7684;&#x52A0;&#x5BC6;&#x7B97;&#x6CD5;&#x3002;&#x8BE5;&#x7B97;&#x6CD5;&#x8F93;&#x5165;&#x62A5;&#x6587;&#x7684;&#x6700;&#x5927;&#x957F;&#x5EA6;&#x4E0D;&#x8D85;&#x8FC7; 2^64 &#x4F4D;&#xFF0C;&#x4EA7;&#x751F;&#x7684;&#x8F93;&#x51FA;&#x662F;&#x4E00;&#x4E2A; 160 &#x4F4D;&#x7684;&#x62A5;&#x6587;&#x6458;&#x8981;&#x3002;&#x8F93;&#x5165;&#x662F;&#x6309; 512 &#x4F4D;&#xFF08;64 &#x5B57;&#x8282;&#xFF09;&#x7684;&#x5206;&#x7EC4;&#x8FDB;&#x884C;&#x5904;&#x7406;&#x7684;&#xFF0C;&#x5E76;&#x4EA7;&#x751F;&#xFF12;&#xFF10;&#x4E2A;&#x5B57;&#x8282;&#x7684;&#x88AB;&#x79F0;&#x4E3A;&#x4FE1;&#x606F;&#x8BA4;&#x8BC1;&#x4EE3;&#x7801;&#x6216;&#x4FE1;&#x606F;&#x6458;&#x8981;&#x7684;&#x8F93;&#x51FA;&#x3002; Java &#x4EE3;&#x7801;12345678910111213141516import java.security.NoSuchAlgorithmException;public static String computeHash(String input) { byte[] hashed_str = null; String res = null; try { java.security.MessageDigest alg = java.security.MessageDigest.getInstance(&quot;SHA-1&quot;); alg.update(input.getBytes()); hashed_str = alg.digest(); res = javax.xml.bind.DatatypeConverter.printHexBinary(hashed_str); } catch (NoSuchAlgorithmException ex) { System.out.println(&quot;Exception: &quot; + ex); } finally { return res; }} SHA-1&#x4E0E;MD5&#x7684;&#x6BD4;&#x8F83;&#x56E0;&#x4E3A;&#x4E8C;&#x8005;&#x5747;&#x7531;MD4&#x5BFC;&#x51FA;&#xFF0C;SHA-1&#x548C;MD5&#x5F7C;&#x6B64;&#x5F88;&#x76F8;&#x4F3C;&#x3002;&#x76F8;&#x5E94;&#x7684;&#xFF0C;&#x4ED6;&#x4EEC;&#x7684;&#x5F3A;&#x5EA6;&#x548C;&#x5176;&#x4ED6;&#x7279;&#x6027;&#x4E5F;&#x662F;&#x76F8;&#x4F3C;&#xFF0C;&#x4F46;&#x8FD8;&#x6709;&#x4EE5;&#x4E0B;&#x51E0;&#x70B9;&#x4E0D;&#x540C;&#xFF1A; &#x5F3A;&#x884C;&#x653B;&#x51FB;&#x7684;&#x5B89;&#x5168;&#x6027;&#xFF1A;SHA-1&#x4E0E;MD5 &#x7684;&#x6700;&#x5927;&#x533A;&#x522B;&#x5728;&#x4E8E;&#x5176;&#x6458;&#x8981;&#x6BD4;MD5 &#x6458;&#x8981;&#x957F; 32 &#x6BD4;&#x7279;&#x3002;&#x5BF9;&#x4E8E;&#x5F3A;&#x884C;&#x653B;&#x51FB;&#xFF0C;&#x4EA7;&#x751F;&#x4EFB;&#x4F55;&#x4E00;&#x4E2A;&#x62A5;&#x6587;&#x4F7F;&#x4E4B;&#x6458;&#x8981;&#x7B49;&#x4E8E;&#x7ED9;&#x5B9A;&#x62A5;&#x6587;&#x6458;&#x8981;&#x7684;&#x96BE;&#x5EA6;&#xFF1A;MD5 &#x662F;2128 &#x6570;&#x91CF;&#x7EA7;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;SHA-1 &#x662F;2160 &#x6570;&#x91CF;&#x7EA7;&#x7684;&#x64CD;&#x4F5C;&#x3002;&#x56E0;&#x800C;,SHA-1 &#x5BF9;&#x5F3A;&#x884C;&#x653B;&#x51FB;&#x7684;&#x5F3A;&#x5EA6;&#x66F4;&#x5927;&#x3002; &#x901F;&#x5EA6;&#xFF1A;&#x7531;&#x4E8E;SHA-1 &#x7684;&#x5FAA;&#x73AF;&#x6B65;&#x9AA4;&#x6BD4;MD5 &#x591A;&#xFF08;80:64&#xFF09;&#x4E14;&#x8981;&#x5904;&#x7406;&#x7684;&#x7F13;&#x5B58;&#x5927;&#xFF08;160 &#x6BD4;&#x7279;:128 &#x6BD4;&#x7279;&#xFF09;&#xFF0C;SHA-1 &#x7684;&#x8FD0;&#x884C;&#x901F;&#x5EA6;&#x6BD4;MD5 &#x6162;&#x3002; &#x6700;&#x540E;&#x4E0A;&#x5F20;&#x6BD4;&#x8F83;&#x56FE;&#x3002; &#x5E94;&#x7528;&#xFF0D;&#x7F51;&#x7AD9;&#x7528;&#x6237;&#x540D;&#x5BC6;&#x7801;&#x4FDD;&#x5B58;&#x7F51;&#x7AD9;&#x7528;&#x6237;&#x540D;&#x5BC6;&#x7801;&#x7684;&#x4FDD;&#x5B58;&#x65B9;&#x5F0F;&#xFF1A; &#x660E;&#x6587; hash &#x540E;&#x4FDD;&#x5B58;&#xFF0C;&#x5982; md5 MD5+Salt &#x65B9;&#x5F0F;,&#x8FD9;&#x4E2A; salt &#x53EF;&#x4EE5;&#x968F;&#x673A; &#x7F51;&#x7AD9;&#x7528;&#x6237;&#x540D;&#x5BC6;&#x7801;&#x4FDD;&#x5B58;&#x901A;&#x5E38;&#x4F1A;&#x7528;&#x5230; MD5 + Salt&#x3002;salt &#x5C31;&#x662F;&#x670D;&#x52A1;&#x7AEF;&#x5728;&#x63A5;&#x6536;&#x4E86;&#x5BA2;&#x6237;&#x8F93;&#x5165;&#x7684;&#x539F;&#x5B57;&#x7B26;&#x4E32;&#x540E;&#x518D;&#x52A0;&#x4E00;&#x6BB5;&#x81EA;&#x5B9A;&#x4E49;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x7136;&#x540E;&#x5BF9;&#x65B0;&#x4EA7;&#x751F;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x4E00;&#x8D77;&#x8FDB;&#x884C;&#x52A0;&#x5BC6;&#xFF0C;&#x63D0;&#x9AD8;&#x5B89;&#x5168;&#x6027;&#x3002;&#x793A;&#x4F8B;&#x4EE3;&#x7801; &#x53C2;&#x8003;&#x94FE;&#x63A5;&#x6570;&#x5B57;&#x7B7E;&#x540D;&#x7B97;&#x6CD5;MD5&#x548C;SHA-1&#x7684;&#x6BD4;&#x8F83;","tags":"加密 hash"},{"title":"Search Engines笔记 - Best-Match","url":"/2016/09/30/Search Engines笔记 - Best-Match/","text":"Best match&#x6A21;&#x578B;&#x8861;&#x91CF;&#x7684;&#x662F;&#x4E00;&#x7BC7;&#x6587;&#x6863;&#x4E0E; information need &#x7684;&#x5339;&#x914D;&#x7A0B;&#x5EA6;&#xFF0C;&#x4E0E; Exact match&#x6A21;&#x578B;&#xFF08;&#x5339;&#x914D;&#xFF0F;&#x4E0D;&#x5339;&#x914D;&#xFF09;&#x76F8;&#x6BD4;&#x66F4;&#x6CE8;&#x91CD;&#x7528;&#x6237;&#x4F53;&#x9A8C;&#xFF0C;&#x4E0D;&#x7BA1;&#x6709;&#x6CA1;&#x6709;&#x5339;&#x914D; Best match &#x90FD;&#x4F1A;&#x8FD4;&#x56DE;&#x6587;&#x6863;&#x7ED3;&#x679C;&#x3002; &#x672C;&#x7BC7;&#x5206;&#x4E3A;&#x4EE5;&#x4E0B;&#x56DB;&#x90E8;&#x5206;&#x3002; Vector space retrieval model(VSM) Probabilistic retrieval model(BM25) Statistical language model(query likelihood) Inference networks(Indri) VSM&#x5047;&#x8BBE;&#x6587;&#x6863; d &#x5BF9;&#x5E94;&#x7684;&#x5411;&#x91CF;&#x7528; $\\overrightarrow {V}(d)$ &#x8868;&#x793A;&#xFF0C;&#x6BCF;&#x4E2A;&#x7EF4;&#x5EA6;&#x5BF9;&#x5E94;&#x4E00;&#x4E2A; term&#xFF0C;&#x5411;&#x91CF;&#x5206;&#x91CF;&#x4E00;&#x822C;&#x53EF;&#x4EE5;&#x91C7;&#x7528; tf-idf &#x6743;&#x91CD;&#x8BA1;&#x7B97;&#x65B9;&#x5F0F;&#x3002;&#x4E00;&#x7EC4;&#x6587;&#x6863;&#x7684;&#x96C6;&#x5408;&#x770B;&#x4F5C;&#x5411;&#x91CF;&#x7A7A;&#x95F4;&#x7684;&#x591A;&#x4E2A;&#x5411;&#x91CF;&#xFF0C;&#x6BCF;&#x4E2A; term &#x5BF9;&#x5E94;&#x4E00;&#x4E2A;&#x5750;&#x6807;&#x8F74;&#xFF0C;&#x7136;&#x540E;&#x5728;&#x5411;&#x91CF;&#x7A7A;&#x95F4;&#x4E0B;&#x8FDB;&#x884C;&#x76F8;&#x4F3C;&#x5EA6;&#x8BA1;&#x7B97;&#x3002; &#x76F8;&#x4F3C;&#x5EA6;&#x8BA1;&#x7B97;&#x76F8;&#x4F3C;&#x5EA6;&#x7684;&#x8BA1;&#x7B97;&#x65B9;&#x6CD5;&#x3002; Inner product Dice coefficient Jackard coefficient Cosine correlation &#x4F59;&#x5F26;&#x76F8;&#x4F3C;&#x5EA6; (cosine similarity)&#x76F4;&#x63A5;&#x5411;&#x91CF;&#x5DEE;(overlap measures)&#x8861;&#x91CF;&#x76F8;&#x4F3C;&#x5EA6;&#x4F1A;&#x4EA7;&#x751F;&#x4E0B;&#x9762;&#x7684;&#x95EE;&#x9898;&#xFF0C; It doesn&#x2019;t normalize for vector length All terms are treated as equally important &#x53EF;&#x80FD;&#x5BFC;&#x81F4;&#x7684;&#x7ED3;&#x679C;&#x662F;&#xFF0C;&#x4E24;&#x7BC7;&#x5185;&#x5BB9;&#x76F8;&#x4F3C;&#x7684;&#x6587;&#x6863;&#x5411;&#x91CF;&#x7684;&#x5DEE;&#x5411;&#x91CF;&#x53EF;&#x80FD;&#x5F88;&#x5927;&#xFF0C;&#x56E0;&#x4E3A;&#x4E00;&#x7BC7;&#x6587;&#x6863;&#x53EF;&#x80FD;&#x6BD4;&#x53E6;&#x4E00;&#x7BC7;&#x6587;&#x6863;&#x957F;&#x5F88;&#x591A;&#x3002; &#x6700;&#x5E38;&#x7528;&#x7684; similarity metric &#x8FD8;&#x662F; cosine similarity. &#x5173;&#x4E8E; Vector Coefficient &#x6211;&#x4EEC;&#x9700;&#x8981;&#x8003;&#x8651;&#x4EE5;&#x4E0B;&#x4E09;&#x70B9;&#xFF1A; Document term weight: Importance of the term in this document ==&gt; tf -&gt; log(tf+1) Collection term weight: Importance of the term in this collection ==&gt; idf -&gt; $log{N \\over df}+1$ (avoid idf=0) Length normalization: Compensate for varying document length &#x66F4;&#x8FDB;&#x4E00;&#x6B65;&#x7684; cosine-similarity&#xFF0C;Inc.ltc &#x8FD9;&#x4E2A;&#x516C;&#x5F0F;&#x53EF;&#x4EE5;&#x7528;&#x4F5C; #SUM &#x7684;&#x8BA1;&#x7B97;&#xFF0C;&#x4EC5;&#x8BA1;&#x7B97;&#x5305;&#x542B;&#x4E86;&#x67E5;&#x8BE2;&#x8BCD;&#x7684;&#x6587;&#x6863;&#x7684;&#x5206;&#x6570;&#x3002; Length Bias&#x5927;&#x591A;&#x6570;&#x7684; similarity metrics &#x90FD;&#x4F1A;&#x6709;&#x4E00;&#x4E2A; length bias&#xFF0C;&#x5C31;&#x662F;&#x8BF4;&#x77ED;&#x6587;&#x6863;&#x7684;&#x5206;&#x6570;&#x88AB;&#x9AD8;&#x4F30;&#x4E86;&#xFF0C;&#x957F;&#x6587;&#x6863;&#x7684;&#x5206;&#x6570;&#x88AB;&#x4F4E;&#x4F30;&#x4E86;&#xFF0C; &#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x9700;&#x8981; pivote document length normalization&#xFF0C;&#x53EF;&#x4EE5;&#x91C7;&#x7528; Lnu.Ltu metric. Lucene &#x5E94;&#x7528;Lucene &#x7684;&#x68C0;&#x7D22;&#x8FC7;&#x7A0B;&#xFF1A; Use boolean query to form a set of documents Use a vector sapce retrieval algorithm to rank the set Simplified Lucene&#x2019;s tf.idf Ranker &#x4E0E; Inc.ltc &#x7684;&#x4E0D;&#x540C; tf weight &#x7528;&#x4E86; sqrt(tf) &#x800C;&#x4E0D;&#x662F; log(tf)+1&#xFF0C;stronger reward for frequent terms in document idf weight &#x7528;&#x4E86; square &#x800C;&#x4E0D;&#x662F; idf&#xFF0C;stronger penalty for frequent terms across corpus &#x5C0F;&#x7ED3; Key idea: Measure similarity among weighted term vectors Vector Space Retrieval Model &#x6CA1;&#x6709;&#x544A;&#x8BC9;&#x6211;&#x4EEC;&#x600E;&#x4E48; set term weights&#xFF0C;&#x6CA1;&#x6709;&#x544A;&#x8BC9;&#x6211;&#x4EEC;&#x600E;&#x4E48;&#x786E;&#x5B9A; similarity&#xFF0C;&#x4E5F;&#x6CA1;&#x6709;&#x544A;&#x8BC9;&#x6211;&#x4EEC;&#x600E;&#x4E48;&#x652F;&#x6301; query-independent weights&#xFF0C;&#x5B83;&#x7684;&#x4F18;&#x70B9;&#x662F;&#x7075;&#x6D3B;&#xFF0C;&#x7F3A;&#x70B9;&#x4E5F;&#x662F;&#x7075;&#x6D3B;&#xFF0C;&#x6240;&#x6709;&#x7684;&#x4E1C;&#x897F;&#x90FD;&#x8981;&#x6211;&#x4EEC;&#x81EA;&#x5DF1;&#x8BBE;&#x7F6E;&#x3002; Okapi BM25BM25 &#x5341;&#x5206;&#x91CD;&#x89C6; term frequency &#x548C; document length&#xFF0C;&#x8FD9;&#x91CC;&#x7701;&#x7565;&#x4E86;&#x516C;&#x5F0F;&#x63A8;&#x5BFC;&#x8FC7;&#x7A0B;&#xFF0C;&#x76F4;&#x63A5;&#x5206;&#x6790;&#x53C2;&#x6570;&#x3002; k1&#x5982;&#x679C; k1 &#x53D6; 0&#xFF0C;&#x5219;&#x5BF9;&#x5E94; BIM &#x6A21;&#x578B;&#xFF0C;document term frequency &#x5B8C;&#x5168;&#x6CA1;&#x6709;&#x5F71;&#x54CD;&#xFF0C;rare word (idf)&#x548C; repeated query terms(query tf) dominate&#xFF1B;&#x5982;&#x679C; k1 &#x53D6;&#x8F83;&#x5927;&#x503C;&#xFF0C;&#x5BF9;&#x5E94;&#x4F7F;&#x7528;&#x539F;&#x59CB;&#x7684; term frequency&#x3002; bb (0&lt;=b&lt;1) &#x51B3;&#x5B9A;&#x6587;&#x6863;&#x7684;&#x7F29;&#x653E;&#x957F;&#x5EA6;&#xFF1A;b=1 &#x8868;&#x793A;&#x57FA;&#x4E8E;&#x6587;&#x6863;&#x957F;&#x5EA6;&#x5BF9; term frequency &#x8FDB;&#x884C;&#x5B8C;&#x5168;&#x7684;&#x7F29;&#x653E;&#xFF0C;b=0 &#x8868;&#x793A;&#x5F52;&#x4E00;&#x5316;&#x65F6;&#x4E0D;&#x8003;&#x8651;&#x6587;&#x6863;&#x957F;&#x5EA6;&#x56E0;&#x7D20;&#xFF0C;&#x957F;&#x6587;&#x6863;&#x66F4;&#x6709;&#x53EF;&#x80FD;&#x6392;&#x5728;&#x524D;&#x9762;&#x3002; k3&#x5982;&#x679C;&#x67E5;&#x8BE2;&#x5F88;&#x957F;&#xFF0C;&#x5BF9;&#x4E8E; query term &#x4E5F;&#x53EF;&#x4EE5;&#x91C7;&#x7528;&#x7C7B;&#x4F3C;&#x7684;&#x6743;&#x91CD;&#x8BA1;&#x7B97;&#x65B9;&#x6CD5;&#x3002;&#x5BF9;&#x67E5;&#x8BE2;&#x957F;&#x5EA6;&#x6CA1;&#x6709;&#x8FDB;&#x884C;&#x5F52;&#x4E00;&#x5316;&#xFF08;&#x76F8;&#x5F53;&#x4E8E;b=0&#xFF09;&#x3002;k3=0 &#x8868;&#x793A; term frequency in query &#x5E76;&#x6CA1;&#x6709;&#x5F71;&#x54CD;&#xFF0C;(apple apple pie) &#x548C; (apple pie) &#x5B8C;&#x5168;&#x4E00;&#x6837;&#x3002;&#x8FD9;&#x4E00;&#x9879;&#x901A;&#x5E38;&#x662F;&#x7531;&#x7528;&#x6237;&#x786E;&#x5B9A;&#x7684;&#xFF0C;&#x5BF9;&#x5E94;&#x7684; operator &#x662F; $WSUM &#x53C2;&#x6570;&#x4F18;&#x5316;&#x6574;&#x4E2A;&#x516C;&#x5F0F;&#x7684;&#x53C2;&#x6570;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x5728;&#x5355;&#x72EC;&#x7684;&#x5F00;&#x53D1;&#x6D4B;&#x8BD5;&#x96C6;&#x4E0A;&#x641C;&#x7D22;&#x6700;&#x4F18;&#x53C2;&#x6570;&#x6765;&#x6700;&#x5927;&#x5316;&#x68C0;&#x7D22;&#x6027;&#x80FD;&#xFF0C;&#x5982;&#x7F51;&#x683C;&#x641C;&#x7D22;&#x65B9;&#x6CD5;&#xFF08;grid search&#xFF09;&#x3002;&#x73B0;&#x6709;&#x7684;&#x8BD5;&#x9A8C;&#x4E2D;&#xFF0C;&#x53C2;&#x6570;&#x7684;&#x5408;&#x7406;&#x53D6;&#x503C;&#x8303;&#x56F4;&#x662F; k1,k3 &#x53D6; 1.2~2&#xFF0C;b &#x53D6; 0.75&#x3002; &#x9664;&#x4E86;&#x5BF9;&#x7528;&#x6237;&#x67E5;&#x8BE2;&#x63D0;&#x4F9B; term frequency &#x8BA1;&#x7B97;&#x65B9;&#x6CD5;&#x5916;&#xFF0C;&#x5728;&#x76F8;&#x5173;&#x53CD;&#x9988;&#x4E2D;&#x8FD8;&#x53EF;&#x4EE5;&#x8003;&#x8651;&#x67E5;&#x8BE2;&#x6269;&#x5C55;&#xFF0C;&#x5728;&#x5DF2;&#x77E5;&#x7684;&#x76F8;&#x5173;&#x6587;&#x6863;&#x5229;&#x7528;&#x516C;&#x5F0F;&#x5BF9; term &#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;&#x5E76;&#x9009;&#x53D6;&#x6700;&#x9760;&#x524D;&#x7684;&#x591A;&#x4E2A; term &#x6784;&#x6210;&#x65B0;&#x7684;&#x67E5;&#x8BE2;&#xFF0C;&#x518D;&#x8FDB;&#x884C;&#x8BA1;&#x7B97;&#x3002; RSJ weightRSJ weight &#x548C; idf &#x76F8;&#x4F3C;&#xFF0C;&#x90FD; favor rare words in corpus&#xFF0C;&#x56E0;&#x4E3A; rare words &#x80FD;&#x66F4;&#x597D;&#x7684;&#x533A;&#x5206;&#x76F8;&#x5173;&#x6587;&#x6863;&#x4E0E;&#x4E0D;&#x76F8;&#x5173;&#x6587;&#x6863;&#x3002;RSJ &#x4E5F;&#x6709;&#x4E0D;&#x8DB3;&#x7684;&#x5730;&#x65B9;&#x3002;&#x5982;&#x679C; df=N/2&#xFF0C;&#x90A3;&#x4E48; RSJ weight &#x5C31;&#x4F1A;&#x53D8;&#x6210; log(1)=0&#xFF0C;matching the term has no effect on the doc score&#x5982;&#x679C; df&gt;N/2&#xFF0C;RSJ weight=log(fraction)&lt;0&#xFF0C;matching a frequent term lowers a document score &#x901A;&#x5E38;&#x7684;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#x662F;&#xFF0C;&#x628A; RSJ weight &#x8BBE;&#x7F6E;&#x6210; $Max(0&#xFF0C;log{N-df+0.5 \\over df+0.5})$&#x3002;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x7528; idf &#x516C;&#x5F0F;&#x4EE3;&#x66FF; RSJ weight&#xFF0C;&#x90A3;&#x4E48;&#x5BF9; frequent words &#x7684;&#x60E9;&#x7F5A;&#x5C31;&#x4F1A;&#x51CF;&#x5C0F;&#xFF0C;&#x5C24;&#x5176;&#x662F;&#x5BF9;&#x90A3;&#x4E9B;&#x51FA;&#x73B0;&#x4E86; N/2 &#x7684;&#x8BCD;&#x3002; &#x6700;&#x8FD1;&#xFF0C;Lucene &#x8F6C;&#x53D8;&#x4E86; ranking &#x7B97;&#x6CD5;&#xFF0C;&#x53D8;&#x6210;&#x4E86; BM25 Ranker Summary&#x4F18;&#x70B9;&#xFF1A; Motivated by sound probabilistic theory Parameters allow it to be tuned to new environments Very effective in a wide variety of evaluations &#x7F3A;&#x70B9;&#xFF1A; Heuristic tf weighting and document length normalization Effects of parameters not immediately obvious Query Likelihood&#x5047;&#x5B9A;&#x56DB;&#x4E2A;&#x53D8;&#x91CF; d: document $\\theta_d$: language model for document d q: query $\\theta_q$: language model for query q q &#x548C; $\\theta_q$&#xFF0C;d &#x548C; $\\theta_d$ &#x4E0D;&#x662F;&#x540C;&#x4E00;&#x4E2A;&#x4E1C;&#x897F;&#xFF0C;&#x7136;&#x800C;&#x4E3A;&#x4E86;&#x65B9;&#x4FBF;&#x8868;&#x793A;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x7528; q &#x76F4;&#x63A5;&#x8868;&#x793A;&#xFF0C;p(d|q) &#x4EE3;&#x66FF; p(d|$\\theta_q$) &#x6211;&#x4EEC;&#x751F;&#x6210;&#x4E24;&#x4E2A;&#x6A21;&#x578B;&#xFF0C;&#x4E00;&#x4E2A;&#x662F; document &#x7684; language model&#xFF0C;&#x4E00;&#x4E2A;&#x662F; query &#x7684; language model&#xFF0C;&#x6709;&#x4E24;&#x79CD;&#x65B9;&#x6848;&#x6765; rank document Rank d by $p(d|\\theta_q)$ (query likelihood) Rank d by similarity of $\\theta_d$ and $\\theta_q$ (KL divergence) Rank by P(d|q)&#x7ED9;&#x5B9A;&#x4E00;&#x4E2A; query&#xFF0C;&#x51FA;&#x73B0;&#x6587;&#x6863; d &#x7684;&#x6982;&#x7387;&#xFF0C;query &#x4E00;&#x822C;&#x5F88;&#x77ED;&#xFF0C;$\\theta_q$ &#x975E;&#x5E38;&#x7684;&#x7A00;&#x758F;&#xFF0C;&#x5B83;&#x5305;&#x542B;&#x4E86;&#x5F88;&#x5C11;&#x7684; term frequency &#x4FE1;&#x606F;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x7528; Bayes rule &#x6765;&#x8F6C;&#x6362;&#x5B83;&#x3002; $p(d|q)={p(q|d)p(d) \\over p(q)}$&#x2013;&gt; &#x4E22;&#x6389; document-independent term$p(q|d)p(d)$&#x2013;&gt; &#x4E22;&#x6389; constant term$p(q|d)$&#x2013;&gt;$\\prod p(q_i|d)$ &#x4E8E;&#x662F;&#x95EE;&#x9898;&#x5C31;&#x53D8;&#x6210;&#x4E86;&#x600E;&#x4E48;&#x4F30;&#x8BA1; $p(q_i|d)$ $p(q_i|d)$&#x6211;&#x4EEC;&#x7528;&#x6700;&#x5927;&#x4F3C;&#x7136; (Maximum likelihood estimation MLE)&#x3002;$$P_{MLE}(q_i|d)={tf_{q_i,d} \\over length(d)}$$ &#x662F;&#x4E00;&#x4E2A;&#x597D;&#x7684;&#x4F30;&#x8BA1;&#x5417;&#xFF1F;&#x9996;&#x5148;&#x5B83;&#x57FA;&#x4E8E;&#x4E00;&#x7BC7;&#x6587;&#x6863;&#xFF0C;&#x6240;&#x4EE5;&#x7ED3;&#x679C;&#x53EF;&#x80FD;&#x6CA1;&#x90A3;&#x4E48;&#x51C6;&#x786E;&#xFF0C;&#x5982;&#x679C; document &#x91CC;&#x6CA1;&#x6709;&#x51FA;&#x73B0; $q_i$&#xFF0C;&#x90A3;&#x4E48;&#x7ED3;&#x679C;&#x5C31;&#x662F; 0&#xFF0C;&#x8FD9;&#x76F8;&#x5F53;&#x4E8E;&#x4E00;&#x4E2A; boolean AND&#xFF0C;&#x6240;&#x4EE5; $q_i$ &#x662F;&#x5BF9; document &#x7684;&#x4E00;&#x4E2A;&#x4E0D;&#x9519;&#x7684; description&#xFF0C;&#x5373;&#x4F7F;&#x5B83;&#x4E0D;&#x5728; document &#x4E2D;&#x3002; &#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x8981;&#x7528; smoothing&#xFF0C;&#x6765;&#x63D0;&#x9AD8; MLE &#x7684;&#x51C6;&#x786E;&#x6027;&#xFF0C;&#x540C;&#x65F6;&#x6765;&#x9884;&#x6D4B; unobserved terms&#xFF0C;&#x5C31;&#x662F;&#x6CA1;&#x6709;&#x51FA;&#x73B0;&#x5728; document &#x91CC;&#x7684;&#x8BCD;&#x3002; SmoothingJelinek-Mercer(&#x201C;Mixture Model&#x201D;) Smoothing$$p(q_i|d)=(1-\\lambda)p_{MLE}(q_i|d)+ \\lambda p_{MLE}(q_i|C)$$ C &#x4EE3;&#x8868;&#x6574;&#x4E2A; collection&#xFF0C;$\\lambda$ &#x8D8A;&#x5C0F;&#xFF0C;smoothing &#x7684;&#x4F5C;&#x7528;&#x8D8A;&#x5C0F;&#xFF0C;&#x8D8A;&#x9002;&#x5408;&#x77ED; query&#xFF0C;$\\lambda$ &#x8D8A;&#x5927;&#xFF0C;smoothing &#x7684;&#x4F5C;&#x7528;&#x8D8A;&#x5927;&#xFF0C;&#x8D8A;&#x9002;&#x5408;&#x957F; query&#x3002;&#x4E3A;&#x4EC0;&#x4E48;&#xFF1F;&#x5BF9;&#x77ED;&#x6587;&#x6863;&#x800C;&#x8A00;&#xFF0C;&#x901A;&#x5E38;&#x6BCF;&#x4E00;&#x4E2A; query term &#x90FD;&#x8981; match&#xFF0C;&#x6240;&#x4EE5; idf weighting &#x5E76;&#x6CA1;&#x6709;&#x90A3;&#x4E48;&#x91CD;&#x8981;&#xFF0C;&#x8D8A;&#x5C0F;&#x7684; smoothing &#x8D8A;&#x597D;&#xFF0C;&#x800C;&#x5BF9;&#x4E8E;&#x957F; query &#x800C;&#x8A00;&#xFF0C;&#x5927;&#x90E8;&#x5206; query term &#x5FC5;&#x987B; match&#xFF0C;&#x800C;&#x53E6;&#x4E00;&#x90E8;&#x5206;&#x53EF;&#x4EE5;&#x4E0D; match&#xFF0C;&#x6240;&#x4EE5; idf weighting &#x4F1A;&#x66F4;&#x91CD;&#x8981;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x591A; smoothing &#x4E00;&#x70B9;&#x3002; Jelinek-Mercer smoothing &#x7684;&#x4F5C;&#x7528;&#x4E0E; idf &#x7C7B;&#x4F3C;&#xFF0C;&#x5B83;&#x80FD;&#x591F;&#x533A;&#x5206; frequent and rare terms in collection&#x3002; &#x770B;&#x4E00;&#x4E2A;&#x5177;&#x4F53;&#x4F8B;&#x5B50;&#xFF0C;&#x6709;&#x4E24;&#x4E2A; query term&#xFF0C;&#x4E00;&#x4E2A; frequent &#x4E00;&#x4E2A; rare&#x3002; p(apple|C)=0.01, p(ipod|C)=0.001 &#x4E24;&#x7BC7;&#x6587;&#x6863; doc1: doclen=50,$tf\\_{apple}=2$,$tf\\_{ipod}=3$ doc2: doclen=50,$tf\\_{apple}=3$,$tf\\_{ipod}=2$ &#x6CA1;&#x6709; smoothing &#x524D;&#xFF0C;&#x4E24;&#x7BC7;&#x6587;&#x6863;&#x7684; p(q|d)&#x90FD;&#x662F; 0.0024 2/50 &#xFF0A; 3/50=0.0024 3/50 &#xFF0A; 2/50=0.0024 JM Smooth &#x540E;&#xFF0C;&#x5047;&#x8BBE; $\\lambda=0.4$ doc1: p(q|d)=(0.6* 2/50 + 0.4*0.01) * (0.6 * 3/50 + 0.4*0.001)=0.001019 doc2: p(q|d)=(0.6* 3/50 + 0.4*0.01) * (0.6 * 2/50 + 0.4*0.001)=0.000976 &#x8FD9;&#x5C31;&#x53D1;&#x73B0;&#xFF0C;smooth &#x53EF;&#x4EE5;&#x533A;&#x5206; frequent and rare terms in collection&#x3002;&#x6211;&#x4EEC;&#x4E5F;&#x53EF;&#x4EE5;&#x8BA1;&#x7B97; doclen=50,$tf_{apple}=2$,$tf_{ipod}=2$ &#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x770B;&#x591A;&#x52A0;&#x5165;&#x4E00;&#x4E2A; apple &#x6216; ipod &#x540E; p(q|d) &#x53D1;&#x751F;&#x4E86;&#x4EC0;&#x4E48;&#xFF0C;&#x540C;&#x6837;&#x7684;&#xFF0C;unsmoothed effect &#x5BF9; frequent &#x548C; rare &#x5E76;&#x6CA1;&#x6709;&#x5DEE;&#x522B;&#xFF0C;&#x4F46;&#x662F; smooth &#x5E26;&#x6765;&#x4E86;&#x663E;&#x8457;&#x5DEE;&#x5F02;&#x3002; &#x6700;&#x540E;&#x4E0A;&#x5F20;&#x63A8;&#x5BFC;&#x56FE; Bayesian Smoothing With Dirichlet Priors$$p(q_i|d)={tf_{q_i,d}+ \\mu p_{MLE}(q_i|C) \\over length(d)+ \\mu }$$ $\\mu$ &#x5728; [1000-10000] &#x533A;&#x95F4;&#x5185;&#x6BD4;&#x8F83;&#x597D;Bayesian smoothing &#x662F;&#x5BF9;&#x6587;&#x6863;&#x957F;&#x5EA6;&#x7684;&#x5E73;&#x6ED1;&#xFF0C;&#x5BF9;&#x77ED;&#x6587;&#x6863;&#x800C;&#x8A00;&#xFF0C;$p(q_i|d)$ &#x7684;&#x6982;&#x7387;&#x5206;&#x5E03;&#x66F4;&#x4E0D;&#x5E73;&#x6ED1;&#xFF0C;&#x9700;&#x8981;&#x66F4;&#x5927;&#x7684; $\\mu $&#xFF0C;&#x5BF9;&#x957F;&#x6587;&#x6863;&#x800C;&#x8A00;&#xFF0C;&#x6982;&#x7387;&#x5206;&#x5E03;&#x66F4;&#x5E73;&#x6ED1;&#xFF0C;&#x9700;&#x8981;&#x66F4;&#x5C0F;&#x7684; $\\mu$. Two-Stage Smoothing&#x53EF;&#x4EE5;&#x7ED3;&#x5408;&#x4EE5;&#x4E0A;&#x4E24;&#x79CD;&#x5E73;&#x6ED1;&#x65B9;&#x5F0F;&#xFF0C;&#x5F97;&#x5230;$$p(q_i|d)=(1- \\lambda ){tf_{q_i,d}+ \\mu p_{MLE}(q_i|C) \\over length(d)+ \\mu }+ \\lambda p_{MLE}(q_i|C)$$ Rank by similarityKL DivergenceKullback-Leibler &#x8DDD;&#x79BB;&#xFF0C;&#x4E5F;&#x53EB;&#x76F8;&#x5BF9;&#x71B5;&#xFF08;Relative Entropy&#xFF09;&#x3002;&#x8BA1;&#x7B97;&#x516C;&#x5F0F;&#x5982;&#x4E0B;&#xFF1A;$$KL(p||q)=\\sum p(x)log{p(x) \\over q(x)}$$ KL &#x8DDD;&#x79BB;&#x4E0D;&#x662F;&#x5BF9;&#x79F0;&#x7684;, KL(p||q)!=KL(q||p)&#xFF0C;&#x6211;&#x4EEC;&#x8981;&#x8BA1;&#x7B97;&#x7684;&#x662F; KL(q||d)&#xFF0C;query &#x548C; document &#x7684;&#x76F8;&#x5BF9;&#x71B5;&#xFF0C;&#x63A8;&#x5BFC;&#x516C;&#x5F0F;&#x5982;&#x4E0B;&#x3002; &#x6BD4;&#x8F83;&#x4E24;&#x79CD;&#x65B9;&#x5F0F;&#x5176;&#x5B9E;&#x662F;&#x4E00;&#x6837;&#x7684;&#xFF0C;&#x4ED4;&#x7EC6;&#x770B;&#x516C;&#x5F0F;&#xFF01;Query likelihood ranks by$$p(q|d)=\\prod p(q_i|d)$$ KL diverge ranks by$$\\sum p(x)log{p(x) \\over q(x)}$$ Indri document + smoothing parameter($\\alpha$ $\\beta$) -&gt; language model($\\theta$) -&gt; language model vocabulary(r) information needs(I)&#x7531; query(q) &#x8868;&#x793A;&#xFF0C;query &#x7531; operator(c) &#x7EC4;&#x6210;. &#x5728; Indri &#x4E2D;&#xFF0C;#AND &#x8BA4;&#x4E3A;&#x6240;&#x6709;&#x7684; argument &#x90FD;&#x662F;&#x72EC;&#x7ACB;&#x6982;&#x7387;&#xFF0C; #WSUM &#x8BA4;&#x4E3A;&#x6240;&#x6709;&#x7684; argument &#x90FD;&#x7528;&#x6765;&#x4F30;&#x8BA1;&#x540C;&#x4E00;&#x4E2A;&#x6982;&#x7387;&#x3002;&#x5728;&#x5B9E;&#x73B0; Indri &#x7684; ranking algorithm &#x65F6;&#xFF0C;&#x8981;&#x6CE8;&#x610F;&#x7684;&#x662F;&#x6211;&#x4EEC;&#x5FC5;&#x987B;&#x5B9E;&#x73B0;&#x4E00;&#x4E2A; getDefaultScore&#xFF0C;&#x6765;&#x5904;&#x7406; tf=0 &#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x4EE5;&#x4FDD;&#x8BC1;&#x7528;&#x6237;&#x603B;&#x80FD;&#x5F97;&#x5230;&#x641C;&#x7D22;&#x7ED3;&#x679C;&#x3002; Document PriorsDocument Priors &#x6307;&#x4E0E; query &#x65E0;&#x5173;&#x7684;&#x7528;&#x6765;&#x8BC4;&#x4F30;&#x6587;&#x6863;&#x4EF7;&#x503C;&#x7684; estimates (query-independent estimates of the value of each document)&#xFF0C;&#x4E00;&#x822C;&#x662F;&#x6839;&#x636E;&#x6587;&#x6863;&#x672C;&#x8EAB;&#x7684;&#x6027;&#x8D28;&#x6765;&#x51B3;&#x5B9A;&#x7684;&#xFF0C;&#x4E3B;&#x8981;&#x7684; document priors &#x6709; spam score, PageRank, length of url &#x7B49;&#x3002;&#x5728; BM25&#xFF0C;query likelihood &#x548C; KL divergence &#x4E2D;&#x7684;&#x4F7F;&#x7528;&#x3002;Indri &#x4E2D;&#xFF0C;prior &#x5728; Query likelihood &#x4E2D;&#x7684;&#x8868;&#x793A;&#x4E3A; #and(#prior(url) a b c)&#xFF0C;&#x5728; KL divergence &#x4E2D;&#x7684;&#x8868;&#x793A;&#x4E3A; #and(#prior(url) #and(a b c))","tags":"nlp search-engines"},{"title":"Search Engines笔记 - Document Representations","url":"/2016/09/25/Search Engines笔记 - Document Representation/","text":"&#x8BB2;&#x4E24;&#x79CD; document representation &#x65B9;&#x6CD5;&#xFF0C;Controlled vocabulary index terms vs Free-text or full-text index terms Overview Controlled vocabulary index terms&#x4ECE;&#x4E00;&#x4E2A; well-defined classification scheme &#x4E2D;&#x6311;&#x53D6; term&#xFF0C;&#x6BD4;&#x8F83;&#x6709;&#x540D;&#x7684; controlled vocabularies &#x6709; dmoz&#x3002; Structurebroad vocabularies &#x6765;&#x63CF;&#x8FF0; general level &#x7684; topic; detailed vocabularies &#x6765;&#x63CF;&#x8FF0;&#x66F4;&#x52A0; detail &#x7684; topic&#x3002;&#x4E00;&#x4E2A; well-defined classification scheme &#x4E3B;&#x8981;&#x6709;&#x4EE5;&#x4E0B;&#x6784;&#x6210;&#xFF1A; a set of rules for identifying the subject of a document a thesaurus specifying a group of indexing terms a set of instructions for assigning indexing terms Advantages and Disadvantages&#x4F18;&#x70B9;&#xFF1A; High recall Supports both browsing and search Popular in some fields(eg. medicine,law, patent) &#x7F3A;&#x70B9;&#xFF1A; Coverage vs detail tradeoff Expensive to create and maintain Difficult for people to assign to documents consistently Not easy for most people to use for search Free-text or full-text index terms&#x4ECE;&#x539F;&#x6587;&#x6863;&#x6216;&#x8005;&#x76F8;&#x5173;&#x6587;&#x6863;&#x4E2D;&#x6311;&#x53D6; term&#x3002;Free-text or full-text indexing &#x7528;&#x7684;&#x662F; uncontrolled vocabulary&#x3002;Free-text &#x548C; full-text indexing &#x7684;&#x533A;&#x522B;&#x5728;&#x4E8E;&#x524D;&#x8005;&#x53EA;&#x7528;&#x4E86;&#x90E8;&#x5206;&#x7684; term &#x4F5C;&#x4E3A; index&#xFF0C;&#x800C;&#x540E;&#x8005;&#x7528;&#x4E86;&#x51E0;&#x4E4E;&#x6240;&#x6709;&#x7684; term &#x6765;&#x4F5C;&#x4E3A; index&#x3002; How to select terms? selected terms &#x4EBA;&#x5DE5;&#x9009; all terms &#x5C31;&#x4E0D;&#x7528;&#x8003;&#x8651;&#x9009;&#x62E9;&#x7684;&#x95EE;&#x9898; Advantages and Disadvantages&#x4F18;&#x70B9;&#xFF1A; Index terms guaranteed to be a good match to document contents No need to learn a (possibly complex) controlled vocabulary Possibly easier to automate than controlled-vocabulary &#x7F3A;&#x70B9;&#xFF1A; Greater possibility of vocabulary-mismatch problems&#x6BD4;&#x5982;&#x6587;&#x6863;&#x91CC;&#x6709; automobile&#xFF0C;query &#x8BF4;&#x662F; car Process Search engine uses shallow language analysis and heuristics to convert lexical tokens (usually words) into index terms (features) Heuristic methods: map tokens to indexing terms Stopwords&#x4E00;&#x4E9B; stopwords &#x5982; the, a &#x5E76;&#x6CA1;&#x6709;&#x5B9E;&#x9645;&#x610F;&#x4E49;&#xFF0C;&#x5220;&#x9664; stopwords &#x53EF;&#x4EE5;&#x51CF;&#x5C0F; index size&#xFF0C;&#x63D0;&#x9AD8;&#x51C6;&#x786E;&#x6027;&#x548C;&#x6548;&#x7387;&#xFF0C;&#x7136;&#x800C;&#x4E5F;&#x4F1A;&#x5E26;&#x6765;&#x4E00;&#x4E9B;&#x95EE;&#x9898;&#xFF0C;&#x5982;&#x65E0;&#x6CD5;&#x5904;&#x7406;&#x4E00;&#x4E9B; query(eg. To be or not to be, let it be)&#x3002;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#x662F;&#x6211;&#x4EEC;&#x628A; index &#x7684; stopwords &#x5B58;&#x4E0B;&#x6765;&#xFF0C;&#x5728; process query &#x7684;&#x65F6;&#x5019;&#x53BB;&#x6389; query &#x91CC;&#x7684; stopwords&#xFF0C;&#x5982;&#x679C; stopwords &#x5728; query terms &#x91CC;&#x5360;&#x6BD4;&#x5F88;&#x9AD8;&#xFF0C;&#x6216;&#x8005;&#x7528;&#x6237;&#x663E;&#x6027;&#x8981;&#x6C42;&#x7559;&#x4E0B; stopwords (eg. +the last)&#xFF0C;&#x5C31;&#x628A; stopwords &#x7559;&#x4E0B;&#x3002; &#x4F18;&#x70B9;&#xFF1A; Discard meaningless word Reduce index size Improve accuracy &#x7F3A;&#x70B9;&#xFF1A; Make some queries difficult to satisfy &#x521B;&#x5EFA; stopword list&#x901A;&#x8FC7; frequency analysis &#x548C; manual review &#x6765;&#x5B8C;&#x6210;&#x3002; Sort dictionary based on frequency Examine the most frequent terms Examine a query log to see which frequent terms might be important Normalization&#x901A;&#x5E38;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x5BF9; token &#x8FDB;&#x884C; Normalize&#xFF0C;&#x6BD4;&#x5982;&#x5927;&#x5C0F;&#x5199;&#x8F6C;&#x6362;&#xFF0C;&#x4EE5;&#x4FBF;&#x4E0B;&#x4E00;&#x6B65;&#x5904;&#x7406;&#x3002; &#x4F18;&#x70B9;: Improve recall, matches more queries &#x7F3A;&#x70B9;&#xFF1A; Apple may be used as a company name, while apple will be considered as a kind of fruit. Morphological analysisMap a token to another token (&#x201C;stemming&#x201D;,&#x201D;conflation&#x201D;) eg. images -&gt; image&#x5E38;&#x7528;&#x7684; stemming algorithms &#x6709; Porter, KSTEM &#x7B49;&#xFF0C;&#x4E00;&#x822C;&#x6765;&#x8BF4;&#xFF0C;Porter &#x548C; KSTEM &#x80FD;&#x4EA7;&#x751F;&#x7684;&#x5DEE;&#x4E0D;&#x591A; accurate &#x7684; search results&#x3002;Porter &#x66F4;&#x52A0;&#x7684; aggressive&#xFF0C;&#x53EF;&#x80FD;&#x4F1A;&#x51FA;&#x73B0;&#x4E00;&#x4E9B;&#x4E0D;&#x662F;&#x8BCD;&#x7684;&#x8BCD;&#xFF0C;&#x800C; KSTEM &#x66F4;&#x52A0;&#x7684; convervative&#xFF0C;&#x4F1A;&#x4EA7;&#x751F; smaller conflation classes&#xFF0C;&#x66F4;&#x52A0;&#x50CF;&#x201D;&#x8BCD;&#x201D;&#x3002;&#x5BF9;&#x4E8E; enterprise search &#x800C;&#x8A00;&#xFF0C;corpus &#x76F8;&#x5BF9;&#x8F83;&#x5C0F;&#xFF0C;recall &#x901A;&#x5E38;&#x5F88;&#x91CD;&#x8981;&#xFF0C;&#x6240;&#x4EE5;&#x7528;&#x6237;&#x4E3A;&#x4E86;&#x5F97;&#x5230;&#x66F4;&#x591A;&#x7684;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF0C;&#x5BF9; stemming mistakes &#x5BB9;&#x5FCD;&#x5EA6;&#x8F83;&#x9AD8;&#x3002;&#x800C;&#x5BF9;&#x4E8E; web search &#x800C;&#x8A00;&#xFF0C;corpus &#x5F88;&#x5927;&#xFF0C; recall &#x5E76;&#x6CA1;&#x6709;&#x90A3;&#x4E48;&#x91CD;&#x8981;&#xFF0C;precision &#x66F4;&#x91CD;&#x8981;&#xFF0C;&#x6240;&#x4EE5;&#x5BF9; stemming mistakes &#x5BB9;&#x5FCD;&#x5EA6;&#x66F4;&#x4F4E;&#x3002;Google &#x4E4B;&#x524D;&#x662F;&#x4E0D;&#x505A; stemming &#x7684;&#xFF0C;&#x73B0;&#x5728;&#x4F3C;&#x4E4E;&#x5F00;&#x59CB;&#x505A;&#x4E86;&#x3002; &#x8FD9;&#x4E9B;&#x6280;&#x672F;&#x90FD;&#x662F;&#x56E0;&#x8BED;&#x8A00;&#x800C;&#x5F02;&#x7684;&#xFF0C;&#x4E0D;&#x540C;&#x7684;&#x8BED;&#x8A00;&#x6709;&#x4E0D;&#x540C;&#x7684;&#x8BED;&#x6CD5;&#x89C4;&#x5219;&#xFF0C;&#x4E0D;&#x80FD;&#x4E00;&#x6982;&#x800C;&#x8BBA;&#x3002; &#x4F18;&#x70B9;: Conflating variations of a word more accurate representation of the document broader range of queries to (correctly) match &#x7F3A;&#x70B9;&#xFF1A; Effects are inconsistent Terms can be grouped mistakenly(eg.Apple,Apples) Sophisticated morphological analysis can be very slow Phrases&#x5BF9; phrase &#x7684;&#x5904;&#x7406;&#xFF0C;&#x4E00;&#x822C;&#x6709;&#x4E24;&#x79CD;&#x65B9;&#x6848;&#x3002; &#x4E00;&#x79CD;&#x662F; precoordinate(1 inverted list)&#xFF0C;&#x628A; phrase &#x5B58;&#x4E3A; index&#xFF0C;&#x6BD4;&#x5982; interest rate&#xFF0C;inverted list &#x5B58;&#x6210; interest_rate&#xFF0C;&#x5728;&#x7528;&#x6237;&#x67E5;&#x8BE2;&#x65F6; interest rate &#x65F6;&#xFF0C;&#x66FF;&#x6362;&#x6210; interested_rate &#x8FDB;&#x884C; match&#x3002;&#x8FD9;&#x79CD;&#x505A;&#x6CD5;&#x8017;&#x8D39;&#x4E86;&#x5F88;&#x591A;&#x7A7A;&#x95F4;&#xFF0C;how to select phrases to be stored &#x4E5F;&#x662F;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x53EF;&#x80FD;&#x4F1A;&#x5B58;&#x5F88;&#x591A;&#x6C38;&#x8FDC;&#x4E0D;&#x4F1A;&#x88AB;&#x67E5;&#x8BE2;&#x7684; phrase&#x3002; &#x53E6;&#x4E00;&#x79CD;&#x662F; postcoordinate(more than one inverted lists)&#xFF0C;&#x5BF9; query &#x8FDB;&#x884C; reformulation, &#x5982; interest rate &#x53D8;&#x6210; #NEAR/1(interest rate)&#xFF0C;&#x7136;&#x540E;&#x8FDB;&#x884C; match&#x3002;&#x8FD9;&#x79CD;&#x65B9;&#x6CD5;&#x67E5;&#x8BE2;&#x65F6;&#x4F1A; a little bit slow&#xFF0C;&#x7136;&#x800C;&#x4E0D;&#x5FC5; be smart about phrase index choosing&#x3002; De-compoundingcomputer-virus -&gt; computer,virus &#x4F18;&#x70B9; More accurate representation of the document Broader range of queries to (correctly) match &#x7F3A;&#x70B9; N-grams like &#x201C;roe v. wade&#x201D; will be meaningless &#x5176;&#x5B83;Basic lexical processing tokens stopwords morphologial processing (&#x201C;stemming&#x201D;) Other representations phrases, citations and inlink text, paths and urls Multiple representations","tags":"nlp search-engines"},{"title":"Search Engines笔记 - Evaluating Search Effectiveness","url":"/2016/09/20/Search Engines笔记 - Evaluating Search Effectiveness/","text":"&#x600E;&#x6837;&#x8BC4;&#x4F30; search engine &#x7684;&#x6548;&#x679C;&#xFF1F; Methodology Obtain a corpus of documents Obtain a set of information needs Obtain relevance judgments Measure how well each method finds relevant documents Compare the effectiveness of different methods &#x6240;&#x4EE5;&#x6709;&#x4E94;&#x4E2A;&#x90E8;&#x5206;&#xFF1A; documents information needs relevance judgements metrics comparison of methods &#x6211;&#x4EEC;&#x9010;&#x4E00;&#x6765;&#x8BA8;&#x8BBA; Test collectionsdocuments, information needs, relevance judgements &#x4E09;&#x90E8;&#x5206;&#x5408;&#x8D77;&#x6765;&#x79F0;&#x4E3A;&#x4E00;&#x4E2A; test collection&#x3002;&#x5E38;&#x7528;&#x7684; test collections &#x6709; &#x8FD9;&#x4E9B; test collections &#x90FD;&#x975E;&#x5E38;&#x5B9E;&#x7528;&#xFF0C;&#x7136;&#x800C;&#x90FD;&#x6709;&#x5404;&#x81EA;&#x7684; bias&#x3002; Information Needs&#x4E00;&#x822C;&#x6765;&#x8BF4;&#xFF0C;&#x4E00;&#x4E2A; test collection &#x6709; 50-200 &#x4E2A; information needs&#x3002;information need &#x901A;&#x5E38;&#x7531; query &#x6765;&#x4F53;&#x73B0;&#xFF0C;&#x5F53;&#x7136;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x901A;&#x8FC7; search engines &#x4E2D;&#x83B7;&#x5F97;&#x7684; user behavior, user history, population behavior &#x6765;&#x4F53;&#x73B0;&#x3002;&#x90A3;&#x4E48;&#xFF0C;&#x600E;&#x6837;&#x83B7;&#x5F97; information needs &#x5462;&#xFF1F; &#x901A;&#x5E38;&#x6709;&#x4E09;&#x79CD;&#x529E;&#x6CD5;&#x3002; Ask &#x5411;&#x7528;&#x6237;&#x8BE2;&#x95EE;&#x4ED6;&#x4EEC;&#x8981;&#x627E;&#x4EC0;&#x4E48;&#xFF0C;&#x8FD9;&#x5F53;&#x7136;&#x662F;&#x6700;&#x4F18;&#x7684;&#x65B9;&#x6CD5;&#x3002; Observe &#x901A;&#x8FC7; search log&#xFF0C;&#x6839;&#x636E; query, clicks &#x7B49;&#x6765;&#x89C2;&#x5BDF;&#x7528;&#x6237;&#x9700;&#x8981;&#x4EC0;&#x4E48;&#xFF0C;&#x7136;&#x540E;&#x6839;&#x636E;&#x89C2;&#x5BDF;&#x7ED3;&#x679C;&#x6765;&#x8FD8;&#x539F; information needs&#x3002; Guess &#x6839;&#x636E;&#x6587;&#x6863;&#x6765;&#x731C;&#x8FD9;&#x4E9B;&#x6587;&#x6863;&#x80FD;&#x6EE1;&#x8DB3;&#x4EC0;&#x4E48;&#x6837;&#x7684; information needs&#xFF0C;&#x8FD9;&#x662F; weakest option&#xFF0C;&#x4F46;&#x5F80;&#x5F80;&#x4E5F;&#x662F;&#x552F;&#x4E00;&#x7684;&#x9009;&#x62E9;&#x3002; Relevance Assessment&#x4EBA;&#x4E3A;&#x5224;&#x65AD;&#xFF0C;&#x901A;&#x5E38;&#x662F;&#x4E3B;&#x89C2;&#x7684;&#x3002;&#x7528;&#x4E0D;&#x540C;&#x7684; techniques &#x68C0;&#x7D22;&#x51FA;&#x6587;&#x6863;&#xFF0C;&#x7136;&#x540E;&#x4EBA;&#x4E3A;&#x5224;&#x65AD;&#x6BCF;&#x4E00;&#x79CD; technique &#x4E0B;&#x7684; top n &#x7684;&#x6587;&#x6863;&#xFF0C;relevant set &#x5C31;&#x662F;&#x8FD9;&#x4E9B;&#x5224;&#x65AD;&#x4E3A;&#x76F8;&#x5173;&#x7684;&#x6587;&#x6863;&#x7684;&#x96C6;&#x5408;&#x3002; MetricsUnranked Boolean Retrieval ModelP,R,P@n,F1 &#x90FD;&#x662F; set-based measures&#x3002;&#x9002;&#x5408; unranked boolean retrieval model&#xFF0C;&#x9002;&#x5408;&#x6587;&#x672C;&#x5206;&#x7C7B;&#xFF0C;&#x7136;&#x800C;&#x5BF9; ranked retrieval model &#x6CA1;&#x90A3;&#x4E48;&#x9002;&#x7528;&#x3002; Precision and Recall$$Precision = {|Relevant \\cap Retrieved| \\over |Retrieved|} $$$$Recall = {|Relevant \\cap Retrieved| \\over |Relevant|}$$ &#x7406;&#x8BBA;&#x4E0A;&#x6765;&#x8BB2;&#xFF0C;&#x6574;&#x4E2A;&#x6587;&#x6863;&#x96C6;&#x90FD;&#x4F1A;&#x88AB; rank&#xFF0C;&#x7136;&#x540E;&#x5BF9;&#x6574;&#x4E2A;&#x6587;&#x6863;&#x96C6;&#x6765;&#x8BA1;&#x7B97; P&amp;R&#xFF0C;&#x7136;&#x800C;&#x8FD9;&#x662F;&#x6CA1;&#x6709;&#x5FC5;&#x8981;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x5F15;&#x5165;&#x4E86; P@n &#x548C; MAP(Mean average precision)&#x3002; P@n&#x975E;&#x5E38;&#x597D;&#x7406;&#x89E3;&#xFF0C;&#x6392;&#x540D;&#x524D; n &#x7684;&#x6587;&#x6863;&#x7684; precision&#x3002;&#x5982; P@5,P@10&#x3002;&#x5E26;&#x6765;&#x7684;&#x95EE;&#x9898;&#x662F;&#x5E76;&#x6CA1;&#x6709;&#x5BF9; query &#x7684;&#x96BE;&#x5EA6;&#x8FDB;&#x884C; normalize&#x3002;&#x7B80;&#x5355;&#x7684; query &#x53EF;&#x80FD;&#x4F1A;&#x6709;&#x66F4;&#x591A;&#x7684;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF0C;&#x96BE;&#x7684; query &#x80FD;&#x5F97;&#x5230;&#x7684;&#x76F8;&#x5173;&#x6587;&#x6863;&#x66F4;&#x5C11;&#x3002;&#x6240;&#x4EE5; P@n &#x7684; stability &#x4E0D;&#x5982; MAP. F-Measure&#x5BF9; precision &#x548C; recall &#x8FDB;&#x884C; weight$$F = {1 \\over \\alpha {1 \\over P} + (1- \\alpha) {1 \\over R}}$$&#x5982;&#x679C; precision &#x548C; recall &#x7684;&#x6743;&#x91CD;&#x76F8;&#x540C;&#xFF0C;&#x90A3;&#x5C31;&#x662F; $F={2PR \\over P+R}$ Average ResultsMicro average across documents&#x6BCF;&#x7BC7;&#x6587;&#x6863;&#x7684;&#x91CD;&#x8981;&#x6027;&#x76F8;&#x540C;&#xFF0C;queries with many relevant documents dominate&#xFF0C;machine learning &#x5E38;&#x7528;&#xFF0C; IR &#x4E0D;&#x5E38;&#x7528;&#xFF0C;&#x56E0;&#x4E3A; class distribution &#x66F4;&#x52A0;&#x7684; skewed&#x3002; Macro average across queries&#x6BCF;&#x4E2A; query &#x7684;&#x91CD;&#x8981;&#x6027;&#x76F8;&#x540C;&#xFF0C;ad-hoc retrieval &#x6700;&#x5E38;&#x7528;&#x7684; averaging method&#x3002; Ranked Retrieval Average Precision (AP) Mean Average Precision (MAP) Interpolated Average Precision AP and MAPMAP &#x662F; single-value&#x3002;AP measures P at each relevant document for the ith query and average the measurements for the ith query&#x3002;&#x5BF9;&#x5355;&#x4E2A;&#x9700;&#x6C42;&#xFF0C;&#x6C42;&#x8FD4;&#x56DE;&#x7ED3;&#x679C;&#x4E2D;&#x6BCF;&#x7BC7;&#x76F8;&#x5173;&#x6587;&#x6863;&#x4F4D;&#x7F6E;&#x4E0A;&#x7684; precision &#x7684;&#x5E73;&#x5747;&#x503C;&#x3002;&#x76F8;&#x5F53;&#x4E8E;&#x67D0;&#x4E2A; query &#x4E0B;&#x5BF9;&#x5E94;&#x7684;&#x591A;&#x6761; precision-recall curve &#x4E0B;&#x9762;&#x79EF;&#x7684;&#x5E73;&#x5747;&#x503C;&#x3002;&#x5BF9;&#x6240;&#x6709;&#x9700;&#x6C42;&#x5E73;&#x5747;&#x5C31;&#x80FD;&#x5F97;&#x5230; MAP&#x3002;MAP measures the mean of the Average Precision values for all queries&#x3002;MAP &#x53EF;&#x4EE5;&#x5728;&#x6BCF;&#x4E2A; recall &#x6C34;&#x5E73;&#x4E0A;&#x63D0;&#x4F9B;&#x5355;&#x6307;&#x6807;&#x7ED3;&#x679C;&#xFF0C;&#x5177;&#x6709;&#x975E;&#x5E38;&#x597D;&#x7684; discrimination &#x548C; stability&#x3002;MAP &#x4E0D;&#x9700;&#x8981;&#x9009;&#x62E9;&#x56FA;&#x5B9A;&#x7684; recall &#x6C34;&#x5E73;&#xFF0C;&#x4E5F;&#x4E0D;&#x9700;&#x8981;&#x63D2;&#x503C;&#xFF0C;&#x5373;&#x4F7F;&#x6709;&#x4E9B; query &#x7684;&#x76F8;&#x5173;&#x6587;&#x6863;&#x6570;&#x5F88;&#x591A;&#x800C;&#x6709;&#x4E9B;&#x5F88;&#x5C11;&#xFF0C;&#x6700;&#x7EC8;&#x7684; MAP &#x663E;&#x793A;&#x6BCF;&#x4E2A; query &#x7684;&#x4F5C;&#x7528;&#x5374;&#x662F;&#x76F8;&#x7B49;&#x7684;&#x3002;&#x5355;&#x4E2A;&#x7CFB;&#x7EDF;&#x5728;&#x4E0D;&#x540C;information needs &#x7684; MAP&#x503C;&#x76F8;&#x5DEE;&#x8F83;&#x5927;&#xFF08;0.1-0.7&#xFF09;&#xFF0C;&#x4E0D;&#x540C;&#x7CFB;&#x7EDF;&#x5728;&#x540C;&#x4E00; information need &#x4E0A;&#x7684; MAP &#x5DEE;&#x5F02;&#x53CD;&#x800C;&#x76F8;&#x5BF9;&#x8981;&#x5C0F;&#x4E00;&#x4E9B;&#x3002; &#x4E00;&#x9053;&#x9898;&#x89E3;&#x51B3;&#x3002;123AP1=(1+1+0.75+0.67)/4=0.855AP2=(1+0.84+0.5)/5=0.468MAP=(0.468+0.855)/2=0.6615 &#x770B;&#x4E00;&#x4E0B; AP &#x548C; MAP &#x7684;&#x5206;&#x5E03;&#x3002; MAP &#x7528;&#x7684;&#x975E;&#x5E38;&#x591A;&#xFF0C;&#x4E00;&#x65B9;&#x9762;&#x662F;&#x56E0;&#x4E3A;&#x5B83;&#x80FD;&#x5F88;&#x597D;&#x7684;&#x4F53;&#x73B0;&#x7CFB;&#x7EDF;&#x7684;&#x4F18;&#x52A3;&#xFF0C;&#x4E00;&#x822C;&#x6765;&#x8BF4;&#xFF0C;&#x5982;&#x679C; MAP(A)&gt;MAP(B)&#xFF0C;&#x90A3;&#x4E48; A&#x7CFB;&#x7EDF;&#x66F4;&#x6709;&#x53EF;&#x80FD;&#x6BD4; B&#x7CFB;&#x7EDF;&#x597D;&#xFF0C;&#x50CF; P@n &#x7B49;&#x5176;&#x5B83; metrics &#x5C31;&#x4E0D;&#x80FD;&#x5982;&#x6B64;&#x80AF;&#x5B9A;&#x3002;&#x53E6;&#x5916;&#xFF0C;MAP &#x8BA1;&#x7B97;&#x5F88;&#x5FEB;&#xFF0C;&#x548C; NDCG &#x76F8;&#x6BD4;&#x3002; MRR (Mean Reciprocal Rank)&#x6709;&#x65F6;&#x5019;&#x6211;&#x4EEC;&#x66F4;&#x5173;&#x5FC3;&#x7B2C;&#x4E00;&#x7BC7;&#x76F8;&#x5173;&#x6587;&#x6863;&#x3002;&#x800C;&#x6392;&#x540D;&#x8F83;&#x4F4E;&#x7684;&#x6587;&#x6863;&#x901A;&#x5E38;&#x4E0D;&#x4F1A;&#x88AB;&#x6D4F;&#x89C8;&#x5230;&#x3002;Reciprocal rank &#x6307;&#x7684;&#x662F; 1/rank of first relevant document&#x3002;&#x6240;&#x4EE5; MRR &#x5C31;&#x662F; average of reciprocal rank values across a set of queries&#x3002; &#x9002;&#x7528;&#x573A;&#x666F;&#x4E3E;&#x4F8B;&#xFF1A;&#x67D0;&#x4E2A;&#x5B66;&#x751F;&#x60F3;&#x627E; cmu 11642 &#x7684;&#x8BFE;&#x7A0B;&#x4E3B;&#x9875;&#x3002; NDCG (Normalized Discounted Cumulative Gain)Web search engines &#x4E2D;&#x5E38;&#x7528;&#x7684;&#x65B9;&#x6CD5;&#x3002;multi-valued relevance assessment&#xFF0C;&#x8BC4;&#x4F30; ranking &#x7684;&#x8D28;&#x91CF;&#x3002;$$NDCG@k = Z_k \\sum_{i=1}^k{2^{R_i}-1 \\over log(1+i)}$$ $R_i$ &#x6307;&#x6392;&#x540D;&#x5728; i &#x7684;&#x76F8;&#x5173;&#x6587;&#x6863;&#x7684; relevance &#x5206;&#x6570; $Z_k$ normalizes so that NDCG=1 at k for a perfect ranking&#x3002;$Z_k$ = 1/DCG@k for the &#x201C;ideal&#x201D; rankingRequired to combine scores for different queries &#x9002;&#x7528;&#x573A;&#x666F;&#xFF1A;&#x53EF;&#x80FD;&#x4F1A;&#x6709;&#x591A;&#x4E2A;&#x76F8;&#x5173;&#x6587;&#x6863;&#xFF0C;probability that a person views a page depends upon its rank. eg. &#x987E;&#x5BA2;&#x60F3;&#x8981;&#x5728;&#x7F51;&#x4E0A;&#x4E70;&#x4E00;&#x53F0;&#x7535;&#x8111;&#xFF0C;&#x9700;&#x8981;&#x6BD4;&#x8F83;&#x4E0D;&#x540C;&#x7684;&#x578B;&#x53F7;&#x3001;&#x5916;&#x89C2;&#x3001;&#x4EF7;&#x94B1;&#x3001;&#x6392;&#x540D;&#x3002; RBP (Rank-Biased Precision)&#x975E;&#x5E38;&#x7B80;&#x5355;&#x7684; model&#xFF0C;&#x5BF9;&#x7528;&#x6237;&#x884C;&#x4E3A;&#x8FDB;&#x884C;&#x5EFA;&#x6A21;&#x3002;multi-valued relevance assessments&#xFF0C;&#x7528;user&#x2019;s persistence &#x6765;&#x8BC4;&#x4F30; rank &#x8D28;&#x91CF;&#x3002;$$RBP = (1-p) \\sum_{i=1}^n R_ip^{i-1}$$ p: a parameter that models the user&#x2019;s persistence n: Number of documents Ri: The relevance of the document at rank I trec-evalad-hoc retrieval &#x7684;&#x6807;&#x51C6;&#x7684;&#x8BC4;&#x4F30;&#x5DE5;&#x5177;&#x3002;&#x683C;&#x5F0F; Precision-recall curve &#x5448;&#x73B0;&#x660E;&#x663E;&#x7684;&#x952F;&#x9F7F;&#x5F62;&#x72B6;&#xFF0C;&#x56E0;&#x4E3A;&#x5982;&#x679C;&#x8FD4;&#x56DE;&#x7684;&#x7B2C; k+1 &#x7BC7;&#x6587;&#x6863;&#x4E0D;&#x76F8;&#x5173;&#xFF0C;&#x90A3;&#x4E48;&#x5728; k+1 &#x7BC7;&#x6587;&#x6863;&#x4F4D;&#x7F6E;&#x4E0A;&#x7684; recall &#x548C;&#x524D; k &#x7BC7;&#x6587;&#x6863;&#x4F4D;&#x7F6E;&#x4E0A;&#x7684; recall &#x4E00;&#x6837;&#xFF0C;&#x4F46;&#x662F; precision &#x663E;&#x7136;&#x4E0B;&#x964D;&#x3002;&#x53CD;&#x4E4B;&#xFF0C;&#x5982;&#x679C;&#x8FD4;&#x56DE;&#x7684;&#x7B2C; k+1 &#x7BC7;&#x6587;&#x6863;&#x76F8;&#x5173;&#xFF0C;&#x90A3;&#x4E48; recall &#x548C; precision &#x90FD;&#x4F1A;&#x589E;&#x5927;&#xFF0C;&#x8FD9;&#x65F6;&#x5019;&#x66F2;&#x7EBF;&#x4F1A;&#x5448;&#x952F;&#x9F7F;&#x5F62;&#x4E0A;&#x5347;&#x3002;&#x5C06;&#x8FD9;&#x4E9B;&#x7EC6;&#x5FAE;&#x7684;&#x53D8;&#x5316;&#x53BB;&#x6389;&#x901A;&#x5E38;&#x91C7;&#x7528;&#x5DEE;&#x503C; Build your own test collection Collect a large set of representative documents Collect a set of representative information needs (at least 25, preferably 50-100) Translate each information need into a set of queries (at least several queries per information need) Run each query against each search engine (save top N documents, at least 50 docs per query) Pool all results for an information needs (different queries,different engines; sort them into random order) Have a person judge each document (one person judge all documents for one information need) Evaluation in a Dynamic Environment","tags":"nlp search-engines"},{"title":"数据结构和算法 -- 搜索","url":"/2016/09/20/数据结构和算法 -- 搜索/","text":"&#x4E8C;&#x5206;&#x67E5;&#x627E; (Binary search)&#x6982;&#x5FF5;&#x5BF9;&#x4E8E;&#x5DF2;&#x6392;&#x5E8F;&#x7684;&#x6709;&#x5E8F;&#x7EBF;&#x6027;&#x5BB9;&#x5668;&#x800C;&#x8A00;(&#x6BD4;&#x5982;&#x6570;&#x7EC4;&#xFF0C;vector)&#xFF0C;&#x4E8C;&#x5206;&#x67E5;&#x627E;(Binary search)&#x51E0;&#x4E4E;&#x603B;&#x662F;&#x6700;&#x4F18;&#x7684;&#x641C;&#x7D22;&#x65B9;&#x6848;&#x3002;&#x4E8C;&#x5206;&#x67E5;&#x627E;&#x5C06;&#x5BB9;&#x5668;&#x7B49;&#x5206;&#x4E3A;&#x4E24;&#x90E8;&#x5206;&#xFF0C;&#x518D;&#x6839;&#x636E;&#x4E2D;&#x95F4;&#x8282;&#x70B9;&#x4E0E;&#x5F85;&#x641C;&#x7D22;&#x6570;&#x636E;&#x7684;&#x76F8;&#x5BF9;&#x5927;&#x5C0F;&#x5173;&#x7CFB;&#xFF0C;&#x8FDB;&#x4E00;&#x6B65;&#x641C;&#x7D22;&#x5176;&#x4E2D;&#x67D0;&#x4E00;&#x90E8;&#x5206;&#x3002;&#x4E8C;&#x5206;&#x67E5;&#x627E;&#x7684;&#x7B97;&#x6CD5;&#x590D;&#x6742;&#x5EA6;&#x4E3A;O(logn)&#x3002;&#x5BF9;&#x4E8E;&#x5C40;&#x90E8;&#x6709;&#x5E8F;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x6839;&#x636E;&#x5176;&#x5C40;&#x90E8;&#x6709;&#x5E8F;&#x7684;&#x7279;&#x6027;&#xFF0C;&#x5C3D;&#x53EF;&#x80FD;&#x5730;&#x5229;&#x7528;&#x903C;&#x8FD1;&#x3001;&#x526A;&#x679D;&#xFF0C;&#x4F7F;&#x7528;&#x4E8C;&#x5206;&#x67E5;&#x627E;&#x7684;&#x53D8;&#x79CD;&#x8FDB;&#x884C;&#x641C;&#x7D22;&#x3002; &#x4E8C;&#x5206;&#x5BFB;&#x627E;&#x8981;&#x6CE8;&#x610F;&#x7684;&#x95EE;&#x9898;&#x662F;&#xFF1A; Which way should middle pointer go next Avoid infinite loop in the code &#x7B97;&#x6CD5; Compare the number in the middle of the array with x. If it is equal, we are done. If the number is greater, we know to look in the second half of the array. If it is smaller, we know to look in the first half. We can repeat the search on the appropriate half of the array by comparing the middle element of that array with x, once again narrowing our search by a factor of 2. We repeat this process until we find x. This algorithm takes O(log n) time. ComplexityTime compexity: O(logN) &#x6A21;&#x677F;1234567891011121314int binarySearch(int *array, int left, int right, int value) { if (left &gt; right) { // value not found return -1; } int mid = right - (right - left) / 2; if (array[mid] == value) { return mid; } else if (array[mid] &lt; value) { return binarySearch(array, mid + 1, right, value); } else { return binarySearch(array, left, mid - 1, value); }} &#x4F8B;&#x9898;Find first bad version You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.Suppose you have n versions [1, 2, &#x2026;, n] and you want to find out the first bad one, which causes all the following ones to be bad.You are given an API bool isBadVersion(version) which will return whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API. 12345678910111213141516171819202122# The isBadVersion API is already defined for you.# @param version, an integer# @return a bool# def isBadVersion(version):class Solution(object): def firstBadVersion(self, n): &quot;&quot;&quot; :type n: int :rtype: int &quot;&quot;&quot; if n==0: return 0 start = 0 end = n while start &lt; end-1: mid = (start + end)/2 if isBadVersion(mid): end = mid else: start = mid return start if isBadVersion(start) else end Search a 2D Matrix Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:Integers in each row are sorted from left to right.The first integer of each row is greater than the last integer of the previous row.For example,Consider the following matrix:[ [1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50]]Given target = 3, return true. &#x628A;&#x8FD9;&#x4E2A; 2D &#x6570;&#x7EC4;&#x62C9;&#x5E73;&#x6210; 1D &#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x5355;&#x8C03;&#x9012;&#x589E;&#x7684;(sorted)&#x7684;&#x6570;&#x7EC4;&#xFF0C;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x4E0B;&#x627E;&#x4E00;&#x4E2A;&#x6570;&#x7528; binary search &#x5C31;&#x597D;&#xFF0C;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x662F; O(log(mn))=O(logN)&#xFF0C;&#x8981;&#x6CE8;&#x610F;&#x7684;&#x5C31;&#x662F; index &#x4E4B;&#x95F4;&#x600E;&#x4E48;&#x8F6C;&#x6362;&#xFF0C;&#x89C2;&#x5BDF;&#x53D1;&#x73B0;&#xFF1A;2D -&gt; 1D (i,j) -&gt; i*n+j1D -&gt; 2D index -&gt; (index/n,index%n)123456789101112131415161718192021222324class Solution(object): def searchMatrix(self, matrix, target): &quot;&quot;&quot; :type matrix: List[List[int]] :type target: int :rtype: bool &quot;&quot;&quot; if not matrix: return False m = len(matrix) # row n = len(matrix[0]) # column start = 0 end = m*n-1 while start &lt;= end: mid = (start+end)/2 if matrix[mid/n][mid%n] == target: return True if matrix[mid/n][mid%n] &gt; target: end = mid-1 else: start = mid+1 return False Search a 2D Matrix II&#x95EE;&#x9898;&#x518D;&#x53D8;&#x96BE;&#x4E00;&#x70B9;&#x3002; Search a 2D Matrix II QuestionEditorial Solution My SubmissionsTotal Accepted: 50080Total Submissions: 136871Difficulty: MediumWrite an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:Integers in each row are sorted in ascending from left to right.Integers in each column are sorted in ascending from top to bottom.For example,Consider the following matrix:[ [1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]]Given target = 5, return true.Given target = 20, return false. &#x5F53;&#x7136;&#x8FD8;&#x662F;&#x53EF;&#x4EE5;&#x7528; binary search &#x505A;&#xFF0C;&#x9700;&#x8981;&#x975E;&#x5E38;&#x4ED4;&#x7EC6;&#x3002;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6; max(O(mlogn,nlogm)),&#x7531; T(n)=2T(n/2)+cn &#x63A8;&#x5BFC;&#x800C;&#x6765;12345678910111213141516171819202122232425class Solution(object): def searchMatrix(self, matrix, target): &quot;&quot;&quot; :type matrix: List[List[int]] :type target: int :rtype: bool &quot;&quot;&quot; if not matrix: return False return self.helper(matrix,target,0,0,len(matrix)-1,len(matrix[0])-1) def helper(self,matrix,target,startX,startY,endX,endY): if startX&gt;endX or startY&gt;endY: return False midX=(startX+endX)/2 midY=(startY+endY)/2 mid = matrix[midX][midY] if mid == target: return True if mid &gt; target: return self.helper(matrix,target,startX,midY,midX-1,endY) or self.helper(matrix,target,startX,startY,endX,midY-1) else: return self.helper(matrix,target,midX+1,startY,endX,midY) or self.helper(matrix,target,startX,midY+1,endX,endY) return False &#x6216;&#x8005;&#xFF0C;&#x4E0D;&#x7528; binary search&#xFF0C;&#x7528;&#x6BD4;&#x8F83;&#x901A;&#x7528;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x5F88;&#x597D;&#x7406;&#x89E3;&#xFF0C;&#x4ECE; top rightmost &#x5F00;&#x59CB;&#xFF0C;&#x6BD4;&#x8F83;&#x4E0E; target &#x7684;&#x5927;&#x5C0F;&#xFF0C;if curr&gt;target&#xFF0C;&#x5F80;&#x5DE6;&#xFF0C;if curr","tags":"树"},{"title":"数据结构和算法 -- 数组","url":"/2016/09/19/数据结构和算法 -- 数组/","text":"&#x7B56;&#x7565; &amp; &#x6CE8;&#x610F;&#x70B9;&#x4F8B;&#x9898;346. Moving Average from Data StreamProblemGiven a stream of integers and a window size, calculate the moving average of all integers in the sliding window.For example,MovingAverage m = new MovingAverage(3);m.next(1) = 1m.next(10) = (1 + 10) / 2m.next(3) = (1 + 10 + 3) / 3m.next(5) = (10 + 3 + 5) / 3 Solution12345678910111213141516171819202122232425262728293031323334353637&apos;&apos;&apos;Solution:- maintain a deque of at most &apos;size&apos; length, for each next call, enque the number, calculate average, check if the length of deque is 3, if it is, popleft, and finally return the average. Time complexity O(n); Space complexity O(size)Follow-up:- make it O(1), save the sum each time, that is for each next call, enque the number, add to global sum, calculate average, check if the length of deque is 3, if it is, pop left, minus popped number from sum, and finally return the average.&apos;&apos;&apos;from collections import dequeclass MovingAverage(object): def __init__(self, size): &quot;&quot;&quot; Initialize your data structure here. :type size: int &quot;&quot;&quot; self.q=deque() self.size=size self.sum=0 def next(self, val): &quot;&quot;&quot; :type val: int :rtype: float &quot;&quot;&quot; self.q.append(val) self.sum+=val avg=self.sum/float(len(self.q)) if len(self.q)==self.size: self.sum-=self.q.popleft() return avg# Your MovingAverage object will be instantiated and called as such:# obj = MovingAverage(size)# param_1 = obj.next(val) 75. Sort Colorssubarray &#x95EE;&#x9898; ProblemGiven an array with n objects colored red, white or blue, sort them so that objects of the same color are adjacent, with the colors in the order red, white and blue.Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.Note:You are not suppose to use the library&#x2019;s sort function for this problem. Solution123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&apos;&apos;&apos;Solution:- quicksort? Time complexity: O(nlogn)- 3 numbers, so count and reset, Time complexity: O(n), Space complexity: O(3)-&gt;O(1), two-pass- subarray with different states, Time complexity: O(n)Attention:- for solution 3, boundary is tricky, remember pointer is not includedTest case:- [0]- [0,0,0]&apos;&apos;&apos;class Solution(object): def sortColors(self, nums): &quot;&quot;&quot; :type nums: List[int] :rtype: void Do not return anything, modify nums in-place instead. &quot;&quot;&quot; if len(nums)&lt;=1: return left,right,cur=0,len(nums)-1,0 while cur&lt;=right: if nums[cur]==0: nums[cur],nums[left]=nums[left],nums[cur] left+=1 cur+=1 elif nums[cur]==2: nums[cur],nums[right]=nums[right],nums[cur] right-=1 else: cur+=1 &apos;&apos;&apos; # two-pass solution: count and reset def sortColors(self, nums): &quot;&quot;&quot; :type nums: List[int] :rtype: void Do not return anything, modify nums in-place instead. &quot;&quot;&quot; if len(nums)&lt;1: return a0,a1,a2=0,0,0 for n in nums: if n==0: a0+=1 elif n==1: a1+=1 elif n==2: a2+=1 for i in range(len(nums)): if a0&gt;0: nums[i]=0 a0-=1 elif a1&gt;0: nums[i]=1 a1-=1 elif a2&gt;0: nums[i]=2 a2-=1 &apos;&apos;&apos; 53. Maximum SubarrayProblemFind the contiguous subarray within an array (containing at least one number) which has the largest sum.For example, given the array [-2,1,-3,4,-1,2,1,-5,4],the contiguous subarray [4,-1,2,1] has the largest sum = 6.More practice:If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle. Solution12345678910111213141516171819202122232425262728293031323334353637383940&apos;&apos;&apos;Solution:- subarray: 2 pointers: head,tail- any repeated work? no any meaningless work? yes check the sum-array and we can find that the non-max-sum either subtract one more number or miss one more addition --&gt; cur_sum=max(cur_sum,nums[start]+cur_sum)&apos;&apos;&apos;class Solution(object): def maxSubArray(self, nums): &quot;&quot;&quot; :type nums: List[int] :rtype: int &quot;&quot;&quot; cur_sum,max_sum=nums[0],nums[0] for start in range(1,len(nums)): cur_sum=max(nums[start],nums[start]+cur_sum) max_sum=max(cur_sum,max_sum) return max_sum &apos;&apos;&apos; # brute-force, time limit exceeded def maxSubArray(self, nums): &quot;&quot;&quot; :type nums: List[int] :rtype: int &quot;&quot;&quot; if len(nums)==0: return 0 global_sum=nums[0] for i in range(0,len(nums)-1): part_sum=nums[i] if part_sum&gt;global_sum: global_sum=part_sum for j in range(i+1,len(nums)): part_sum+=nums[j] if part_sum&gt;global_sum: global_sum=part_sum part_sum=nums[-1] if part_sum&gt;global_sum: global_sum=part_sum return global_sum &apos;&apos;&apos;","tags":"数组"},{"title":"数据结构和算法 -- TWO-SUM 问题和python dict","url":"/2016/09/18/数据结构和算法 -- TWO-SUM 问题和 python dict/","text":"&#x6253;&#x5C3D; two-sum &#x95EE;&#x9898;&#x3002; &#x7B56;&#x7565; &amp; &#x6CE8;&#x610F;&#x70B9;Assumption array is sorted? each input would have exactly one solution? duplicates in array? return index is sorted? &#x7B56;&#x7565; &#x5934;&#x5C3E;&#x6307;&#x9488;&#xFF0C;&#x7ECF;&#x5178;&#x6A21;&#x677F; 12345678while start&lt;end: sum=numbers[start]+numbers[end] if sum==target: return [start,end] if sum&gt;target: end-=1 else: start+=1 &#x52A0;&#x4E0A;&#x53BB;&#x91CD;&#x7684;&#x6A21;&#x677F;&#xFF1A; 1234567891011121314while start&lt;end: cur_sum=nums[start]+nums[end] if cur_sum&lt;target: start+=1 elif cur_sum&gt;target: end-=1 else: cur_res.append([nums[0],nums[start],nums[end]]) start+=1 end-=1 while start&lt;end and nums[start]==nums[start-1]: start+=1 while start&lt;end and nums[end]==nums[end+1]: end-=1 Hashmap &#x6765; search target-nums[i]&#xFF0C;1&#xFF0D;pass &#x5148; check &#x5728;&#x4E0D;&#x5728; map &#x4E2D;&#xFF0C;&#x4E0D;&#x5728;&#x5C31;&#x653E;&#x8FDB;&#x53BB;&#x3002; &#x6CE8;&#x610F;&#x70B9; &#x6D89;&#x53CA; index &#x4E00;&#x822C;&#x5C31;&#x4E0D;&#x5148; sort &#x4E86;&#xFF0C;&#x56E0;&#x4E3A;&#x4F1A; disrupt the order &#x5982;&#x679C;&#x4E0A;&#x6765;&#x5C31;&#x628A;&#x6574;&#x4E2A; list &#x8F6C;&#x6210; hashmap&#xFF0C;&#x4E4B;&#x540E;&#x5728; search&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x8981;&#x6CE8;&#x610F; val==target-val &#x7684;&#x60C5;&#x51B5;&#x4E86;&#xFF0C;&#x4E5F;&#x8981;&#x5224;&#x65AD; val &#x51FA;&#x73B0;&#x51E0;&#x6B21;&#xFF08;hashmap &#x5FC5;&#x987B;&#x8003;&#x8651; key &#x662F;&#x5426;&#x4F1A;&#x91CD;&#x590D;&#xFF09; &#x8981;&#x53BB;&#x91CD;&#x7684;&#x95EE;&#x9898;&#x7528;&#x4E24;&#x4E2A; pointer &#x53EF;&#x4EE5;&#x987A;&#x4FBF;&#x53BB;&#x91CD;&#xFF0C;&#x4F46;&#x8981;&#x6CE8;&#x610F;&#x4FDD;&#x8BC1;&#x5927;&#x6761;&#x4EF6; start&lt;end &#x6CE8;&#x610F;&#x6570;&#x5B57;&#x53EF;&#x80FD;&#x662F; negative&#xFF0C;&#x521D;&#x59CB;&#x5316;&#x53D8;&#x91CF;&#x4E0D;&#x8981;&#x60F3;&#x5F53;&#x7136;&#x7684;&#x4E3A;0&#xFF0C;&#x8BA1;&#x7B97; difference &#x7684;&#x65F6;&#x5019;&#x7528; abs(n) &#x7EDD;&#x5BF9;&#x503C;&#x3002; python dict &#x7684;&#x7528;&#x6CD5;&#xFF0C;&#x54EA;&#x4E9B; O(1) &#x54EA;&#x4E9B; O(n) &#x4F8B;&#x9898;1. Two Sum Given an array of integers, return indices of the two numbers such that they add up to a specific target.You may assume that each input would have exactly one solution.Example:Given nums = [2, 7, 11, 15], target = 9,Because nums[0] + nums[1] = 2 + 7 = 9,return [0, 1]. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657&apos;&apos;&apos;Check assumption:- array is not sorted- each input would have exactly one solution- duplicates in array- return index is not sortedCorner case:- len(nums)&lt;2 or nums==NoneSolution:- Loop array, search target-nums[i] for each nums[j] on the right. Time complexity: O(n^2)Attention:- we cannot sort array, compare target and sum and move pointers to get the answer as it would disrupt the order- array.index(value) returns first match, but this may not be what you expectOptimization:- While loop, use hashmap&lt;target-nums[i],i&gt; to store remaining index and value, so that the second loop will have O(1) time complexity, and the total complexity would be O(n). The cost is space complexity. This is two-pass solution.- Two-pass --&gt; One pass. While loop, for each i, check if it is in hashmap, if not, add it to the hashmap, if exists, return index.&apos;&apos;&apos;class Solution(object): # with hashmap def twoSum(self, nums, target): &quot;&quot;&quot; :type nums: List[int] :type target: int :rtype: List[int] &quot;&quot;&quot; if not nums or len(nums)&lt;2: return None hashmap=dict() for index,value in enumerate(nums): if target-value in hashmap: return[index,hashmap[target-value]] hashmap[value]=index return None &apos;&apos;&apos; # two loops def twoSum(self, nums, target): &quot;&quot;&quot; :type nums: List[int] :type target: int :rtype: List[int] &quot;&quot;&quot; if not nums or len(nums)&lt;2: return None for index1,value in enumerate(nums): for index2 in range(index1+1,len(nums)): if nums[index2]==target-value: return [index1,index2] return None &apos;&apos;&apos; 167. Two Sum II - Input array is sorted Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.You may assume that each input would have exactly one solution.Input: numbers={2, 7, 11, 15}, target=9Output: index1=1, index2=2 1234567891011121314151617181920class Solution(object): def twoSum(self, numbers, target): &quot;&quot;&quot; :type numbers: List[int] :type target: int :rtype: List[int] &quot;&quot;&quot; if not numbers or len(numbers)&lt;2: return None start=0 end=len(numbers)-1 while start&lt;end: sum=numbers[start]+numbers[end] if sum==target: return [start+1,end+1] if sum&gt;target: end-=1 else: start+=1 return None 170. Two Sum III - Data structure design Design and implement a TwoSum class. It should support the following operations: add and find.add - Add the number to an internal data structure.find - Find if there exists any pair of numbers which sum is equal to the value.For example,add(1); add(3); add(5);find(4) -&gt; truefind(7) -&gt; false 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970&apos;&apos;&apos;Data structure:- hashmap&lt;number,frequency&gt;. Use hashmap because duplicates matter!Corner case:- hashmap is NoneAttention:- avoid case val==target-valTime complexity:- add() O(1)- find() O(n)About python dictionary:- Do not use dict.keys!In Python 2 dict.keys() creates the whole list of keys first that&apos;s why it is an O(N) operation, while key in dict is an O(1) operation.&gt;&gt;&gt; dic = dict.fromkeys(range(10**5))&gt;&gt;&gt; %timeit 10000 in dic1000000 loops, best of 3: 170 ns per loop&gt;&gt;&gt; %timeit 10000 in dic.keys()100 loops, best of 3: 4.98 ms per loop&gt;&gt;&gt; %timeit 10000 in dic.iterkeys()1000 loops, best of 3: 402 us per loop&gt;&gt;&gt; %timeit 10000 in dic.viewkeys()1000000 loops, best of 3: 457 ns per loop- Use dict.get(key,default=None)!self.hashmap[number]=self.hashmap.get(number,0)+1&apos;&apos;&apos;class TwoSum(object): def __init__(self): &quot;&quot;&quot; initialize your data structure here &quot;&quot;&quot; self.hashmap=dict() def add(self, number): &quot;&quot;&quot; Add the number to an internal data structure. :rtype: nothing &quot;&quot;&quot; &apos;&apos;&apos; if self.hashmap.has_key(number): self.hashmap[number]+=1 else: self.hashmap[number]=1 &apos;&apos;&apos; self.hashmap[number]=self.hashmap.get(number,0)+1 def find(self, value): &quot;&quot;&quot; Find if there exists any pair of numbers which sum is equal to the value. :type value: int :rtype: bool &quot;&quot;&quot; if not self.hashmap: return False for v in self.hashmap: if value-v in self.hashmap: if self.hashmap[v]&gt;1 or v!=value-v: return True return False# Your TwoSum object will be instantiated and called as such:# twoSum = TwoSum()# twoSum.add(number)# twoSum.find(value) 15. 3Sum Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.Note: The solution set must not contain duplicate triplets.For example, given array S = [-1, 0, 1, 2, -1, -4],A solution set is:[ [-1, 0, 1], [-1, -1, 2]] 123456789101112131415161718192021222324252627282930313233343536373839404142434445&apos;&apos;&apos;Solution:- convert to 2-sum problem, avoid duplicate triplets: sort the array, move pointers to skip duplicatesAttention:- when avoiding duplicates, keep in mind start&lt;end, consider corner case [0,0,0] with 0&apos;&apos;&apos;class Solution(object): def threeSum(self, nums): &quot;&quot;&quot; :type nums: List[int] :rtype: List[List[int]] &quot;&quot;&quot; if len(nums)&lt;3: return [] nums=sorted(nums) result=[] for i in range(len(nums)-2): if i&gt;0 and nums[i]==nums[i-1]: continue result+=self.twoSum(nums[i:],0-nums[i]) return result def twoSum(self,nums,target): if len(nums)&lt;3: return [] start,end=1,len(nums)-1 cur_res=[] while start&lt;end: cur_sum=nums[start]+nums[end] if cur_sum&lt;target: start+=1 elif cur_sum&gt;target: end-=1 else: cur_res.append([nums[0],nums[start],nums[end]]) start+=1 end-=1 while start&lt;end and nums[start]==nums[start-1]: start+=1 while start&lt;end and nums[end]==nums[end+1]: end-=1 return cur_res 259. 3Sum Smaller Given an array of n integers nums and a target, find the number of index triplets i, j, k with 0 &lt;= i &lt; j &lt; k &lt; n that satisfy the condition nums[i] + nums[j] + nums[k] &lt; target.For example, given nums = [-2, 0, 1, 3], and target = 2.Return 2. Because there are two triplets which sums are less than 2:[-2, 0, 1][-2, 0, 3]Follow up:Could you solve it in O(n2) runtime? 1234567891011121314151617181920212223242526272829&apos;&apos;&apos;Same with normal 3sum problem, just consider all possibilities.Solution:- sort nums, for nums[i] in nums, search if nums[start]+nums[end]&lt;target-nums[i] for nums[i+1:], if it is, count+=end-start and keep going&apos;&apos;&apos;class Solution(object): def threeSumSmaller(self, nums, target): &quot;&quot;&quot; :type nums: List[int] :type target: int :rtype: int &quot;&quot;&quot; if len(nums)&lt;3: return 0 count=0 nums=sorted(nums) for i in range(len(nums)): start=i+1 end=len(nums)-1 while start&lt;end: cur_sum=nums[start]+nums[end] new_target=target-nums[i] if cur_sum&lt;new_target: count+=end-start start+=1 else: end-=1 return count 16. 3Sum Closest Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution. For example, given array S = {-1 2 1 -4}, and target = 1. The sum that is closest to the target is 2. (-1 + 2 + 1 = 2). 12345678910111213141516171819202122232425262728293031323334&apos;&apos;&apos;Simliar to 3sum problem, but have a global_diff to record current minimum difference (remember it should be absolute value) and global_sum to record current closet result&apos;&apos;&apos;class Solution(object): def threeSumClosest(self, nums, target): &quot;&quot;&quot; :type nums: List[int] :type target: int :rtype: int &quot;&quot;&quot; if len(nums)&lt;3: return None nums=sorted(nums) global_diff=abs(target-nums[0]) global_sum=sum(nums[0:3]) for i in range(len(nums)-2): start=i+1 end=len(nums)-1 cur_target=target-nums[i] while start&lt;end: sum2=nums[start]+nums[end] if sum2&lt;cur_target: if abs(cur_target-sum2)&lt;global_diff: global_sum=sum2+nums[i] global_diff=abs(cur_target-sum2) start+=1 elif sum2&gt;cur_target: if abs(sum2-cur_target)&lt;global_diff: global_diff=abs(sum2-cur_target) global_sum=sum2+nums[i] end-=1 else: return target return global_sum 18. 4Sum Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.Note: The solution set must not contain duplicate quadruplets.For example, given array S = [1, 0, -1, 0, -2, 2], and target = 0.A solution set is:[ [-1, 0, 0, 1], [-2, -1, 1, 2], [-2, 0, 0, 2]] 1234567891011121314151617181920212223242526272829303132333435363738394041424344class Solution(object): def fourSum(self, nums, target): &quot;&quot;&quot; :type nums: List[int] :type target: int :rtype: List[List[int]] &quot;&quot;&quot; if len(nums)&lt;4: return [] res=[] nums=sorted(nums) for i in range(len(nums)-3): if i&gt;0 and nums[i]==nums[i-1]: continue res+=self.sum_3(nums[i:],target-nums[i]) return res def sum_3(self,nums,target): if len(nums)&lt;4: return [] res=[] cur=nums[0] nums=nums[1:] for i in range(len(nums)-2): if i&gt;0 and nums[i]==nums[i-1]: continue new_target=target-nums[i] start=i+1 end=len(nums)-1 while start&lt;end: cur_sum=nums[start]+nums[end] if cur_sum&gt;new_target: end-=1 elif cur_sum&lt;new_target: start+=1 else: res.append([cur,nums[i],nums[start],nums[end]]) start+=1 end-=1 while start&lt;end and nums[start]==nums[start-1]: start+=1 while start&lt;end and nums[end]==nums[end+1]: end-=1 return res dict &#x8BE6;&#x89E3;&#x5185;&#x7F6E;&#x51FD;&#x6570;&#x548C;&#x65B9;&#x6CD5;&#x5E8F;&#x53F7;&#x51FD;&#x6570;&#x53CA;&#x63CF;&#x8FF0;1cmp(dict1, dict2)&#x6BD4;&#x8F83;&#x4E24;&#x4E2A;&#x5B57;&#x5178;&#x5143;&#x7D20;&#x3002;2len(dict)&#x8BA1;&#x7B97;&#x5B57;&#x5178;&#x5143;&#x7D20;&#x4E2A;&#x6570;&#xFF0C;&#x5373;&#x952E;&#x7684;&#x603B;&#x6570;&#x3002;3str(dict)&#x8F93;&#x51FA;&#x5B57;&#x5178;&#x53EF;&#x6253;&#x5370;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x8868;&#x793A;&#x3002;4type(variable)&#x8FD4;&#x56DE;&#x8F93;&#x5165;&#x7684;&#x53D8;&#x91CF;&#x7C7B;&#x578B;&#xFF0C;&#x5982;&#x679C;&#x53D8;&#x91CF;&#x662F;&#x5B57;&#x5178;&#x5C31;&#x8FD4;&#x56DE;&#x5B57;&#x5178;&#x7C7B;&#x578B;&#x3002; Python&#x5B57;&#x5178;&#x5305;&#x542B;&#x4E86;&#x4EE5;&#x4E0B;&#x5185;&#x7F6E;&#x65B9;&#x6CD5;&#xFF1A; &#x5E8F;&#x53F7;&#x51FD;&#x6570;&#x53CA;&#x63CF;&#x8FF0;1radiansdict.clear()&#x5220;&#x9664;&#x5B57;&#x5178;&#x5185;&#x6240;&#x6709;&#x5143;&#x7D20; 2radiansdict.copy()&#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x5B57;&#x5178;&#x7684;&#x6D45;&#x590D;&#x5236;3radiansdict.fromkeys() &#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x65B0;&#x5B57;&#x5178;&#xFF0C;&#x4EE5;&#x5E8F;&#x5217;seq&#x4E2D;&#x5143;&#x7D20;&#x505A;&#x5B57;&#x5178;&#x7684;&#x952E;&#xFF0C;val&#x4E3A;&#x5B57;&#x5178;&#x6240;&#x6709;&#x952E;&#x5BF9;&#x5E94;&#x7684;&#x521D;&#x59CB;&#x503C;4radiansdict.get(key, default=None)&#x8FD4;&#x56DE;&#x6307;&#x5B9A;&#x952E;&#x7684;&#x503C;&#xFF0C;&#x5982;&#x679C;&#x503C;&#x4E0D;&#x5728;&#x5B57;&#x5178;&#x4E2D;&#x8FD4;&#x56DE;default&#x503C;5radiansdict.has_key(key)&#x5982;&#x679C;&#x952E;&#x5728;&#x5B57;&#x5178;dict&#x91CC;&#x8FD4;&#x56DE;true&#xFF0C;&#x5426;&#x5219;&#x8FD4;&#x56DE;false6radiansdict.items()&#x4EE5;&#x5217;&#x8868;&#x8FD4;&#x56DE;&#x53EF;&#x904D;&#x5386;&#x7684;(&#x952E;, &#x503C;) &#x5143;&#x7EC4;&#x6570;&#x7EC4;7radiansdict.keys()&#x4EE5;&#x5217;&#x8868;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x5B57;&#x5178;&#x6240;&#x6709;&#x7684;&#x952E;8radiansdict.setdefault(key, default=None)&#x548C;get()&#x7C7B;&#x4F3C;, &#x4F46;&#x5982;&#x679C;&#x952E;&#x4E0D;&#x5B58;&#x5728;&#x4E8E;&#x5B57;&#x5178;&#x4E2D;&#xFF0C;&#x5C06;&#x4F1A;&#x6DFB;&#x52A0;&#x952E;&#x5E76;&#x5C06;&#x503C;&#x8BBE;&#x4E3A;default9radiansdict.update(dict2)&#x628A;&#x5B57;&#x5178;dict2&#x7684;&#x952E;/&#x503C;&#x5BF9;&#x66F4;&#x65B0;&#x5230;dict&#x91CC;10radiansdict.values()&#x4EE5;&#x5217;&#x8868;&#x8FD4;&#x56DE;&#x5B57;&#x5178;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x503C; &#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E0B;&#x8868; python 3 &#x4E2D; dictinoary (&#x5305;&#x62EC; dict &#x548C; defaultdict) &#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF0C;&#x8981;&#x6CE8;&#x610F;&#x7684; d.keys() &#x5728; python 2 &#x4E2D;&#x7684;&#x590D;&#x6742;&#x5EA6;&#x662F; O(n)&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x8FD4;&#x56DE;&#x7684;&#x662F;&#x4E00;&#x4E2A; list Operation Example Class Notes Index d[k] O(1) &#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014; Store d[k] = v O(1) &#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014; Length len(d) O(1) &#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014; Delete del d[k] O(1) &#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014; get/setdefault d.method O(1) &#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014; Pop d.pop(k) O(1) &#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014; Pop item d.popitem() O(1) &#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014; Clear d.clear() O(1) similar to s = {} or = dict() Views d.keys() O(1) &#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014; Construction dict(&#x2026;) O(len(&#x2026;)) depends # (key,value) 2-tuples Iteration for k in d: O(N) all forms: keys, values, items So, most dict operations are O(1). defaultdicts support all operations that dicts support, with the same complexity classes (because it inherits all the operations); this assumes that calling the constructor when a values isn&#x2019;t found in the defaultdict is O(1) - which is true for int(), list(), set(), &#x2026; (the things commonly used) &#x53C2;&#x8003;&#x94FE;&#x63A5;Python TimeComplexityComplexity of Python Operations","tags":"python array two-sum"},{"title":"Search Engines笔记 - Query Processing","url":"/2016/09/11/Search Engines笔记 - Query Processing/","text":"&#x641C;&#x7D22;&#x5F15;&#x64CE;&#x662F;&#x600E;&#x4E48;&#x5904;&#x7406; query &#x7684;&#xFF1F;&#x4E09;&#x79CD;&#x65B9;&#x6CD5;&#xFF0C;Term-at-a-time(TAAT)&#xFF0C;Document-at-a-time(DAAT)&#xFF0C;TAAT/DAAT hybrids&#x3002; TAAT&#x4E3B;&#x8981;&#x601D;&#x8DEF;&#xFF1A; &#x5904;&#x7406;&#x5B8C;&#x4E00;&#x4E2A; inverted list &#x518D;&#x5904;&#x7406;&#x4E0B;&#x4E00;&#x4E2A;&#x3002; &#x6BCF;&#x5904;&#x7406;&#x5B8C;&#x4E00;&#x4E2A; inverted list&#xFF0C;&#x90E8;&#x5206;&#x66F4;&#x65B0; document score&#x3002; &#x4F18;&#x70B9;&#xFF1A; conceptually, easy to understand very efficient, little wasted effort &#x7F3A;&#x70B9;&#xFF1A; memory usage is uncontrolled&#x6BCF;&#x4E2A; operator &#x90FD;&#x4F1A;&#x540C;&#x65F6;&#x5728;&#x5185;&#x5B58;&#x91CC;&#x5B58; 3 &#x4E2A; list(arg1,arg2,result)&#x6BCF;&#x4E2A;&#x6DF1;&#x5EA6;&#x4E3A; d &#x7684; query &#x90FD;&#x4F1A;&#x540C;&#x65F6;&#x5728;&#x5185;&#x5B58;&#x91CC;&#x5B58; d+2 &#x4E2A; list&#x3002; can run out of memory&#x5305;&#x542B;&#x6709; frequent term &#x7684; query (&#x5F88;&#x957F;&#x7684; inverted list)&#x590D;&#x6742;&#x7684; query (&#x66F4;&#x591A;&#x7684; inverted list)&#x540C;&#x65F6;&#x5904;&#x7406;&#x591A;&#x4E2A; query &#x7684;&#x7CFB;&#x7EDF; &#x6240;&#x4EE5; TAAT &#x5F88;&#x5C11;&#x7528;&#x5728; large-scale systems&#x3002; Eg.#AND(a b #OR (c #NEAR/3(d e)) f)&#x8F6C;&#x5316;&#x6210; query tree1234 AND(a b OR f) (c NEAR/3 (d e)) 1234567891011Retrieve aRetrieve ba AND b -&gt; Result(AND_1)Retrieve cRetrieve dRetrieve ed NEAR/3 e -&gt; Result(NEAR)c OR Result(NEAR) -&gt; Result(OR)Result(AND_1) AND Result(OR) -&gt; Result(AND_2)Retrieve fResult(AND_2) AND f -&gt; Result(Q) Memory usage&#x5185;&#x5B58;&#x4E2D;&#x540C;&#x65F6;&#x5B58;&#x5728; 5 &#x4E2A; list123size(a AND b) +size(c) +size(d) + size(e) + size(d NEAR/3 e) bytes DAAT&#x4E3B;&#x8981;&#x601D;&#x8DEF;&#xFF1A; &#x5904;&#x7406;&#x5B8C;&#x4E00;&#x7BC7;&#x6587;&#x6863;&#x540E;&#xFF0C;&#x518D;&#x5904;&#x7406;&#x4E0B;&#x4E00;&#x7BC7;&#x6587;&#x6863;&#x3002; &#x6BCF;&#x5904;&#x7406;&#x4E00;&#x7BC7;&#x6587;&#x6863;&#xFF0C;&#x5C31;&#x7B97;&#x51FA; complete score &#x627E;&#x5230;&#x6240;&#x6709; term &#x7684; inverted list&#xFF0C;&#x6BCF;&#x4E2A; inverted list &#x5206;&#x914D;&#x4E00;&#x4E2A; iterator&#xFF0C;&#x5206;&#x914D;&#x4E00;&#x4E2A;&#x7A7A;&#x7684; result list&#x3002;&#x4E4B;&#x540E;&#x627E;&#x5230;&#x6BCF;&#x4E2A; inverted list &#x5F53;&#x524D;&#x7684; doc id&#xFF0C;&#x53D6;&#x6700;&#x5C0F;&#x7684; doc id&#xFF0C;&#x7B97;&#x51FA;&#x5F53;&#x524D;&#x5206;&#x6570;&#xFF0C;&#x4FDD;&#x5B58;&#x5230; result list &#x4E2D;&#xFF0C;&#x7136;&#x540E;&#x628A;&#x8FD9;&#x4E2A; iterator &#x5F80;&#x4E0B;&#x79FB;&#x4E00;&#x4E2A; doc id&#xFF0C;&#x91CD;&#x590D;&#x8FD9;&#x4E2A;&#x8FC7;&#x7A0B;&#x3002; &#x7B80;&#x5316;&#x4E00;&#x4E0B;&#xFF0C;if this list has the current docid&#xFF0C;&#x505A;&#x4E24;&#x4EF6;&#x4E8B;&#xFF0C; update the score advance the pointer &#x4EE3;&#x7801;&#x63CF;&#x8FF0;123q.initialize()while (q.hasNext()) q.evalNext() returns next [docid,score] tuple &#x4F18;&#x70B9;&#xFF1A; memory usage is easy to control&#x9700;&#x8981;&#x540C;&#x65F6; access &#x6240;&#x6709; args &#x7684; inverted list (seems bad)&#xFF0C;&#x7136;&#x800C;&#xFF0C;&#x8FD9;&#x4E9B; inverted list &#x53EF;&#x4EE5;&#x4EE5; block &#x7684;&#x5F62;&#x5F0F;&#x5206;&#x6279;&#x4ECE; disk &#x8BFB;&#x8FDB; RAM&#x3002;&#x7B49;&#x5F53;&#x524D; block &#x5904;&#x7406;&#x5B8C;&#x4E86;&#x518D;&#x8BFB;&#x4E0B;&#x4E00;&#x4E2A; block&#xFF0C;&#x8FD9;&#x6837;&#x5904;&#x7406;&#x4E00;&#x4E2A; query &#x6240;&#x9700;&#x7684;&#x5185;&#x5B58;&#x5C31;&#x53D6;&#x51B3;&#x4E8E; block &#x7684;&#x5927;&#x5C0F;&#x3002; Many query evaluation optimizations are possibleonly partial evaluation of documents with low scores &#x6240;&#x4EE5; TAAT &#x7ECF;&#x5E38;&#x7528;&#x5728; large-scale systems&#x3002; TAAT/DAAT hybrids&#x5E73;&#x8861; Efficiency &#x548C; memory control&#x3002;Eg. block-based TAAT(compute TAAT over blocks of document ids)","tags":"nlp search-engines"},{"title":"数据结构和算法 -- 栈和队列","url":"/2016/09/08/数据结构和算法 -- 栈和队列/","text":"Stack implementation&#x5B9E;&#x73B0;&#x4E00;&#x4E2A; stack &#x53EF;&#x4EE5;&#x7528;&#x4E24;&#x79CD;&#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF0C;dynamic array &#x6216;&#x8005;&#x662F; linked list&#x3002; dynamic array &#x7684;&#x4F18;&#x52BF;&#x662F;&#x652F;&#x6301; random access&#xFF0C;&#x56E0;&#x4E3A;&#x53EF;&#x4EE5;&#x901A;&#x8FC7; index &#x83B7;&#x53D6;&#x6570;&#x636E;&#xFF0C;&#x7136;&#x800C; stack &#x4E3B;&#x8981;&#x4F5C;&#x7528;&#x662F; pop&#xFF0C;&#x6240;&#x4EE5; dynamic array &#x7684;&#x8FD9;&#x4E2A;&#x4F18;&#x52BF; gains you little&#x3002;dynamic array &#x53E6;&#x4E00;&#x4E2A;&#x4F18;&#x52BF;&#x662F; resize&#xFF0C;&#x8FD9;&#x4E2A;&#x975E;&#x5E38;&#x7684; time-consuming &#x56E0;&#x4E3A;&#x9700;&#x8981; copy array to a new one&#x3002; linked list &#x4F1A;&#x4E3A;&#x6BCF;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x5206;&#x914D;&#x5185;&#x5B58;&#xFF0C;&#x8FD9;&#x6BD4; dynamic array &#x7684; resize &#x66F4;&#x8D39;&#x65F6;&#xFF0C;&#x56E0;&#x6B64;&#x57FA;&#x4E8E; dynamic array &#x7684; stack &#x901A;&#x5E38;&#x8981;&#x6BD4;&#x57FA;&#x4E8E; linked list &#x7684; stack &#x5FEB;&#x4E00;&#x4E9B;&#x3002;&#x7136;&#x800C;&#xFF0C;&#x57FA;&#x4E8E; linked list &#x7684; stack &#x66F4;&#x5BB9;&#x6613;&#x5B9E;&#x73B0;&#x3002; Proper functionality&#x57FA;&#x672C;&#x65B9;&#x6CD5;&#xFF1A; pushallocate new element, checks for failure, sets the data of the new element, places it at the top of the stack, adjust the stack pointer popcheck the stack isn&#x2019;t empty, fetches data from top element, adjusts the stack pointer, free the element that is no longer on the stack &#x5B8C;&#x6574;&#x65B9;&#x6CD5;&#xFF1A; createStackpush a null pointer deleteStackcall pop repeatedly Error handling pop&#x5982;&#x679C; stack &#x4E3A;&#x7A7A;&#xFF0C;&#x8FD4;&#x56DE; null? &#x95EE;&#x9898;&#x662F;&#x9700;&#x8981;&#x4FDD;&#x8BC1; stack &#x91CC;&#x6CA1;&#x6709;&#x5B58; null pointer&#xFF1B;&#x8FD4;&#x56DE; special value(or negative value)&#xFF1F;&#x95EE;&#x9898;&#x662F;&#x9700;&#x8981; assume stack &#x91CC;&#x6CA1;&#x6709;&#x8FD9;&#x4E9B;&#x5143;&#x7D20;&#x3002;&#x611F;&#x89C9; raise error &#x6BD4;&#x8F83;&#x7B80;&#x5355;&#x3002; push&#x5982;&#x679C;&#x4F20;&#x8FDB;&#x53BB;&#x7684;&#x503C;&#x4E3A; null&#xFF0C;raise error 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657# implement a stack using linkedlistclass Stack(object): class Node(object): def __init__(self, val=None, next=None): self.val = val self.next = next def __init__(self): self.head = None &apos;&apos;&apos; check the stack isn&apos;t empty, fetches data from top element, adjusts the stack pointer, free the element that is no longer on the stack &apos;&apos;&apos; def pop(self): if not self.head: raise ValueError(&quot;Empty stack!&quot;) val = self.head.val self.head = self.head.next return val &apos;&apos;&apos; allocate new element, checks for failure, sets the data of the new element, places it at the top of the stack, adjust the stack pointer &apos;&apos;&apos; def push(self, val): if not val: raise ValueError(&quot;Invalid value!&quot;) node = self.Node(val, self.head) self.head = node&apos;&apos;&apos;push a null pointer&apos;&apos;&apos;def createStack(stack): stack.head = Node() return True&apos;&apos;&apos;call pop repeatedly&apos;&apos;&apos;def deleteStack(stack): while stack.head: stack.pop() return Truestack=Stack()stack.push(1)stack.push(2)stack.push(3)print stack.pop()print stack.pop()print stack.pop()print stack.pop() Leetcode &#x5B9E;&#x4F8B;232.Implement Queue using StacksProblemImplement the following operations of a queue using stacks.push(x) &#x2013; Push element x to the back of queue.pop() &#x2013; Removes the element from in front of queue.peek() &#x2013; Get the front element.empty() &#x2013; Return whether the queue is empty.Notes:You must use only standard operations of a stack &#x2013; which means only push to top, peek/pop from top, size, and is empty operations are valid.Depending on your language, stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack.You may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue). Solution12345678910111213141516171819202122232425262728293031323334353637383940414243444546class Queue(object): def __init__(self): &quot;&quot;&quot; initialize your data structure here. &quot;&quot;&quot; self.stack1=list() self.stack2=list() def push(self, x): &quot;&quot;&quot; :type x: int :rtype: nothing &quot;&quot;&quot; self.stack1.append(x) def pop(self): &quot;&quot;&quot; :rtype: nothing &quot;&quot;&quot; self.helper() return self.stack2.pop() def peek(self): &quot;&quot;&quot; :rtype: int &quot;&quot;&quot; self.helper() &apos;&apos;&apos; element=self.stack2.pop() self.stack2.append(element) return element &apos;&apos;&apos; return self.stack2[-1] def empty(self): &quot;&quot;&quot; :rtype: bool &quot;&quot;&quot; if self.stack1 or self.stack2: return False return True def helper(self): if not self.stack2: while self.stack1: self.stack2.append(self.stack1.pop()) 225.Implement Stack using QueuesProblemImplement the following operations of a stack using queues.push(x) &#x2013; Push element x onto stack.pop() &#x2013; Removes the element on top of the stack.top() &#x2013; Get the top element.empty() &#x2013; Return whether the stack is empty.Notes:You must use only standard operations of a queue &#x2013; which means only push to back, peek/pop from front, size, and is empty operations are valid.Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).Update (2015-06-11):The class name of the Java function had been updated to MyStack instead of Stack. &#x7528;&#x4E24;&#x4E2A;&#x961F;&#x5217;&#xFF0C;push: O(n)&#xFF0C;pop: O(1)&#xFF0C;top: O(1) Solution1234567891011121314151617181920212223242526272829303132333435363738394041from collections import dequeclass Stack(object): def __init__(self): &quot;&quot;&quot; initialize your data structure here. &quot;&quot;&quot; self.queue1=deque() self.queue2=deque() def push(self, x): &quot;&quot;&quot; :type x: int :rtype: nothing &quot;&quot;&quot; if not self.queue2: self.queue2.append(x) while self.queue1: self.queue2.append(self.queue1.popleft()) self.queue1,self.queue2=self.queue2,self.queue1 def pop(self): &quot;&quot;&quot; :rtype: nothing &quot;&quot;&quot; self.queue1.popleft() def top(self): &quot;&quot;&quot; :rtype: int &quot;&quot;&quot; return self.queue1[0] def empty(self): &quot;&quot;&quot; :rtype: bool &quot;&quot;&quot; if not self.queue1: return True return False 20.Valid ParenthesesProblemGiven a string containing just the characters &#x2018;(&#x2018;, &#x2018;)&#x2019;, &#x2018;{&#x2018;, &#x2018;}&#x2019;, &#x2018;[&#x2018; and &#x2018;]&#x2019;, determine if the input string is valid. The brackets must close in the correct order, &#x201C;()&#x201D; and &#x201C;()[]{}&#x201D; are all valid but &#x201C;(]&#x201D; and &#x201C;([)]&#x201D; are not. Solution123456789101112131415161718192021222324&apos;&apos;&apos;Solution:- check when right meet; just need the last unpaired left =&gt; first in,last out =&gt; stack- create a dictionary for parenthese pairs, for each element in s, if it exists in dictionary.keys(), then append it into the stack, else, pop from the stack and check if the popped value and current element is a pair. Time complexity: O(n)- remember to check if stack is empty in every check and also in final check (look back for previous left parentheses)&apos;&apos;&apos;class Solution(object): def isValid(self, s): &quot;&quot;&quot; :type s: str :rtype: bool &quot;&quot;&quot; if not s: return None dictionary={&apos;(&apos;:&apos;)&apos;,&apos;[&apos;:&apos;]&apos;,&apos;{&apos;:&apos;}&apos;} s=list(s) stack=[] for i in s: if i in dictionary: stack.append(i) else: if not stack or dictionary[stack.pop()]!=i: return False return not stack 150. Evaluate Reverse Polish NotationProblemEvaluate the value of an arithmetic expression in Reverse Polish Notation. Valid operators are +, -, *, /. Each operand may be an integer or another expression. Some examples: [&#x201C;2&#x201D;, &#x201C;1&#x201D;, &#x201C;+&#x201D;, &#x201C;3&#x201D;, &#x201C;*&#x201C;] -&gt; ((2 + 1) * 3) -&gt; 9 [&#x201C;4&#x201D;, &#x201C;13&#x201D;, &#x201C;5&#x201D;, &#x201C;/&#x201C;, &#x201C;+&#x201D;] -&gt; (4 + (13 / 5)) -&gt; 6 Solution12345678910111213141516171819202122232425262728293031&apos;&apos;&apos;Solution:- each operation requires two operands and one operator, operator always appear after operands, so we search element from left to right, store numbers in the stack till we meet up with an operator, and with the operator, we pop two elements from the stack and caculate the results and push it back to stack, and continue, till the end of tokens, finally return the final value of the stack.Attention(negative integer division):- division in python, pls consider when one of the operand is negative, you would get surprising result. eg. -7/2=-4. in order to avoid that, use int(float(a)/b) whenever there&apos;s a division operation&apos;&apos;&apos;class Solution(object): def evalRPN(self, tokens): &quot;&quot;&quot; :type tokens: List[str] :rtype: int &quot;&quot;&quot; stack=[] for t in tokens: if t==&apos;+&apos;: stack.append(stack.pop()+stack.pop()) elif t==&apos;-&apos;: a=stack.pop() b=stack.pop() stack.append(b-a) elif t==&apos;*&apos;: stack.append(stack.pop()*stack.pop()) elif t==&apos;/&apos;: a=stack.pop() b=stack.pop() stack.append(int(float(b)/a)) else: stack.append(int(t)) return stack.pop() Followup1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&apos;&apos;&apos;Followup:- infix notation ( =&gt; operator stack number =&gt; number stack ) =&gt; pop and calculate till a &apos;(&apos; is met +,- =&gt; higher precedence met-&gt; push into the operator stack, lower precedence met-&gt; calculate higher operator in stack first and then push- test case: input: [&quot;(&quot;,&quot;(&quot;,&quot;3&quot;,&quot;+&quot;,&quot;4&quot;,&quot;)&quot;,&quot;*&quot;,&quot;(&quot;,&quot;4&quot;,&quot;+&quot;,&quot;1&quot;,&quot;)&quot;,&quot;-&quot;,&quot;4&quot;,&quot;*&quot;,&quot;2&quot;,&quot;)&quot;,&quot;+&quot;,&quot;1&quot;] output: 28&apos;&apos;&apos;class Solution(object): def evalRPN(self,tokens): &quot;&quot;&quot; :type tokens: List[str] :rtype: int &quot;&quot;&quot; op_stack=[] num_stack=[] for i in tokens: # case &apos;(&apos; if i==&apos;(&apos;: op_stack.append(i) # case &apos;)&apos; elif i==&apos;)&apos;: while op_stack[-1]!=&apos;(&apos;: num_stack.append(self.cal(op_stack.pop(),num_stack.pop(),num_stack.pop())) op_stack.pop() # case &apos;+&apos;,&apos;-&apos;,&apos;*&apos;,&apos;/&apos; elif i==&apos;+&apos; or i==&apos;-&apos; or i==&apos;*&apos; or i==&apos;/&apos;: while op_stack and self.isLowerThan(i,op_stack[-1]): num_stack.append(self.cal(op_stack.pop(),num_stack.pop(),num_stack.pop())) op_stack.append(i) # case number else: num_stack.append(int(i)) while op_stack: num_stack.append(self.cal(op_stack.pop(),num_stack.pop(),num_stack.pop())) return num_stack.pop() def cal(self,op,num1,num2): if op==&apos;+&apos;: return num1+num2 if op==&apos;-&apos;: return num2-num1 if op==&apos;*&apos;: return num1*num2 if op==&apos;/&apos;: return int(float(num2)/num1) raise ValueError(&quot;Not valid operator&quot;) def isLowerThan(self,op1,op2): if (op1==&apos;+&apos; or op1==&apos;-&apos;) and (op2==&apos;*&apos; or op2==&apos;/&apos;): return True return False 71. Simplify PathProblemGiven an absolute path for a file (Unix-style), simplify it. For example,path = &#x201C;/home/&#x201C;, =&gt; &#x201C;/home&#x201D;path = &#x201C;/a/./b/../../c/&#x201C;, =&gt; &#x201C;/c&#x201D;click to show corner cases. Corner Cases:Did you consider the case where path = &#x201C;/../&#x201C;?In this case, you should return &#x201C;/&#x201C;.Another corner case is the path might contain multiple slashes &#x2018;/&#x2018; together, such as &#x201C;/home//foo/&#x201C;.In this case, you should ignore redundant slashes and return &#x201C;/home/foo&#x201D;. Solution12345678910111213141516171819202122&apos;&apos;&apos;Solution:- ignore &apos;.&apos;, when met &apos;..&apos;, pop from stack if stack is not empty, and finally join the stackAttention:- corner case: /../a =&gt; /a- always remember if you wanna pop from a stack check if it is empty first&apos;&apos;&apos;class Solution(object): def simplifyPath(self, path): &quot;&quot;&quot; :type path: str :rtype: str &quot;&quot;&quot; vals=path.split(&apos;/&apos;) stack=[] for v in vals: if v==&apos;&apos; or v==&apos;.&apos;: continue if v==&apos;..&apos;: if stack: stack.pop() else: stack.append(v) return &apos;/&apos;+&apos;/&apos;.join(stack) 84. Largest Rectangle in HistogramProblemGiven n non-negative integers representing the histogram&#x2019;s bar height where the width of each bar is 1, find the area of largest rectangle in the histogram. Above is a histogram where width of each bar is 1, given height = [2,1,5,6,2,3]. The largest rectangle is shown in the shaded area, which has area = 10 unit. For example,Given heights = [2,1,5,6,2,3],return 10. Solution123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&apos;&apos;&apos;Solution:- primitive idea: find all rectangles and get max one, time complexity O(n^2)Followup:- O(n)? - avoid repeated work - identify a rectangle: identify 2 boundaries - if cur&gt;stack.peek() --&gt; offer, else --&gt; continously pollCorner case: [0]&apos;&apos;&apos;class Solution(object): def largestRectangleArea(self, heights): &quot;&quot;&quot; :type heights: List[int] :rtype: int &quot;&quot;&quot; if not heights: return 0 stack=[] max_area=0 for i in range(len(heights)+1): cur=0 if i==len(heights) else heights[i] while stack and cur&lt;=heights[stack[-1]]: height=heights[stack.pop()] leftBound=0 if not stack else stack[-1]+1 rightBound=i cur_area=(rightBound-leftBound)*height max_area=max(cur_area,max_area) stack.append(i) return max_area &apos;&apos;&apos; # primitive, 2 loops def largestRectangleArea(self, heights): &quot;&quot;&quot; :type heights: List[int] :rtype: int &quot;&quot;&quot; if not heights: return 0 max_area=0 for i in range(len(heights)): max_area=max(heights[i],max_area) min_height=heights[i] for j in range(i,len(heights)): min_height=min(min_height,heights[j]) max_area=max(min_height*(j-i+1),max_area) return max_area &apos;&apos;&apos; Python stack &amp; deque&#x8FD9;&#x7BC7;&#x7528;&#x5230;&#x7684; python &#x7684;&#x77E5;&#x8BC6;&#x70B9;/&#x9700;&#x8981;&#x6CE8;&#x610F;&#x7684;&#x5730;&#x65B9;&#x3002; use lists as stacksLIFOadd, use append()retrieve, use pop()123456789101112131415&gt;&gt;&gt; stack = [3, 4, 5]&gt;&gt;&gt; stack.append(6)&gt;&gt;&gt; stack.append(7)&gt;&gt;&gt; stack[3, 4, 5, 6, 7]&gt;&gt;&gt; stack.pop()7&gt;&gt;&gt; stack[3, 4, 5, 6]&gt;&gt;&gt; stack.pop()6&gt;&gt;&gt; stack.pop()5&gt;&gt;&gt; stack[3, 4] use lists as queuesFIFO&#xFF0C;python list &#x4F5C; queue &#x5E76;&#x4E0D; efficent&#xFF0C;&#x7528; collections.deque12345678910&gt;&gt;&gt; from collections import deque&gt;&gt;&gt; queue = deque([&quot;Eric&quot;, &quot;John&quot;, &quot;Michael&quot;])&gt;&gt;&gt; queue.append(&quot;Terry&quot;) # Terry arrives&gt;&gt;&gt; queue.append(&quot;Graham&quot;) # Graham arrives&gt;&gt;&gt; queue.popleft() # The first to arrive now leaves&apos;Eric&apos;&gt;&gt;&gt; queue.pop() # The second to arrive now leaves&apos;Graham&apos;&gt;&gt;&gt; queue # Remaining queue in order of arrivaldeque([&apos;John&apos;, &apos;Michael&apos;, &apos;Terry&apos;])","tags":"栈 队列"},{"title":"数据结构和算法 -- 排序算法","url":"/2016/09/07/数据结构和算法 -- 排序算法/","text":"&#x5F80;&#x5F80;&#x6392;&#x5E8F;&#x662F;&#x4F5C;&#x4E3A;&#x5176;&#x4ED6;&#x7B97;&#x6CD5;&#x7684;&#x9884;&#x5904;&#x7406;&#x7B97;&#x6CD5;&#xFF0C;&#x5176;&#x91CD;&#x8981;&#x6027;&#x5374;&#x4E0D;&#x5BB9;&#x5C0F;&#x89D1;&#x3002;&#x672C;&#x7BC7;&#x8BB2;&#x5192;&#x6CE1;&#x6392;&#x5E8F;&#xFF0F;&#x9009;&#x62E9;&#x6392;&#x5E8F;&#xFF0F;&#x63D2;&#x5165;&#x6392;&#x5E8F;&#xFF0F;&#x5E0C;&#x5C14;&#x6392;&#x5E8F;&#xFF0F;&#x5F52;&#x5E76;&#x6392;&#x5E8F;&#xFF0F;&#x5FEB;&#x901F;&#x6392;&#x5E8F;&#xFF0F;&#x6876;&#x6392;&#x5E8F;&#xFF0F;&#x8BA1;&#x6570;&#x6392;&#x5E8F;&#x3002; &#x6982;&#x89C8; algorithm in-place worst average best space complexity remark bubble yes $N^2$ $N^2$ N $O(1)$ &#x2014;&#x2014; selection yes $N^2$ $N^2$ $N^2$ $O(1)$ &#x2014;&#x2014; insertion yes $N^2$ $N^2$ N $O(1)$ &#x2014;&#x2014; shell yes &#x2014;&#x2013; &#x2014;&#x2014;- N $O(1)$ &#x2014;&#x2014; merge $NlogN$ $NlogN$ $NlogN$ $O(N)$ &#x2014;&#x2014; quick yes $N^2$ $NlogN$ $NlogN$ $O(logN)$ &#x2014;&#x2014; heap yes $NlogN$ $NlogN$ $NlogN$ $O(1)$ &#x2014;&#x2014; Bubble sort &#x5192;&#x6CE1;&#x6392;&#x5E8F;&#x5192;&#x6CE1;&#x6392;&#x5E8F;&#x7684;&#x539F;&#x7406;&#x975E;&#x5E38;&#x7B80;&#x5355;&#xFF0C;&#x91CD;&#x590D;&#x5730;&#x8D70;&#x8BBF;&#x8FC7;&#x8981;&#x6392;&#x5E8F;&#x7684;&#x6570;&#x5217;&#xFF0C;&#x4E00;&#x6B21;&#x6BD4;&#x8F83;&#x4E24;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x5982;&#x679C;&#x4ED6;&#x4EEC;&#x7684;&#x987A;&#x5E8F;&#x9519;&#x8BEF;&#x5C31;&#x628A;&#x4ED6;&#x4EEC;&#x4EA4;&#x6362;&#x8FC7;&#x6765;&#x3002;&#x5185;&#x90E8;&#x7A33;&#x5B9A;&#x6392;&#x5E8F;&#xFF0C;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6; $O(N^2)$&#xFF0C;&#x7A7A;&#x95F4;&#x590D;&#x6742;&#x5EA6; $O(1)$ &#x6B65;&#x9AA4;&#xFF1A; &#x6BD4;&#x8F83;&#x76F8;&#x90BB;&#x7684;&#x5143;&#x7D20;&#x3002;&#x5982;&#x679C;&#x524D;&#x4E00;&#x4E2A;&#x6BD4;&#x540E;&#x4E00;&#x4E2A;&#x5927;&#xFF0C;&#x5C31;&#x4EA4;&#x6362;&#x4ED6;&#x4EEC;&#x4E24;&#x4E2A;&#x3002; &#x5BF9;&#x7B2C; 0 &#x4E2A;&#x5230;&#x7B2C; n-1 &#x4E2A;&#x6570;&#x636E;&#x505A;&#x540C;&#x6837;&#x7684;&#x5DE5;&#x4F5C;&#x3002;&#x8FD9;&#x65F6;&#xFF0C;&#x6700;&#x5927;&#x7684;&#x6570;&#x5C31;&#x201C;&#x6D6E;&#x201D;&#x5230;&#x4E86;&#x6570;&#x7EC4;&#x6700;&#x540E;&#x7684;&#x4F4D;&#x7F6E;&#x4E0A;&#x3002; &#x6301;&#x7EED;&#x6BCF;&#x6B21;&#x5BF9;&#x8D8A;&#x6765;&#x8D8A;&#x5C11;&#x7684;&#x5143;&#x7D20;&#x91CD;&#x590D;&#x4E0A;&#x9762;&#x7684;&#x6B65;&#x9AA4;&#xFF0C;&#x76F4;&#x5230;&#x6CA1;&#x6709;&#x4EFB;&#x4F55;&#x4E00;&#x5BF9;&#x6570;&#x5B57;&#x9700;&#x8981;&#x6BD4;&#x8F83;&#x3002; &#x6BCF;&#x8F6E;&#x64CD;&#x4F5C;&#x90FD;&#x5C06;&#x4E00;&#x4E2A;&#x6700;&#x5927;&#x7684;&#x6570;&#x201C;&#x6D6E;&#x201D;&#x5230;&#x6700;&#x540E;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x6BCF;&#x8F6E;&#x90FD;&#x6709;&#x6700;&#x540E; N-i &#x4E2A;&#x6570;&#x5DF2;&#x7ECF;&#x6392;&#x5E8F;&#xFF0C;&#x6240;&#x4EE5;&#x5185;&#x5FAA;&#x73AF;&#x662F;&#x4ECE; 1 &#x5230; N-i&#x3002; &#x57FA;&#x672C;&#x6B3E;1234567891011121314151617181920212223#=======================================================================# Time Complexity of Solution:# Best O(n^2); Average O(n^2); Worst O(n^2).## Approach:# Bubblesort is an elementarray sorting algorithm. The idea is to# imagine bubbling the smallest elements of a (vertical) array to the# top; then bubble the next smallest; then so on until the entire# array is sorted. Bubble sort is worse than both insertion sort and# selection sort. It moves elements as many times as insertion sort# (bad) and it takes as long as selection sort (bad). On the positive# side, bubble sort is easy to understand. Also there are highly# improved variants of bubble sort.#=======================================================================def bubble_sort(array): n = len(array) for i in range(n): for j in range(1, n - i): if array[j - 1] &gt; array[j]: array[j - 1], array[j] = array[j], array[j - 1] return array &#x4F18;&#x5316;&#x4E00;&#x4F18;&#x5316;1&#xFF1A;&#x67D0;&#x4E00;&#x8D9F;&#x904D;&#x5386;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x6570;&#x636E;&#x4EA4;&#x6362;&#xFF0C;&#x5219;&#x8BF4;&#x660E;&#x5DF2;&#x7ECF;&#x6392;&#x597D;&#x5E8F;&#x4E86;&#xFF0C;&#x56E0;&#x6B64;&#x4E0D;&#x7528;&#x518D;&#x8FDB;&#x884C;&#x8FED;&#x4EE3;&#x4E86;&#x3002;&#x7528;&#x4E00;&#x4E2A;&#x6807;&#x8BB0;&#x8BB0;&#x5F55;&#x8FD9;&#x4E2A;&#x72B6;&#x6001;&#x5373;&#x53EF;&#x3002;1234567891011def bubble_sort2(array): n = len(array) for i in range(n): sorted = True for j in range(1, n - i): if array[j - 1] &gt; array[j]: flag = False array[j - 1], array[j] = array[j], array[j - 1] if sorted: return array # or break return array &#x4F18;&#x5316;&#x4E8C;&#x4F18;&#x5316;2&#xFF1A;&#x8BB0;&#x5F55;&#x67D0;&#x6B21;&#x904D;&#x5386;&#x65F6;&#x6700;&#x540E;&#x53D1;&#x751F;&#x6570;&#x636E;&#x4EA4;&#x6362;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x8FD9;&#x4E2A;&#x4F4D;&#x7F6E;&#x4E4B;&#x540E;&#x7684;&#x6570;&#x636E;&#x663E;&#x7136;&#x5DF2;&#x7ECF;&#x6709;&#x5E8F;&#xFF0C;&#x4E0D;&#x7528;&#x518D;&#x6392;&#x5E8F;&#x4E86;&#x3002;&#x56E0;&#x6B64;&#x901A;&#x8FC7;&#x8BB0;&#x5F55;&#x6700;&#x540E;&#x53D1;&#x751F;&#x6570;&#x636E;&#x4EA4;&#x6362;&#x7684;&#x4F4D;&#x7F6E;&#x5C31;&#x53EF;&#x4EE5;&#x786E;&#x5B9A;&#x4E0B;&#x6B21;&#x5FAA;&#x73AF;&#x7684;&#x8303;&#x56F4;&#x4E86;&#x3002;12345678910111213def bubble_sort3(array): n = len(array) k = n for i in range(n): flag = False # &#x6709;&#x6CA1;&#x6709;&#x4EA4;&#x6362; for j in range(1, k): # &#x53EA;&#x904D;&#x5386;&#x5230;&#x6700;&#x540E;&#x4EA4;&#x6362;&#x7684;&#x4F4D;&#x7F6E; if array[j - 1] &gt; array[j]: flag = True k = j # &#x8BB0;&#x5F55;&#x6700;&#x540E;&#x7684;&#x4EA4;&#x6362;&#x4F4D;&#x7F6E; array[j - 1], array[j] = array[j], array[j - 1] if not flag: return array # or break return array Selection sort &#x9009;&#x62E9;&#x6392;&#x5E8F;&#x9009;&#x62E9;&#x6392;&#x5E8F;&#x65E0;&#x7591;&#x662F;&#x6700;&#x7B80;&#x5355;&#x76F4;&#x89C2;&#x7684;&#x6392;&#x5E8F;&#x3002;&#x5185;&#x90E8;&#x4E0D;&#x7A33;&#x5B9A;&#x6392;&#x5E8F;&#xFF0C;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6; $O(N^2)$&#xFF0C;&#x7A7A;&#x95F4;&#x590D;&#x6742;&#x5EA6; $O(1)$ &#x6B65;&#x9AA4;&#xFF1A; &#x5728;&#x672A;&#x6392;&#x5E8F;&#x5E8F;&#x5217;&#x4E2D;&#x627E;&#x5230;&#x6700;&#x5C0F;&#xFF08;&#x5927;&#xFF09;&#x5143;&#x7D20;&#xFF0C;&#x5B58;&#x653E;&#x5230;&#x6392;&#x5E8F;&#x5E8F;&#x5217;&#x7684;&#x8D77;&#x59CB;&#x4F4D;&#x7F6E;&#x3002; &#x518D;&#x4ECE;&#x5269;&#x4F59;&#x672A;&#x6392;&#x5E8F;&#x5143;&#x7D20;&#x4E2D;&#x7EE7;&#x7EED;&#x5BFB;&#x627E;&#x6700;&#x5C0F;&#xFF08;&#x5927;&#xFF09;&#x5143;&#x7D20;&#xFF0C;&#x7136;&#x540E;&#x653E;&#x5230;&#x5DF2;&#x6392;&#x5E8F;&#x5E8F;&#x5217;&#x7684;&#x672B;&#x5C3E;&#x3002;&#x4EE5;&#x6B64;&#x7C7B;&#x63A8;&#xFF0C;&#x76F4;&#x5230;&#x6240;&#x6709;&#x5143;&#x7D20;&#x5747;&#x6392;&#x5E8F;&#x5B8C;&#x6BD5;&#x3002; 1234567891011121314151617181920#=======================================================================# Time Complexity of Solution:# Best O(n^2); Average O(n^2); Worst O(n^2).## Approach:# Selection sort is a step up from insertion sort from a memory# viewpoint. It only swaps elements that need to be swapped. In terms# of time complexity, however, insertion sort is better.#=======================================================================def select_sort(array): n = len(array) for i in range(n): min = i for j in range(i + 1, n): if array[j] &lt; array[min]: min = j array[i], array[min] = array[min], array[i] return array Insertion sort &#x63D2;&#x5165;&#x6392;&#x5E8F;&#x6BCF;&#x8F6E;&#x5728;&#x5DF2;&#x7ECF;&#x6392;&#x597D;&#x7684;&#x5E8F;&#x5217;&#x4E2D;&#x63D2;&#x5165;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x6570;&#x5B57;&#x3002;&#x63D2;&#x5165;&#x6392;&#x5E8F;&#x7684;&#x5DE5;&#x4F5C;&#x539F;&#x7406;&#x662F;&#xFF0C;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x672A;&#x6392;&#x5E8F;&#x6570;&#x636E;&#xFF0C;&#x5728;&#x5DF2;&#x6392;&#x5E8F;&#x5E8F;&#x5217;&#x4E2D;&#x4ECE;&#x540E;&#x5411;&#x524D;&#x626B;&#x63CF;&#xFF0C;&#x627E;&#x5230;&#x76F8;&#x5E94;&#x4F4D;&#x7F6E;&#x5E76;&#x63D2;&#x5165;&#x3002;&#x5185;&#x90E8;&#x7A33;&#x5B9A;&#x6392;&#x5E8F;&#xFF0C;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6; $O(N^2)$&#xFF0C;&#x7A7A;&#x95F4;&#x590D;&#x6742;&#x5EA6; $O(1)$&#x6B65;&#x9AA4;&#xFF1A; &#x4ECE;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x5F00;&#x59CB;&#xFF0C;&#x8BE5;&#x5143;&#x7D20;&#x53EF;&#x4EE5;&#x8BA4;&#x4E3A;&#x5DF2;&#x7ECF;&#x88AB;&#x6392;&#x5E8F; &#x53D6;&#x51FA;&#x4E0B;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x5728;&#x5DF2;&#x7ECF;&#x6392;&#x5E8F;&#x7684;&#x5143;&#x7D20;&#x5E8F;&#x5217;&#x4E2D;&#x4ECE;&#x540E;&#x5411;&#x524D;&#x626B;&#x63CF; &#x5982;&#x679C;&#x88AB;&#x626B;&#x63CF;&#x7684;&#x5143;&#x7D20;&#xFF08;&#x5DF2;&#x6392;&#x5E8F;&#xFF09;&#x5927;&#x4E8E;&#x65B0;&#x5143;&#x7D20;&#xFF0C;&#x5C06;&#x8BE5;&#x5143;&#x7D20;&#x540E;&#x79FB;&#x4E00;&#x4F4D; &#x91CD;&#x590D;&#x6B65;&#x9AA4;3&#xFF0C;&#x76F4;&#x5230;&#x627E;&#x5230;&#x5DF2;&#x6392;&#x5E8F;&#x7684;&#x5143;&#x7D20;&#x5C0F;&#x4E8E;&#x6216;&#x8005;&#x7B49;&#x4E8E;&#x65B0;&#x5143;&#x7D20;&#x7684;&#x4F4D;&#x7F6E; &#x5C06;&#x65B0;&#x5143;&#x7D20;&#x63D2;&#x5165;&#x5230;&#x8BE5;&#x4F4D;&#x7F6E;&#x540E; &#x91CD;&#x590D;&#x6B65;&#x9AA4;2~5 12345678910111213141516171819202122#=======================================================================# Time Complexity of Solution:# Best O(n); Average O(n^2); Worst O(n^2).## Approach:# Insertion sort is good for collections that are very small# or nearly sorted. Otherwise it&apos;s not a good sorting algorithm:# it moves data around too much. Each time an insertion is made,# all elements in a greater position are shifted.#=======================================================================def insertion_sort(array): n = len(array) for i in range(1, n): val = array[i] position = i while position &gt; 0 and array[position - 1] &gt; val: array[position] = array[position - 1] position -= 1 array[position] = val return array Shell Sort &#x5E0C;&#x5C14;&#x6392;&#x5E8F;&#x5E0C;&#x5C14;&#x6392;&#x5E8F;&#xFF0C;&#x4E5F;&#x79F0;&#x9012;&#x51CF;&#x589E;&#x91CF;&#x6392;&#x5E8F;&#x7B97;&#x6CD5;&#xFF0C;&#x5B9E;&#x8D28;&#x662F;&#x5206;&#x7EC4;&#x63D2;&#x5165;&#x6392;&#x5E8F;&#x3002;&#x5185;&#x90E8;&#x975E;&#x7A33;&#x5B9A;&#x6392;&#x5E8F;&#x7B97;&#x6CD5;&#x3002;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E0D;&#x5B9A;&#xFF0C;&#x7A7A;&#x95F4;&#x590D;&#x6742;&#x5EA6;$O(1)$ &#x5E0C;&#x5C14;&#x6392;&#x5E8F;&#x7684;&#x57FA;&#x672C;&#x601D;&#x60F3;&#x662F;&#xFF1A;&#x5C06;&#x6570;&#x7EC4;&#x5217;&#x5728;&#x4E00;&#x4E2A;&#x8868;&#x4E2D;&#x5E76;&#x5BF9;&#x5217;&#x5206;&#x522B;&#x8FDB;&#x884C;&#x63D2;&#x5165;&#x6392;&#x5E8F;&#xFF0C;&#x91CD;&#x590D;&#x8FD9;&#x8FC7;&#x7A0B;&#xFF0C;&#x4E0D;&#x8FC7;&#x6BCF;&#x6B21;&#x7528;&#x66F4;&#x957F;&#x7684;&#x5217;&#xFF08;&#x6B65;&#x957F;&#x66F4;&#x957F;&#x4E86;&#xFF0C;&#x5217;&#x6570;&#x66F4;&#x5C11;&#x4E86;&#xFF09;&#x6765;&#x8FDB;&#x884C;&#x3002;&#x6700;&#x540E;&#x6574;&#x4E2A;&#x8868;&#x5C31;&#x53EA;&#x6709;&#x4E00;&#x5217;&#x4E86;&#x3002;&#x5C06;&#x6570;&#x7EC4;&#x8F6C;&#x6362;&#x81F3;&#x8868;&#x662F;&#x4E3A;&#x4E86;&#x66F4;&#x597D;&#x5730;&#x7406;&#x89E3;&#x8FD9;&#x7B97;&#x6CD5;&#xFF0C;&#x7B97;&#x6CD5;&#x672C;&#x8EAB;&#x8FD8;&#x662F;&#x4F7F;&#x7528;&#x6570;&#x7EC4;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#x3002; &#x4F8B;&#x5982;&#xFF0C;&#x5047;&#x8BBE;&#x6709;&#x8FD9;&#x6837;&#x4E00;&#x7EC4;&#x6570;[ 13 14 94 33 82 25 59 94 65 23 45 27 73 25 39 10 ]&#xFF0C;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x4EE5;&#x6B65;&#x957F;&#x4E3A;5&#x5F00;&#x59CB;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x5C06;&#x8FD9;&#x5217;&#x8868;&#x653E;&#x5728;&#x6709;5&#x5217;&#x7684;&#x8868;&#x4E2D;&#x6765;&#x66F4;&#x597D;&#x5730;&#x63CF;&#x8FF0;&#x7B97;&#x6CD5;&#xFF0C;&#x8FD9;&#x6837;&#x4ED6;&#x4EEC;&#x5C31;&#x5E94;&#x8BE5;&#x770B;&#x8D77;&#x6765;&#x662F;&#x8FD9;&#x6837;&#xFF1A; 13 14 94 33 82 25 59 94 65 23 45 27 73 25 39 10 &#x7136;&#x540E;&#x6211;&#x4EEC;&#x5BF9;&#x6BCF;&#x5217;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF1A; 10 14 73 25 23 13 27 94 33 39 25 59 94 65 82 45 &#x5C06;&#x4E0A;&#x8FF0;&#x56DB;&#x884C;&#x6570;&#x5B57;&#xFF0C;&#x4F9D;&#x5E8F;&#x63A5;&#x5728;&#x4E00;&#x8D77;&#x65F6;&#x6211;&#x4EEC;&#x5F97;&#x5230;&#xFF1A;[ 10 14 73 25 23 13 27 94 33 39 25 59 94 65 82 45 ]&#x3002;&#x8FD9;&#x65F6;10&#x5DF2;&#x7ECF;&#x79FB;&#x81F3;&#x6B63;&#x786E;&#x4F4D;&#x7F6E;&#x4E86;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x4EE5;3&#x4E3A;&#x6B65;&#x957F;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF1A; 10 14 73 25 23 13 27 94 33 39 25 59 94 65 82 45 &#x6392;&#x5E8F;&#x4E4B;&#x540E;&#x53D8;&#x4E3A;&#xFF1A; 10 14 13 25 23 33 27 25 59 39 65 73 45 94 82 94 &#x6700;&#x540E;&#x4EE5;1&#x6B65;&#x957F;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF08;&#x6B64;&#x65F6;&#x5C31;&#x662F;&#x7B80;&#x5355;&#x7684;&#x63D2;&#x5165;&#x6392;&#x5E8F;&#x4E86;&#xFF09;&#x3002; 12345678910111213def shell_sort(array): n = len(array) gap = n / 2 # &#x521D;&#x59CB;&#x6B65;&#x957F; while gap &gt; 0: for i in range(gap, n):# &#x6BCF;&#x4E00;&#x5217;&#x8FDB;&#x884C;&#x63D2;&#x5165;&#x6392;&#x5E8F; , &#x4ECE;gap &#x5230; n-1 position = i val = array[i] while position &gt; 0 and array[position - 1] &gt; val: array[position] = array[position - 1] position -= 1 array[position] = val gap = gap / 2 # &#x91CD;&#x65B0;&#x8BBE;&#x7F6E;&#x6B65;&#x957F; return array &#x4E0A;&#x9762;&#x6E90;&#x7801;&#x7684;&#x6B65;&#x957F;&#x7684;&#x9009;&#x62E9;&#x662F;&#x4ECE;n/2&#x5F00;&#x59CB;&#xFF0C;&#x6BCF;&#x6B21;&#x518D;&#x51CF;&#x534A;&#xFF0C;&#x76F4;&#x81F3;&#x4E3A;0&#x3002;&#x6B65;&#x957F;&#x7684;&#x9009;&#x62E9;&#x76F4;&#x63A5;&#x51B3;&#x5B9A;&#x4E86;&#x5E0C;&#x5C14;&#x6392;&#x5E8F;&#x7684;&#x590D;&#x6742;&#x5EA6; Merge Sort &#x5F52;&#x5E76;&#x6392;&#x5E8F;&#x5F52;&#x5E76;&#x6392;&#x5E8F;&#x662F;&#x91C7;&#x7528;&#x5206;&#x6CBB;&#x6CD5;&#x7684;&#x4E00;&#x4E2A;&#x975E;&#x5E38;&#x5178;&#x578B;&#x7684;&#x5E94;&#x7528;&#x3002;&#x5F52;&#x5E76;&#x6392;&#x5E8F;&#x7684;&#x601D;&#x60F3;&#x5C31;&#x662F;&#x5148;&#x9012;&#x5F52;&#x5206;&#x89E3;&#x6570;&#x7EC4;&#xFF0C;&#x89E3;&#x51B3;&#x5B50;&#x96C6;&#x7684;&#x6392;&#x5E8F;&#x95EE;&#x9898;&#xFF0C;&#x518D;&#x5408;&#x5E76;&#x4E24;&#x4E2A;&#x6709;&#x5E8F;&#x6570;&#x7EC4;&#x3002;&#x7531;&#x4E8E;&#x57FA;&#x672C;&#x7684;&#x903B;&#x8F91;&#x601D;&#x7EF4;&#x7ED3;&#x6784;&#x662F;&#x4E8C;&#x53C9;&#x6811;&#xFF0C;&#x4E5F;&#x53EB;&#x4E8C;&#x8DEF;&#x5F52;&#x5E76;&#x6392;&#x5E8F;&#x3002; &#x5148;&#x8003;&#x8651;&#x5408;&#x5E76;&#x4E24;&#x4E2A;&#x6709;&#x5E8F;&#x6570;&#x7EC4;&#xFF0C;&#x57FA;&#x672C;&#x601D;&#x8DEF;&#x662F;&#x6BD4;&#x8F83;&#x4E24;&#x4E2A;&#x6570;&#x7EC4;&#x7684;&#x6700;&#x524D;&#x9762;&#x7684;&#x6570;&#xFF0C;&#x8C01;&#x5C0F;&#x5C31;&#x5148;&#x53D6;&#x8C01;&#xFF0C;&#x53D6;&#x4E86;&#x540E;&#x76F8;&#x5E94;&#x7684;&#x6307;&#x9488;&#x5C31;&#x5F80;&#x540E;&#x79FB;&#x4E00;&#x4F4D;&#x3002;&#x7136;&#x540E;&#x518D;&#x6BD4;&#x8F83;&#xFF0C;&#x76F4;&#x81F3;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#x4E3A;&#x7A7A;&#xFF0C;&#x6700;&#x540E;&#x628A;&#x53E6;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#x7684;&#x5269;&#x4F59;&#x90E8;&#x5206;&#x590D;&#x5236;&#x8FC7;&#x6765;&#x5373;&#x53EF;&#x3002; &#x518D;&#x8003;&#x8651;&#x9012;&#x5F52;&#x5206;&#x89E3;&#xFF0C;&#x57FA;&#x672C;&#x601D;&#x8DEF;&#x662F;&#x5C06;&#x6570;&#x7EC4;&#x5206;&#x89E3;&#x6210; left &#x548C; right&#xFF0C;&#x5982;&#x679C;&#x8FD9;&#x4E24;&#x4E2A;&#x6570;&#x7EC4;&#x5185;&#x90E8;&#x6570;&#x636E;&#x662F;&#x6709;&#x5E8F;&#x7684;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x53EF;&#x4EE5;&#x7528;&#x4E0A;&#x9762;&#x5408;&#x5E76;&#x6570;&#x7EC4;&#x7684;&#x65B9;&#x6CD5;&#x5C06;&#x8FD9;&#x4E24;&#x4E2A;&#x6570;&#x7EC4;&#x5408;&#x5E76;&#x6392;&#x5E8F;&#x3002;&#x5982;&#x4F55;&#x8BA9;&#x8FD9;&#x4E24;&#x4E2A;&#x6570;&#x7EC4;&#x5185;&#x90E8;&#x662F;&#x6709;&#x5E8F;&#x7684;&#xFF1F;&#x53EF;&#x4EE5;&#x518D;&#x4E8C;&#x5206;&#xFF0C;&#x76F4;&#x81F3;&#x5206;&#x89E3;&#x51FA;&#x7684;&#x5C0F;&#x7EC4;&#x53EA;&#x542B;&#x6709;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x65F6;&#x4E3A;&#x6B62;&#xFF0C;&#x6B64;&#x65F6;&#x8BA4;&#x4E3A;&#x8BE5;&#x5C0F;&#x7EC4;&#x5185;&#x90E8;&#x5DF2;&#x6709;&#x5E8F;&#x3002;&#x7136;&#x540E;&#x5408;&#x5E76;&#x6392;&#x5E8F;&#x76F8;&#x90BB;&#x4E8C;&#x4E2A;&#x5C0F;&#x7EC4;&#x5373;&#x53EF;&#x3002; &#x5916;&#x90E8;&#x7A33;&#x5B9A;&#x6392;&#x5E8F;&#x3002;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6; $O(nlog(n))$&#xFF0C;&#x7A7A;&#x95F4;&#x590D;&#x6742;&#x5EA6; $O(n)$&#x3002;&#x5806;&#x6392;&#x5E8F;&#x548C;&#x5FEB;&#x901F;&#x6392;&#x5E8F;&#x7684;&#x590D;&#x6742;&#x5EA6;&#x4E5F;&#x90FD;&#x662F; $O(nlog(n))$&#xFF0C;&#x4F46;&#x5B83;&#x4EEC;&#x662F;&#x4E0D;&#x7A33;&#x5B9A;&#x7684;&#x3002;&#x5728;&#x6392;&#x5E8F;&#x7B97;&#x6CD5;&#x4E2D;&#xFF0C;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x662F; $O(nlog(n))$ &#x7684;&#x6392;&#x5E8F;&#x7B97;&#x6CD5;&#x53EA;&#x6709;&#x5F52;&#x5E76;&#x6392;&#x5E8F;&#x3002; &#x57FA;&#x672C;&#x6B3E;12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#=======================================================================# Time Complexity of Solution:# Best = Average = Worst = O(nlog(n)).## Approach:# Merge sort is a divide and conquer algorithm. In the divide and# conquer paradigm, a problem is broken into pieces where each piece# still retains all the properties of the larger problem -- except# its size. To solve the original problem, each piece is solved# individually; then the pieces are merged back together.## For illustration, imagine needing to sort an array of 200 elements# using selection sort. Since selection sort takes O(n^2), it would# take about 40,000 time units to sort the array. Now imagine# splitting the array into ten equal pieces and sorting each piece# individually still using selection sort. Now it would take 400# time units to sort each piece; for a grand total of 4000.# Once each piece is sorted, merging them back together would take# about 200 time units; for a grand total of 200+4000 = 4,200.# Clearly 4,200 is an impressive improvement over 40,000. Now# imagine greater. Imagine splitting the original array into# groups of two and then sorting them. In the end, it would take about# 1,000 time units to sort the array. That&apos;s how merge sort works.## NOTE to the Python experts:# While it might seem more &quot;Pythonic&quot; to take such approach as## mid = len(aList) / 2# left = mergesort(aList[:mid])# right = mergesort(aList[mid:])## That approach take too much memory for creating sublists.#=======================================================================def merge_sort(array): if len(array) &lt;= 1: return array mid = len(array) / 2 left = merge_sort(array[:mid]) right = merge_sort(array[mid:]) return merge(left, right)def merge(left, right): l, r = 0, 0 result = [] while l &lt; len(left) and r &lt; len(right): if left[l] &lt; right[r]: result.append(left[l]) l += 1 else: result.append(right[r]) r += 1 # &#x5982;&#x679C;&#x6709;&#x9057;&#x7559;&#x6CA1;&#x6709;&#x6BD4;&#x8F83;&#x7684; result += left[l:] result += right[r:] return result &#x4F18;&#x5316;&#x7ED3;&#x5408;&#x5176;&#x4ED6;&#x6392;&#x5E8F;&#x5728;&#x6570;&#x7EC4;&#x957F;&#x5EA6;&#x6BD4;&#x8F83;&#x77ED;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x4E0D;&#x8FDB;&#x884C;&#x9012;&#x5F52;&#xFF0C;&#x800C;&#x662F;&#x91C7;&#x7528;&#x5176;&#x4ED6;&#x6392;&#x5E8F;&#x65B9;&#x6848;&#xFF0C;&#x5982; high - low &lt; 50 &#x65F6;&#xFF0C;&#x53EF;&#x4EE5;&#x7528;&#x5FEB;&#x901F;&#xFF0F;&#x63D2;&#x5165;&#x6392;&#x5E8F;&#xFF0C;&#x9002;&#x5408;&#x6574;&#x4F53;&#x65F6;&#x95F4;&#x6700;&#x4F18; &#x5EFA;&#x7ACB;&#x7D22;&#x5F15;&#x5B9E;&#x9645;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x53EF;&#x80FD;&#x6392;&#x5E8F;&#x7684;&#x4E0D;&#x662F; int, &#x800C;&#x662F;&#x4E00;&#x4E2A;&#x7ED3;&#x6784;&#x4F53;&#xFF0C;&#x5728;&#x6B64;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x8BB0;&#x5F55;&#x6570;&#x7EC4;&#x4E0B;&#x6807;(index)&#x6765;&#x4EE3;&#x66FF;&#x7533;&#x8BF7;&#x65B0;&#x5185;&#x5B58;&#x7A7A;&#x95F4;&#xFF0C;&#x4ECE;&#x800C;&#x907F;&#x514D; A &#x548C;&#x8F85;&#x52A9;&#x6570;&#x7EC4;&#x95F4;&#x7684;&#x9891;&#x7E41;&#x6570;&#x636E;&#x79FB;&#x52A8;&#x3002; &#x5E94;&#x7528;&#x5F52;&#x5E76;&#x6392;&#x5E8F;&#x975E;&#x5E38;&#x9002;&#x5408;&#x505A;&#x5916;&#x6392;&#x5E8F;(external sorting)&#x3002; &#x4F8B;1: 9 &#x8DEF;&#x5F52;&#x5E76;&#x6392;&#x5E8F;&#x7528; 100M &#x5185;&#x5B58;&#x5BF9; 900M &#x6570;&#x636E;&#x8FDB;&#x884C;&#x6392;&#x5E8F; &#x8BFB;&#x5165; 100M &#x6570;&#x636E;&#x81F3;&#x5185;&#x5B58;&#xFF0C;&#x7528;&#x5E38;&#x89C4;&#x65B9;&#x5F0F;&#xFF08;&#x5806;&#x6392;&#x5E8F;&#xFF09;&#x6392;&#x5E8F; &#x5C06;&#x6392;&#x5E8F;&#x540E;&#x7684;&#x6570;&#x636E;&#x5199;&#x5165;&#x78C1;&#x76D8; &#x91CD;&#x590D;&#x524D;&#x4E24;&#x4E2A;&#x6B65;&#x9AA4;&#xFF0C;&#x5F97;&#x5230; 9 &#x4E2A; 100M &#x7684;&#x6587;&#x4EF6;&#x5757;&#x3002; &#x5C06; 100M &#x5185;&#x5B58;&#x5212;&#x5206;&#x4E3A; 10 &#x5757;&#xFF0C;&#x524D; 9 &#x4EFD;&#x4E3A;&#x8F93;&#x5165;&#x7F13;&#x51B2;&#x533A;&#xFF0C;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x4E3A;&#x8F93;&#x51FA;&#x7F13;&#x51B2;&#x533A;&#x3002;&#x5982;&#x5C06; 9 &#x4E2A; 100M &#x7684;&#x6587;&#x4EF6;&#x5757;&#x6BCF;&#x4E2A;&#x5206;&#x524D; 10M &#x653E;&#x5230;&#x8F93;&#x5165;&#x7F13;&#x51B2;&#x533A;&#xFF0C;&#x7136;&#x540E;&#x540C;&#x65F6;&#x6307;&#x5411;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x628A;&#x6700;&#x5C0F;&#x7684;&#x90A3;&#x4E2A;&#x653E;&#x5230;&#x8F93;&#x51FA;&#x7F13;&#x51B2;&#x533A;&#xFF0C;&#x7136;&#x540E;&#x6307;&#x9488;&#x540E;&#x79FB;&#x4E00;&#x4F4D;&#x3002; &#x6267;&#x884C; 9 &#x8DEF;&#x5F52;&#x5E76;&#x7B97;&#x6CD5;&#xFF0C;&#x5C06;&#x7ED3;&#x679C;&#x8F93;&#x51FA;&#x5230;&#x8F93;&#x51FA;&#x7F13;&#x51B2;&#x533A;&#x3002; &#x8F93;&#x51FA;&#x7F13;&#x51B2;&#x533A;&#x6EE1;&#xFF0C;&#x5199;&#x5165;&#x76EE;&#x6807;&#x6587;&#x4EF6;&#xFF0C;&#x6E05;&#x7A7A;&#x7F13;&#x51B2;&#x533A; &#x8F93;&#x5165;&#x7F13;&#x51B2;&#x533A;&#x7A7A;&#xFF0C;&#x8BFB;&#x5165;&#x76F8;&#x5E94;&#x6587;&#x4EF6;&#x7684;&#x4E0B;&#x4E00;&#x4EFD;&#x6570;&#x636E;&#x3002; &#x4F8B;2: &#x9006;&#x5E8F;&#x6570;&#x95EE;&#x9898;&#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;&#x6570;&#x7EC4; A[0..N-1]&#xFF0C;&#x5982;&#x679C;&#x5BF9;&#x4E8E;&#x4E24;&#x4E2A;&#x5143;&#x7D20; a[i],a[j]&#xFF0C;&#x6709; ia[i]&#xFF0C;&#x90A3;&#x4E48;&#x79F0; a[i],a[j] &#x4E3A;&#x9006;&#x5E8F;&#x5BF9;&#xFF0C;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#x4E2D;&#x5305;&#x542B;&#x7684;&#x9006;&#x5E8F;&#x5BF9;&#x7684;&#x6570;&#x76EE;&#x4E3A;&#x9006;&#x5E8F;&#x6570;&#x3002;&#x5982; 3,10,2,6 &#x7684;&#x9006;&#x5E8F;&#x6570;&#x4E3A; 3&#x3002;&#x5982;&#x4F55;&#x6C42;&#x6570;&#x7EC4;&#x7684;&#x9006;&#x5E8F;&#x6570;&#xFF1F; &#x5F53;&#x7136;&#x53EF;&#x4EE5;&#x9009;&#x62E9;&#x66B4;&#x529B;&#x6C42;&#x89E3;&#xFF0C;&#x4E24;&#x4E2A;&#x5FAA;&#x73AF;&#xFF0C;&#x5BF9;&#x6BCF;&#x4E2A;&#x6570;&#x90FD;&#x8981;&#x626B;&#x63CF;&#x5B83;&#x524D;&#x9762;&#x7684;&#x6240;&#x6709;&#x6570;&#xFF0C;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E3A; $O(N^2)$i -&gt; [0,N-1]j -&gt; [i+1,N-1] &#x8FD9;&#x91CC;&#x4E5F;&#x53EF;&#x4EE5;&#x7528;&#x5F52;&#x5E76;&#x6392;&#x5E8F;&#x7684;&#x601D;&#x60F3;&#x3002;&#x6BD4;&#x5982;&#x89C2;&#x5BDF;&#x5F52;&#x5E76;&#x6392;&#x5E8F;&#x2014;&#x2014;&#x5408;&#x5E76;&#x6570;&#x5217;(1&#xFF0C;3&#xFF0C;5)&#x4E0E;(2&#xFF0C;4)&#xFF1A; &#x5148;&#x53D6;&#x51FA;&#x524D;&#x9762;&#x6570;&#x5217;&#x4E2D;&#x7684;1&#x3002; &#x7136;&#x540E;&#x53D6;&#x51FA;&#x540E;&#x9762;&#x6570;&#x5217;&#x4E2D;&#x7684;2&#xFF0C;&#x660E;&#x663E;&#x8FD9;&#x4E2A;2&#x548C;&#x524D;&#x9762;&#x7684;3&#xFF0C;5&#x90FD;&#x53EF;&#x4EE5;&#x7EC4;&#x6210;&#x9006;&#x5E8F;&#x6570;&#x5BF9;&#x5373;3&#x548C;2&#xFF0C;5&#x548C;2&#x90FD;&#x662F;&#x9006;&#x5E8F;&#x6570;&#x5BF9;&#x3002; &#x7136;&#x540E;&#x53D6;&#x51FA;&#x524D;&#x9762;&#x6570;&#x5217;&#x4E2D;&#x7684;3&#x3002; &#x7136;&#x540E;&#x53D6;&#x51FA;&#x540E;&#x9762;&#x6570;&#x5217;&#x4E2D;&#x7684;4&#xFF0C;&#x540C;&#x7406;&#xFF0C;&#x53EF;&#x77E5;&#x8FD9;&#x4E2A;4&#x548C;&#x524D;&#x9762;&#x6570;&#x5217;&#x4E2D;&#x7684;5&#x53EF;&#x4EE5;&#x7EC4;&#x6210;&#x4E00;&#x4E2A;&#x9006;&#x5E8F;&#x6570;&#x5BF9;&#x3002; 1234567891011121314151617181920212223242526272829def merge_sort(array): if len(array) &lt;= 1: return array mid = len(array) / 2 left = merge_sort(array[:mid]) right = merge_sort(array[mid:]) count = 0 return merge(left, right)count = 0def merge(left, right): global count l, r = 0, 0 result = [] while l &lt; len(left) and r &lt; len(right): if left[l] &lt;= right[r]: result.append(left[l]) l += 1 else: result.append(right[r]) r += 1 count += len(left) - l result += left[l:] result += right[r:] return resultprint count # count &#x5373;&#x4E3A;&#x9006;&#x5E8F;&#x6570; &#x5176;&#x4ED6;&#x601D;&#x8003;&#x601D;&#x8003;&#xFF1A;&#x539F;&#x5730;&#x6392;&#x5E8F;&#xFF1F;&#x8BA9;&#x7A7A;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E3A; $O(1)$ Quick sort &#x5FEB;&#x901F;&#x6392;&#x5E8F;&#x5FEB;&#x901F;&#x6392;&#x5E8F;&#x901A;&#x5E38;&#x660E;&#x663E;&#x6BD4;&#x540C;&#x4E3A;&#x39F;(nlogn)&#x7684;&#x5176;&#x4ED6;&#x7B97;&#x6CD5;&#x66F4;&#x5FEB;&#xFF0C;&#x56E0;&#x6B64;&#x5E38;&#x88AB;&#x91C7;&#x7528;&#xFF0C;&#x800C;&#x4E14;&#x5FEB;&#x6392;&#x91C7;&#x7528;&#x4E86;&#x5206;&#x6CBB;&#x6CD5;&#x7684;&#x601D;&#x60F3;&#xFF0C;&#x6240;&#x4EE5;&#x5728;&#x5F88;&#x591A;&#x7B14;&#x8BD5;&#x9762;&#x8BD5;&#x4E2D;&#x80FD;&#x7ECF;&#x5E38;&#x770B;&#x5230;&#x5FEB;&#x6392;&#x7684;&#x5F71;&#x5B50;&#x3002;&#x53EF;&#x89C1;&#x638C;&#x63E1;&#x5FEB;&#x6392;&#x7684;&#x91CD;&#x8981;&#x6027;&#x3002;&#x5185;&#x90E8;&#x4E0D;&#x7A33;&#x5B9A;&#x6392;&#x5E8F;&#xFF0C;&#x6700;&#x5DEE;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6; $O(N^2)$&#xFF0C;&#x5E73;&#x5747;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6; $O(nlogn)$&#x6B65;&#x9AA4;&#xFF1A; &#x4ECE;&#x6570;&#x5217;&#x4E2D;&#x6311;&#x51FA;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x4F5C;&#x4E3A;&#x57FA;&#x51C6;&#x6570;&#x3002; &#x5206;&#x533A;&#x8FC7;&#x7A0B;&#xFF0C;&#x5C06;&#x6BD4;&#x57FA;&#x51C6;&#x6570;&#x5927;&#x7684;&#x653E;&#x5230;&#x53F3;&#x8FB9;&#xFF0C;&#x5C0F;&#x4E8E;&#x6216;&#x7B49;&#x4E8E;&#x5B83;&#x7684;&#x6570;&#x90FD;&#x653E;&#x5230;&#x5DE6;&#x8FB9;&#x3002; &#x518D;&#x5BF9;&#x5DE6;&#x53F3;&#x533A;&#x95F4;&#x9012;&#x5F52;&#x6267;&#x884C;&#x7B2C;&#x4E8C;&#x6B65;&#xFF0C;&#x76F4;&#x81F3;&#x5404;&#x533A;&#x95F4;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x6570;&#x3002; &#x57FA;&#x672C;&#x6B3E;1234567891011121314151617181920212223242526272829303132333435#=======================================================================# Time Complexity of Solution:# Best = Average = O(nlog(n)); Worst = O(n^2).## Approach:# Quicksort is admirably known as the algorithm that sorts an array# while preparing to sort it. For contrast, recall that merge sort# start partitions an array into smaller pieces, then sorts each piece,# then merge the pieces back. Quicksort actually sorts the array# during the partition phase.## Quicksort works by selecting an element called a pivot and splitting# the array around that pivot such that all the elements in, say, the# left sub-array are less than pivot and all the elements in the right# sub-array are greater than pivot. The splitting continues until the# array can no longer be broken into pieces. That&apos;s it. Quicksort is# done.## All this fussing about quicksort sorting while preparing to sort# may give the impression that it is better than mergesort, but its# not. In practice their time complexity is about the same -- with# one funny exception. Because quicksort picks its pivot randomly,# there is a practically impossible possibility that the algorithm# may take O(n^2) to compute.## The aforementioned notwithstanding, quicksort is better than# mergesort if you consider memory usage. Quicksort is an in-place# algorithm, requiring no additional storage to work.#=======================================================================def quick_sort(array): if len(array) &lt; 2: return array lesser = quick_sort([x for x in array[1:] if x &lt;= array[0]]) bigger = quick_sort([x for x in array[1:] if x &gt; array[0]]) return sum([lesser, [array[0]], bigger], []) &#x4E0A;&#x9762;&#x7684;&#x4EE3;&#x7801;&#x9009;&#x62E9;&#x7B2C;&#x4E00;&#x4E2A;&#x6570;&#x4F5C;&#x4E3A;&#x57FA;&#x51C6;&#x6570;&#x3002; &#x5E94;&#x7528;&#x6B63;&#x6574;&#x6570;&#x6570;&#x5B57;&#x5E8F;&#x5217;&#xFF0C;&#x6C42;&#x6700;&#x5927; K &#x4E2A;&#x6570;&#x3002;&#x8F93;&#x5165;&#x9879;&#xFF1A;&#x4E00;&#x4E2A;&#x65E0;&#x5E8F;&#x7684;&#x6570;&#x5B57;&#x5E8F;&#x5217;&#xFF0C;&#x548C;&#x4E00;&#x4E2A;&#x6570;&#x5B57; K&#x8F93;&#x51FA;&#x9879;&#xFF1A;K &#x4E2A;&#x6570;&#x5B57;&#xFF0C;&#x4EE3;&#x8868;&#x6700;&#x5927;&#x7684; K &#x4E2A;&#x6570;&#x5B57;&#x662F;&#x4EC0;&#x4E48;&#x903B;&#x8F91;&#xFF1A;&#x5C06;&#x65E0;&#x5E8F;&#x6570;&#x5217;&#x63D2;&#x5165;&#x5230;&#x4E8C;&#x53C9;&#x6392;&#x5E8F;&#x6570;&#x4E2D;&#xFF0C;&#x91C7;&#x7528;&#x4E2D;&#x5E8F;&#x904D;&#x5386;&#x7684;&#x65B9;&#x5F0F;&#x8F93;&#x51FA;&#x524D; K &#x4E2A;&#x6570;&#x5B57;&#x3002; Heap sort &#x5806;&#x6392;&#x5E8F;&#x5806;&#x6392;&#x5E8F;&#x5728; top K &#x95EE;&#x9898;&#x4E2D;&#x4F7F;&#x7528;&#x6BD4;&#x8F83;&#x9891;&#x7E41;&#x3002;&#x5806;&#x6392;&#x5E8F;&#x662F;&#x91C7;&#x7528;&#x4E8C;&#x53C9;&#x5806;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x6765;&#x5B9E;&#x73B0;&#x7684;&#xFF0C;&#x867D;&#x7136;&#x5B9E;&#x8D28;&#x4E0A;&#x8FD8;&#x662F;&#x4E00;&#x7EF4;&#x6570;&#x7EC4;&#x3002;&#x4E8C;&#x53C9;&#x5806;&#x662F;&#x4E00;&#x4E2A;&#x8FD1;&#x4F3C;&#x5B8C;&#x5168;&#x4E8C;&#x53C9;&#x6811; &#x3002;&#x5185;&#x90E8;&#x4E0D;&#x7A33;&#x5B9A;&#x6392;&#x5E8F;&#xFF0C;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6; $O(nlogn)$&#xFF0C;&#x7A7A;&#x95F4;&#x590D;&#x6742;&#x5EA6; $O(1)$ &#x6B65;&#x9AA4;&#xFF1A; &#x6784;&#x9020;&#x6700;&#x5927;&#x5806;&#xFF08;Build_Max_Heap&#xFF09;&#xFF1A;&#x82E5;&#x6570;&#x7EC4;&#x4E0B;&#x6807;&#x8303;&#x56F4;&#x4E3A;0~n&#xFF0C;&#x8003;&#x8651;&#x5230;&#x5355;&#x72EC;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x662F;&#x6700;&#x5927;&#x5806;&#xFF0C;&#x5219;&#x4ECE;&#x4E0B;&#x6807;n/2&#x5F00;&#x59CB;&#x7684;&#x5143;&#x7D20;&#x5747;&#x4E3A;&#x6700;&#x5927;&#x5806;&#x3002;&#x4E8E;&#x662F;&#x53EA;&#x8981;&#x4ECE;n/2-1&#x5F00;&#x59CB;&#xFF0C;&#x5411;&#x524D;&#x4F9D;&#x6B21;&#x6784;&#x9020;&#x6700;&#x5927;&#x5806;&#xFF0C;&#x8FD9;&#x6837;&#x5C31;&#x80FD;&#x4FDD;&#x8BC1;&#xFF0C;&#x6784;&#x9020;&#x5230;&#x67D0;&#x4E2A;&#x8282;&#x70B9;&#x65F6;&#xFF0C;&#x5B83;&#x7684;&#x5DE6;&#x53F3;&#x5B50;&#x6811;&#x90FD;&#x5DF2;&#x7ECF;&#x662F;&#x6700;&#x5927;&#x5806;&#x3002; &#x5806;&#x6392;&#x5E8F;&#xFF08;HeapSort&#xFF09;&#xFF1A;&#x7531;&#x4E8E;&#x5806;&#x662F;&#x7528;&#x6570;&#x7EC4;&#x6A21;&#x62DF;&#x7684;&#x3002;&#x5F97;&#x5230;&#x4E00;&#x4E2A;&#x6700;&#x5927;&#x5806;&#x540E;&#xFF0C;&#x6570;&#x7EC4;&#x5185;&#x90E8;&#x5E76;&#x4E0D;&#x662F;&#x6709;&#x5E8F;&#x7684;&#x3002;&#x56E0;&#x6B64;&#x9700;&#x8981;&#x5C06;&#x5806;&#x5316;&#x6570;&#x7EC4;&#x6709;&#x5E8F;&#x5316;&#x3002;&#x601D;&#x60F3;&#x662F;&#x79FB;&#x9664;&#x6839;&#x8282;&#x70B9;&#xFF0C;&#x5E76;&#x505A;&#x6700;&#x5927;&#x5806;&#x8C03;&#x6574;&#x7684;&#x9012;&#x5F52;&#x8FD0;&#x7B97;&#x3002;&#x7B2C;&#x4E00;&#x6B21;&#x5C06;heap[0]&#x4E0E;heap[n-1]&#x4EA4;&#x6362;&#xFF0C;&#x518D;&#x5BF9;heap[0&#x2026;n-2]&#x505A;&#x6700;&#x5927;&#x5806;&#x8C03;&#x6574;&#x3002;&#x7B2C;&#x4E8C;&#x6B21;&#x5C06;heap[0]&#x4E0E;heap[n-2]&#x4EA4;&#x6362;&#xFF0C;&#x518D;&#x5BF9;heap[0&#x2026;n-3]&#x505A;&#x6700;&#x5927;&#x5806;&#x8C03;&#x6574;&#x3002;&#x91CD;&#x590D;&#x8BE5;&#x64CD;&#x4F5C;&#x76F4;&#x81F3;heap[0]&#x548C;heap[1]&#x4EA4;&#x6362;&#x3002;&#x7531;&#x4E8E;&#x6BCF;&#x6B21;&#x90FD;&#x662F;&#x5C06;&#x6700;&#x5927;&#x7684;&#x6570;&#x5E76;&#x5165;&#x5230;&#x540E;&#x9762;&#x7684;&#x6709;&#x5E8F;&#x533A;&#x95F4;&#xFF0C;&#x6545;&#x64CD;&#x4F5C;&#x5B8C;&#x540E;&#x6574;&#x4E2A;&#x6570;&#x7EC4;&#x5C31;&#x662F;&#x6709;&#x5E8F;&#x7684;&#x4E86;&#x3002; &#x6700;&#x5927;&#x5806;&#x8C03;&#x6574;&#xFF08;Max_Heapify&#xFF09;&#xFF1A;&#x8BE5;&#x65B9;&#x6CD5;&#x662F;&#x63D0;&#x4F9B;&#x7ED9;&#x4E0A;&#x8FF0;&#x4E24;&#x4E2A;&#x8FC7;&#x7A0B;&#x8C03;&#x7528;&#x7684;&#x3002;&#x76EE;&#x7684;&#x662F;&#x5C06;&#x5806;&#x7684;&#x672B;&#x7AEF;&#x5B50;&#x8282;&#x70B9;&#x4F5C;&#x8C03;&#x6574;&#xFF0C;&#x4F7F;&#x5F97;&#x5B50;&#x8282;&#x70B9;&#x6C38;&#x8FDC;&#x5C0F;&#x4E8E;&#x7236;&#x8282;&#x70B9;&#x3002; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#=======================================================================# Time Complexity of Solution:# Best O(nlog(n)); Average O(nlog(n)); Worst O(nlog(n)).## Approach:# Heap sort happens in two phases. In the start phase, the array# is transformed into a heap. A heap is a binary tree where# 1) each node is greater than each of its children# 2) the tree is perfectly balanced# 3) all leaves are in the leftmost position available.# In phase two the heap is continuously reduced to a sorted array:# 1) while the heap is not empty# - remove the top of the head into an array# - fix the heap.# Heap sort was invented by John Williams not by B. R. Heap.## MoveDown:# The movedown method checks and verifies that the structure is a heap.## Technical Details:# A heap is based on an array just as a hashmap is based on an# array. For a heap, the children of an element n are at index# 2n+1 for the left child and 2n+2 for the right child.## The movedown function checks that an element is greater than its# children. If not the values of element and child are swapped. The# function continues to check and swap until the element is at a# position where it is greater than its children.#=======================================================================def heap_sort(array): # convert aList to heap &#x6784;&#x9020;&#x6700;&#x5927;&#x5806; n = len(array) leastParent = n / 2 - 1 # n&#x7684;&#x7236;&#x8282;&#x70B9;&#x4E0B;&#x6807; for i in range(leastParent, -1, -1): max_heapify(array, i, n - 1) # &#x5C0F;&#x5806;&#x8F6C;&#x5316;&#x4E3A;&#x6700;&#x5927;&#x5806; # flatten heap into sorted array &#x5C06;&#x6700;&#x5927;&#x5806;&#x8F6C;&#x5316;&#x4E3A;&#x6709;&#x5E8F;&#x6570;&#x7EC4; for i in range(n - 1, 0, -1): if array[0] &gt; array[i]: array[i], array[0] = array[0], array[i] max_heapify(array, 0, i - 1) # &#x8C03;&#x6574;&#x6700;&#x5927;&#x5806; return array# &#x6700;&#x5927;&#x5806;&#x8C03;&#x6574;&#xFF1A;&#x5C06;&#x5806;&#x7684;&#x672B;&#x7AEF;&#x5B50;&#x8282;&#x70B9;&#x4F5C;&#x8C03;&#x6574;&#xFF0C;&#x4F7F;&#x5F97;&#x5B50;&#x8282;&#x70B9;&#x6C38;&#x8FDC;&#x5C0F;&#x4E8E;&#x7236;&#x8282;&#x70B9;# start &#x4E3A;&#x5F53;&#x524D;&#x9700;&#x8981;&#x8C03;&#x6574;&#x6700;&#x5927;&#x5806;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;end&#x4E3A;&#x8C03;&#x6574;&#x8FB9;&#x754C;def max_heapify(array, start, end): largest = 2 * start + 1 # consider left child is larger than right while largest &lt;= end: # right child exists and is larger than left child if largest &lt; end and array[largest] &lt; array[largest + 1]: largest += 1 # right child is larger than parent if array[largest] &gt; array[start]: array[largest], array[start] = array[start], array[largest] # move down to largest child start = largest largest = 2 * start + 1 else: return Bucket Sort &#x6876;&#x6392;&#x5E8F;&#x6876;&#x6392;&#x5E8F;&#x548C;&#x5F52;&#x5E76;&#x6392;&#x5E8F;&#x975E;&#x5E38;&#x7C7B;&#x4F3C;&#xFF0C;&#x4E5F;&#x4F7F;&#x7528;&#x4E86;&#x5F52;&#x5E76;&#x7684;&#x601D;&#x60F3;&#x3002;&#x5927;&#x81F4;&#x6B65;&#x9AA4;&#x5982;&#x4E0B;&#xFF1A;&#x5916;&#x90E8;&#x6392;&#x5E8F;&#xFF0C;&#x7A33;&#x5B9A;&#x6027;&#x53D6;&#x51B3;&#x4E8E;&#x6876;&#x5185;&#x6392;&#x5E8F;&#x7B97;&#x6CD5;&#x3002;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E0E;&#x5206;&#x6876;&#x6570;&#x91CF; K &#x6709;&#x5173;&#x6B65;&#x9AA4;&#xFF1A; &#x8BBE;&#x7F6E;&#x4E00;&#x4E2A;&#x5B9A;&#x91CF;&#x7684;&#x6570;&#x7EC4;&#x5F53;&#x4F5C;&#x7A7A;&#x6876;&#x3002;&#x6876;&#x6392;&#x5E8F;&#x7684;&#x7279;&#x70B9;&#x5C31;&#x662F;&#x6570;&#x636E;&#x8981;&#x6709;&#x8303;&#x56F4;&#xFF08;&#x6876;&#x4E0D;&#x80FD;&#x65E0;&#x9650;&#x591A;&#xFF09;&#x3002; Divide - &#x4ECE;&#x5F85;&#x6392;&#x5E8F;&#x6570;&#x7EC4;&#x4E2D;&#x53D6;&#x51FA;&#x5143;&#x7D20;&#xFF0C;&#x5C06;&#x5143;&#x7D20;&#x6309;&#x7167;&#x4E00;&#x5B9A;&#x7684;&#x89C4;&#x5219;&#x585E;&#x8FDB;&#x5BF9;&#x5E94;&#x7684;&#x6876;&#x5B50;&#x53BB;&#x3002; &#x5BF9;&#x6BCF;&#x4E2A;&#x975E;&#x7A7A;&#x6876;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;&#x901A;&#x5E38;&#x53EF;&#x5728;&#x585E;&#x5143;&#x7D20;&#x5165;&#x6876;&#x65F6;&#x8FDB;&#x884C;&#x63D2;&#x5165;&#x6392;&#x5E8F;&#x3002; Conquer - &#x4ECE;&#x975E;&#x7A7A;&#x6876;&#x628A;&#x5143;&#x7D20;&#x518D;&#x653E;&#x56DE;&#x539F;&#x6765;&#x7684;&#x6570;&#x7EC4;&#x4E2D;&#x3002;&#x201D; &#x5047;&#x8BBE;&#x8F93;&#x5165;&#x6570;&#x636E;&#x670D;&#x4ECE;&#x5747;&#x5300;&#x5206;&#x5E03;&#xFF0C;&#x7136;&#x540E;&#x5C06;&#x8F93;&#x5165;&#x6570;&#x636E;&#x5747;&#x5300;&#x5730;&#x5206;&#x914D;&#x5230;&#x6709;&#x9650;&#x6570;&#x91CF;&#x7684;&#x6876;&#x4E2D;&#xFF0C;&#x7136;&#x540E;&#x5BF9;&#x6BCF;&#x4E2A;&#x6876;&#x518D;&#x5206;&#x522B;&#x6392;&#x5E8F;&#xFF0C;&#x5BF9;&#x6BCF;&#x4E2A;&#x6876;&#x518D;&#x4F7F;&#x7528;&#x63D2;&#x5165;&#x6392;&#x5E8F;&#x7B97;&#x6CD5;&#xFF0C;&#x6700;&#x540E;&#x5C06;&#x6BCF;&#x4E2A;&#x6876;&#x4E2D;&#x7684;&#x6570;&#x636E;&#x6709;&#x5E8F;&#x7684;&#x7EC4;&#x5408;&#x8D77;&#x6765;&#x3002;&#x524D;&#x9762;&#x4E86;&#x89E3;&#x5230;&#x57FA;&#x6570;&#x6392;&#x5E8F;&#x5047;&#x8BBE;&#x8F93;&#x5165;&#x6570;&#x636E;&#x5C5E;&#x4E8E;&#x4E00;&#x4E2A;&#x5C0F;&#x533A;&#x95F4;&#x5185;&#x7684;&#x6574;&#x6570;&#xFF0C;&#x800C;&#x6876;&#x6392;&#x5E8F;&#x5219;&#x662F;&#x5047;&#x8BBE;&#x8F93;&#x5165;&#x662F;&#x7531;&#x4E00;&#x4E2A;&#x968F;&#x673A;&#x8FC7;&#x7A0B;&#x751F;&#x6210;&#xFF0C;&#x8BE5;&#x8FC7;&#x7A0B;&#x5C06;&#x5143;&#x7D20;&#x5747;&#x5300;&#x7684;&#x5206;&#x5E03;&#x5728;&#x4E00;&#x4E2A;&#x533A;&#x95F4;[a,b]&#x4E0A;&#x3002;&#x7531;&#x4E8E;&#x6876;&#x6392;&#x5E8F;&#x548C;&#x8BA1;&#x6570;&#x6392;&#x5E8F;&#x4E00;&#x6837;&#x5747;&#x5BF9;&#x8F93;&#x5165;&#x7684;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x4E86;&#x67D0;&#x4E9B;&#x5047;&#x8BBE;&#x9650;&#x5236;&#xFF0C;&#x56E0;&#x6B64;&#x6BD4;&#x4E00;&#x822C;&#x7684;&#x57FA;&#x4E8E;&#x6BD4;&#x8F83;&#x7684;&#x6392;&#x5E8F;&#x7B97;&#x6CD5;&#x590D;&#x6742;&#x5EA6;&#x4F4E;&#x3002; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384#=======================================================================# Time Complexity of Solution:# Best Case O(n); Average Case O(n); Worst Case O(n).## Approach:# If it sounds too good to be true, then most likely it&apos;s not true.# Bucketsort is not an exception to this adage. For bucketsort to# work at its blazing efficiency, there are multiple prerequisites.# First the hash function that is used to partition the elements need# to be very good and must produce ordered hash: if i &lt; k then# hash(i) &lt; hash(k). Second, the elements to be sorted must be# uniformly distributed.## The aforementioned aside, bucket sort is actually very good# considering that counting sort is reasonably speaking its upper# bound. And counting sort is very fast. The particular distinction# for bucket sort is that it uses a hash function to partition the# keys of the input array, so that multiple keys may hash to the same# bucket. Hence each bucket must effectively be a growable list;# similar to radix sort.## Numerous Internet sites, including university pages, have# erroneously written counting sort code and call them bucket sort.# Bucket sort uses a hash function to distribute keys; counting sort# creates a bucket for each key. Indeed there are perhaps greater# similarities between radix sort and bucket sort, than there are# between counting sort and bucket sort.## In the presented program insertionsort is used to sort# each bucket. This is to inculcate that the bucket sort algorithm# does not specify which sorting technique to use on the buckets.# A programmer may choose to continuously use bucket sort on each# bucket until the collection is sorted (in the manner of the radix# sort program below). Whichever sorting method is used on the# buckets, bucket sort still tends toward O(n).#=======================================================================def bucket_sort(array): # get hash codes code = hashing(array) # number of buckets: math.sqrt(len(array)) buckets = [list() for _ in range(code[1])] # distribute data into buckets: O(n) for i in array: x = re_hashing(i, code) buck = buckets[x] buck.append(i) # Sort each bucket: O(n). # I mentioned above that the worst case for bucket sort is counting # sort. That&apos;s because in the worst case, bucket sort may end up # with one bucket per key. In such case, sorting each bucket would # take 1^2 = O(1). Even after allowing for some probabilistic # variance, to sort each bucket would still take 2-1/n, which is # still a constant. Hence, sorting all the buckets takes O(n). for bucket in buckets: insertion_sort(bucket) ndx = 0 # merge the buckets: O(n) for i in range(len(buckets)): print buckets[i] for v in buckets[i]: array[ndx] = v ndx += 1 return arrayimport mathdef hashing(array): m = array[0] for i in range(1, len(array)): if(m &lt; array[i]): m = array[i] result = [m, int(math.sqrt(len(array)))] print result return resultdef re_hashing(i, code): # &#x6876;&#x662F;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x6392;&#x7684; return int(i / code[0] * (code[1] - 1)) Counting Sort &#x8BA1;&#x6570;&#x6392;&#x5E8F;&#x6876;&#x7684;&#x4E2A;&#x6570;&#xFF1D;&#x5F85;&#x6392;&#x5E8F;&#x4E2A;&#x6570;&#xFF0C;&#x5C31;&#x662F;&#x8BA1;&#x6570;&#x6392;&#x5E8F;&#xFF0C;&#x662F;&#x6876;&#x6392;&#x5E8F;&#x7684;&#x7279;&#x4F8B;&#x3002;&#x8BA1;&#x6570;&#x6392;&#x5E8F;&#xFF0C;&#x987E;&#x540D;&#x601D;&#x4E49;&#xFF0C;&#x5C31;&#x662F;&#x5BF9;&#x5F85;&#x6392;&#x5E8F;&#x6570;&#x7EC4;&#x6309;&#x5143;&#x7D20;&#x8FDB;&#x884C;&#x8BA1;&#x6570;&#x3002;&#x4F7F;&#x7528;&#x524D;&#x63D0;&#x662F;&#x9700;&#x8981;&#x5148;&#x77E5;&#x9053;&#x5F85;&#x6392;&#x5E8F;&#x6570;&#x7EC4;&#x7684;&#x5143;&#x7D20;&#x8303;&#x56F4;&#xFF0C;&#x5C06;&#x8FD9;&#x4E9B;&#x4E00;&#x5B9A;&#x8303;&#x56F4;&#x7684;&#x5143;&#x7D20;&#x7F6E;&#x4E8E;&#x65B0;&#x6570;&#x7EC4;&#x4E2D;&#xFF0C;&#x65B0;&#x6570;&#x7EC4;&#x7684;&#x5927;&#x5C0F;&#x4E3A;&#x5F85;&#x6392;&#x5E8F;&#x6570;&#x7EC4;&#x4E2D;&#x6700;&#x5927;&#x5143;&#x7D20;&#x4E0E;&#x6700;&#x5C0F;&#x5143;&#x7D20;&#x7684;&#x5DEE;&#x503C;&#x3002; &#x672C;&#x8D28;&#x662F;&#x7A7A;&#x95F4;&#x6362;&#x65F6;&#x95F4;&#xFF0C;&#x7A7A;&#x95F4;&#x590D;&#x6742;&#x5EA6; O(max-min)&#x3002;&#x672C;&#x8D28;&#x662F;&#x54C8;&#x5E0C;&#x8FC7;&#x7A0B;&#x524D;&#x63D0;&#xFF1A;&#x6570;&#x636E;&#x662F; int &#x503C; &#x6B65;&#x9AA4;&#xFF1A; &#x5B9A;&#x65B0;&#x6570;&#x7EC4;&#x5927;&#x5C0F;&#x2014;&#x2014;&#x627E;&#x51FA;&#x5F85;&#x6392;&#x5E8F;&#x7684;&#x6570;&#x7EC4;&#x4E2D;&#x6700;&#x5927;&#x548C;&#x6700;&#x5C0F;&#x7684;&#x5143;&#x7D20; &#x7EDF;&#x8BA1;&#x6B21;&#x6570;&#x2014;&#x2014;&#x7EDF;&#x8BA1;&#x6570;&#x7EC4;&#x4E2D;&#x6BCF;&#x4E2A;&#x503C;&#x4E3A;i&#x7684;&#x5143;&#x7D20;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;&#xFF0C;&#x5B58;&#x5165;&#x65B0;&#x6570;&#x7EC4;C&#x7684;&#x7B2C;i&#x9879; &#x5BF9;&#x7EDF;&#x8BA1;&#x6B21;&#x6570;&#x9010;&#x4E2A;&#x7D2F;&#x52A0;&#x2014;&#x2014;&#x5BF9;&#x6240;&#x6709;&#x7684;&#x8BA1;&#x6570;&#x7D2F;&#x52A0;&#xFF08;&#x4ECE;C&#x4E2D;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x5F00;&#x59CB;&#xFF0C;&#x6BCF;&#x4E00;&#x9879;&#x548C;&#x524D;&#x4E00;&#x9879;&#x76F8;&#x52A0;&#xFF09; &#x53CD;&#x5411;&#x586B;&#x5145;&#x76EE;&#x6807;&#x6570;&#x7EC4;&#x2014;&#x2014;&#x5C06;&#x6BCF;&#x4E2A;&#x5143;&#x7D20;i&#x653E;&#x5728;&#x65B0;&#x6570;&#x7EC4;&#x7684;&#x7B2C;C(i)&#x9879;&#xFF0C;&#x6BCF;&#x653E;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x5C31;&#x5C06;C(i)&#x51CF;&#x53BB;1 &#x5176;&#x4E2D;&#x53CD;&#x5411;&#x586B;&#x5145;&#x4E3B;&#x8981;&#x662F;&#x4E3A;&#x4E86;&#x907F;&#x514D;&#x91CD;&#x590D;&#x5143;&#x7D20;&#x843D;&#x5165;&#x65B0;&#x6570;&#x7EC4;&#x7684;&#x540C;&#x4E00;&#x7D22;&#x5F15;&#x5904;&#x3002; &#x53C2;&#x8003;&#x94FE;&#x63A5;&#xFF1A;https://www.bittiger.io/blog/post/4Q4iNNbRYXkWkrAM3#quicksort","tags":"排序"},{"title":"Search Engines笔记 - Exact-match retrieval","url":"/2016/09/06/Search Engines笔记 - Exact-match retrieval/","text":"Exact match retrieval models &#x5BF9;&#x4E13;&#x5BB6;&#x6765;&#x8BF4;&#x5F88;&#x9002;&#x7528;&#xFF0C;&#x5B83;&#x5047;&#x5B9A;&#x4EBA;&#x80FD;&#x5C06;&#x9700;&#x6C42;&#x63CF;&#x8FF0;&#x4E3A;&#x4E00;&#x4E2A; boolean query&#xFF0C;&#x6587;&#x6863;&#x8981;&#x4E48;&#x5B8C;&#x5168;&#x5339;&#x914D;&#x8981;&#x4E48;&#x5B8C;&#x5168;&#x4E0D;&#x5339;&#x914D;&#xFF0C;&#x4E0D;&#x5339;&#x914D;&#x7684;&#x6587;&#x6863;&#x5206;&#x6570;&#x5C31;&#x4E3A; 0&#x3002; Unranked Boolean Modeldocument score &#x4E3A; 1 &#x6216;&#x8005; 0&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x5339;&#x914D;&#x6216;&#x8005;&#x4E0D;&#x5339;&#x914D;&#xFF0C;&#x6CA1;&#x6709;&#x5339;&#x914D;&#x7A0B;&#x5EA6;&#x7684;&#x5206;&#x6570;&#xFF0C;&#x8FD4;&#x56DE;&#x7ED3;&#x679C;&#x901A;&#x5E38;&#x7B80;&#x5355;&#x7684;&#x6309;&#x65F6;&#x95F4;&#x987A;&#x5E8F;&#x6392;&#x5217;&#x3002;&#x5F88;&#x591A;&#x7CFB;&#x7EDF;&#x5728;&#x7528;&#xFF0C;&#x50CF; WestLaw, PubMed &#x7B49;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x901F;&#x5EA6;&#x975E;&#x5E38;&#x5FEB;&#xFF0C;&#x5BF9;&#x4E00;&#x4E9B;&#x95EE;&#x7B54;&#x7CFB;&#x7EDF;&#x6765;&#x8BF4;&#xFF0C;unranked boolean model &#x8DB3;&#x591F;&#x7528;&#x4E86;&#x3002; Ranked Boolean Model&#x4E3A;&#x6587;&#x6863;&#x8BA1;&#x7B97;&#x7279;&#x5B9A;&#x5206;&#x6570;&#xFF0C;&#x6587;&#x6863; j &#x5BF9; query $Q_{AND}(q_1&#x2026;q_n)$ &#x7684;&#x5206;&#x6570;&#xFF0C;&#x4E00;&#x822C;&#x53D6;&#x6700;&#x5C0F;&#x503C;&#x3002;$score(Q_{AND}(q_1&#x2026;q_n),d_j) = MIN(score(q_1,d_j),score(q_n,d_j))$ &#x6587;&#x6863; j &#x5BF9; query $Q_{OR}(q_1&#x2026;q_n)$ &#x7684;&#x5206;&#x6570;&#xFF0C;&#x5B9E;&#x8DF5;&#x4E2D; MEAN &#x6BD4; MAX &#x66F4;&#x6709;&#x6548;&#x3002;$score(Q_{OR}(q_1&#x2026;q_n),d_j) = MAX(score(q_1,d_j),score(q_n,d_j))$$score(Q_{OR}(q_1&#x2026;q_n),d_j) = MEAN(score(q_1,d_j),score(q_n,d_j))$ &#x4F18;&#x70B9;&#xFF1A; Very efficient Predictable, easy to explain, structured queries Works well enough when searchers know exactly what is wanted Results ordered by how redundantly a document satisfies a query Other term weighting methods can be used, too &#x7F3A;&#x70B9;&#xFF1A; Still an Exact-Match model Difficult to get a good balance of Precision and Recall Inverted listBinary inverted lists&#x7528;&#x4E8E; unranked retrievalOperators: AND, OR, AND-NOT, FIELD Frequency inverted lists&#x7528;&#x4E8E; ranked retrievalOperators: AND, OR, AND-NOT, FIELD, SUM, SYNONYM Positional inverted lists&#x7528;&#x4E8E; ranked retrievalOperators: AND, OR, AND-NOT, NEAR/n, SENTENCE/n, PASSAGE/n, WINDOW/n Fixed-length inverted list&#x65E9;&#x671F;&#x7684;&#x641C;&#x7D22;&#x5F15;&#x64CE;&#x4F1A;&#x7528;&#xFF0C;&#x5B83;&#x7684;&#x4F18;&#x70B9;&#x662F; simple to manage bit-vector operations are fast and easy to parallelize &#x7136;&#x800C;&#x2026;&#x6548;&#x7387;&#x4E0D;&#x9AD8;&#x3002;&#x5047;&#x5B9A; inverted list &#x957F;&#x5EA6;&#x4E3A; |C| bits (C &#x662F; corpus &#x91CC;&#x7684;&#x6587;&#x6863;&#x603B;&#x6570;)&#xFF0C;&#x90A3;&#x4E48;&#x5728;&#x67D0;&#x4E2A; inverted list &#x91CC;&#x4E3A; 1 &#x7684; bits &#x7684;&#x4E2A;&#x6570;&#x5C31;&#x662F; df(&#x591A;&#x5C11;&#x7BC7;&#x6587;&#x6863;&#x51FA;&#x73B0;&#x4E86;&#x8FD9;&#x4E2A; term)&#xFF0C;&#x6211;&#x4EEC;&#x770B; term with median tf &#x7684; df&#xFF0C;&#x8BB0;&#x4F5C; $df_{median}$&#xFF0C;&#x89C2;&#x5BDF;&#x4E00;&#x4E9B;&#x8BED;&#x6599;&#x53EF;&#x4EE5;&#x53D1;&#x73B0;&#xFF0C;$|C|&gt;&gt;|df_{median}|$&#xFF0C;(Wall Street Journal&#xFF0C;|C|=174K, $df_{median}=2$) Data structureB tree(B+ tree, B* tree, etc) $O(log n)$ &#x6613;&#x4E8E;&#x6269;&#x5C55; &#x53EF;&#x4EE5;&#x7528;&#x4E8E;&#x5B8C;&#x5168;&#x5339;&#x914D;(exact-match lookup)&#xFF0C;&#x8303;&#x56F4;&#x5BFB;&#x627E;(range lookup)&#xFF0C;&#x524D;&#x7F00;&#x5BFB;&#x627E;&#xFF08;prefix lookup&#xFF09; Hash table $O(1)$ &#x4E0D;&#x6613;&#x4E8E;&#x6269;&#x5C55; &#x7528;&#x4E8E;&#x5B8C;&#x5168;&#x5339;&#x914D;(exact-match lookup) Term dictionarystring &#x2013;&gt; integer&#xFF0C;&#x901F;&#x5EA6;&#x66F4;&#x5FEB;&#x3002; &#x95EE;&#x9898;&#xFF1A;&#x591A;&#x5C11;&#x5B58;&#x5728;&#x5185;&#x5B58;&#xFF0C;&#x591A;&#x5C11;&#x5B58;&#x5728;&#x786C;&#x76D8; frequent terms in RAM (eg.,ctf&gt;=1,000) less frequent terms to dis (eg.,ctf&lt;1,000) ctf &lt; 1000&#xFF0C;&#x6839;&#x636E; Zipf&#x2019;s law &#x7B97;&#x51FA; 99.9% &#x7684;&#x8BCD;&#x53EF;&#x4EE5;&#x5B58;&#x5728;&#x786C;&#x76D8;&#x3002;((AN/1)-(AN/1000))/(A*N)=999/1000=99.9%","tags":"nlp search-engines"},{"title":"数据结构和算法 -- 链表","url":"/2016/09/04/数据结构和算法 -- 链表/","text":"&#x94FE;&#x8868;&#x5B9E;&#x73B0;&#xFF0F;&#x79FB;&#x9664;&#x8282;&#x70B9;&#xFF0F;&#x94FE;&#x8868;&#x76F8;&#x52A0;&#xFF0F;&#x94FE;&#x8868;&#x90E8;&#x5206;&#x7FFB;&#x8F6C;&#xFF0F;&#x94FE;&#x8868;&#x6539;&#x5E8F;/&#x94FE;&#x8868;&#x53BB;&#x91CD;&#xFF0F;&#x94FE;&#x8868;&#x5212;&#x5206;&#xFF0F;&#x94FE;&#x8868;&#x7684;&#x73AF;/&#x94FE;&#x8868;&#x516C;&#x5171;&#x8282;&#x70B9;&#x95EE;&#x9898;/&#x94FE;&#x8868;&#x590D;&#x5236; &#x7B80;&#x4ECB;&#x7EBF;&#x6027;&#x8868;&#x662F;&#x6700;&#x57FA;&#x672C;&#x3001;&#x6700;&#x7B80;&#x5355;&#x3001;&#x4E5F;&#x662F;&#x6700;&#x5E38;&#x7528;&#x7684;&#x4E00;&#x79CD;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x3002;&#x7EBF;&#x6027;&#x8868;&#x4E2D;&#x6570;&#x636E;&#x5143;&#x7D20;&#x4E4B;&#x95F4;&#x7684;&#x5173;&#x7CFB;&#x662F;&#x4E00;&#x5BF9;&#x4E00;&#x7684;&#x5173;&#x7CFB;&#xFF0C;&#x5373;&#x9664;&#x4E86;&#x7B2C;&#x4E00;&#x4E2A;&#x548C;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x6570;&#x636E;&#x5143;&#x7D20;&#x4E4B;&#x5916;&#xFF0C;&#x5176;&#x5B83;&#x6570;&#x636E;&#x5143;&#x7D20;&#x90FD;&#x662F;&#x9996;&#x5C3E;&#x76F8;&#x63A5;&#x7684;&#x3002; &#x7EBF;&#x6027;&#x8868;&#x7684;&#x4E24;&#x79CD;&#x5B58;&#x50A8;&#x65B9;&#x5F0F; &#x987A;&#x5E8F;&#x5B58;&#x50A8;&#x7ED3;&#x6784;&#xFF1A;&#x968F;&#x673A;&#x8BFB;&#x53D6;&#xFF0C;&#x8BBF;&#x95EE;&#x65F6;&#x662F; O(1) &#x94FE;&#x5F0F;&#x5B58;&#x50A8;&#x7ED3;&#x6784;&#xFF1A;&#x63D2;&#x5165;&#x548C;&#x5220;&#x9664; O(1)&#xFF0C;&#x8BBF;&#x95EE;&#x65F6;&#x6700;&#x574F;&#x662F; O(n) &#x7EBF;&#x6027;&#x8868;&#x7684;&#x5206;&#x7C7B;&#xFF08;&#x6839;&#x636E;&#x6307;&#x9488;&#x57DF;&#xFF09; &#x5355;&#x5411;&#x94FE;&#x8868; &#x53CC;&#x5411;&#x94FE;&#x8868; &#x5FAA;&#x73AF;&#x94FE;&#x8868; &#x8FD9;&#x4E00;&#x7BC7;&#x4E3B;&#x8981;&#x8BB2;&#x7684;&#x662F;&#x94FE;&#x8868;&#xFF08;linked list&#xFF09;&#x3002;&#x94FE;&#x8868;&#x662F;&#x4E00;&#x79CD;&#x5E38;&#x89C1;&#x7684;&#x7EBF;&#x6027;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x3002;&#x5355;&#x5411;&#x94FE;&#x8868;(singly linked list)&#xFF0C;&#x6BCF;&#x4E2A;&#x8282;&#x70B9;&#x6709;&#x4E00;&#x4E2A; next &#x6307;&#x9488;&#x6307;&#x5411;&#x540E;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#xFF0C;&#x8FD8;&#x6709;&#x4E00;&#x4E2A;&#x6210;&#x5458;&#x53D8;&#x91CF;&#x7528;&#x4EE5;&#x5B58;&#x50A8;&#x6570;&#x503C;&#xFF1B;&#x53CC;&#x5411;&#x94FE;&#x8868;(doubly Linked List)&#xFF0C;&#x591A;&#x4E86;&#x4E00;&#x4E2A; prev &#x6307;&#x9488;&#x6307;&#x5411;&#x524D;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x3002;&#x4E0E;&#x6570;&#x7EC4;&#x7C7B;&#x4F3C;&#xFF0C;&#x641C;&#x7D22;&#x94FE;&#x8868;&#x9700;&#x8981;O(n)&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF0C;&#x4F46;&#x662F;&#x94FE;&#x8868;&#x4E0D;&#x80FD;&#x901A;&#x8FC7;&#x5E38;&#x6570;&#x65F6;&#x95F4; O(1) &#x8BFB;&#x53D6;&#x7B2C; k &#x4E2A;&#x6570;&#x636E;&#x3002;&#x94FE;&#x8868;&#x7684;&#x4F18;&#x52BF;&#x5728;&#x4E8E;&#x80FD;&#x591F;&#x4EE5;&#x8F83;&#x9AD8;&#x7684;&#x6548;&#x7387;&#x5728;&#x4EFB;&#x610F;&#x4F4D;&#x7F6E;&#x63D2;&#x5165;&#x6216;&#x5220;&#x9664;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x3002; arraylocate: O(1)insert/delete: O(N)search: not sorted -&gt; linear search =&gt; O(N), sorted -&gt; binary search =&gt; O(logN)iteration: O(N) data structure locate insert/delete search iteration array O(1) O(N) $N^2$ N $O(1)$ &#x2014;&#x2014; selection yes $N^2$ $N^2$ $N^2$ $O(1)$ &#x2014;&#x2014; insertion yes $N^2$ $N^2$ N $O(1)$ &#x2014;&#x2014; shell yes &#x2014;&#x2013; &#x2014;&#x2014;- N $O(1)$ &#x2014;&#x2014; merge $NlogN$ $NlogN$ $NlogN$ $O(N)$ &#x2014;&#x2014; quick yes $N^2$ $NlogN$ $NlogN$ $O(logN)$ &#x2014;&#x2014; heap yes $NlogN$ $NlogN$ $NlogN$ $O(1)$ &#x2014;&#x2014; &#x57FA;&#x672C;&#x7B56;&#x7565;&#x6D89;&#x53CA;&#x5934;&#x8282;&#x70B9;&#x5F53;&#x6D89;&#x53CA;&#x5BF9;&#x5934;&#x8282;&#x70B9;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;&#x8003;&#x8651;&#x521B;&#x5EFA;&#x54D1;&#x8282;&#x70B9; &#x4FEE;&#x6539;&#x5355;&#x5411;&#x94FE;&#x8868;&#x7684;&#x64CD;&#x4F5C;&#x8003;&#x8651;&#x54EA;&#x4E2A;&#x8282;&#x70B9;&#x7684;next&#x6307;&#x9488;&#x4F1A;&#x53D7;&#x5230;&#x5F71;&#x54CD;&#xFF0C;&#x5219;&#x9700;&#x8981;&#x4FEE;&#x6B63;&#x8BE5;&#x6307;&#x9488;&#xFF1B; &#x53CD;&#x8F6C;&#x94FE;&#x8868;&#x8981;&#x628A;&#x53CD;&#x8F6C;&#x540E;&#x7684;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#xFF08;&#x5373;&#x7B2C;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#xFF09;&#x6307;&#x5411; null &#x5220;&#x9664;&#x67D0;&#x4E2A;&#x8282;&#x70B9; &#x7531;&#x4E8E;&#x9700;&#x8981;&#x77E5;&#x9053;&#x524D;&#x7EE7;&#x8282;&#x70B9;&#x7684;&#x4FE1;&#x606F;&#xFF0C;&#x800C;&#x524D;&#x7EE7;&#x8282;&#x70B9;&#x53EF;&#x80FD;&#x4F1A;&#x5BFC;&#x81F4;&#x8868;&#x5934;&#x4EA7;&#x751F;&#x53D8;&#x5316;&#xFF0C;&#x6240;&#x4EE5;&#x9700;&#x8981;&#x4E00;&#x4E9B;&#x6280;&#x5DE7; Dummy Node &#x5168;&#x90E8;&#x64CD;&#x4F5C;&#x7ED3;&#x675F;&#x540E;&#xFF0C;&#x5224;&#x65AD;&#x662F;&#x5426;&#x6709;&#x73AF;&#xFF1B;&#x82E5;&#x6709;&#xFF0C;&#x5219;&#x7F6E;&#x5176;&#x4E2D;&#x4E00;&#x7AEF;&#x4E3A; null &#x5FEB;&#x6162;&#x6307;&#x9488;&#x5FEB;&#x901F;&#x627E;&#x51FA;&#x672A;&#x77E5;&#x957F;&#x5EA6;&#x5355;&#x94FE;&#x8868;&#x7684;&#x4E2D;&#x95F4;&#x8282;&#x70B9;&#xFF0F;&#x6D89;&#x53CA;&#x5728;&#x94FE;&#x8868;&#x4E2D;&#x5BFB;&#x627E;&#x7279;&#x5B9A;&#x4F4D;&#x7F6E; &#x8BBE;&#x7F6E;&#x4E24;&#x4E2A;&#x6307;&#x9488; *fast &#x548C; *slow &#x90FD;&#x6307;&#x5411;&#x5934;&#x8282;&#x70B9; *fast &#x79FB;&#x52A8;&#x901F;&#x5EA6;&#x662F; *slow &#x7684;&#x4E24;&#x500D; *fast &#x6307;&#x5411;&#x672B;&#x5C3E;&#x8282;&#x70B9;&#x65F6;&#xFF0C;*slow &#x6B63;&#x597D;&#x5C31;&#x5728;&#x4E2D;&#x95F4; &#x5224;&#x65AD;&#x5355;&#x94FE;&#x8868;&#x662F;&#x5426;&#x6709;&#x73AF; &#x8BBE;&#x7F6E;&#x4E24;&#x4E2A;&#x6307;&#x9488; *fast &#x548C; *slow &#x90FD;&#x6307;&#x5411;&#x5934;&#x8282;&#x70B9; *fast &#x79FB;&#x52A8;&#x901F;&#x5EA6;&#x662F; *slow &#x7684;&#x4E24;&#x500D; &#x5982;&#x679C; *fast == null &#x8BF4;&#x660E;&#x8BE5;&#x5355;&#x94FE;&#x8868;&#x4E0D;&#x662F;&#x5FAA;&#x73AF;&#x94FE;&#x8868; &#x5982;&#x679C; *fast == *slow &#x8BF4;&#x660E;&#x8BE5;&#x94FE;&#x8868;&#x662F;&#x5FAA;&#x73AF;&#x94FE;&#x8868; &#x627E;&#x5012;&#x6570;&#x7B2C; N &#x4E2A;&#x8282;&#x70B9; &#x8BBE;&#x7F6E;&#x4E24;&#x4E2A;&#x6307;&#x9488; fast &#x548C; slow &#x90FD;&#x6307;&#x5411;&#x5934;&#x8282;&#x70B9; *fast &#x5148;&#x79FB;&#x52A8; N &#x6B65;&#xFF0C;&#x7136;&#x540E;&#x4E24;&#x4E2A;&#x6307;&#x9488;&#x4E00;&#x8D77;&#x524D;&#x8FDB; *fast &#x5230;&#x8FBE;&#x672B;&#x5C3E;&#x65F6;&#xFF0C;*slow &#x5373;&#x4E3A;&#x5012;&#x6570;&#x7B2C; N &#x4E2A;&#x8282;&#x70B9; &#x68C0;&#x9A8C;&#x6709;&#x6548;&#x6027;&#x8BBF;&#x95EE;&#x67D0;&#x4E2A;&#x8282;&#x70B9; cur.next &#x65F6;&#xFF0C;&#x8981;&#x68C0;&#x9A8C; cur &#x662F;&#x5426;&#x4E3A; null&#x3002;&#xFF08;&#x540C;&#x7406;&#xFF0C;&#x8BBF;&#x95EE; cur.next.next&#xFF0C;&#x68C0;&#x9A8C; cur.next&#xFF09; &#x94FE;&#x8868;&#x5B9E;&#x73B0;Singly-linked list Implementation123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960# implement a singly-linked listclass Node(object): def __init__(self, val=None, next=None): self.val = val self.next = nextclass LinkedList(object): def __init__(self, head=None): self.head = head # insert in front def insert(self, val): node = Node(val, self.head) self.head = node return True def size(self): length = 0 cur = self.head while cur: cur = cur.next length += 1 return length def delete(self, data): if not self.head or not data: return False cur = self.head # special case for head if data == cur: cur = cur.next return True while cur.next: if cur.next == data: cur.next = cur.next.next return True cur = cur.next return False #raise ValueError(&quot;Data not in list&quot;) def deleteList(self): cur = self.head self.head = None return True def search(self, data): cur = self.head while cur and cur.val != data: cur = cur.next return cur def printAll(self): cur = self.head while cur: print cur.val, cur = cur.next print Leetcode &#x5B9E;&#x4F8B;&#x79FB;&#x9664;&#x8282;&#x70B9;(19.Remove Nth Node From End of List)ProblemGiven a linked list, remove the nth node from the end of list and return its head. For example, Given linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n = 2. After removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5.Note:Given n will always be valid.Try to do this in one pass. Solution1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768&apos;&apos;&apos;A singly list is a particularly poor choice for a data structure when you frequently need to find the mth-to-last element!Assumption:- m is less than the length of linked list? if not, check first!Solution:You cannot traverse backward through a singly linked list, so may be we can store elements into another data structure so that we can look back, or for this problem, we can traverse from beginning of list.Two-pass solution:- first get the length of linked list, and then find the node before (length-n)th node, and node.next=node.next.next- use dummy nodeFollow-up:one-pass solution:- how to access nth node from the end? use two pointers, fast and slow, keep the distance n between fast and slow node&apos;&apos;&apos;# Definition for singly-linked list.# class ListNode(object):# def __init__(self, x):# self.val = x# self.next = Noneclass Solution(object): def removeNthFromEnd(self, head, n): &quot;&quot;&quot; :type head: ListNode :type n: int :rtype: ListNode &quot;&quot;&quot; if not head or not head.next: return None dummy=ListNode(0) dummy.next=head slow,fast=dummy,dummy for i in range(n): fast=fast.next while fast.next: fast,slow=fast.next,slow.next slow.next=slow.next.next return dummy.next &apos;&apos;&apos; # Two pass solution def removeNthFromEnd(self, head, n): &quot;&quot;&quot; :type head: ListNode :type n: int :rtype: ListNode &quot;&quot;&quot; if not head or not head.next: return None length=0 dummy=ListNode(0) dummy.next=head pointer1,pointer2=dummy,dummy while pointer1.next: length+=1 pointer1=pointer1.next # find nth node for i in range(length-n): pointer2=pointer2.next pointer2.next=pointer2.next.next return dummy.next &apos;&apos;&apos; &#x94FE;&#x8868;&#x76F8;&#x52A0;(2.Add Two Numbers)ProblemYou are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)Output: 7 -&gt; 0 -&gt; 8 Solution12345678910111213141516171819202122232425class Solution(object): def addTwoNumbers(self, l1, l2): &quot;&quot;&quot; :type l1: ListNode :type l2: ListNode :rtype: ListNode &quot;&quot;&quot; head = ListNode(0) output = head carry = 0 while True: if l1 != None: carry += l1.val l1 = l1.next if l2 != None: carry += l2.val l2 = l2.next output.val = carry % 10 carry = carry / 10 if l1 != None or l2 != None or carry: output.next = ListNode(0) output = output.next else: break return head &#x6CE8;&#x610F;&#x8003;&#x8651;&#x4E24;&#x4E2A;&#x6570;&#x4F4D;&#x6570;&#x4E0D;&#x540C;&#x7684;&#x60C5;&#x51B5;&#x3002;&#x56E0;&#x4E3A;&#x4E24;&#x4F4D;&#x6570;&#x76F8;&#x52A0;&#x8FDB;&#x4F4D;&#x6700;&#x591A;&#x5F71;&#x54CD;&#x540E;&#x4E00;&#x4F4D;&#xFF0C;&#x4E0D;&#x4F1A;&#x5F71;&#x54CD; i+2 &#x4F4D;&#xFF0C;&#x6240;&#x4EE5;&#x53D1;&#x73B0;&#x4E00;&#x4E2A;&#x94FE;&#x8868;&#x4E3A;&#x7A7A;&#x540E;&#xFF0C;&#x76F4;&#x63A5;&#x7ED3;&#x675F;&#x5FAA;&#x73AF;&#xFF0C;&#x6700;&#x540E;&#x53EA;&#x7528;&#x8FDB;&#x4F4D;&#x548C;&#x8F83;&#x957F;&#x94FE;&#x8868;&#x7684;&#x5F53;&#x524D;&#x8282;&#x70B9;&#x76F8;&#x52A0;&#xFF0C;&#x4E4B;&#x540E;&#x8F83;&#x957F;&#x94FE;&#x8868;&#x7684; i+2 &#x4F4D;&#x76F4;&#x63A5;&#x7167;&#x642C;&#x3002;&#x7528;&#x8FD9;&#x4E2A;&#x7ED3;&#x6784;&#x53EF;&#x4EE5;&#x5B9E;&#x73B0;&#x5927;&#x6574;&#x6570;&#x7684;&#x8BA1;&#x7B97;&#x3002; &#x94FE;&#x8868;&#x7684;&#x7FFB;&#x8F6C;(206.92.Reverse Linked List)Problem(I)Reverse a singly linked list.Hint:A linked list can be reversed either iteratively or recursively. Could you implement both? &#x521D;&#x6B65;&#x601D;&#x8003;&#x6BCF;&#x6B21;&#x8D70;&#x5230;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x6570;&#xFF0C;&#x628A;&#x5B83;&#x653E;&#x5230;&#x6700;&#x524D;&#x9762;1234561 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5=&gt;5 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 44 -&gt; 5 -&gt; 1 -&gt; 2 -&gt; 3...5 -&gt; 4 -&gt; 3 -&gt; 2 -&gt; 1 &#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6; $O(n^2)$ &#x5934;&#x63D2;&#x6CD5;1234561 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5=&gt;2 -&gt; 1 -&gt; 3 -&gt; 4 -&gt; 53 -&gt; 2 -&gt; 1 -&gt; 4 -&gt; 5...5 -&gt; 4 -&gt; 3 -&gt; 2 -&gt; 1 &#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6; $O(n)$&#xFF0C;&#x7A7A;&#x95F4;&#x590D;&#x6742;&#x5EA6; $O(1)$ &#x8981;&#x6CE8;&#x610F;&#x7684;&#x662F;&#xFF0C;&#x628A;&#x7FFB;&#x8F6C;&#x540E;&#x7684;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#xFF08;&#x5373;&#x539F;&#x6765;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#xFF09;&#x6307;&#x5411; Null(None)&#x3002;&#x8BBF;&#x95EE;&#x67D0;&#x4E2A;&#x8282;&#x70B9; cur.next&#xFF0C;&#x8981;&#x68C0;&#x9A8C; cur &#x662F;&#x5426;&#x4E3A; None. 12345671 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5=&gt;1 -&gt; None -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 52 -&gt; 1 -&gt; None -&gt; 3 -&gt; 4 -&gt; 53 -&gt; 2 -&gt; 1 -&gt; None -&gt; 4 -&gt; 5...5 -&gt; 4 -&gt; 3 -&gt; 2 -&gt; 1 -&gt; None &#x8FED;&#x4EE3;&#x6CD5;12345678910111213class Solution(object): def reverseList(self, head): &quot;&quot;&quot; :type head: ListNode :rtype: ListNode &quot;&quot;&quot; dummy = None while head: curr = head head = head.next curr.next= dummy dummy = curr return dummy &#x66F4;&#x7B80;&#x5355;&#x3002;12345678910class Solution(object): def reverseList(self, head): &quot;&quot;&quot; :type head: ListNode :rtype: ListNode &quot;&quot;&quot; dummy = None while head: head.next,dummy,head=dummy,head,head.next # head.next=dummy &#x5FC5;&#x987B;&#x5728; head=head.next&#x4E4B;&#x524D; return dummy &#x9012;&#x5F52;1234567891011121314class Solution(object): def reverseList(self, head): &quot;&quot;&quot; :type head: ListNode :rtype: ListNode &quot;&quot;&quot; return self._reverse(head) def _reverse(self, node, prev=None): if not node: return prev n = node.next node.next = prev return self._reverse(n, node) Problem(II)Reverse a linked list from position m to n. Do it in-place and in one-pass.For example:Given 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, m = 2 and n = 4,return 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;NULL.Note:Given m, n satisfy the following condition:1 &#x2264; m &#x2264; n &#x2264; length of list. oup, &#x6700;&#x540E;&#x8981;&#x8FD4;&#x56DE;&#x7684;&#x662F; oup.next &#x6307;&#x9488;dummy &#x6307;&#x9488;&#xFF0C;&#x5728;&#x539F;&#x6765;&#x7684; m-1 &#x4F4D;&#x7F6E;cur &#x6307;&#x9488;&#xFF0C;&#x5728;&#x539F;&#x6765;&#x7684; n &#x4F4D;&#x7F6E;reverse&#xFF0C;&#x5728;&#x539F;&#x6765;&#x7684; m &#x4F4D;&#x7F6E; dummy &#x6307;&#x9488;&#xFF0C;&#x7A7A;&#x8F6C; m-1 &#x6B21;&#xFF0C;&#x627E;&#x5230;&#x7B2C; m-1 &#x4E2A;&#x8282;&#x70B9;&#xFF0C;&#x5373;&#x5F00;&#x59CB;&#x7FFB;&#x8F6C;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x7ED3;&#x70B9;&#x7684;&#x524D;&#x4E00;&#x4E2A;&#xFF1B;&#x5229;&#x7528; cur, reverse &#x6309;&#x5B8C;&#x5168;&#x7FFB;&#x8F6C;&#x7684;&#x65B9;&#x6CD5;&#x7FFB;&#x8F6C;[m,n]&#x90E8;&#x5206;&#x6700;&#x540E;&#x4FEE;&#x6539;&#x4E24;&#x4E2A;&#x6307;&#x9488;&#xFF0C;dummy.next &#x6307;&#x5411; reverse&#xFF0C;dummy.next.next &#x6307;&#x5411;&#x7B2C; n+1 &#x4E2A;&#x8282;&#x70B9;&#x3002; Solution123456789101112131415161718192021222324252627282930class Solution(object): def reverseBetween(self, head, m, n): &quot;&quot;&quot; :type head: ListNode :type m: int :type n: int :rtype: ListNode &quot;&quot;&quot; if m==n: return head # [1,m-1] nodes oup = ListNode(0) oup.next = head dummy = oup for i in range(m-1): dummy = dummy.next # reverse [m,n] nodes reverse = None cur = dummy.next for i in range(m,n+1): cur.next,reverse,cur = reverse,cur,cur.next # [n,end] nodes dummy.next.next = cur dummy.next = reverse return oup.next &#x94FE;&#x8868;&#x6539;&#x5E8F;&#xFF08;143. Reorder List&#xFF09;ProblemGiven a singly linked list L: L0&#x2192;L1&#x2192;&#x2026;&#x2192;Ln-1&#x2192;Ln,reorder it to: L0&#x2192;Ln&#x2192;L1&#x2192;Ln-1&#x2192;L2&#x2192;Ln-2&#x2192;&#x2026; You must do this in-place without altering the nodes&#x2019; values. For example,Given {1,2,3,4}, reorder it to {1,4,2,3}. Solution1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071&apos;&apos;&apos;Solution:- Two-pass store all nodes in a stack, create a dummy node, every time while i &lt; len(linked list), linked one node from linked list and one node from stack, and finally deal with odd or even number of lengthFollowup:- One-pass and O(1) - find middle: use fast,slow pointers - reverse second half list: 1-&gt;2-&gt;3-&gt;4-&gt;null =&gt; null&lt;-1&lt;-2&lt;-3&lt;-4, for each node, point the next node of current to previous one, update the previous and next node, do the same thing - merge two lists&apos;&apos;&apos;# Definition for singly-linked list.# class ListNode(object):# def __init__(self, x):# self.val = x# self.next = Noneclass Solution(object): def reorderList(self,head): if not head: return None # find middle fast,slow=head,head while fast and fast.next: fast=fast.next.next slow=slow.next # reverse list pre=None cur=slow while cur: # one line solution pre, cur.next, cur = node, pre, cur.next next=cur.next cur.next=pre pre=cur cur=next # merge list first,second=head,pre while second.next: first.next,first=second,first.next second.next,second=first,second.next return &apos;&apos;&apos; def reorderList(self, head): &quot;&quot;&quot; :type head: ListNode :rtype: void Do not return anything, modify head in-place instead. &quot;&quot;&quot; if not head or not head.next: return stack=[] dummy=ListNode(0) dummy.next=head while dummy.next: stack.append(dummy.next) dummy=dummy.next dummy=ListNode(0) dummy.next=head length=len(stack) half_len=len(stack)/2 for i in range(half_len): node,dummy=dummy.next.next,dummy.next # dummy.next,dummy=stack.pop(),dummy.next # this is wrong. suppose a=0,a,b=3,a =&gt; a=3,b=0 dummy.next=stack.pop() dummy,dummy.next=dummy.next,node if length%2==1: dummy.next.next=None else: dummy.next=None &apos;&apos;&apos; &#x6392;&#x5E8F;&#x94FE;&#x8868;&#x53BB;&#x91CD;(82.83. Remove Duplicates from Sorted List I&amp;II)Problem(I)Given a sorted linked list, delete all duplicates such that each element appear only once.For example,Given 1-&gt;1-&gt;2, return 1-&gt;2.Given 1-&gt;1-&gt;2-&gt;3-&gt;3, return 1-&gt;2-&gt;3. Solution12345678910111213class Solution(object): def deleteDuplicates(self, head): &quot;&quot;&quot; :type head: ListNode :rtype: ListNode &quot;&quot;&quot; dummy = head while head and head.next: if head.val == head.next.val: head.next = head.next.next else: head = head.next return dummy &#x6CE8;&#x610F;&#x7528;&#x5230; head.next &#x4E00;&#x5B9A;&#x8981;&#x5224;&#x65AD;&#x524D;&#x4E00;&#x4E2A;&#x8282;&#x70B9; head &#x662F;&#x5426;&#x4E3A;&#x7A7A;&#xFF0C;&#x540C;&#x7406;&#xFF0C;head.next.next &#x5224;&#x65AD; head.next &#x662F;&#x5426;&#x4E3A;&#x7A7A;&#x3002; Problem(II)Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.For example,Given 1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5, return 1-&gt;2-&gt;5.Given 1-&gt;1-&gt;1-&gt;2-&gt;3, return 2-&gt;3. Solution12345678910111213141516171819class Solution(object): def deleteDuplicates(self, head): &quot;&quot;&quot; :type head: ListNode :rtype: ListNode &quot;&quot;&quot; dummy = ListNode(0) cur = dummy while head: while head.next and head.val == head.next.val: head = head.next if not head.next or head.val != head.next.val: break else: cur.next = head cur = head head = head.next cur.next = None return dummy.next &#x8003;&#x8651;&#x7684; bad case: [1,1],[1,1,1]&#xFF0C;&#x6240;&#x4EE5;&#x6700;&#x540E;&#x7684; cur.next = None &#x4E0D;&#x80FD;&#x5C11;&#xFF0C;&#x5426;&#x5219;&#x8FD8;&#x4F1A;&#x8FD4;&#x56DE; [1] &#x94FE;&#x8868;&#x7684;&#x5408;&#x5E76;(21. Merge Two Sorted Lists)&#x5FEB;&#x901F;&#x6392;&#x5E8F;&#x5BF9;&#x94FE;&#x8868;&#x7ED3;&#x6784;&#x9002;&#x7528;&#xFF0C;&#x7136;&#x800C;&#x4E0D;&#x662F;&#x6240;&#x6709;&#x6392;&#x5E8F;&#x90FD;&#x9002;&#x5408;&#x4F7F;&#x7528;&#x94FE;&#x8868;&#x5B58;&#x50A8;&#xFF0C;&#x5982;&#x5806;&#x6392;&#x5E8F;&#xFF0C;&#x4E0D;&#x65AD;&#x5BFB;&#x627E;&#x6570;&#x7EC4;&#x7684; n/2 &#x548C; n &#x4F4D;&#x7F6E;&#xFF0C;&#x7528;&#x94FE;&#x8868;&#x4E0D;&#x5927;&#x65B9;&#x4FBF;&#x3002; ProblemMerge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists. SolutionRecursive&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6; O(N),&#x7A7A;&#x95F4;&#x590D;&#x6742;&#x5EA6; O(1)123456789101112131415161718class Solution(object): def mergeTwoLists(self, l1, l2): &quot;&quot;&quot; :type l1: ListNode :type l2: ListNode :rtype: ListNode &quot;&quot;&quot; if l2 is None: return l1 if l1 is None: return l2 if l1.val &lt; l2.val: head = l1 head.next = self.mergeTwoLists(l1.next,l2) else: head = l2 head.next = self.mergeTwoLists(l1,l2.next) return head &#x94FE;&#x8868;&#x7684;&#x5212;&#x5206;&#xFF08;89.Partition List&#xFF09;ProblemGiven a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.You should preserve the original relative order of the nodes in each of the two partitions.For example,Given 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;2 and x = 3,return 1-&gt;2-&gt;2-&gt;4-&gt;3-&gt;5. Solution&#x7528;&#x4E24;&#x4E2A;&#x6307;&#x9488; left,right&#xFF0C;&#x5C0F;&#x4E8E; x &#x7684;&#x7528; left&#xFF0C;&#x5927;&#x4E8E; x &#x7684;&#x7528; right&#xFF0C;&#x6700;&#x540E;&#x8FDE;&#x63A5; left,right123456789101112131415161718192021222324252627# Definition for singly-linked list.# class ListNode(object):# def __init__(self, x):# self.val = x# self.next = None&apos;&apos;&apos;Solution:- create two lists less and greater, for each node in linkedlist, if it is less than x, add to less, else, add to greater, finally merge two lists. Time complexity: O(n), space complexity: O(1)&apos;&apos;&apos;class Solution(object): def partition(self,head,x): if not head: return None less,greater=ListNode(0),ListNode(0) less_cur,greater_cur=less,greater while head: if head.val&lt;x: less_cur.next=head less_cur=less_cur.next else: greater_cur.next=head greater_cur=greater_cur.next head=head.next less_cur.next=greater.next greater_cur.next=None return less.next &#x8FD9;&#x91CC;&#x8981;&#x6CE8;&#x610F;&#x7684;&#x662F;&#x6700;&#x540E; right &#x8981;&#x6307;&#x5411;&#x7A7A;&#xFF0C;&#x4E0D;&#x7136;&#x8003;&#x8651; case [2,1]&#xFF0C;&#x4F1A;&#x9677;&#x5165;[1,2,1,2&#x2026;]&#x7684;&#x6B7B;&#x5FAA;&#x73AF;&#x4E2D;&#xFF0C;&#x56E0;&#x4E3A; right_cur.next &#x6307;&#x5411;&#x4E86; head&#xFF0C;&#x5F62;&#x6210;&#x4E86;&#x73AF;&#x3002; &#x94FE;&#x8868;&#x7684;&#x73AF; (141.142.Linked List Cycle I &amp; II)Problem(I)Given a linked list, determine if it has a cycle in it. Follow up:Can you solve it without using extra space? Solution12345678910111213141516171819202122232425262728293031323334353637383940414243444546# Definition for singly-linked list.# class ListNode(object):# def __init__(self, x):# self.val = x# self.next = None&apos;&apos;&apos;Solution:- For every node in linkedlist, check if it is in hashset, if not, add it, else, return True. Time complexity: O(n)Followup:- no extra space slow and fast pointers&apos;&apos;&apos;class Solution(object): def hasCycle(self, head): &quot;&quot;&quot; :type head: ListNode :rtype: bool &quot;&quot;&quot; if not head: return False fast,slow=head,head while fast and fast.next: fast=fast.next.next slow=slow.next if fast==slow: return True return False &apos;&apos;&apos; def hasCycle(self, head): &quot;&quot;&quot; :type head: ListNode :rtype: bool &quot;&quot;&quot; if not head: return False nodelist=set() while head.next: if head in nodelist: return True nodelist.add(head) head=head.next return False &apos;&apos;&apos; Problem(II)Given a linked list, return the node where the cycle begins. If there is no cycle, return null. Note: Do not modify the linked list. Follow up:Can you solve it without using extra space? Solution1234567891011121314151617181920212223242526272829303132333435363738&apos;&apos;&apos;Solution:- check if there&apos;s cycle- Let&apos;s say, the cycle starts at node u, and the length of the cycle is L, Moreover, after x steps, fast catches slow, and the length between current node and u is p. then we can get for slow pointer, x=u+aL+p, for fast pointer, 2x=u+bL+p, =&gt; 2x-x=(b-a)L =&gt; x=nL. Now, think about that, at step x, if we travels u more steps, where are we? =&gt; u+x=u+nL. =&gt; We are at the start of the cycle, because we have covered the first u nodes once and the entire cycle n times.Followup:- find the length of cycle let slow move foward till meet with fast again&apos;&apos;&apos;# Definition for singly-linked list.# class ListNode(object):# def __init__(self, x):# self.val = x# self.next = Noneclass Solution(object): def detectCycle(self, head): &quot;&quot;&quot; :type head: ListNode :rtype: ListNode &quot;&quot;&quot; if not head: return None fast,slow=head,head while True: if not fast or not fast.next:return None fast=fast.next.next slow=slow.next if fast==slow: break while head != fast: head,fast=head.next,fast.next return head &#x5355;&#x94FE;&#x516C;&#x5171;&#x8282;&#x70B9;&#x95EE;&#x9898;ProblemWrite a program to find the node at which the intersection of two singly linked lists begins. &#x5047;&#x8BBE;&#x4E24;&#x4E2A;&#x94FE;&#x8868;&#x957F;&#x5EA6;&#x4E3A; m&#xFF0C;n&#xFF0C;&#x8BA4;&#x4E3A; m &gt; n&#xFF0C;&#x4E24;&#x94FE;&#x8868;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x516C;&#x5171;&#x8282;&#x70B9;&#x5230;&#x5C3E;&#x8282;&#x70B9;&#x4E00;&#x5B9A;&#x662F;&#x91CD;&#x5408;&#x7684;&#x3002;&#x4E8E;&#x662F;&#xFF0C;&#x53EF;&#x4EE5;&#x5206;&#x522B;&#x904D;&#x5386;&#x4E24;&#x4E2A;&#x94FE;&#x8868;&#x5F97;&#x5230;&#x94FE;&#x8868;&#x957F;&#x5EA6; m,n, &#x957F;&#x94FE;&#x8868;&#x7A7A;&#x8F6C; m-n &#x6B21;&#xFF0C;&#x7136;&#x540E;&#x4E24;&#x94FE;&#x8868;&#x9F50;&#x5934;&#x5E76;&#x8FDB;&#xFF0C;&#x540C;&#x6B65;&#x904D;&#x5386;&#xFF0C;&#x76F4;&#x5230;&#x627E;&#x5230;&#x516C;&#x5171;&#x8282;&#x70B9;&#x3002;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E3A; $O(m+n)$ &#x5982;&#x679C;&#x94FE;&#x8868;&#x5B58;&#x5728;&#x73AF;&#xFF0C;&#x5219;&#x9700;&#x8981;&#x7528;&#x5FEB;&#x6162;&#x6307;&#x9488;&#x7684;&#x65B9;&#x5F0F;&#x8BA1;&#x7B97;&#x516C;&#x5171;&#x8282;&#x70B9;&#x3002;&#x4E24;&#x4E2A;&#x6307;&#x9488;&#xFF0C;&#x6BCF;&#x6B21;&#x5206;&#x522B;&#x79FB;&#x52A8; 1 &#x4E2A;&#xFF0F;2 &#x4E2A;&#x8282;&#x70B9;&#x3002; Solution12345678910111213141516171819202122232425262728293031# Definition for singly-linked list.# class ListNode(object):# def __init__(self, x):# self.val = x# self.next = Noneclass Solution(object): def getIntersectionNode(self, headA, headB): &quot;&quot;&quot; :type head1, head1: ListNode :rtype: ListNode &quot;&quot;&quot; curA,curB = headA,headB lenA,lenB=0,0 while curA: lenA += 1 curA = curA.next while curB: lenB += 1 curB = curB.next curA,curB = headA,headB if lenA &gt; lenB: for i in range(lenA-lenB): curA = curA.next else: for i in range(lenB-lenA): curB = curB.next while curA != curB: curA = curA.next curB = curB.next return curA &#x4E00;&#x4E2A;&#x4ECE;&#x4EE3;&#x7801;&#x5C42;&#x9762;&#x6765;&#x8BB2;&#x7684;&#x7B80;&#x6D01;&#x7248;&#x672C;&#x3002;12345678910111213141516171819202122class Solution: # @param two ListNodes # @return the intersected ListNode def getIntersectionNode(self, headA, headB): if headA is None or headB is None: return None pa = headA # 2 pointers pb = headB while pa is not pb: # if either pointer hits the end, switch head and continue the second traversal, # if not hit the end, just move on to next pa = headB if pa is None else pa.next pb = headA if pb is None else pb.next return pa # only 2 ways to get out of the loop, they meet or the both hit the end=None# the idea is if you switch head, the possible difference between length would be countered.# On the second traversal, they either hit or miss.# if they meet, pa or pb would be the node we are looking for,# if they didn&apos;t meet, they will hit the end at the same iteration, pa == pb == None, return either one of them is the same,None &#x94FE;&#x8868;&#x590D;&#x5236;(138. Copy List with Random Pointer)ProblemA linked list is given such that each node contains an additional random pointer which could point to any node in the list or null. Return a deep copy of the list. Solution123456789101112131415161718192021222324252627282930313233343536373839404142434445&apos;&apos;&apos;Solution:- two-pass: consider normal copy of linkedlist, do similar stuff. first copy nodes and next pointer, then copy random pointer how to find new nodes in second pass? find with O(1) time =&gt; hashmap- one-pass: first copy all nodes and store them into hashmap, then connect all nodes. time complexity: O(n), space complexity: O(n)Followup:- without hashmap?&apos;&apos;&apos;# Definition for singly-linked list with a random pointer.# class RandomListNode(object):# def __init__(self, x):# self.label = x# self.next = None# self.random = Noneclass Solution(object): # copy nodes and next pointer def copyRandomList(self, head): &quot;&quot;&quot; :type head: RandomListNode :rtype: RandomListNode &quot;&quot;&quot; if not head: return None cur=head hashmap={} while cur: # create nodes if cur not in hashmap: curCopy=RandomListNode(cur.label) hashmap[cur]=curCopy if cur.next and cur.next not in hashmap: nextCopy=RandomListNode(cur.next.label) hashmap[cur.next]=nextCopy if cur.random and cur.random not in hashmap: randomCopy=RandomListNode(cur.random.label) hashmap[cur.random]=randomCopy # connect nodes if cur.next: hashmap[cur].next=hashmap[cur.next] if cur.random: hashmap[cur].random=hashmap[cur.random] # next round cur=cur.next return hashmap[head] &#x53C2;&#x8003;&#x94FE;&#x63A5;&#xFF1A;&#x7F16;&#x7A0B;&#x8D77;&#x8DD1;&#x7EBF; &#x7B2C; 5 &#x8BFE; &#x94FE;&#x8868;Implementing a Singly Linked List in Python","tags":"链表"},{"title":"实习总结之 sentence embedding","url":"/2016/08/05/实习总结之 sentence embedding/","text":"5-7&#x6708;&#x7684;&#x5B9E;&#x4E60;&#xFF0C;&#x603B;&#x7684;&#x6765;&#x8BF4;&#x4E3B;&#x8981;&#x505A;&#x4E86;&#x4E09;&#x4EF6;&#x4E8B;&#x60C5;&#xFF0C;&#x4E00;&#x662F;&#x8BED;&#x6599;&#x7684;&#x8865;&#x5145;&#xFF0C;&#x5177;&#x4F53;&#x8868;&#x73B0;&#x662F;&#x901A;&#x8FC7;&#x7F16;&#x5199;&#x5206;&#x5E03;&#x5F0F;&#x722C;&#x866B;&#x4ECE;&#x5404;&#x79CD;&#x6E20;&#x9053;&#x722C;&#x53D6;&#x76F8;&#x5173;&#x8BED;&#x6599;&#xFF0C;&#x4E8C;&#x662F;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#xFF0C;&#x8FD9;&#x4E00;&#x9636;&#x6BB5;&#x6D4B;&#x8BD5;&#x4E86;&#x5404;&#x79CD;&#x6A21;&#x578B;&#xFF0C;doc2vec, lda, LSI, RNN, CNN &#x7B49;&#x7B49;&#xFF0C;&#x8BD5;&#x56FE;&#x5728; word2vec &#x8BCD;&#x5411;&#x91CF;&#x57FA;&#x7840;&#x4E0A;&#xFF0C;&#x4EA7;&#x751F;&#x8D28;&#x91CF;&#x66F4;&#x9AD8;&#x7684; sentence embedding,&#x8FD9;&#x4E5F;&#x662F;&#x672C;&#x7BC7;&#x7684;&#x91CD;&#x70B9;&#x6240;&#x5728;&#x3002;&#x4E09;&#x662F;&#x65B0;&#x95EE;&#x9898;&#x53D1;&#x73B0;&#xFF0C;&#x4E3B;&#x8981;&#x662F;&#x901A;&#x8FC7;&#x805A;&#x7C7B;&#x7B97;&#x6CD5;&#x7684;&#x5B9E;&#x9A8C;&#x5B9E;&#x73B0;&#x3002;&#x96BE;&#x70B9;&#x5728;&#x4E8E;&#x7528;&#x4EC0;&#x4E48;&#x8BED;&#x6599;&#x805A;&#x7C7B;&#x4EE5;&#x53CA;&#x5982;&#x4F55;&#x4EA7;&#x751F;&#x81EA;&#x52A8;&#x5316;&#x6807;&#x7B7E;&#x3002;&#x5176;&#x4ED6;&#x7684;&#x5DE5;&#x4F5C;&#x4E5F;&#x5C31;&#x662F;&#x6253;&#x6253;&#x6742;&#xFF0C;&#x5904;&#x7406;&#x3001;&#x8FC7;&#x6EE4;&#x3001;&#x9A8C;&#x8BC1;&#x5404;&#x79CD;&#x6570;&#x636E;&#xFF0C;&#x4EA7;&#x751F;&#x8BAD;&#x7EC3;&#x96C6;&#x3001;&#x6D4B;&#x8BD5;&#x96C6;&#xFF0C;&#x4EE5;&#x53CA;&#x505A;&#x5404;&#x79CD; demo &#x754C;&#x9762;&#xFF0C;&#x6BD4;&#x8F83;&#x7B80;&#x5355;&#x3002; &#x6700;&#x7EC8;&#x8FD8;&#x662F;&#x53D1;&#x73B0; doc2vec, lda &#x4EA7;&#x751F;&#x7684; sentence embedding &#x8D28;&#x91CF;&#x592A;&#x4F4E;&#xFF0C;&#x5728;&#x5145;&#x8DB3;&#x5E76;&#x76F8;&#x5173;&#x7684;&#x8BED;&#x6599;&#x4E0B;&#xFF0C;&#x7528; word2vec &#x5F97;&#x5230;&#x7684;&#x8BCD;&#x5411;&#x91CF;&#x6548;&#x679C;&#x8FD8;&#x662F;&#x5F88;&#x4E0D;&#x9519;&#x7684;&#xFF0C;sentence embedding &#x6700;&#x7EC8;&#x7684;&#x4EA7;&#x751F;&#x8FD8;&#x662F;&#x901A;&#x8FC7; RNN&#x3002;&#x8FD9;&#x7BC7;&#x91CD;&#x70B9;&#x662F; CNN&#xFF0C;&#x56E0;&#x4E3A;&#x8FD9;&#x662F;&#x6211;&#x81EA;&#x5DF1;&#x8D1F;&#x8D23;&#x7684;&#xFF0C;&#x4E4B;&#x540E;&#x4F1A;&#x4E0A;&#x4E00;&#x7BC7; RNN &#x7684;&#x7248;&#x672C;&#x3002; CNN&#x6765;&#x6E90;&#xFF1A;Kim Y. Convolutional neural networks for sentence classification[J]. arXiv preprint arXiv:1408.5882, 2014.(http://www.aclweb.org/anthology/D14-1181) &#x8FBE;&#x5230;&#x4E86; 94.5% &#x7684;&#x51C6;&#x786E;&#x7387;&#xFF0C;&#x5E76;&#x4E0D;&#x5982; RNN&#xFF0C;&#x56E0;&#x4E3A; CNN &#x6A21;&#x578B;&#x7684; focus &#x901A;&#x5E38;&#x662F;&#x957F;&#x6587;&#x672C;&#x800C;&#x4E0D;&#x662F;&#x77ED;&#x53E5;&#xFF0C;&#x8FD9;&#x91CC;&#x7684;&#x60C5;&#x666F;&#x662F;&#x77ED;&#x53E5; FAQ&#xFF0C;&#x8FD9;&#x4E5F;&#x662F;&#x6548;&#x679C;&#x4E0D;&#x5982; RNN &#x7684;&#x4E00;&#x4E2A;&#x539F;&#x56E0;&#x3002; Why CNN&#x53E5;&#x5B50;&#x53EF;&#x4EE5;&#x5207;&#x5206;&#x4E3A;&#x5F88;&#x591A;&#x8BCD;&#xFF0C;&#x8BCD;&#x548C;&#x8BCD;&#x7EC4;&#x5408;&#x4E4B;&#x540E;&#x4F1A;&#x4EA7;&#x751F;&#x5C40;&#x90E8;&#x8BED;&#x610F;&#xFF0C;&#x53E5;&#x5B50;&#x53EF;&#x4EE5;&#x5206;&#x6210;&#x82E5;&#x5E72;&#x4E2A;&#x6709;&#x300E;&#x5C40;&#x90E8;&#x8BED;&#x610F;&#x300F;&#x7684;&#x5C0F;&#x5757;&#x3002;nlp &#x91CC;&#x9762;&#x4E00;&#x4E2A;&#x5F88;&#x91CD;&#x8981;&#x7684;&#x77DB;&#x76FE;&#x5C31;&#x662F;&#x7C92;&#x5EA6;&#x548C;&#x8BED;&#x610F;&#x7684;&#x77DB;&#x76FE;&#x3002;&#x5982;&#x679C;&#x7C92;&#x5EA6;&#x8FC7;&#x5927;&#xFF0C;&#x5219;&#x592A;&#x7A00;&#x758F;&#x6CA1;&#x6CD5;&#x73A9;&#xFF0C;&#x7C92;&#x5EA6;&#x8FC7;&#x5C0F;&#x5219;&#x610F;&#x601D;&#x5C31;&#x4E0D;&#x5BF9;&#x4E86;&#x3002;&#x5377;&#x79EF;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x901A;&#x8FC7;&#x5377;&#x79EF;&#xFF0C;&#x628A;&#x6BCF; k &#x4E2A;&#x8BCD;&#x7EC4;&#x5408;&#x4E4B;&#x540E;&#x7684;&#x8BED;&#x610F;&#x653E;&#x5728;&#x4E00;&#x8D77;&#xFF0C;&#x53EF;&#x4EE5;&#x5F97;&#x5230;&#x66F4;&#x4E3A;&#x51C6;&#x786E;&#x7684;&#x53E5;&#x5411;&#x91CF;&#x3002; &#x5B9E;&#x73B0;&#x6570;&#x636E;&#x683C;&#x5F0F;&#x8BBA;&#x6587;&#x63D0;&#x51FA;&#x7684;&#x8F93;&#x5165;&#x7C7B;&#x578B;&#x6709;&#x4EE5;&#x4E0B;&#x56DB;&#x79CD;&#xFF1A; CNN-rand: &#x6240;&#x6709;&#x7684; word vector &#x90FD;&#x662F;&#x968F;&#x673A;&#x521D;&#x59CB;&#x5316;&#x7684;&#xFF0C;&#x540C;&#x65F6;&#x5F53;&#x505A;&#x8BAD;&#x7EC3;&#x8FC7;&#x7A0B;&#x4E2D;&#x4F18;&#x5316;&#x7684;&#x53C2;&#x6570;&#xFF1B; CNN-static: &#x6240;&#x6709;&#x7684; word vector &#x76F4;&#x63A5;&#x4F7F;&#x7528; Word2Vector &#x5DE5;&#x5177;&#x5F97;&#x5230;&#x7684;&#x7ED3;&#x679C;&#xFF0C;&#xFF0C;&#x5E76;&#x4E14;&#x662F;&#x56FA;&#x5B9A;&#x4E0D;&#x53D8;&#x7684;&#xFF1B; CNN-non-static: &#x6240;&#x6709;&#x7684; word vector &#x76F4;&#x63A5;&#x4F7F;&#x7528; Word2Vector &#x5DE5;&#x5177;&#x5F97;&#x5230;&#x7684;&#x7ED3;&#x679C;&#xFF0C;&#x8FD9;&#x4E9B;word vector &#x4E5F;&#x5F53;&#x505A;&#x662F;&#x53EF;&#x4F18;&#x5316;&#x7684;&#x53C2;&#x6570;&#xFF0C;&#x5728;&#x8BAD;&#x7EC3;&#x8FC7;&#x7A0B;&#x4E2D;&#x88AB;Fine tuned&#xFF1B; CNN-multichannel: CNN-static &#x548C; CNN-non-static &#x7684;&#x6DF7;&#x5408;&#x7248;&#x672C;&#xFF0C;&#x5373;&#x4E24;&#x79CD;&#x7C7B;&#x578B;&#x7684;&#x8F93;&#x5165;&#xFF1B; &#x6211;&#x4EEC;&#x5B9E;&#x9A8C;&#x7528;&#x7684;&#x662F;&#x968F;&#x673A;&#x521D;&#x59CB;&#x5316;&#x65B9;&#x6CD5;&#xFF0C;&#x6570;&#x636E; format&#xFF1A; &#x7528;&#x6237;&#x95EE;&#x9898;\\t&#x6807;&#x51C6;&#x95EE;&#x9898;id &#x6A21;&#x578B;&#x8F93;&#x5165;&#x5C42;&#x8F93;&#x5165;&#x5C42;&#x662F;&#x53E5;&#x5B50;&#x4E2D;&#x7684;&#x8BCD;&#x8BED;&#x5BF9;&#x5E94;&#x7684; word vector &#x4F9D;&#x6B21;&#xFF08;&#x4ECE;&#x4E0A;&#x5230;&#x4E0B;&#xFF09;&#x6392;&#x5217;&#x7684;&#x77E9;&#x9635;&#xFF0C;&#x53E5;&#x5B50;&#x6709; n &#x4E2A;&#x8BCD;&#xFF0C;vector&#x7684;&#x7EF4;&#x6570;&#x4E3A; k &#xFF0C;&#x77E9;&#x9635;&#x5C31;&#x662F; n&#xD7;k&#x3002; &#x7B2C;&#x4E00;&#x5C42;&#x5377;&#x79EF;&#x5C42;&#x8F93;&#x5165;&#x5C42;&#x901A;&#x8FC7;&#x5377;&#x79EF;&#x64CD;&#x4F5C;&#x5F97;&#x5230;&#x82E5;&#x5E72;&#x4E2A; Feature Map&#xFF0C;&#x5377;&#x79EF;&#x7A97;&#x53E3;&#x7684;&#x5927;&#x5C0F;&#x4E3A; h&#xD7;k &#xFF0C;&#x5176;&#x4E2D; h &#x8868;&#x793A;&#x7EB5;&#x5411;&#x8BCD;&#x8BED;&#x7684;&#x4E2A;&#x6570;&#xFF0C;&#x800C; k &#x8868;&#x793A; word vector &#x7684;&#x7EF4;&#x6570;&#x3002;&#x5982;&#x679C; h=2&#xFF0C;&#x5C31;&#x662F;&#x76F8;&#x90BB;&#x7684;&#x4E24;&#x4E2A;word&#x505A;&#x4E00;&#x6B21;&#x5377;&#x79EF;&#x3002;&#x901A;&#x8FC7;&#x8FD9;&#x6837;&#x4E00;&#x4E2A;&#x5927;&#x578B;&#x7684;&#x5377;&#x79EF;&#x7A97;&#x53E3;&#xFF0C;&#x5F97;&#x5230;&#x82E5;&#x5E72;&#x4E2A;&#x5217;&#x6570;&#x4E3A; 1 &#x7684;Feature Map&#x3002; &#x5377;&#x79EF;&#x4E4B;&#x540E;&#x7684;&#x7ED3;&#x679C;&#x7ECF;&#x8FC7;&#x6FC0;&#x6D3B;&#x51FD;&#x6570; f &#x5F97;&#x5230; feature&#xFF0C;&#x8BB0;&#x4E3A;$c_i$&#x3002;&#x5B83;&#x662F;&#x7531;$x_{i:i+h&#x2212;1}$&#x76F8;&#x90BB;&#x7684; h &#x4E2A; words &#x5377;&#x79EF;&#x5F97;&#x5230;&#x7684;&#x503C;&#xFF0C;&#x518D; activation &#x4E4B;&#x540E;&#x7684;&#x503C;&#xFF0C;&#x4E5F;&#x662F;&#x5F53;&#x524D;&#x5C42;&#x7684;&#x8F93;&#x51FA;&#x3002; &#x5377;&#x79EF;&#x4E4B;&#x540E;&#x7684;&#x503C;&#xFF1A;$w&#x22C5;x_{i:i+h&#x2212;1}+b$&#x8F93;&#x51FA;&#x7684; feature &#x503C; $c_i=f(w&#x22C5;x_{i:i+h&#x2212;1}+b)$,&#x8FD9;&#x5C31;&#x662F;&#x6211;&#x4EEC;&#x7684; sentence embedding&#x7A97;&#x53E3;&#x5927;&#x5C0F;&#xFF1A;h&#x8FD9;&#x6837;&#x4E4B;&#x540E;&#xFF0C;&#x4E00;&#x4E2A;n&#x957F;&#x5EA6;&#x7684;sentence&#x5C31;&#x6709;$[x_{1:h}&#xFF0C; x_{2:h+1}&#xFF0C;x_{3:h+2}&#xFF0C;&#x2026;&#xFF0C;x_{n&#x2212;h+1:n}]$&#x8FD9;&#x4E9B;word windows&#xFF0C;&#x5377;&#x79EF;&#x540E;&#x7684;&#x7ED3;&#x679C;&#x5C31;&#x662F; c = $[c1,c2,&#x2026;,c_{n&#x2212;h+1}]$&#xFF0C;&#x7EF4;&#x5EA6;&#x4E3A;(1&#xFF0C;n-h+1)&#x7136;&#x540E;&#x8FDB;&#x884C;&#x6C60;&#x5316;max pooling&#xFF0C;&#x9009;&#x51FA;&#x6700;&#x91CD;&#x8981;&#x7684;feature&#x3002;pooling scheme&#x53EF;&#x4EE5;&#x6839;&#x636E;&#x53E5;&#x5B50;&#x7684;&#x957F;&#x5EA6;&#x6765;&#x9009;&#x62E9;&#x3002; &#x6C60;&#x5316;&#x5C42;&#x63A5;&#x4E0B;&#x6765;&#x7684;&#x6C60;&#x5316;&#x5C42;&#xFF0C;&#x624D;&#x7528; Max-over-time Pooling &#x7684;&#x65B9;&#x6CD5;&#x3002;&#x4ECE;&#x4E4B;&#x524D;&#x4E00;&#x7EF4;&#x7684; Feature Map &#x4E2D;&#x63D0;&#x51FA;&#x6700;&#x5927;&#x7684;&#x503C;&#xFF0C;&#x8BBA;&#x6587;&#x4E2D;&#x89E3;&#x91CA;&#x6700;&#x5927;&#x503C;&#x4EE3;&#x8868;&#x7740;&#x6700;&#x91CD;&#x8981;&#x7684;&#x4FE1;&#x53F7;&#x3002;&#x53EF;&#x4EE5;&#x770B;&#x51FA;&#xFF0C;&#x8FD9;&#x79CD;Pooling&#x65B9;&#x5F0F;&#x53EF;&#x4EE5;&#x89E3;&#x51B3;&#x53EF;&#x53D8;&#x957F;&#x5EA6;&#x7684;&#x53E5;&#x5B50;&#x8F93;&#x5165;&#x95EE;&#x9898;&#xFF08;&#x56E0;&#x4E3A;&#x4E0D;&#x7BA1;Feature Map&#x4E2D;&#x6709;&#x591A;&#x5C11;&#x4E2A;&#x503C;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x63D0;&#x53D6;&#x5176;&#x4E2D;&#x7684;&#x6700;&#x5927;&#x503C;&#xFF09;&#x3002; &#x6700;&#x7EC8;&#x6C60;&#x5316;&#x5C42;&#x7684;&#x8F93;&#x51FA;&#x4E3A;&#x5404;&#x4E2A;Feature Map&#x7684;&#x6700;&#x5927;&#x503C;&#x4EEC;&#xFF0C;&#x5373;&#x4E00;&#x4E2A;&#x4E00;&#x7EF4;&#x7684;&#x5411;&#x91CF;&#x3002; &#x5168;&#x8FDE;&#x63A5; + Softmax&#x5C42;&#x6C60;&#x5316;&#x5C42;&#x7684;&#x4E00;&#x7EF4;&#x5411;&#x91CF;&#x7684;&#x8F93;&#x51FA;&#x901A;&#x8FC7;&#x5168;&#x8FDE;&#x63A5;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;&#x8FDE;&#x63A5;&#x4E00;&#x4E2A;Softmax&#x5C42;&#xFF0C;Softmax&#x5C42;&#x53EF;&#x6839;&#x636E;&#x4EFB;&#x52A1;&#x7684;&#x9700;&#x8981;&#x8BBE;&#x7F6E;&#xFF08;&#x901A;&#x5E38;&#x53CD;&#x6620;&#x7740;&#x6700;&#x7EC8;&#x7C7B;&#x522B;&#x4E0A;&#x7684;&#x6982;&#x7387;&#x5206;&#x5E03;&#xFF09;&#x3002; &#x8C03;&#x53C2;&#x5EFA;&#x8BAE;&#x5BF9; Ye Zhang &#x7B49;&#x4EBA;&#x57FA;&#x4E8E; Kim Y &#x7684;&#x6A21;&#x578B;&#x505A;&#x4E86;&#x5927;&#x91CF;&#x7684;&#x8C03;&#x53C2;&#x5B9E;&#x9A8C;&#x4E4B;&#x540E;&#x7684;&#x7ED3;&#x8BBA;&#xFF1A; &#x7531;&#x4E8E;&#x6A21;&#x578B;&#x8BAD;&#x7EC3;&#x8FC7;&#x7A0B;&#x4E2D;&#x7684;&#x968F;&#x673A;&#x6027;&#x56E0;&#x7D20;&#xFF0C;&#x5982;&#x968F;&#x673A;&#x521D;&#x59CB;&#x5316;&#x7684;&#x6743;&#x91CD;&#x53C2;&#x6570;&#xFF0C;mini-batch&#xFF0C;&#x968F;&#x673A;&#x68AF;&#x5EA6;&#x4E0B;&#x964D;&#x4F18;&#x5316;&#x7B97;&#x6CD5;&#x7B49;&#xFF0C;&#x9020;&#x6210;&#x6A21;&#x578B;&#x5728;&#x6570;&#x636E;&#x96C6;&#x4E0A;&#x7684;&#x7ED3;&#x679C;&#x6709;&#x4E00;&#x5B9A;&#x7684;&#x6D6E;&#x52A8;&#xFF0C;&#x5982;&#x51C6;&#x786E;&#x7387;(accuracy)&#x80FD;&#x8FBE;&#x5230; 1.5% &#x7684;&#x6D6E;&#x52A8;&#xFF0C;&#x800C;AUC &#x5219;&#x6709; 3.4% &#x7684;&#x6D6E;&#x52A8;&#xFF1B; &#x8BCD;&#x5411;&#x91CF;&#x662F;&#x4F7F;&#x7528; word2vec &#x8FD8;&#x662F; GloVe&#xFF0C;&#x5BF9;&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;&#x6709;&#x4E00;&#x5B9A;&#x7684;&#x5F71;&#x54CD;&#xFF0C;&#x5177;&#x4F53;&#x54EA;&#x4E2A;&#x66F4;&#x597D;&#x4F9D;&#x8D56;&#x4E8E;&#x4EFB;&#x52A1;&#x672C;&#x8EAB;&#xFF1B; Filter&#x7684;&#x5927;&#x5C0F;&#x5BF9;&#x6A21;&#x578B;&#x6027;&#x80FD;&#x6709;&#x8F83;&#x5927;&#x7684;&#x5F71;&#x54CD;&#xFF0C;&#x5E76;&#x4E14;Filter&#x7684;&#x53C2;&#x6570;&#x5E94;&#x8BE5;&#x662F;&#x53EF;&#x4EE5;&#x66F4;&#x65B0;&#x7684;&#xFF1B; Feature Map&#x7684;&#x6570;&#x91CF;&#x4E5F;&#x6709;&#x4E00;&#x5B9A;&#x5F71;&#x54CD;&#xFF0C;&#x4F46;&#x662F;&#x9700;&#x8981;&#x517C;&#x987E;&#x6A21;&#x578B;&#x7684;&#x8BAD;&#x7EC3;&#x6548;&#x7387;&#xFF1B; 1-max pooling&#x7684;&#x65B9;&#x5F0F;&#x5DF2;&#x7ECF;&#x8DB3;&#x591F;&#x597D;&#x4E86;&#xFF0C;&#x76F8;&#x6BD4;&#x4E8E;&#x5176;&#x4ED6;&#x7684;pooling&#x65B9;&#x5F0F;&#x800C;&#x8A00;&#xFF1B; &#x6B63;&#x5219;&#x5316;&#x7684;&#x4F5C;&#x7528;&#x5FAE;&#x4E4E;&#x5176;&#x5FAE;&#x3002; &#x8C03;&#x53C2;&#x5EFA;&#x8BAE;&#x5982;&#x4E0B;&#xFF1A; &#x4F7F;&#x7528;non-static&#x7248;&#x672C;&#x7684; word2vec &#x6216;&#x8005; GloVe &#x8981;&#x6BD4;&#x5355;&#x7EAF;&#x7684; one-hot representation &#x53D6;&#x5F97;&#x7684;&#x6548;&#x679C;&#x597D;&#x5F97;&#x591A;&#xFF1B; &#x4E3A;&#x4E86;&#x627E;&#x5230;&#x6700;&#x4F18;&#x7684;&#x8FC7;&#x6EE4;&#x5668;(Filter)&#x5927;&#x5C0F;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x7EBF;&#x6027;&#x641C;&#x7D22;&#x7684;&#x65B9;&#x6CD5;&#x3002;&#x901A;&#x5E38;&#x8FC7;&#x6EE4;&#x5668;&#x7684;&#x5927;&#x5C0F;&#x8303;&#x56F4;&#x5728;1-10&#x4E4B;&#x95F4;&#xFF0C;&#x5F53;&#x7136;&#x5BF9;&#x4E8E;&#x957F;&#x53E5;&#xFF0C;&#x4F7F;&#x7528;&#x66F4;&#x5927;&#x7684;&#x8FC7;&#x6EE4;&#x5668;&#x4E5F;&#x662F;&#x6709;&#x5FC5;&#x8981;&#x7684;&#xFF1B; Feature Map&#x7684;&#x6570;&#x91CF;&#x5728;100-600&#x4E4B;&#x95F4;&#xFF1B; &#x53EF;&#x4EE5;&#x5C3D;&#x91CF;&#x591A;&#x5C1D;&#x8BD5;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#xFF0C;&#x5B9E;&#x9A8C;&#x53D1;&#x73B0; ReLU &#x548C; tanh &#x4E24;&#x79CD;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x8868;&#x73B0;&#x8F83;&#x4F73;&#xFF1B; &#x4F7F;&#x7528;&#x7B80;&#x5355;&#x7684; 1-max pooling &#x5C31;&#x5DF2;&#x7ECF;&#x8DB3;&#x591F;&#x4E86;&#xFF0C;&#x53EF;&#x4EE5;&#x6CA1;&#x5FC5;&#x8981;&#x8BBE;&#x7F6E;&#x592A;&#x590D;&#x6742;&#x7684; pooling &#x65B9;&#x5F0F;&#xFF1B; &#x5F53;&#x53D1;&#x73B0;&#x589E;&#x52A0; Feature Map &#x7684;&#x6570;&#x91CF;&#x4F7F;&#x5F97;&#x6A21;&#x578B;&#x7684;&#x6027;&#x80FD;&#x4E0B;&#x964D;&#x65F6;&#xFF0C;&#x53EF;&#x4EE5;&#x8003;&#x8651;&#x589E;&#x5927;&#x6B63;&#x5219;&#x7684;&#x529B;&#x5EA6;&#xFF0C;&#x5982;&#x8C03;&#x9AD8;dropout&#x7684;&#x6982;&#x7387;&#xFF1B; &#x4E3A;&#x4E86;&#x68C0;&#x9A8C;&#x6A21;&#x578B;&#x7684;&#x6027;&#x80FD;&#x6C34;&#x5E73;&#xFF0C;&#x591A;&#x6B21;&#x53CD;&#x590D;&#x7684;&#x4EA4;&#x53C9;&#x9A8C;&#x8BC1;&#x662F;&#x5FC5;&#x8981;&#x7684;&#xFF0C;&#x8FD9;&#x53EF;&#x4EE5;&#x786E;&#x4FDD;&#x6A21;&#x578B;&#x7684;&#x9AD8;&#x6027;&#x80FD;&#x5E76;&#x4E0D;&#x662F;&#x5076;&#x7136;&#x3002; &#x9700;&#x8981;&#x786E;&#x5B9A;&#x7684;&#x53C2;&#x6570;&#xFF1A; input word vector representations; filter region size(s); the number of feature maps; the activation function(s); the pooling strategy; regularization terms (dropout/l2). &#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x76EE;&#x6807;&#x51FD;&#x6570;&#x635F;&#x5931;&#x51FD;&#x6570;&#x9057;&#x7559;&#x95EE;&#x9898;&#x8FD8;&#x60F3;&#x7740;&#x80FD;&#x4E0D;&#x80FD;&#x7528;&#x5B57;&#x5411;&#x91CF;&#x53D6;&#x4EE3;&#x8BCD;&#x5411;&#x91CF;&#xFF0C;&#x4E00;&#x53EF;&#x4EE5;&#x907F;&#x514D;&#x5206;&#x8BCD;&#x7684;&#x9EBB;&#x70E6;&#xFF0C;&#x4E8C;&#x53EF;&#x4EE5;&#x89E3;&#x51B3;&#x672A;&#x767B;&#x5F55;&#x8BCD;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x8FD9;&#x6837;&#x5728;&#x6D4B;&#x8BD5;&#x7684;&#x65F6;&#x5019;&#x5C31;&#x5F88;&#x5C11;&#x4F1A;&#x9047;&#x5230;Unknown&#x7684;&#x5B57;&#x5411;&#x91CF;&#x7684;&#x95EE;&#x9898;&#x3002;&#x53E6;&#x5916;&#x7531;&#x4E8E;&#x5377;&#x79EF;&#x7684;&#x4F5C;&#x7528;&#xFF0C;&#x5B57;&#x5411;&#x91CF;&#x6548;&#x679C;&#x5E76;&#x4E0D;&#x4E00;&#x5B9A;&#x6BD4;&#x8BCD;&#x5411;&#x91CF;&#x5DEE;&#x3002;&#x4E4B;&#x540E;&#x6709;&#x65F6;&#x95F4;&#x505A;&#x5B9E;&#x9A8C;&#x540E;&#x4F1A;&#x66F4;&#x65B0;&#x3002; &#x5176;&#x4ED6;&#x5B9E;&#x9A8C;LDALDA &#x6700;&#x5927;&#x7684;&#x7279;&#x70B9;&#x662F;&#x9700;&#x8981;&#x5927;&#x91CF;&#x7684;&#x8BED;&#x6599;&#xFF0C;&#x5426;&#x5219;&#x6570;&#x636E;&#x7EF4;&#x5EA6;&#x8FDC;&#x5927;&#x4E8E;&#x6837;&#x672C;&#x6570;&#xFF0C;&#x6548;&#x679C;&#x4F1A;&#x5F88;&#x5DEE;&#x3002; Doc2vec&#x80FD;&#x4EA7;&#x751F;&#x5F88;&#x597D;&#x7684;&#x8BCD;&#x5411;&#x91CF;&#xFF0C;&#x5374;&#x4E0D;&#x80FD;&#x4EA7;&#x751F;&#x5F88;&#x597D;&#x7684;&#x53E5;&#x5411;&#x91CF;&#x3002;&#x63A8;&#x6D4B;&#x539F;&#x56E0;&#x662F;&#x53E5;&#x5B50;&#x592A;&#x77ED;&#x3002; &#x5377;&#x79EF;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;(CNN)&#x5728;&#x53E5;&#x5B50;&#x5EFA;&#x6A21;&#x4E0A;&#x7684;&#x5E94;&#x7528;","tags":"crawler"},{"title":"项目实战--云计算Twitter Analytics Web Service","url":"/2016/07/28/项目实战--云计算Twitter Analytics Web Service/","text":"CMU 15619 Cloud Computing &#x7684; team project&#xFF0C;&#x62D6;&#x4E86;&#x5F88;&#x4E45;&#xFF0C;&#x6700;&#x7EC8;&#x8FD8;&#x662F;&#x9F13;&#x8D77;&#x52C7;&#x6C14;&#x6574;&#x7406;&#x4E86;&#x3002;&#x65F6;&#x9694;&#x4E09;&#x4E2A;&#x591A;&#x6708;&#xFF0C;&#x56DE;&#x5934;&#x6765;&#x770B;&#xFF0C;&#x627E;&#x5230;&#x4E86;&#x66F4;&#x591A;&#x53EF;&#x4EE5;&#x4F18;&#x5316;&#x7684;&#x70B9;&#x3002; &#x9879;&#x76EE;&#x4ECB;&#x7ECD;&#x7B80;&#x4ECB;&#x642D;&#x5EFA;&#x6027;&#x80FD;&#x9AD8;&#x3001;&#x53EF;&#x9760;&#x6027;&#x597D;&#x7684; web &#x670D;&#x52A1;&#xFF0C;&#x524D;&#x7AEF;&#x8D1F;&#x8D23;&#x5904;&#x7406;&#x8BF7;&#x6C42;&#xFF0C;&#x5904;&#x7406;&#x8F83;&#x9AD8;&#x8D1F;&#x8F7D;&#xFF08;&#x5927;&#x7EA6;&#x6BCF;&#x79D2;&#x81F3;&#x5C11;30000&#x6B21;&#x8BF7;&#x6C42;&#xFF09; &#x6570;&#x636E;&#x9884;&#x5904;&#x7406;&#xFF1A;&#x5BF9;&#x5927;&#x6570;&#x636E;&#x96C6;&#xFF08;&#x7EA6;1TB&#xFF09;&#x8FDB;&#x884C;&#x9884;&#x5904;&#x7406;&#xFF0C;&#x5305;&#x62EC;&#x8FC7;&#x6EE4;&#x810F;&#x6570;&#x636E;&#x3001;&#x654F;&#x611F;&#x8BCD;&#x3001;&#x5904;&#x7406;&#x505C;&#x987F;&#x8BCD;&#x3001;&#x8BA1;&#x7B97;&#x60C5;&#x611F;&#x5206;&#x6790;&#x6743;&#x91CD;&#x503C;&#x7B49;&#xFF0C;&#x5728; hadoop &#x5E73;&#x53F0;&#x4E0A;&#x5B9E;&#x73B0;ETL&#xFF1B; &#x540E;&#x7AEF;&#xFF1A;&#x4FDD;&#x5B58;&#x6E05;&#x7406;&#x540E;&#x7684; twitter &#x6570;&#x636E;&#xFF0C;&#x8BC4;&#x4F30; SQL (MySQL) &#x548C; NoSQL (HBase) &#x5728;&#x4E0D;&#x540C;&#x7C7B;&#x578B;&#x7684;&#x6570;&#x636E;&#x3001;&#x4E0D;&#x540C;&#x5927;&#x5C0F;&#x7684;&#x6570;&#x636E;&#x96C6;&#x4E0B;&#x7684; performance&#x3002; &#x524D;&#x7AEF;&#xFF1A;&#x63A5;&#x6536;&#x5E76;&#x54CD;&#x5E94;&#x4E0D;&#x540C;&#x7C7B;&#x578B;&#x7684; HTTP GET &#x8BF7;&#x6C42; &#x8981;&#x6C42;&#xFF1A;&#x7ED9;&#x5B9A;&#x9884;&#x7B97;&#xFF0C;&#x6700;&#x4F18;&#x5316;&#x6027;&#x80FD;&#x3002; &#x56DB;&#x79CD; query &#x7C7B;&#x578B;Query1&#x8981;&#x6C42;&#xFF1A; &#x5BF9;&#x52A0;&#x5BC6;&#x4FE1;&#x606F;&#x8FDB;&#x884C;&#x7834;&#x8BD1;&#xFF0C;&#x8FD4;&#x56DE;&#x6B63;&#x786E;&#x4FE1;&#x606F;&#x3002;&#x96BE;&#x5EA6;&#x7CFB;&#x6570;&#xFF1A; &#x4F4E;&#x3002;&#x8FD9;&#x4E00;&#x9636;&#x6BB5;&#x4E3B;&#x8981;&#x662F;&#x7528;&#x6765;&#x719F;&#x6089;&#x5404;&#x79CD; web &#x6846;&#x67B6;&#xFF0C;&#x5305;&#x62EC; Undertow, Vert.X, Netty &#x7B49;&#xFF0C;&#x6BD4;&#x8F83;&#x6027;&#x80FD;&#x9009;&#x5B9A;&#x5408;&#x9002;&#x6846;&#x67B6;&#x3002; Request: GET /q1?key=&amp;message= Response: TEAMID,TEAM_AWS_ACCOUNT_ID\\n yyyy-MM-dd HH:mm:ss\\n [The decrypted message M]\\n Query2&#x8981;&#x6C42;&#xFF1A; &#x5904;&#x7406;&#x5927;&#x91CF;&#x7684;&#x8BFB;&#x8BF7;&#x6C42;&#x3002;&#x96BE;&#x5EA6;&#x7CFB;&#x6570;&#xFF1A; &#x9AD8;&#x3002;&#x5BF9;&#x6570;&#x636E;&#x683C;&#x5F0F;&#x6709;&#x8F83;&#x9AD8;&#x8981;&#x6C42;&#xFF0C;&#x5982;&#x4F55;&#x5904;&#x7406;&#x4E0D;&#x540C;&#x8BED;&#x8A00;&#xFF0C;&#x5404;&#x79CD;&#x7279;&#x6B8A;&#x7B26;&#x53F7;&#xFF0C;&#x5982;&#x4F55;&#x5904;&#x7406;&#x654F;&#x611F;&#x8BCD;&#x3001;&#x505C;&#x987F;&#x8BCD;&#x3001;&#x8BA1;&#x7B97;&#x60C5;&#x611F;&#x5206;&#x6790;&#x6743;&#x91CD;&#x503C;&#x3001;&#x8FC7;&#x6EE4;&#x810F;&#x6570;&#x636E;&#x7B49;&#x3002;&#x5BF9;&#x6027;&#x80FD;&#x6709;&#x8F83;&#x9AD8;&#x8981;&#x6C42;&#xFF0C;&#x5982;&#x4F55;&#x8BBE;&#x8BA1;&#x524D;&#x540E;&#x7AEF;&#x6765;&#x5904;&#x7406;&#x9AD8;&#x5E76;&#x53D1;&#x7684;&#x8BFB;&#x8BF7;&#x6C42;&#x3002; Request: GET /q2?userid=uid&amp;hashtag=hashtag Response: TEAMID,TEAM_AWS_ACCOUNT_ID\\n Sentiment_density1:Tweet_time1:Tweet_id1:Censored_text1\\n Sentiment_density2:Tweet_time2:Tweet_id2:Censored_text2\\n Sentiment_density3:Tweet_time3:Tweet_id3:Censored_text3\\n ... Query3&#x8981;&#x6C42;&#xFF1A; &#x7ED9;&#x5B9A;&#x4E00;&#x5B9A;&#x8303;&#x56F4;&#x7684; user id &#x548C; &#x65E5;&#x671F;&#xFF0C;&#x8BA1;&#x7B97;&#x5173;&#x952E;&#x8BCD;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;&#x3002;&#x5904;&#x7406;&#x5927;&#x91CF;&#x7684;&#x5199;&#x8BF7;&#x6C42;&#x3002;&#x96BE;&#x5EA6;&#x7CFB;&#x6570;&#xFF1A; &#x4E2D;&#x3002;&#x4F9D;&#x65E7;&#x662F;&#x6027;&#x80FD;&#x7684;&#x8981;&#x6C42;&#x3002; Request: GET/q3?start_date=yyyy-mm-dd&amp;end_date=yyyy-mm-dd&amp;start_userid=uid&amp;end_userid=uid&amp;words=w1,w2,w3 Response: TEAMID,TEAM_AWS_ACCOUNT_ID\\n w1:count1\\n w2:count2\\n w3:count3\\n Query4&#x8981;&#x6C42;&#xFF1A; &#x5904;&#x7406;&#x9AD8;&#x5E76;&#x53D1;&#x8BFB;&#x5199;&#x8BF7;&#x6C42;&#xFF0C;&#x6709;&#x4E00;&#x81F4;&#x6027;&#x8981;&#x6C42;&#x3002;&#x96BE;&#x5EA6;&#x7CFB;&#x6570;&#xFF1A; &#x9AD8;&#x3002; Request:GET: q4?tweetid=&amp;op=set&amp;seq=&amp;fields=&amp;payload= SET: q4?tweetid=&amp;op=set&amp;seq=&amp;fields=&amp;payload= Response:GET: q4?tweetid=&amp;op=get&amp;seq=&amp;fields=&amp;payload= SET&#xFF1A; TEAMID,TEAM_AWS_ACCOUNT_ID\\n success\\n &#x5E94;&#x7528;&#x573A;&#x666F;&#x8FD9;&#x7BC7;&#x535A;&#x5BA2;&#x662F;&#x9488;&#x5BF9; query 2 &#x8FDB;&#x884C;&#x7684;&#x53CD;&#x601D;&#xFF0C;&#x8FDB;&#x4E00;&#x6B65;&#x660E;&#x786E;&#x5E94;&#x7528;&#x573A;&#x666F;&#x3002; &#x6570;&#x636E;&#x662F; 5100W &#x6761;&#x5DE6;&#x53F3;&#x5E26; tag &#x7684; tweet &#x53EA;&#x6709;&#x8BFB;&#x8BF7;&#x6C42;&#xFF0C;&#x6BCF;&#x6B21;&#x9700;&#x8981;&#x8FD4;&#x56DE;&#x6307;&#x5B9A;&#x7528;&#x6237;&#x7528;&#x6307;&#x5B9A; tag &#x53D1;&#x9001;&#x7684; tweet &#x6709;&#x4E00;&#x5B9A;&#x7684;&#x9884;&#x7B97;&#x9650;&#x5236;&#xFF08;&#x4E0D;&#x80FD;&#x4EFB;&#x610F;&#x5F00;&#x673A;&#x5668;&#x6765;&#x51D1;&#x6027;&#x80FD;&#xFF09; &#x524D;&#x7AEF;&#x4F7F;&#x7528; Undertow&#xFF0C;&#x540E;&#x7AEF;&#x662F;&#x90E8;&#x7F72;&#x5728; Amazon &#x7684; MySQL &#x548C; Hbase &#x5145;&#x5206;&#x7406;&#x89E3;&#x5E94;&#x7528;&#x573A;&#x666F;&#x975E;&#x5E38;&#x975E;&#x5E38;&#x975E;&#x5E38;&#x91CD;&#x8981;&#xFF0C;&#x81F3;&#x5C11;&#x9700;&#x8981;&#x660E;&#x786E;&#x670D;&#x52A1;&#x5177;&#x4F53;&#x63A5;&#x6536;&#x7684;&#x8BF7;&#x6C42;&#x7684;&#x683C;&#x5F0F;&#x548C;&#x5177;&#x4F53;&#x9700;&#x8981;&#x8FD4;&#x56DE;&#x7684;&#x5185;&#x5BB9;&#x662F;&#x4EC0;&#x4E48;&#xFF1B;&#x662F;&#x504F;&#x5411;&#x8BFB;&#x8FD8;&#x662F;&#x504F;&#x5411;&#x5199;&#xFF0C;&#x8FD8;&#x662F;&#x8BFB;&#x5199;&#x6BD4;&#x8F83;&#x5747;&#x8861;&#xFF1B;&#x6570;&#x636E;&#x91CF;&#x5927;&#x6982;&#x662F;&#x591A;&#x5C11;&#x2026;&#x4E4B;&#x540E;&#x624D;&#x80FD;&#x8FDB;&#x884C;&#x9488;&#x5BF9;&#x6027;&#x7684;&#x4F18;&#x5316;&#x8BBE;&#x8BA1;&#x3002; &#x901A;&#x7528;&#x4F18;&#x5316;&#x7EB5;&#x89C2;&#x6574;&#x4E2A; Request-response &#x6D41;&#x7A0B;&#xFF0C;&#x5206;&#x4EE5;&#x4E0B;&#x51E0;&#x4E2A;&#x6B65;&#x9AA4;&#xFF1A; a. Load Generator to Load Balancer (if any, else merge with b.)b. Load Balancer to Web Servicec. Parsing requestd. Web Service to DBe. At DB (execution)f. DB to Web Serviceg. Parsing DB responseh. Web Service to LBi. LB to LG i &#x90E8;&#x5206;&#x6211;&#x4EEC;&#x4E0D;&#x9700;&#x8981;&#x8003;&#x8651;&#xFF0C;&#x56E0;&#x4E3A;&#x8FD9;&#x4E2A;&#x573A;&#x666F;&#x5E76;&#x6CA1;&#x6709;&#x7528;&#x4EFB;&#x4F55;&#x6E32;&#x67D3;&#x5F15;&#x64CE;&#xFF0C;&#x5C31;&#x662F;&#x5355;&#x7EAF;&#x8FD4;&#x56DE;&#x4E00;&#x6BB5;&#x6570;&#x636E;&#x800C;&#x5DF2;&#xFF1B;c &#x90E8;&#x5206;&#x8BBE;&#x6D89;&#x53CA;&#x4E86;&#x89E3;&#x5BC6;&#x7B97;&#x6CD5;&#xFF0C;&#x4F18;&#x5316;&#x4ECE;&#x4EE3;&#x7801;&#x5C42;&#x9762;&#x5165;&#x624B;&#x3002;&#x6570;&#x636E;&#x5E93;&#xFF08;e&#xFF09;&#x4E0E;&#x7F51;&#x7EDC;&#x4F20;&#x8F93;&#xFF08;b&#x3001;d&#x3001;f&#x3001;h&#xFF09;&#x90E8;&#x5206;&#xFF0C;&#x662F;&#x4E3B;&#x8981;&#x7684;&#x74F6;&#x9888;&#x6240;&#x5728;&#xFF0C;&#x6211;&#x4EEC;&#x4E00;&#x70B9;&#x4E00;&#x70B9;&#x6765;&#x5206;&#x6790;&#x3002; &#x7F51;&#x7EDC;&#x4F20;&#x8F93;&#x4F18;&#x5316;b&#x3001;d&#x3001;f&#x3001;h &#x90E8;&#x5206;&#xFF0C;&#x5B9E;&#x9645;&#x5C31;&#x662F;&#x7F51;&#x7EDC;&#x90E8;&#x5206;&#x4F18;&#x5316;&#xFF0C;b&#x3001;h &#x6D89;&#x53CA; front-end&#xFF0C;d&#x3001;f &#x6D89;&#x53CA; back-end&#x3002;&#x5BF9;&#x540E;&#x7AEF;&#x800C;&#x8A00;&#xFF0C;&#x56E0;&#x4E3A;&#x662F; &#x53EA;&#x8BFB;&#x64CD;&#x4F5C;&#xFF0C;&#x6240;&#x4EE5;&#x4E0D;&#x9700;&#x8981;&#x8003;&#x8651;&#x4E00;&#x81F4;&#x6027;&#x95EE;&#x9898;&#xFF0C;&#x53EF;&#x4EE5;&#x505A;&#x7684;&#x662F; &#x52AA;&#x529B;&#x589E;&#x52A0;&#x5E76;&#x53D1;&#x6570; &#x4F7F;&#x7528; ELB &#x589E;&#x52A0;&#x591A;&#x53F0;&#x524D;&#x7AEF;&#xFF0C;&#x591A;&#x53F0;&#x673A;&#x5668;&#x5E76;&#x53D1;&#x8BF7;&#x6C42;&#xFF1B; &#x540C;&#x7406;&#xFF0C;&#x591A;&#x53F0;&#x540E;&#x7AEF;&#x5206;&#x53D1;&#x6570;&#x636E;&#x5E93;&#x8BF7;&#x6C42;&#x3002; &#x6BCF;&#x53F0;&#x673A;&#x5668;&#x589E;&#x52A0;&#x7EBF;&#x7A0B;&#x6570;&#xFF08;&#x5F53;&#x7136;&#x8981;&#x5728;&#x5185;&#x5B58;&#x7684;&#x5141;&#x8BB8;&#x8303;&#x56F4;&#x5185;&#xFF09;&#xFF0C;&#x4F46;&#x662F;&#x52A0;&#x5230;&#x4E00;&#x5B9A;&#x7A0B;&#x5EA6;&#x4E5F;&#x5C31;&#x8DB3;&#x591F;&#x4E86;&#xFF08;&#x6BD5;&#x7ADF;&#x5E26;&#x5BBD;&#x662F;&#x6709;&#x9650;&#x7684;&#xFF09;&#xFF1B; &#x51CF;&#x5C11;&#x6BCF;&#x6B21;&#x4F20;&#x8F93;&#x6240;&#x9700;&#x8981;&#x7684;&#x5E26;&#x5BBD;&#x5982;&#x5728;&#x540E;&#x7AEF;&#x5BF9;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x538B;&#x7F29;&#xFF0C;&#x5728;&#x524D;&#x7AEF;&#x8FDB;&#x884C;&#x89E3;&#x538B;&#x7F29;&#xFF0C;&#x4EE5;&#x51CF;&#x5C11;&#x6570;&#x636E;&#x4F20;&#x8F93;&#x6240;&#x9700;&#x5E26;&#x5BBD;&#x3002; &#x8FD9;&#x4E00;&#x90E8;&#x5206;&#x4F18;&#x5316;&#x7684;&#x53E6;&#x4E00;&#x4E2A;&#x65B9;&#x5411;&#x662F;&#x8BBE;&#x8BA1;&#x7F13;&#x5B58;&#xFF0C;&#x51CF;&#x5C11;&#x5BF9;&#x540E;&#x53F0;&#x7684;&#x8BF7;&#x6C42;&#x3002;&#x8FD9;&#x91CC;&#x7684;&#x7F13;&#x5B58;&#x4E0D;&#x662F;&#x8BF4;&#x6570;&#x636E;&#x5E93;&#x7684;&#x7F13;&#x5B58;&#x67E5;&#x8BE2;&#xFF0C;&#x800C;&#x662F;&#x524D;&#x7AEF;&#x5BF9; response &#x7684;&#x7F13;&#x5B58;&#xFF0C;&#x76EE;&#x7684;&#x662F;&#x5BF9;&#x4E00;&#x4E9B;&#x8BF7;&#x6C42;&#x4E0D;&#x7528;&#x67E5;&#x8BE2;&#x6570;&#x636E;&#x5E93;&#x5C31;&#x80FD;&#x8FD4;&#x56DE; response&#xFF0C;&#x91C7;&#x7528;&#x7684;&#x65B9;&#x5F0F;&#x901A;&#x5E38;&#x662F; temporal and spatial locality&#x3002; &#x6709;&#x7F13;&#x5B58;&#xFF0C;&#x90A3;&#x4E48;&#x80AF;&#x5B9A;&#x5C31;&#x6709;&#x9884;&#x70ED;&#xFF0C;&#x9884;&#x70ED;&#x7684;&#x91CD;&#x8981;&#x6027;&#x5728;&#x4E8E;&#xFF0C;&#x628A;&#x5E38;&#x7528;&#x7684;&#x8BB0;&#x5F55;&#x7F13;&#x5B58;&#x4E0B;&#x6765;&#xFF0C;&#x4E3A;&#x4E86;&#x591A;&#x4E00;&#x4E9B;&#x7684;&#x7F13;&#x5B58;&#xFF0C;&#x53EF;&#x4EE5;&#x662F;&#x5F00;&#x4E00;&#x4E2A;&#x5185;&#x5B58;&#x4F18;&#x5316;&#x7684;&#x673A;&#x5668;&#xFF0C;&#x6BD4;&#x5176;&#x4ED6;&#x7CFB;&#x5217;&#x591A;&#x4E00;&#x500D;&#x5185;&#x5B58;&#x3002; &#x5BF9;&#x4E8E; g &#x7684;&#x4F18;&#x5316;&#xFF0C;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x8054;&#x7CFB;&#x4E1A;&#x52A1;&#x573A;&#x666F;&#xFF0C;&#x8BFB;&#x6BD4;&#x8F83;&#x591A;&#xFF0C;&#x56E0;&#x6B64;&#x53EF;&#x4EE5;&#x5BF9;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x9884;&#x5904;&#x7406;&#x540E;&#xFF08;&#x6574;&#x7406;&#x6210; response &#x7684;&#x683C;&#x5F0F;&#xFF09;&#x518D;&#x5B58;&#x5165;&#x6570;&#x636E;&#x5E93;&#xFF0C;&#x7528;&#x7A7A;&#x95F4;&#x6362;&#x65F6;&#x95F4;&#x3002; &#x6570;&#x636E;&#x5E93;&#x4F18;&#x5316;MySQL &#x9009;&#x62E9;&#x5408;&#x9002;&#x7684;&#x5B58;&#x50A8;&#x5F15;&#x64CE;&#x5728; MySQL &#x4E2D;&#x6709;&#x4E24;&#x4E2A;&#x5B58;&#x50A8;&#x5F15;&#x64CE; MyISAM &#x548C; InnoDB&#xFF0C;&#x6BCF;&#x4E2A;&#x5F15;&#x64CE;&#x90FD;&#x6709;&#x5229;&#x6709;&#x5F0A;&#x3002;MyISAM &#x504F;&#x597D;&#x8BFB;&#x64CD;&#x4F5C;&#x3002;&#x9002;&#x5408;&#x4E8E;&#x9700;&#x8981;&#x5927;&#x91CF;&#x67E5;&#x8BE2;&#x7684;&#x5E94;&#x7528;&#xFF0C;&#x5BF9;&#x4E8E;&#x6709;&#x5927;&#x91CF;&#x5199;&#x64CD;&#x4F5C;&#x5E76;&#x4E0D;&#x662F;&#x5F88;&#x597D;&#x3002;update&#x4E00;&#x4E2A;&#x5B57;&#x6BB5;&#xFF0C;&#x6574;&#x4E2A;&#x8868;&#x90FD;&#x4F1A;&#x88AB;&#x9501;&#x8D77;&#x6765;&#xFF0C;&#x800C;&#x5176;&#x4ED6;&#x8FDB;&#x7A0B;&#x5305;&#x62EC;&#x8BFB;&#x8FDB;&#x7A0B;&#x90FD;&#x65E0;&#x6CD5;&#x64CD;&#x4F5C;&#x3002;MyISAM &#x5BF9;&#x4E8E;SELECT COUNT(*) &#x8FD9;&#x7C7B;&#x7684;&#x8BA1;&#x7B97;&#x662F;&#x8D85;&#x5FEB;&#x65E0;&#x6BD4;&#x7684;&#x3002;InnoDB &#x504F;&#x597D;&#x5199;&#x64CD;&#x4F5C;&#x3002;&#x662F;&#x4E00;&#x4E2A;&#x975E;&#x5E38;&#x590D;&#x6742;&#x7684;&#x5B58;&#x50A8;&#x5F15;&#x64CE;&#xFF0C;&#x5BF9;&#x4E8E;&#x4E00;&#x4E9B;&#x5C0F;&#x7684;&#x5E94;&#x7528;&#xFF0C;&#x5B83;&#x4F1A;&#x6BD4; MyISAM &#x8FD8;&#x6162;&#x3002;&#x4ED6;&#x662F;&#x5B83;&#x652F;&#x6301;&#x201C;&#x884C;&#x9501;&#x201D; &#xFF0C;&#x4E8E;&#x662F;&#x5728;&#x5199;&#x64CD;&#x4F5C;&#x6BD4;&#x8F83;&#x591A;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4F1A;&#x66F4;&#x4F18;&#x79C0;&#x3002;&#x5E76;&#x4E14;&#xFF0C;&#x4ED6;&#x8FD8;&#x652F;&#x6301;&#x66F4;&#x591A;&#x7684;&#x9AD8;&#x7EA7;&#x5E94;&#x7528;&#xFF0C;&#x6BD4;&#x5982;&#xFF1A;&#x4E8B;&#x52A1;&#x3002; sharding and replicationsharding &#x662F;&#x5BF9;&#x6570;&#x636E;&#x5206;&#x533A;&#x5B58;&#x50A8;&#x5728;&#x4E0D;&#x540C;&#x6570;&#x636E;&#x5E93;&#x91CC;&#xFF0C;&#x9700;&#x8981;&#x8003;&#x8651;&#x7684;&#x662F;&#x600E;&#x4E48;&#x5206;&#x533A;&#xFF0C;&#x9700;&#x8981;&#x8BBE;&#x5B9A;&#x89C4;&#x5219;&#xFF0C;&#x53EF;&#x80FD;&#x5BFC;&#x81F4;&#x7684;&#x95EE;&#x9898;&#x662F;&#x8BF7;&#x6C42;&#x4E0D;&#x5747;&#x8861;&#xFF1B;replication &#x6BD4;&#x8F83;&#x7B80;&#x5355;&#xFF0C;&#x540C;&#x4E00;&#x4EFD;&#x6570;&#x636E;&#x591A;&#x5907;&#x4EFD;&#x51E0;&#x5206;&#xFF0C;&#x6700;&#x7B80;&#x5355;&#x91C7;&#x7528; round-robin &#x5206;&#x914D;&#x8BF7;&#x6C42;&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#x3002; &#x5EFA;&#x7ACB; index&#x6839;&#x636E;&#x4F7F;&#x7528;&#x9891;&#x7387;&#x51B3;&#x5B9A;&#x54EA;&#x4E9B;&#x5B57;&#x6BB5;&#x9700;&#x8981;&#x5EFA;&#x7ACB;&#x7D22;&#x5F15;&#xFF0C;&#x9009;&#x62E9;&#x7ECF;&#x5E38;&#x4F5C;&#x4E3A;&#x8FDE;&#x63A5;&#x6761;&#x4EF6;&#x3001;&#x7B5B;&#x9009;&#x6761;&#x4EF6;&#x3001;&#x805A;&#x5408;&#x67E5;&#x8BE2;&#x3001;&#x6392;&#x5E8F;&#x7684;&#x5B57;&#x6BB5;&#x4F5C;&#x4E3A;&#x7D22;&#x5F15;&#x7684;&#x5019;&#x9009;&#x5B57;&#x6BB5;&#x3002; &#x5B57;&#x6BB5;&#x8BBE;&#x8BA1;&#x5C3D;&#x91CF;&#x4E0D;&#x8981;&#x5141;&#x8BB8; NULL&#xFF0C;&#x9664;&#x975E;&#x5FC5;&#x8981;&#xFF0C;&#x53EF;&#x4EE5;&#x7528; NOT NULL+DEFAULT &#x4EE3;&#x66FF;&#x3002;&#x5C11;&#x7528;TEXT&#x548C;IMAGE&#xFF0C;&#x4E8C;&#x8FDB;&#x5236;&#x5B57;&#x6BB5;&#x7684;&#x8BFB;&#x5199;&#x662F;&#x6BD4;&#x8F83;&#x6162;&#x7684;&#xFF0C;&#x800C;&#x4E14;&#xFF0C;&#x8BFB;&#x53D6;&#x7684;&#x65B9;&#x6CD5;&#x4E5F;&#x4E0D;&#x591A;&#xFF0C;&#x5927;&#x90E8;&#x5206;&#x60C5;&#x51B5;&#x4E0B;&#x6700;&#x597D;&#x4E0D;&#x7528;&#x3002;&#x53E6;&#x5916;&#xFF0C;mysql&#x6709;&#x4E00;&#x4E2A;analyse query&#x7684;&#x529F;&#x80FD;&#xFF0C;&#x53EF;&#x4EE5;&#x6765;&#x5E2E;&#x52A9;&#x4F60;&#x52A0;&#x5FEB;&#x901F;&#x5EA6;&#xFF0C;&#x6BD4;&#x5982;&#x6570;&#x636E;&#x7C7B;&#x578B;&#x7684;&#x8C03;&#x6574;&#xFF0C;&#x4E0D;&#x8FC7;&#x8FD9;&#x662F;&#x5EFA;&#x7ACB;&#x5728;&#x6570;&#x636E;&#x91CF;&#x5F88;&#x5927;&#x7684;&#x60C5;&#x51B5;&#x4E0B; &#x67E5;&#x8BE2;&#x8BED;&#x53E5;&#x6A2A;&#x5411;&#x6765;&#x770B;&#xFF0C;&#x4E0D;&#x8981;&#x5199; SELECT *&#x7684;&#x8BED;&#x53E5;&#xFF0C;&#x800C;&#x662F;&#x9009;&#x62E9;&#x9700;&#x8981;&#x7684;&#x5B57;&#x6BB5;&#xFF1B;&#x7EB5;&#x5411;&#x6765;&#x770B;&#xFF0C;&#x5408;&#x7406;&#x5199; WHERE &#x5B50;&#x53E5;&#xFF0C;&#x4E0D;&#x8981;&#x5199;&#x6CA1;&#x6709;WHERE&#x7684;SQL&#x8BED;&#x53E5;&#xFF1B;&#x5F00;&#x542F;&#x67E5;&#x8BE2;&#x7F13;&#x5B58;&#xFF1B; &#x53C2;&#x6570;&#x914D;&#x7F6E;&#x914D;&#x7F6E;&#x6587;&#x4EF6; /etc/my.cnf max_connections &#x9ED8;&#x8BA4;&#x7684;151&#xFF0C;&#x53EF;&#x4EE5;&#x4FEE;&#x6539;&#x4E3A;3000&#xFF08;750M&#xFF09;max_connections &#x662F;&#x6307; MySql &#x7684;&#x6700;&#x5927;&#x8FDE;&#x63A5;&#x6570;&#xFF0C;&#x5982;&#x679C;&#x670D;&#x52A1;&#x5668;&#x7684;&#x5E76;&#x53D1;&#x8FDE;&#x63A5;&#x8BF7;&#x6C42;&#x91CF;&#x6BD4;&#x8F83;&#x5927;&#xFF0C;&#x5EFA;&#x8BAE;&#x8C03;&#x9AD8;&#x6B64;&#x503C;&#xFF0C;&#x4EE5;&#x589E;&#x52A0;&#x5E76;&#x884C;&#x8FDE;&#x63A5;&#x6570;&#x91CF;&#xFF0C;&#x5F53;&#x7136;&#x8FD9;&#x5EFA;&#x7ACB;&#x5728;&#x673A;&#x5668;&#x80FD;&#x652F;&#x6491;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x56E0;&#x4E3A;&#x5982;&#x679C;&#x8FDE;&#x63A5;&#x6570;&#x8D8A;&#x591A;&#xFF0C;&#x4ECB;&#x4E8E;MySql&#x4F1A;&#x4E3A;&#x6BCF;&#x4E2A;&#x8FDE;&#x63A5;&#x63D0;&#x4F9B;&#x8FDE;&#x63A5;&#x7F13;&#x51B2;&#x533A;&#xFF0C;&#x5C31;&#x4F1A;&#x5F00;&#x9500;&#x8D8A;&#x591A;&#x7684;&#x5185;&#x5B58;&#xFF0C;&#x6240;&#x4EE5;&#x8981;&#x9002;&#x5F53;&#x8C03;&#x6574;&#x8BE5;&#x503C;&#xFF0C;&#x4E0D;&#x80FD;&#x76F2;&#x76EE;&#x63D0;&#x9AD8;&#x8BBE;&#x503C;&#x3002;&#x53EF;&#x4EE5;&#x8FC7;&#x2019;conn%&#x2019;&#x901A;&#x914D;&#x7B26;&#x67E5;&#x770B;&#x5F53;&#x524D;&#x72B6;&#x6001;&#x7684;&#x8FDE;&#x63A5;&#x6570;&#x91CF;&#xFF0C;&#x4EE5;&#x5B9A;&#x593A;&#x8BE5;&#x503C;&#x7684;&#x5927;&#x5C0F;&#x3002;MySQL&#x670D;&#x52A1;&#x5668;&#x5141;&#x8BB8;&#x7684;&#x6700;&#x5927;&#x8FDE;&#x63A5;&#x6570;16384&#xFF1B;&#x67E5;&#x770B;&#x7CFB;&#x7EDF;&#x5F53;&#x524D;&#x6700;&#x5927;&#x8FDE;&#x63A5;&#x6570; show variables like &#x2018;max_connections&#x2019;; thread_concurrency &#x5E94;&#x8BE5;&#x8BBE;&#x5B9A;&#x4E3A;CPU&#x6838;&#x6570;&#x7684;2&#x500D;thread_concurrency &#x7684;&#x503C;&#x7684;&#x6B63;&#x786E;&#x4E0E;&#x5426;, &#x5BF9;mysql&#x7684;&#x6027;&#x80FD;&#x5F71;&#x54CD;&#x5F88;&#x5927;, &#x5728;&#x591A;&#x4E2A;cpu(&#x6216;&#x591A;&#x6838;)&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x9519;&#x8BEF;&#x8BBE;&#x7F6E;&#x4E86; thread_concurrency &#x7684;&#x503C;, &#x4F1A;&#x5BFC;&#x81F4;mysql&#x4E0D;&#x80FD;&#x5145;&#x5206;&#x5229;&#x7528;&#x591A;cpu(&#x6216;&#x591A;&#x6838;), &#x51FA;&#x73B0;&#x540C;&#x4E00;&#x65F6;&#x523B;&#x53EA;&#x80FD;&#x4E00;&#x4E2A;cpu(&#x6216;&#x6838;)&#x5728;&#x5DE5;&#x4F5C;&#x7684;&#x60C5;&#x51B5;&#x3002; back_log &#x9ED8;&#x8BA4;&#x7684;50&#xFF0C;&#x53EF;&#x4EE5;&#x4FEE;&#x6539;&#x4E3A;500.&#xFF08;&#x6BCF;&#x4E2A;&#x8FDE;&#x63A5;256kb,&#x5360;&#x7528;&#xFF1A;125M&#xFF09;back_log &#x503C;&#x6307;&#x51FA;&#x5728; MySQL &#x6682;&#x65F6;&#x505C;&#x6B62;&#x56DE;&#x7B54;&#x65B0;&#x8BF7;&#x6C42;&#x4E4B;&#x524D;&#x7684;&#x77ED;&#x65F6;&#x95F4;&#x5185;&#x591A;&#x5C11;&#x4E2A;&#x8BF7;&#x6C42;&#x53EF;&#x4EE5;&#x88AB;&#x5B58;&#x5728;&#x5806;&#x6808;&#x4E2D;&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x5982;&#x679C;MySql&#x7684;&#x8FDE;&#x63A5;&#x6570;&#x636E;&#x8FBE;&#x5230; max_connections &#x65F6;&#xFF0C;&#x65B0;&#x6765;&#x7684;&#x8BF7;&#x6C42;&#x5C06;&#x4F1A;&#x88AB;&#x5B58;&#x5728;&#x5806;&#x6808;&#x4E2D;&#xFF0C;&#x4EE5;&#x7B49;&#x5F85;&#x67D0;&#x4E00;&#x8FDE;&#x63A5;&#x91CA;&#x653E;&#x8D44;&#x6E90;&#xFF0C;&#x8BE5;&#x5806;&#x6808;&#x7684;&#x6570;&#x91CF;&#x5373;back_log&#xFF0C;&#x5982;&#x679C;&#x7B49;&#x5F85;&#x8FDE;&#x63A5;&#x7684;&#x6570;&#x91CF;&#x8D85;&#x8FC7; back_log&#xFF0C;&#x5C06;&#x4E0D;&#x88AB;&#x6388;&#x4E88;&#x8FDE;&#x63A5;&#x8D44;&#x6E90;&#x3002;back_log &#x503C;&#x4E0D;&#x80FD;&#x8D85;&#x8FC7;TCP/IP&#x8FDE;&#x63A5;&#x7684;&#x4FA6;&#x542C;&#x961F;&#x5217;&#x7684;&#x5927;&#x5C0F;&#x3002;&#x82E5;&#x8D85;&#x8FC7;&#x5219;&#x65E0;&#x6548;&#xFF0C;&#x67E5;&#x770B;&#x5F53;&#x524D;&#x7CFB;&#x7EDF;&#x7684;TCP/IP&#x8FDE;&#x63A5;&#x7684;&#x4FA6;&#x542C;&#x961F;&#x5217;&#x7684;&#x5927;&#x5C0F;&#x547D;&#x4EE4;&#xFF1A;cat /proc/sys/net/ipv4/tcp_max_syn_backlog&#x3002;&#x5BF9;&#x4E8E; Linux &#x7CFB;&#x7EDF;&#x63A8;&#x8350;&#x8BBE;&#x7F6E;&#x4E3A;&#x5C0F;&#x4E8E; 512 &#x7684;&#x6574;&#x6570;&#x3002;show variables like &#x2018;back_log&#x2019;; &#x67E5;&#x770B;&#x5F53;&#x524D;&#x6570;&#x91CF; HBase Rowkey &#x8BBE;&#x8BA1;Rowkey &#x4E00;&#x5B9A;&#x8981;&#x5C3D;&#x91CF;&#x77ED; &#xFF08;&#x5982;&#xFF1A;&#x65F6;&#x95F4;&#x7528;&#x65F6;&#x95F4;&#x6233;&#x6574;&#x6570;&#x8868;&#x793A;&#x3001;&#x7F16;&#x7801;&#x538B;&#x7F29;&#xFF09; key-value &#x7684;&#x8BBE;&#x8BA1;&#x628A;&#x4E00;&#x4E9B;&#x91CD;&#x8981;&#x7684;&#x7B5B;&#x9009;&#x4FE1;&#x606F;&#x5DE6;&#x79FB;&#x5230;&#x5408;&#x9002;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x4ECE;&#x800C;&#x5728;&#x4E0D;&#x6539;&#x53D8;&#x6570;&#x636E;&#x91CF;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x63D0;&#x9AD8;&#x67E5;&#x8BE2;&#x6027;&#x80FD;&#xFF0C;&#x5C3D;&#x91CF;&#x628A;&#x67E5;&#x8BE2;&#x7EF4;&#x5EA6;&#x6216;&#x4FE1;&#x606F;&#x5B58;&#x50A8;&#x5728;&#x884C;&#x5065;&#x4E2D;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x7B5B;&#x9009;&#x6570;&#x636E;&#x7684;&#x6548;&#x7387;&#x6700;&#x9AD8;&#x3002;&#x7406;&#x7531;&#xFF1A;HBase &#x7684; Rowkey &#x662F;&#x6570;&#x636E;&#x884C;&#x7684;&#x552F;&#x4E00;&#x6807;&#x8BC6;&#xFF0C;&#x5FC5;&#x987B;&#x901A;&#x8FC7;&#x5B83;&#x8FDB;&#x884C;&#x6570;&#x636E;&#x884C;&#x8BBF;&#x95EE;&#xFF0C;&#x76EE;&#x524D;&#x6709;&#x4E09;&#x79CD;&#x65B9;&#x5F0F;&#xFF0C;&#x5355;&#x884C;&#x952E;&#x8BBF;&#x95EE;&#x3001;&#x884C;&#x952E;&#x8303;&#x56F4;&#x8BBF;&#x95EE;&#x3001;&#x5168;&#x8868;&#x626B;&#x63CF;&#x8BBF;&#x95EE;&#x3002;&#x6570;&#x636E;&#x6309;&#x884C;&#x952E;&#x7684;&#x65B9;&#x5F0F;&#x6392;&#x5E8F;&#x5B58;&#x50A8;&#xFF0C;&#x4F9D;&#x6B21;&#x6309;&#x4F4D;&#x6BD4;&#x8F83;&#xFF0C;&#x6570;&#x503C;&#x8F83;&#x5927;&#x7684;&#x6392;&#x5217;&#x5728;&#x540E;&#xFF0C;&#x4F8B;&#x5982; int &#x65B9;&#x5F0F;&#x7684;&#x6392;&#x5E8F;&#xFF1A;1&#xFF0C;10&#xFF0C;100&#xFF0C;11&#xFF0C;12&#xFF0C;2&#xFF0C;20&#x2026;&#xFF0C;906&#xFF0C;&#x2026;&#x3002; &#x589E;&#x52A0;&#x6570;&#x636E;&#x8282;&#x70B9;Hbase &#x5728;&#x884C;&#x65B9;&#x5411;&#x4E0A;&#x6C34;&#x5E73;&#x5212;&#x5206;&#x6210; N &#x4E2A; Region&#xFF0C;&#x6BCF;&#x4E2A;&#x8868;&#x4E00;&#x5F00;&#x59CB;&#x53EA;&#x6709;&#x4E00;&#x4E2A; Region&#xFF0C;&#x6570;&#x636E;&#x91CF;&#x589E;&#x591A;&#xFF0C;Region &#x81EA;&#x52A8;&#x5206;&#x88C2;&#x4E3A;&#x4E24;&#x4E2A;&#xFF0C;&#x4E0D;&#x540C; Region &#x5206;&#x5E03;&#x5728;&#x4E0D;&#x540C; Server &#x4E0A;&#xFF0C;&#x4F46;&#x540C;&#x4E00;&#x4E2A;&#x4E0D;&#x4F1A;&#x62C6;&#x5206;&#x5230;&#x4E0D;&#x540C; Server&#x3002;&#x4E00;&#x4E2A; region &#x53EA;&#x80FD;&#x7531;&#x4E00;&#x4E2A;&#x670D;&#x52A1;&#x5668;&#x7BA1;&#x7406;&#xFF0C;&#x6240;&#x4EE5;&#x603B;&#x662F;&#x6DFB;&#x52A0;&#x5230;&#x540C;&#x4E00;&#x4E2A; region &#x4E0A;&#xFF0C;&#x4F1A;&#x9020;&#x6210;&#x8BFB;&#x5199;&#x70ED;&#x70B9;&#xFF0C;&#x4ECE;&#x800C;&#x4F7F;&#x96C6;&#x7FA4;&#x6027;&#x80FD;&#x4E0B;&#x964D;&#x3002;&#x89E3;&#x51B3;&#x65B9;&#x6CD5;&#xFF0C;&#x6BD4;&#x5982;&#x6211;&#x4EEC;&#x6709;9&#x53F0;&#x670D;&#x52A1;&#x5668;&#xFF0C;&#x90A3;&#x4E48;&#x6211;&#x4EEC;&#x5C31;&#x628A;0-9&#x5747;&#x5300;&#x52A0;&#x5230;&#x884C;&#x5065;&#x524D;&#x7F00;&#xFF0C;&#x8FD9;&#x6837;&#x5C31;&#x4F1A;&#x88AB;&#x5E73;&#x5747;&#x7684;&#x5206;&#x5230;&#x4E0D;&#x540C;&#x7684; region &#x670D;&#x52A1;&#x5668;&#x4E0A;&#x4E86;&#xFF0C;&#x597D;&#x5904;&#x662F;&#xFF0C;&#x56E0;&#x4E3A;&#x76F8;&#x8FDE;&#x7684;&#x6570;&#x636E;&#x90FD;&#x5206;&#x5E03;&#x5230;&#x4E0D;&#x540C;&#x7684;&#x670D;&#x52A1;&#x5668;&#x4E0A;&#x4E86;&#xFF0C;&#x7528;&#x6237;&#x53EF;&#x4EE5;&#x591A;&#x7EBF;&#x7A0B;&#x5E76;&#x884C;&#x7684;&#x8BFB;&#x53D6;&#x6570;&#x636E;&#xFF0C;&#x8FD9;&#x6837;&#x67E5;&#x8BE2;&#x7684;&#x541E;&#x5410;&#x91CF;&#x4F1A;&#x63D0;&#x9AD8;&#x3002; &#x53C2;&#x6570;&#x914D;&#x7F6E; &#x5206;&#x914D;&#x5408;&#x9002;&#x7684;&#x5185;&#x5B58;&#x7ED9; RegionServer &#x670D;&#x52A1;&#x5728;&#x4E0D;&#x5F71;&#x54CD;&#x5176;&#x4ED6;&#x670D;&#x52A1;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x8D8A;&#x5927;&#x8D8A;&#x597D;&#x3002;&#x4F8B;&#x5982;&#x5728; HBase &#x7684; conf &#x76EE;&#x5F55;&#x4E0B;&#x7684; hbase-env.sh &#x7684;&#x6700;&#x540E;&#x6DFB;&#x52A0; export HBASE_REGIONSERVER_OPTS=&#x201D;-Xmx16000m $HBASE_REGIONSERVER_OPTS&#x201D;&#x5176;&#x4E2D; 16000m &#x4E3A;&#x5206;&#x914D;&#x7ED9; RegionServer &#x7684;&#x5185;&#x5B58;&#x5927;&#x5C0F;&#x3002; RegionServer &#x7684;&#x8BF7;&#x6C42;&#x5904;&#x7406; IO &#x7EBF;&#x7A0B;&#x6570;&#x8F83;&#x5C11;&#x7684; IO &#x7EBF;&#x7A0B;&#x9002;&#x7528;&#x4E8E;&#x5904;&#x7406;&#x5355;&#x6B21;&#x8BF7;&#x6C42;&#x5185;&#x5B58;&#x6D88;&#x8017;&#x8F83;&#x9AD8;&#x7684; Big Put &#x573A;&#x666F; (&#x5927;&#x5BB9;&#x91CF;&#x5355;&#x6B21; Put &#x6216;&#x8BBE;&#x7F6E;&#x4E86;&#x8F83;&#x5927; cache &#x7684; Scan&#xFF0C;&#x5747;&#x5C5E;&#x4E8E; Big Put) &#x6216; ReigonServer &#x7684;&#x5185;&#x5B58;&#x6BD4;&#x8F83;&#x7D27;&#x5F20;&#x7684;&#x573A;&#x666F;&#x3002;&#x8F83;&#x591A;&#x7684; IO &#x7EBF;&#x7A0B;&#xFF0C;&#x9002;&#x7528;&#x4E8E;&#x5355;&#x6B21;&#x8BF7;&#x6C42;&#x5185;&#x5B58;&#x6D88;&#x8017;&#x4F4E;&#xFF0C;TPS &#x8981;&#x6C42; (&#x6BCF;&#x79D2;&#x4E8B;&#x52A1;&#x5904;&#x7406;&#x91CF; (TransactionPerSecond)) &#x975E;&#x5E38;&#x9AD8;&#x7684;&#x573A;&#x666F;&#x3002;&#x8BBE;&#x7F6E;&#x8BE5;&#x503C;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4EE5;&#x76D1;&#x63A7;&#x5185;&#x5B58;&#x4E3A;&#x4E3B;&#x8981;&#x53C2;&#x8003;&#x3002;&#x5728; hbase-site.xml &#x914D;&#x7F6E;&#x6587;&#x4EF6;&#x4E2D;&#x914D;&#x7F6E;&#x9879;&#x4E3A; hbase.regionserver.handler.count&#x3002;200 &#x8C03;&#x6574; Block Cachehfile.block.cache.size&#xFF1A;RS&#x7684;block cache&#x7684;&#x5185;&#x5B58;&#x5927;&#x5C0F;&#x9650;&#x5236;&#xFF0C;&#x9ED8;&#x8BA4;&#x503C;0.25&#xFF0C;&#x5728;&#x504F;&#x5411;&#x8BFB;&#x7684;&#x4E1A;&#x52A1;&#x4E2D;&#xFF0C;&#x53EF;&#x4EE5;&#x9002;&#x5F53;&#x8C03;&#x5927;&#x8BE5;&#x503C;&#xFF0C;&#x5177;&#x4F53;&#x914D;&#x7F6E;&#x65F6;&#x9700;&#x8BD5;hbase&#x96C6;&#x7FA4;&#x670D;&#x52A1;&#x7684;&#x4E1A;&#x52A1;&#x7279;&#x5F81;&#xFF0C;&#x7ED3;&#x5408;memstore&#x7684;&#x5185;&#x5B58;&#x5360;&#x6BD4;&#x8FDB;&#x884C;&#x7EFC;&#x5408;&#x8003;&#x8651;&#x3002; &#x8FDB;&#x4E00;&#x6B65;&#x4F18;&#x5316; &#x2013; &#x67B6;&#x6784;&#x8BBE;&#x8BA1;&#x4E0A;&#x4E00;&#x90E8;&#x5206;&#x7684;&#x4F18;&#x5316;&#x5E76;&#x4E0D;&#x80FD;&#x89E3;&#x51B3;&#x6240;&#x6709;&#x95EE;&#x9898;&#xFF0C;&#x81F3;&#x5C11;&#x4E0D;&#x80FD;&#x89E3;&#x51B3;&#x591A;&#x5C11; front-end &#x673A;&#x5668;&#xFF0C;&#x591A;&#x5C11; back-end &#x673A;&#x5668;&#x3002;&#x8FDB;&#x4E00;&#x6B65;&#x7684;&#x4F18;&#x5316;&#x66F4;&#x591A;&#x7684;&#x662F;&#x4F9D;&#x9760;&#x5B9E;&#x9A8C;&#x3001;&#x4F9D;&#x9760;&#x76D1;&#x63A7;&#x548C;&#x65E5;&#x5FD7;&#x5206;&#x6790;&#x3002; &#x573A;&#x666F;&#x7ED9;&#x5B9A;&#x9884;&#x7B97;&#xFF0C;&#x4F18;&#x5316;&#x6027;&#x80FD;&#x3002;&#x4E00;&#x822C;&#x601D;&#x8DEF;&#xFF1A;auto-scaling &#x65B9;&#x5F0F;&#xFF0C;&#x5728;&#x9AD8;&#x5CF0;&#x671F;&#x589E;&#x52A0;&#x673A;&#x5668;&#xFF0C;&#x4F4E;&#x8C37;&#x671F;&#x51CF;&#x5C11;&#x673A;&#x5668; &#x56F0;&#x96BE;&#x6A21;&#x62DF; 2 &#x5206;&#x949F; &#xFF1D; &#x73B0;&#x5B9E; 1 &#x5C0F;&#x65F6; &#x2013;&gt; 30 &#x500D;&#x7F29;&#x653E;&#x73B0;&#x5B9E; 2 &#x5C0F;&#x65F6;&#x7684;&#x9AD8;&#x5CF0;&#x671F;&#x5BF9;&#x5E94;&#x53EA;&#x6709; 4 &#x5206;&#x949F;&#xFF0C;&#x7136;&#x800C;&#x5751;&#x7239;&#x7684;&#x662F;&#xFF01;&#xFF01;&#xFF01;aws &#x7533;&#x8BF7;&#x673A;&#x5668;&#x5230;&#x4F7F;&#x7528;&#xFF0C;&#x6709; 3-5 &#x5206;&#x949F;&#x7684;&#x5EF6;&#x8FDF;&#xFF0C;&#x8FD9;&#x4E2A;&#x5EF6;&#x8FDF;&#x5E76;&#x4E0D;&#x4F1A;&#x88AB;&#x7F29;&#x653E;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x4F60;&#x770B;&#x5230;&#x9AD8;&#x5CF0;&#x7ACB;&#x5373;&#x54CD;&#x5E94;&#x3001;&#x589E;&#x52A0;&#x673A;&#x5668;&#xFF0C;&#x7B49;&#x5230;&#x673A;&#x5668;&#x6295;&#x5165;&#x4F7F;&#x7528;&#x4E86;&#xFF0C;&#x9AD8;&#x5CF0;&#x5C31;&#x8FC7;&#x4E86;&#x3002;&#x3002;&#x3002;&#x6240;&#x4EE5;&#xFF0C;&#x8981;&#x4E48;&#x63D0;&#x524D; 3-5 &#x5206;&#x949F;&#x9884;&#x6D4B;&#x5230;&#x9AD8;&#x5CF0;&#x671F;&#xFF0C;&#x8981;&#x4E48;&#xFF0C;&#x7B80;&#x5355;&#x7C97;&#x66B4;&#x5F00;&#x591F;&#x673A;&#x5668;&#xFF0C;&#x7B49;&#x7740;&#x3002; &#x600E;&#x4E48;&#x9884;&#x6D4B;&#xFF1F;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x89C2;&#x5BDF;&#x76D1;&#x63A7;&#x6570;&#x636E;&#xFF0C;&#x62DF;&#x5408;&#x6D41;&#x91CF;&#x66F2;&#x7EBF;&#x3002;&#x7136;&#x800C;&#x8BBE;&#x60F3;&#x662F;&#x7F8E;&#x597D;&#x7684;&#xFF0C;&#x73B0;&#x5B9E;&#x662F;&#x6B8B;&#x9177;&#x7684;&#x3002;&#x6A21;&#x62DF;&#x5B9E;&#x9A8C;&#x6709;&#x65F6;&#x4F1A;&#x8BA9;&#x670D;&#x52A1;&#x5668;&#x5047;&#x88C5;&#x300E;&#x6302;&#x6389;&#x300F;&#xFF0C;&#x8FD9;&#x6837;&#x6709;&#x4E00;&#x6BB5;&#x65F6;&#x95F4;&#x5C31;&#x65E0;&#x6CD5;&#x5904;&#x7406;&#x4EFB;&#x4F55;&#x8BF7;&#x6C42;&#xFF0C;&#x6240;&#x4EE5;&#x2026;&#x2026;&#x6240;&#x4EE5;&#x96BE;&#x4EE5;&#x62DF;&#x5408;&#x3002; &#x80FD;&#x505A;&#x7684;&#xFF0C;&#x53EA;&#x6709;&#x8BBE;&#x5B9A; baseline&#xFF0C;&#x8C03;&#x6574;&#x53C2;&#x6570;&#xFF08;&#x524D;&#x540E;&#x7AEF;&#x5404;&#x6709;&#x51E0;&#x53F0;&#x673A;&#x5668;&#xFF09;&#xFF0C;&#x4E0D;&#x65AD;&#x5B9E;&#x9A8C;&#xFF0C;&#x627E;&#x6700;&#x4F18;&#x89E3;&#x4E86;&#xFF0C;&#x8FD9;&#x91CC;&#x7684;&#x539F;&#x5219;&#x662F; &#x5145;&#x5206;&#x5229;&#x7528;&#x786C;&#x4EF6;&#x8D44;&#x6E90;&#x3002; &#x5728;&#x9884;&#x7B97;&#x6761;&#x4EF6;&#x4E0B;&#xFF0C;&#x5BF9;&#x6BCF;&#x53F0;&#x673A;&#x5668;&#xFF0C;&#x5176; CPU&#xFF0C;&#x5185;&#x5B58;&#xFF0C;&#x5E26;&#x5BBD;&#x7B49;&#x8D44;&#x6E90;&#x90FD;&#x8981;&#x5C3D;&#x53EF;&#x80FD;&#x7684;&#x4F7F;&#x7528;&#xFF0C;&#x5982;&#x679C;&#x8D44;&#x6E90;&#x4E0D;&#x5E73;&#x8861;&#xFF0C;&#x5C31;&#x8BF4;&#x660E;&#x94B1;&#x6CA1;&#x6709;&#x82B1;&#x5728;&#x5200;&#x5203;&#x4E0A;&#xFF0C;&#x53EF;&#x4EE5;&#x8003;&#x8651;&#x66F4;&#x6362;&#x4E0D;&#x540C;&#x7C7B;&#x578B;&#x7684;&#x673A;&#x5668;&#xFF0C;Amazon &#x63D0;&#x4F9B;&#x4E86;&#x300E;&#x901A;&#x7528;&#x300F;&#xFF0C;&#x300E;&#x5185;&#x5B58;&#x4F18;&#x5316;&#x300F;&#x548C;&#x300E;&#x8BA1;&#x7B97;&#x4F18;&#x5316;&#x300F;&#x8FD9;&#x51E0;&#x79CD;&#x4E0D;&#x540C;&#x7684;&#x673A;&#x5668;&#xFF0C;&#x53EF;&#x4EE5;&#x6839;&#x636E;&#x76D1;&#x63A7;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x6839;&#x636E;&#x524D;&#x540E;&#x7AEF;&#x4E0D;&#x540C;&#x7684;&#x4EFB;&#x52A1;&#x6765;&#x51B3;&#x5B9A;&#x5177;&#x4F53;&#x4F7F;&#x7528;&#x4EC0;&#x4E48;&#x7C7B;&#x578B;&#x7684;&#x673A;&#x5668;&#x3002; &#x76D1;&#x63A7;&#x600E;&#x4E48;&#x8C03;&#x6574;&#x53C2;&#x6570;&#xFF1F;&#x7B54;&#x6848;&#x5C31;&#x662F;&#x770B;&#x76D1;&#x63A7;&#x3002;&#x91CD;&#x8981;&#x6307;&#x6807;&#xFF1A;CPU / &#x5185;&#x5B58; / &#x7F51;&#x7EDC;&#x4ECE;&#x8FD9;&#x4E09;&#x4E2A;&#x89D2;&#x5EA6;&#x7684;&#x6570;&#x636E;&#x89C2;&#x5BDF;&#x89C4;&#x5F8B;&#xFF0C;&#x6216;&#x8005;&#x7528; aws &#x7684; cloud watch &#x8BBE;&#x5B9A;&#x4E00;&#x4E9B;&#x9608;&#x503C;&#xFF0C;&#x8BBE;&#x7F6E;&#x81EA;&#x52A8;&#x63D0;&#x9192;&#xFF0C;&#x5F53;&#x7136;&#x4E5F;&#x53EF;&#x4EE5;&#x81EA;&#x5DF1;&#x5199;&#x811A;&#x672C;&#xFF0C;&#x7701;&#x94B1;&#xFF01; &#x65E5;&#x5FD7;&#x4E00;&#x822C;&#x6765;&#x8BF4;&#xFF0C;&#x4E0D;&#x540C;&#x7684; web &#x670D;&#x52A1;&#xFF0C;&#x7528;&#x6237;&#x7684;&#x8BF7;&#x6C42;&#x6A21;&#x5F0F;&#x603B;&#x4F53;&#x6765;&#x8BF4;&#x662F;&#x6709;&#x4E00;&#x5B9A;&#x89C4;&#x5F8B;&#x7684;&#x3002;&#x5BF9;&#x4E8E; Twitter &#x6570;&#x636E;&#x7684;&#x5206;&#x6790;&#xFF0C;&#x5C31;&#x6709;&#x70ED;&#x95E8;/&#x51B7;&#x95E8;&#x7684;&#x7528;&#x6237;/hashtag/&#x5355;&#x8BCD;/&#x65F6;&#x95F4;&#x6BB5;&#xFF08;&#x6BD4;&#x65B9;&#x8BF4;&#x6709;&#x91CD;&#x5927;&#x4E8B;&#x4EF6;&#x53D1;&#x751F;&#x7684;&#x65E5;&#x5B50;&#xFF0C;tweet &#x7684;&#x6570;&#x91CF;&#x53EF;&#x80FD;&#x4F1A;&#x66F4;&#x591A;&#xFF09; &#x6211;&#x4EEC;&#x5E94;&#x8BE5;&#x6839;&#x636E;&#x5177;&#x4F53;&#x7684;&#x9700;&#x6C42;&#xFF0C;&#x901A;&#x8FC7;&#x7EDF;&#x8BA1;&#x5927;&#x81F4;&#x4E86;&#x89E3;&#x6570;&#x636E;&#x5206;&#x5E03;&#x3002;&#x6BD4;&#x65B9;&#x8BF4;&#x5176;&#x4E2D;&#x4E00;&#x4E2A;&#x8BF7;&#x6C42;&#x662F;&#x8FD4;&#x56DE;&#x67D0;&#x7528;&#x6237;&#x5305;&#x542B;&#x67D0; hashtag &#x7684; tweet&#xFF0C;&#x90A3;&#x4E48;&#x6211;&#x4EEC;&#x6700;&#x597D;&#x9700;&#x8981;&#x4E86;&#x89E3;&#x54EA;&#x4E9B;&#x7528;&#x6237;&#x70ED;&#x95E8;&#xFF0C;&#x54EA;&#x4E9B; hashtag &#x70ED;&#x95E8;&#xFF0C;&#x7136;&#x540E;&#x6839;&#x636E;&#x8FD9;&#x4E9B;&#x7279;&#x70B9;&#x6765;&#x8BBE;&#x8BA1;&#x6570;&#x636E;&#x5E93;&#x7ED3;&#x6784;&#x3001;&#x8BBE;&#x8BA1;&#x7F13;&#x5B58;&#x3002;&#x5C31; Hbase &#x800C;&#x8A00;&#xFF0C;&#x53EF;&#x4EE5;&#x6839;&#x636E;&#x8FD9;&#x4E9B;&#x65E5;&#x5FD7;&#xFF0C;&#x8FDB;&#x884C;&#x6570;&#x636E;&#x5E93;&#x4E2D;&#x4E0D;&#x540C; region &#x5728;&#x4E0D;&#x540C; regionserver &#x7684;&#x5E73;&#x8861;&#xFF0C;&#x5145;&#x5206;&#x5229;&#x7528; HBase &#x7684;&#x80FD;&#x529B;&#x3002; &#x8BBE;&#x8BA1;&#x4E3E;&#x4F8B;&#x524D;&#x7AEF;&#x4F7F;&#x7528; ELB(&#x8D1F;&#x8F7D;&#x5747;&#x8861;) + 2 &#x53F0;&#x673A;&#x5668;&#xFF0C;&#x540E;&#x7AEF;&#x4F7F;&#x7528; 1(master) + 3(slave) &#x7684;&#x6A21;&#x5F0F;&#x53EF;&#x80FD;&#x662F;&#x6700;&#x79D1;&#x5B66;&#x7684;&#xFF0C;&#x8FD9;&#x6837;&#x53EF;&#x4EE5;&#x5C3D;&#x53EF;&#x80FD;&#x5F97;&#x51CF;&#x8F7B;&#x524D;&#x7AEF;&#x5355;&#x673A;&#x538B;&#x529B;&#x3002; &#x53C2;&#x8003;&#x94FE;&#x63A5;&#xFF1A;MySQL&#x6027;&#x80FD;&#x4F18;&#x5316;&#x7684;&#x6700;&#x4F73;20+&#x6761;&#x7ECF;&#x9A8C;MySQL&#x6027;&#x80FD;&#x4F18;&#x5316;&#x4E4B;&#x53C2;&#x6570;&#x914D;&#x7F6E;HBase &#x6570;&#x636E;&#x5E93;&#x68C0;&#x7D22;&#x6027;&#x80FD;&#x4F18;&#x5316;&#x7B56;&#x7565;","tags":"mysql hbase webserver"},{"title":"项目实战--App Recommender System","url":"/2016/07/22/项目实战--App Recommender System/","text":"&#x8BE5;&#x9879;&#x76EE;&#x4ECE;&#x534E;&#x4E3A;&#x5E94;&#x7528;&#x5E02;&#x573A;&#x722C;&#x53D6; app &#x6570;&#x636E;&#xFF0C;&#x5B58;&#x5230; MongoDB &#x4E2D;&#xFF0C;&#x518D;&#x7ECF;&#x8FC7;&#x63A8;&#x8350;&#x7B97;&#x6CD5;&#x66F4;&#x65B0;&#x6570;&#x636E;&#xFF0C;&#x5C55;&#x793A;&#x5230;&#x524D;&#x7AEF;&#x3002;&#x9879;&#x76EE;&#x7EFC;&#x5408;&#x4E86;&#x4E4B;&#x524D;&#x8BB2;&#x5230;&#x7684;&#x6240;&#x6709;&#x722C;&#x866B;&#x6280;&#x5DE7;&#xFF0C;&#x6765;&#x6E90;&#x81EA; BitTiger &#x7684;&#x7EC4;&#x7EC7;&#x3002;&#x9879;&#x76EE;&#x5171;&#x5206;&#x4E3A; &#x722C;&#x866B;&#x6A21;&#x5757;&#x3001;&#x63A8;&#x8350;&#x6A21;&#x5757;&#x3001;&#x7F51;&#x7AD9;&#x6A21;&#x5757; &#x4E09;&#x90E8;&#x5206;&#x3002; &#x6280;&#x672F;&#x9700;&#x6C42;&#x6587;&#x6863;&#x722C;&#x866B;&#x6A21;&#x5757;&#x4ECE; http://appstore.huawei.com/more/all &#x722C;&#x53D6;&#x603B;&#x6392;&#x884C;&#x699C;&#x6240;&#x6709;APP&#x6570;&#x636E; Title AppId &#x7F29;&#x7565;&#x56FE; &#x4ECB;&#x7ECD; &#x4ECE; http://appstore.huawei.com/topics/ &#x722C;&#x53D6;&#x6240;&#x6709;&#x4E13;&#x9898;&#x6BCF;&#x4E2A;&#x4E13;&#x9898;&#x5305;&#x62EC; Title AppId List &#x6BCF;&#x4E2A;&#x5305;&#x542B;&#x5728;&#x4E13;&#x9898;&#x4E2D;&#x7684;APP&#xFF0C;&#x90FD;&#x722C;&#x53D6; Title AppId &#x7F29;&#x7565;&#x56FE; &#x4ECB;&#x7ECD; &#x4ECE;http://appstore.huawei.com/ &#x505A;&#x4E3A;&#x79CD;&#x5B50;&#xFF0C;&#x6293;&#x53D6;&#x6240;&#x6709;App&#x4FE1;&#x606F; App List&#x7684;&#x4FE1;&#x606F; App &#x7684;&#x4FE1;&#x606F; &#x63A8;&#x8350;&#x6A21;&#x5757;&#x6839;&#x636E;&#x8F93;&#x5165;&#x7684;App List&#xFF0C;&#x8F93;&#x51FA;&#x4E0E;&#x8FD9;&#x4E2A;List&#x6700;&#x76F8;&#x5173;&#x7684;App List &#x57FA;&#x7840;&#x6570;&#x636E;&#xFF1A;AppId List&#x7684;&#x96C6;&#x5408; &#x8F93;&#x5165;AppId List &#x8F93;&#x51FA;AppId List &#x7F51;&#x7AD9;&#x6A21;&#x5757;&#x9996;&#x9875; - A List of most popular Apps&#xFF08;&#x7C7B;&#x4F3C;&#x4E8E;AppStore&#x7684;Top Charts&#xFF09; Title &#x7F29;&#x7565;&#x56FE; &#x4ECB;&#x7ECD;&#x7684;&#x524D;20&#x4E2A;&#x5B57;&#x7B26; &#x8BE6;&#x60C5;&#x9875; Title &#x7F29;&#x7565;&#x56FE; &#x5B8C;&#x6574;&#x4ECB;&#x7ECD; &#x76F8;&#x5173;&#x63A8;&#x8350;&#x7684;App List &#x722C;&#x866B;&#x6A21;&#x5757;&#x7B80;&#x4ECB;Skill Python scrapy mongodb proxy scrapyjs Performance 100 pages/second(vs 30k/second) &#x722C;&#x53D6;&#x8981;&#x70B9;&#xFF1A; &#x5229;&#x7528; Proxy &#x66F4;&#x6362; user-agentsrcapy &#x53D1;&#x51FA;&#x8BF7;&#x6C42;&#x7684; user agent &#x7684;&#x9ED8;&#x8BA4;&#x503C;&#x4E3A;Scrapy&#xFF0F;version&#xFF0C;&#x548C;&#x666E;&#x901A;&#x6D4F;&#x89C8;&#x5668;&#x7684;&#x4E0D;&#x540C;&#xFF0C;&#x6240;&#x4EE5;&#x7F51;&#x7AD9;&#x5C31;&#x4F1A;&#x8BC6;&#x522B;&#x51FA;&#x8FD9;&#x4E0D;&#x662F;&#x771F;&#x7684;&#x7528;&#x6237;&#x800C;&#x662F;&#x722C;&#x866B;&#xFF0C;&#x5C31;&#x4F1A;&#x5C4F;&#x853D;&#x8FD9;&#x4E9B;&#x8BF7;&#x6C42;&#x3002;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x5C31;&#x4F7F;&#x7528; proxy &#x968F;&#x673A;&#x6A21;&#x62DF;&#x4E86;&#x4E0D;&#x540C;&#x7684; user agent &#x6765;&#x201C;&#x6B3A;&#x9A97;&#x201D;&#x7F51;&#x7AD9;&#xFF0C;&#x624D;&#x80FD;&#x6210;&#x529F;&#x5730;&#x722C;&#x53D6;&#x9875;&#x9762;&#x3002;&#x8FD9;&#x4E00;&#x90E8;&#x5206;&#x662F;&#x4F7F;&#x7528; Scrapy middleware &#x5B9E;&#x73B0;&#x7684;&#x3002;&#x535A;&#x5BA2; &#x5229;&#x7528; scrapy-redis &#x5206;&#x5E03;&#x5F0F;&#x67B6;&#x6784;&#x52A0;&#x5FEB;&#x722C;&#x53D6;&#x901F;&#x5EA6;&#x535A;&#x5BA2; &#x600E;&#x6837;&#x83B7;&#x53D6;&#x66F4;&#x591A;&#x6570;&#x636E; &#x901A;&#x8FC7;&#x76F8;&#x4F3C; app &#x901A;&#x8FC7;&#x641C;&#x7D22; &#x6269;&#x5C55;&#x94FE;&#x63A5; &#x89E3;&#x6790;&#x6D89;&#x53CA;&#x5230; &#x2018;&#x4E0B;&#x4E00;&#x9875;&#x2019; &#x7684;&#x722C;&#x53D6;&#xFF0C;&#x89C1;&#x722C;&#x866B;&#x603B;&#x7ED3;-&#x4E94;-&#x5176;&#x4ED6;&#x6280;&#x5DE7; &#x4F7F;&#x7528; scrapy-splash &#x90E8;&#x5206;&#x7684;&#x5B9E;&#x4F8B;&#x3002; &#x5B58;&#x50A8;&#x6587;&#x4EF6;appstore.dat &#x5B58;&#x50A8;&#x57FA;&#x672C;&#x4FE1;&#x606F;&#xFF0C;&#x683C;&#x5F0F; id \\t title \\t intro 12345C5683 &#x5FAE;&#x4FE1; &#x534E;&#x4E3A;&#x624B;&#x673A;&#x670D;&#x52A1;:&#x6FC0;&#x6D3B;&#x534E;&#x4E3A;&#x4F1A;&#x5458;&#xFF0C;&#x7ACB;&#x4EAB;&#x7CBE;&#x5F69;&#x6743;&#x76CA;&#xFF01; &#x66F4;&#x65B0;&#x5230;&#x624B;&#x673A;&#x670D;&#x52A1;&#x6700;&#x65B0;&#x7248;&#x672C;&#x3001;&#x514D;&#x8D39;&#x6FC0;&#x6D3B;&#x4F1A;&#x5458;&#xFF0C;&#x7ACB;&#x4EAB;&#x9AD8;&#x7EA7;&#x4E13;&#x5C5E;&#x552E;&#x540E;&#x670D;&#x52A1;&#x7279;&#x6743;&#x3001;VIP&#x5BA2;&#x670D;&#x70ED;&#x7EBF;&#xFF0C;&#x8FD8;&#x6709;160G&#x514D;&#x8D39;&#x7A7A;&#x95F4;&#x3001;&#x6D77;&#x91CF;&#x8863;&#x98DF;&#x4F4F;&#x884C;&#x793C;&#x5305;&#x3001;&#x534E;&#x4E3A;&#x5546;&#x57CE;&#x4F18;&#x60E0;&#x5238;&#x7B49;&#x4F60;&#x62A2;&#xFF01; &#x201C;&#x624B;&#x673A;&#x670D;&#x52A1;&#x201D;&#x4E3A;&#x534E;&#x4E3A;&#x7EC8;&#x7AEF;&#x7528;&#x6237;&#x63D0;&#x4F9B;&#x4E00;&#x7AD9;&#x5F0F;&#x552E;&#x540E;&#x670D;&#x52A1;&#xFF0C;&#x96C6;&#x6210;&#x534E;&#x4E3A;&#x4F1A;&#x5458;&#x3001;&#x5728;&#x7EBF;&#x5BC4;&#x4FEE;&#x3001;&#x9884;&#x7EA6;&#x7EF4;&#x4FEE;&#x3001;&#x5728;&#x7EBF;&#x5BA2;&#x670D;&#x7B49;&#x5341;&#x591A;&#x9879;&#x4E30;&#x5BCC;&#x7684;&#x5728;&#x7EBF;&#x670D;&#x52A1;&#xFF0C;&#x65E8;&#x5728;&#x4E3A;&#x4EBF;&#x4E07;&#x534E;&#x4E3A;&#x7EC8;&#x7AEF;&#x7528;&#x6237;&#x63D0;&#x4F9B;&#x4F18;&#x8D28;&#x3001;&#x7701;&#x5FC3;&#x3001;&#x5FEB;&#x6377;&#x7684;&#x670D;&#x52A1;&#x3002; &#x4E3B;&#x8981;C262 &#x53BB;&#x54EA;&#x513F;&#x65C5;&#x884C; &#x65C5;&#x6E38; &#x65C5;&#x6E38;&#xFF0C;&#x53BB;&#x54EA;&#x513F; &#x53BB;&#x54EA;&#x513F;&#xFF0C;&#x9152;&#x5E97; &#x9152;&#x5E97;&#xFF0C;&#x673A;&#x7968; &#x673A;&#x7968;&#x3001;&#x706B;&#x8F66;&#x7968;&#x706B;&#x8F66;&#x7968;&#xFF0C;&#x95E8;&#x7968;&#x95E8;&#x7968;&#xFF0C;&#x5EA6;&#x5047;&#x5EA6;&#x5047;&#xFF0C;&#x7EBF;&#x8DEF;&#x7EBF;&#x8DEF;&#xFF0C;&#x5FEB;&#x5230;&#x7897;&#x91CC;&#x6765;&#xFF01; &#x53BB;&#x54EA;&#x513F;&#x65C5;&#x884C;&#x2014;&#x603B;&#x6709;&#x4F60;&#x8981;&#x7684;&#x4F4E;&#x4EF7;&#xFF01; &#x4F5C;&#x4E3A;&#x4E2D;&#x56FD;&#x9886;&#x5148;&#x7684;&#x65E0;&#x7EBF;&#x548C;&#x5728;&#x7EBF;&#x65C5;&#x6E38;&#x5E73;&#x53F0;&#xFF0C;&#x53BB;&#x54EA;&#x513F;&#x65C5;&#x884C;&#x652F;&#x6301;&#x7528;&#x6237;&#x4F4E;&#x4EF7;&#x8D2D;&#x4E70;&#x8FD1;60&#x4E07;&#x6761;&#x56FD;&#x5185;&#x56FD;&#x9645;&#x822A;&#x7EBF;&#xFF0C;42&#x4E07;&#x5BB6;&#x56FD;&#x5185;&#x9152;&#x5E97;&#x3001;16&#x4E07;&#x5BB6;&#x56FD;&#x9645;&#x9152;&#x5E97;&#xFF1B;&#x8D85;100&#x4E07;&#x6761;&#x56FD;&#x5185;&#x5916;&#x5EA6;&#x5047;&#x7EBF;&#x8DEF;&#x548C;2&#x4E07;&#x79CD;&#x666F;&#x70B9;&#x95E8;&#x7968;&#xFF1B;&#x4EAB;&#x53D7;&#x56FD;&#x5185;160&#x5EA7;&#x57CE;&#x5E02;&#xFF0C;&#x4EE5;&#x53CA;&#x56FD;&#x5916;86&#x5EA7;&#x57CE;&#x5E02;&#x7684;C10059090 &#x534E;&#x4E3A;&#x6E38;&#x620F;&#x4E2D;&#x5FC3; &#x534E;&#x4E3A;&#x6E38;&#x620F;&#x4E2D;&#x5FC3;&#x662F;&#x534E;&#x4E3A;&#x516C;&#x53F8;&#x63D0;&#x4F9B;&#x7684;&#x5B89;&#x5353;&#x6E38;&#x620F;&#x4E0B;&#x8F7D;&#x5E73;&#x53F0;&#xFF0C;&#x6240;&#x6709;&#x6E38;&#x620F;&#x90FD;&#x7ECF;&#x8FC7;&#x4E13;&#x4E1A;&#x7684;&#x6D4B;&#x8BC4;&#x56E2;&#x961F;&#x5C42;&#x5C42;&#x68C0;&#x6D4B;&#xFF0C;&#x4E3A;&#x60A8;&#x63A8;&#x8350;&#x6700;&#x5B89;&#x5168;&#x8D28;&#x91CF;&#x6700;&#x9AD8;&#x7684;&#x6E38;&#x620F;&#x5185;&#x5BB9;&#xFF0C; &#x76EE;&#x524D;&#x6211;&#x4EEC;&#x6709;20&#x4E07;&#x6E38;&#x620F;&#x805A;&#x4F17;&#x5E73;&#x53F0;&#xFF0C;&#x4E2A;&#x6027;&#x5316;&#x4E13;&#x9898;&#x5B9A;&#x5236;&#xFF0C;&#x548C;&#x4E30;&#x5BCC;&#x591A;&#x5143;&#x7684;&#x6E38;&#x620F;&#x793C;&#x5305;&#xFF0C;&#x8FD8;&#x6709;&#x6E38;&#x620F;&#x8BBA;&#x575B;&#x4F9B;&#x5927;&#x5BB6;&#x4E92;&#x52A8;&#xFF0C;&#x534E;&#x4E3A;&#x6E38;&#x620F;&#x4E2D;&#x5FC3;&#x4E0D;&#x5355;&#x670D;&#x52A1;&#x6240;&#x6709;&#x534E;&#x4E3A;&#x7528;&#x6237;&#xFF0C;&#x8FD8;&#x652F;&#x6301;&#x56FD;&#x5185;&#x4E3B;&#x6D41;&#x5B89;&#x5353;&#x673A;&#x578B;&#x3002; &#x65B0;&#x7248;&#x672C;&#x7279;&#x6027;&#xFF1A; 1&#x3001;&#x65B0;&#x589E; &#x8D44;&#x8BAF;&#x9891;&#x9053;&#xFF0C;&#x6700;&#x65B0;&#x70ED;&#x70B9;&#x3001;&#x6700;&#x5F3A;&#x653B;&#x7565;&#x3001;&#x6700;&#x5168;&#x89C6;&#x9891;&#xFF0C;&#x5B8C;C57236 &#x4ECA;&#x65E5;&#x5934;&#x6761; &#x4ECA;&#x5929;&#xFF0C;&#x770B;&#x4ECA;&#x65E5;&#x5934;&#x6761; &#x4ECA;&#x65E5;&#x5934;&#x6761;&#xFF0C;&#x8D85;&#x8FC7; 4 &#x4EBF;&#x7528;&#x6237;&#x9009;&#x62E9;&#x7684;&#x65B0;&#x95FB;&#x8D44;&#x8BAF; App &#xFF01; &#x5355;&#x7528;&#x6237;&#x6BCF;&#x65E5;&#x4F7F;&#x7528;&#x65F6;&#x957F;&#x8D85;&#x8FC7;60&#x5206;&#x949F; &#x6BCF;&#x5929;&#x793E;&#x4EA4;&#x5E73;&#x53F0;&#x5206;&#x4EAB;&#x91CF;&#x8FBE;550&#x4E07;&#x6B21; &#x98A0;&#x8986;&#x4F20;&#x7EDF;&#x9605;&#x8BFB;&#x2014;&#x2014;&#x4EBA;&#x201C;&#x641C;&#x7D22;&#x201D;&#x8D44;&#x8BAF;&#x7684;&#x6A21;&#x5F0F;&#xFF0C;&#x8FD0;&#x7528;&#x5927;&#x6570;&#x636E;&#x7B97;&#x6CD5;&#xFF0C;&#x7CBE;&#x51C6;&#x63A8;&#x8350;&#x4F60;&#x611F;&#x5174;&#x8DA3;&#x7684;&#x5185;&#x5BB9;&#xFF0C;&#x4ECE;&#x6B64;&#x4E0D;&#x53D7;&#x5197;&#x6742;&#x4FE1;&#x606F;&#x56F0;&#x6270;&#xFF0C;&#x7545;&#x6E38;&#x4E2A;&#x6027;&#x5316;&#x4FE1;&#x606F;&#x6D77;&#x6D0B;&#xFF0C;&#x8BA9;&#x4F60;&#x7684;&#x9605;&#x8BFB;&#x66F4;&#x52A0;&#x6709;&#x7528;&#x9AD8;&#x6548;&#x3002; &#x3010;&#x6D77;&#x91CF;&#x5185;&#x5BB9;&#x6E90;&#x3011; &#x805A;&#x5408;&#x8D85;&#x8FC7;5000C10217244 &#x534E;&#x4E3A;&#x94B1;&#x5305; &#x534E;&#x4E3A;&#x94B1;&#x5305;:1.&#x201C;&#x7EA2;&#x9152;&#x201D;&#x9891;&#x9053;&#xFF0C;&#x7CBE;&#x9009;&#x83AB;&#x585E;&#x5C14;&#x591A;&#x6B3E;&#x8FDB;&#x53E3;&#x7EA2;&#x9152;&#xFF0C;&#x4EAB;&#x53D7;&#x534E;&#x4E3A;&#x7279;&#x60E0;&#x4EF7;&#x683C;&#xFF0C;&#x8BA9;&#x4F60;&#x8DB3;&#x4E0D;&#x51FA;&#x6237;&#x54C1;&#x5C1D;&#x4E16;&#x754C;&#x5404;&#x5730;&#x7684;&#x8461;&#x8404;&#x4F73;&#x917F;&#xFF01; 2. &#x201C;&#x94B1;&#x5305;&#x201D;&#x6709;&#x751F;&#x6D3B;&#x670D;&#x52A1;&#x3001;&#x82B1;&#x5E01;&#x4E2D;&#x5FC3;&#x3001;&#x7EA2;&#x9152;&#x7B49;&#x9891;&#x9053;&#xFF0C;&#x805A;&#x5408;&#x4F18;&#x8D28;&#x670D;&#x52A1;&#xFF0C;&#x63D0;&#x4F9B;&#x8D85;&#x503C;&#x4F53;&#x9A8C;&#x3002; 3. NFC&#x7EBF;&#x4E0B;&#x652F;&#x4ED8;&#xFF0C;&#x96C6;&#x624B;&#x673A;&#x652F;&#x4ED8;&#x548C;&#x7EBF;&#x4E0B;&#x5237;&#x5361;&#x4E3A;&#x4E00;&#x4F53;&#xFF0C;&#x4EAB;&#x53D7;&#x5B89;&#x5168;&#x5FEB;&#x6377;&#x7684;&#x652F;&#x4ED8;&#x4F53;&#x9A8C;&#xFF0C;&#x7701;&#x53BB;&#x4E86;&#x968F;&#x8EAB;&#x643A;&#x5E26;&#x94B1;&#x5305;&#x3001;&#x73B0;&#x91D1;&#x548C;&#x94F6;&#x884C;&#x5361;&#x7684;&#x9EBB;&#x70E6;&#x3002;&#xFF08;NFC&#x652F;&#x4ED8;&#x529F;&#x80FD;&#x5F53;&#x524D;&#x652F;&#x6301;&#x8363;&#x8000;V8&#x5168;&#x7F51;&#x901A;&#x7248;&#x3001;Mate S appstore_re.dat &#x5B58;&#x50A8;&#x63A8;&#x8350;&#x4FE1;&#x606F;&#xFF0C;&#x683C;&#x5F0F; id \\t url \\t title \\t recommended_appid 1234C5683 http://appstore.huawei.com:80/app/C5683 &#x5FAE;&#x4FE1; C2543:QQ&#x540C;&#x6B65;&#x52A9;&#x624B;,C9319:QQ,C5373:&#x652F;&#x4ED8;&#x5B9D;,C2682:&#x641C;&#x72D7;&#x8F93;&#x5165;&#x6CD5;,C3466:&#x9177;&#x72D7;&#x97F3;&#x4E50;,C54626:&#x94C3;&#x58F0;&#x591A;&#x591A;,C2861:&#x540C;&#x82B1;&#x987A;&#x7092;&#x80A1;,C36902:WiFi&#x4E07;&#x80FD;&#x94A5;&#x5319;,C104688:&#x817E;&#x8BAF;&#x65B0;&#x95FB;,C21976:UC&#x6D4F;&#x89C8;&#x5668;,C5683:&#x5FAE;&#x4FE1;,C9319:QQ,C7166:&#x5FAE;&#x535A;,C10085602:&#x82B1;&#x7C89;&#x4FF1;&#x4E50;&#x90E8;,C23563:&#x964C;&#x964C;,C10154337:&#x6613;&#x4FE1;,C37549:189&#x90AE;&#x7BB1;,C2543:QQ&#x540C;&#x6B65;&#x52A9;&#x624B;,C10405418:QQ&#x90AE;&#x7BB1;,C19185:&#x767E;&#x5EA6;&#x8D34;&#x5427;,C262 http://appstore.huawei.com:80/app/C262 &#x53BB;&#x54EA;&#x513F;&#x65C5;&#x884C; C6006:&#x8682;&#x8702;&#x7A9D;&#x81EA;&#x7531;&#x884C;,C5157:&#x643A;&#x7A0B;&#x65C5;&#x884C;,C30591:&#x9014;&#x725B;&#x65C5;&#x6E38;,C10770:&#x963F;&#x91CC;&#x65C5;&#x884C;,C69056:&#x9A74;&#x5988;&#x5988;&#x65C5;&#x6E38;,C10027123:&#x822A;&#x65C5;&#x7EB5;&#x6A2A;,C12192:&#x540C;&#x7A0B;&#x65C5;&#x6E38;,C10141560:&#x98DE;&#x5E38;&#x51C6;,C10017070:&#x9AD8;&#x94C1;&#x7BA1;&#x5BB6;,C10226376:&#x795E;&#x5DDE;&#x4E13;&#x8F66;,C3382:&#x767E;&#x5EA6;&#x5730;&#x56FE;,C20911:&#x9AD8;&#x5FB7;&#x5730;&#x56FE;,C262:&#x53BB;&#x54EA;&#x513F;&#x65C5;&#x884C;,C5157:&#x643A;&#x7A0B;&#x65C5;&#x884C;,C10047107:&#x6EF4;&#x6EF4;&#x51FA;&#x884C;,C5745:&#x5929;&#x7FFC;&#x5BFC;&#x822A;,C3403:&#x9AD8;&#x5FB7;&#x5BFC;&#x822A;,C10239309:&#x4F18;&#x6B65; - Uber,C39196:&#x827A;&#x9F99;&#x65C5;&#x884C;,C10043914:&#x548C;&#x5730;&#x56FE;,C10059090 http://appstore.huawei.com:80/app/C10059090 &#x534E;&#x4E3A;&#x6E38;&#x620F;&#x4E2D;&#x5FC3; C10217244:&#x534E;&#x4E3A;&#x94B1;&#x5305;,C10085602:&#x82B1;&#x7C89;&#x4FF1;&#x4E50;&#x90E8;,C10173884:&#x5929;&#x9F99;&#x516B;&#x90E8;3D,C10055832:&#x534E;&#x4E3A;&#x6587;&#x4EF6;&#x7BA1;&#x7406;,C10207207:&#x534E;&#x4E3A;&#x4E91;&#x670D;&#x52A1;,C10049053:&#x534E;&#x4E3A;&#x5546;&#x57CE;,C10242764:&#x68A6;&#x5E7B;&#x897F;&#x6E38;,C27162:&#x534E;&#x4E3A;&#x5E94;&#x7528;&#x5E02;&#x573A;,C10126869:&#x5200;&#x5854;&#x4F20;&#x5947;,C66323:&#x534E;&#x4E3A;&#x5907;&#x4EFD;,C36902:WiFi&#x4E07;&#x80FD;&#x94A5;&#x5319;,C27162:&#x534E;&#x4E3A;&#x5E94;&#x7528;&#x5E02;&#x573A;,C10055832:&#x534E;&#x4E3A;&#x6587;&#x4EF6;&#x7BA1;&#x7406;,C66323:&#x534E;&#x4E3A;&#x5907;&#x4EFD;,C21976:UC&#x6D4F;&#x89C8;&#x5668;,C10067631:&#x534E;&#x4E3A;&#x624B;&#x673A;&#x670D;&#x52A1;,C20679:QQ&#x6D4F;&#x89C8;&#x5668;,C10207207:&#x534E;&#x4E3A;&#x4E91;&#x670D;&#x52A1;,C10059090:&#x534E;&#x4E3A;&#x6E38;&#x620F;&#x4E2D;&#x5FC3;,C10132067:&#x534E;&#x4E3A;&#x5E10;&#x53F7;,C57236 http://appstore.huawei.com:80/app/C57236 &#x4ECA;&#x65E5;&#x5934;&#x6761; C19168:&#x51E4;&#x51F0;&#x65B0;&#x95FB;,C9147:&#x7F51;&#x6613;&#x65B0;&#x95FB;,C2022:&#x641C;&#x72D0;&#x65B0;&#x95FB;,C104688:&#x817E;&#x8BAF;&#x65B0;&#x95FB;,C31975:&#x58A8;&#x8FF9;&#x5929;&#x6C14;,C40238:&#x5185;&#x6DB5;&#x6BB5;&#x5B50;,C3386:&#x6C7D;&#x8F66;&#x4E4B;&#x5BB6;,C20960:&#x641C;&#x72D0;&#x89C6;&#x9891;,C3382:&#x767E;&#x5EA6;&#x5730;&#x56FE;,C2217:&#x6211;&#x67E5;&#x67E5;,C57236:&#x4ECA;&#x65E5;&#x5934;&#x6761;,C9147:&#x7F51;&#x6613;&#x65B0;&#x95FB;,C2022:&#x641C;&#x72D0;&#x65B0;&#x95FB;,C104688:&#x817E;&#x8BAF;&#x65B0;&#x95FB;,C179773:&#x7231;&#x8BFB;&#x638C;&#x9605;,C149006:&#x5854;&#x8BFB;&#x6587;&#x5B66;,C28837:ZAKER,C86189:&#x7231;&#x52A8;&#x6F2B;,C2034:&#x5929;&#x7FFC;&#x9605;&#x8BFB;,C10084466:&#x54AA;&#x5495;&#x9605;&#x8BFB;, app_info.json &#x5B58;&#x50A8; app &#x6240;&#x6709;&#x4FE1;&#x606F;12{&quot;title&quot;: &quot;&#x534E;&#x4E3A;&#x5546;&#x57CE;&quot;, &quot;url&quot;: &quot;http://appstore.huawei.com:80/app/C10049053&quot;, &quot;app_id&quot;: &quot;C10049053&quot;, &quot;recommended&quot;: &quot;C10085602:&#x82B1;&#x7C89;&#x4FF1;&#x4E50;&#x90E8;,C10217244:&#x534E;&#x4E3A;&#x94B1;&#x5305;,C10168550:&#x4EB2;&#x60C5;&#x5173;&#x6000;,C10055832:&#x534E;&#x4E3A;&#x6587;&#x4EF6;&#x7BA1;&#x7406;,C10060708:&#x534E;&#x4E3A;&#x652F;&#x4ED8;,C10067631:&#x534E;&#x4E3A;&#x624B;&#x673A;&#x670D;&#x52A1;,C10132067:&#x534E;&#x4E3A;&#x5E10;&#x53F7;,C10465316:&#x534E;&#x4E3A;&#x4F17;&#x6D4B;,C10207207:&#x534E;&#x4E3A;&#x4E91;&#x670D;&#x52A1;,C66323:&#x534E;&#x4E3A;&#x5907;&#x4EFD;,C34075:&#x624B;&#x673A;&#x6DD8;&#x5B9D;,C10049053:&#x534E;&#x4E3A;&#x5546;&#x57CE;,C5206:&#x7F8E;&#x56E2;&#x56E2;&#x8D2D;,C10608:&#x5927;&#x4F17;&#x70B9;&#x8BC4;,C57804:&#x5929;&#x732B;,C20252:&#x624B;&#x673A;&#x4EAC;&#x4E1C;,C9136:&#x552F;&#x54C1;&#x4F1A;,C10116109:&#x767E;&#x5EA6;&#x7CEF;&#x7C73;,C41277:&#x82CF;&#x5B81;&#x6613;&#x8D2D;,C10284106:&#x7F8E;&#x4E3D;&#x8BF4;,&quot;, &quot;score&quot;: &quot;8&quot;, &quot;thumbnail_url&quot;: &quot;http://appimg.hicloud.com/hwmarket/files/application/icon144/ea05c760d27f4b58bd6e8b8e88fdc127.png&quot;, &quot;intro&quot;: &quot;&#x3010;&#x534E;&#x4E3A;&#x5546;&#x57CE;&#x5BA2;&#x6237;&#x7AEF; &#x6211;&#x7684;&#x638C;&#x4E0A;&#x8D2D;&#x673A;&#x795E;&#x5668;&#x3011; &#x9884;&#x7EA6;&#x62A2;&#x8D2D;&#x534E;&#x4E3A;&#x3001;&#x8363;&#x8000;&#x65B0;&#x54C1;&#xFF0C;&#x534E;&#x4E3A;&#x5B98;&#x65B9;&#x5546;&#x57CE;&#xFF0C;&#x503C;&#x5F97;&#x4FE1;&#x8D56;&#xFF01;HUAWEI P9&#x3001;&#x8363;&#x8000;V8&#x3001;&#x8363;&#x8000;&#x7545;&#x73A9;5X&#x3001;HUAWEI Mate8&#x3001;&#x8363;&#x8000;7&#x7B49;&#x4F17;&#x591A;&#x70ED;&#x95E8;&#x624B;&#x673A;&#x53CA;&#x4E30;&#x5BCC;&#x7684;&#x914D;&#x4EF6;&#xFF0C;&#x6BCF;&#x6708;&#x4FC3;&#x9500;&#x6D3B;&#x52A8;&#x4E0D;&#x65AD;&#xFF0C;&#x7EA2;&#x5305;&#x75AF;&#x72C2;&#x9001;&#xFF0C;&#x62BD;&#x5956;&#x73A9;&#x4E0D;&#x505C;&#xFF01; 1&#x3001;&#x638C;&#x4E0A;&#x8D2D;&#x673A;&#x795E;&#x5668; &#x6BCF;&#x5468;&#x4E09;&#x79FB;&#x52A8;&#x7AEF;&#x4E13;&#x573A;&#xFF0C;&#x624B;&#x673A;&#x62A2;&#x8D2D;&#x66F4;&#x4FBF;&#x6377;&#xFF1B; &#x95F9;&#x949F;&#x63D0;&#x9192;&#xFF0C;&#x624B;&#x673A;&#x62A2;&#x8D2D;&#x4E0D;&#x518D;&#x9519;&#x8FC7;&#xFF1B;&lt;b&quot;, &quot;developer&quot;: &quot;&#x534E;&#x4E3A;&#x7EC8;&#x7AEF;&#x6709;&#x9650;&#x516C;&#x53F8;&quot;}{&quot;title&quot;: &quot;&#x5FAE;&#x535A;&quot;, &quot;url&quot;: &quot;http://appstore.huawei.com:80/app/C7166&quot;, &quot;app_id&quot;: &quot;C7166&quot;, &quot;recommended&quot;: &quot;C10084137:&#x65B0;&#x6D6A;&#x5FAE;&#x535A;(G3&#x7248;&#x2026;,C6056298:VSCO Cam&#x2122;,C19185:&#x767E;&#x5EA6;&#x8D34;&#x5427;,C10159988:in,C10047082:&#x77E5;&#x4E4E;,C10204517:MIX,C10125085:&#x54D4;&#x54E9;&#x54D4;&#x54E9;&#x52A8;&#x753B;,C10318669:PicsArt,C10231827:&#x5FEB;&#x770B;&#x6F2B;&#x753B;,C10168892:&#x7F51;&#x6613;&#x4E91;&#x97F3;&#x4E50;,C5683:&#x5FAE;&#x4FE1;,C9319:QQ,C7166:&#x5FAE;&#x535A;,C10085602:&#x82B1;&#x7C89;&#x4FF1;&#x4E50;&#x90E8;,C23563:&#x964C;&#x964C;,C10154337:&#x6613;&#x4FE1;,C37549:189&#x90AE;&#x7BB1;,C2543:QQ&#x540C;&#x6B65;&#x52A9;&#x624B;,C10405418:QQ&#x90AE;&#x7BB1;,C19185:&#x767E;&#x5EA6;&#x8D34;&#x5427;,&quot;, &quot;score&quot;: &quot;10&quot;, &quot;thumbnail_url&quot;: &quot;http://appimg.hicloud.com/hwmarket/files/application/icon144/a885314b6da5496084f009a43226dabf.png&quot;, &quot;intro&quot;: &quot;&#x5173;&#x4E8E;&#x767E;&#x679C;&#x56ED;&#xFF1A; &#x767E;&#x679C;&#x56ED;&#xFF0C;&#x6DF1;&#x8015;&#x6C34;&#x679C;&#x884C;&#x4E1A;15&#x5E74;&#x6C34;&#x679C;&#x8FDE;&#x9501;&#x54C1;&#x724C;&#xFF0C;&#x9996;&#x521B;&#x6C34;&#x679C;&#x5206;&#x7EA7;&#x6807;&#x51C6;&#x3002; &#x4ECE;2001&#x5E74;&#x767E;&#x679C;&#x56ED;&#x521B;&#x7ACB;&#x4E4B;&#x65E5;&#x8D77;&#xFF0C;&#x4FE1;&#x5B88;&#x201C;&#x4E00;&#x751F;&#x53EA;&#x505A;&#x4E00;&#x4EF6;&#x4E8B;&#xFF0C;&#x4E00;&#x5FC3;&#x4E00;&#x610F;&#x505A;&#x6C34;&#x679C;&#x201D;&#x7684;&#x627F;&#x8BFA;&#xFF0C;15&#x5E74;&#x8F9B;&#x52E4;&#x8015;&#x8018;&#xFF0C;&#x53EA;&#x4E3A;&#x8BA9;&#x5168;&#x5929;&#x4E0B;&#x4EBA;&#x4EAB;&#x53D7;&#x6C34;&#x679C;&#x597D;&#x751F;&#x6D3B;&#x3002; &#x76EE;&#x524D;&#x5DF2;&#x7ECF;&#x5728;&#x4E91;&#x5357;&#x3001;&#x56DB;&#x5DDD;&#x3001;&#x9655;&#x897F;&#x3001;&#x5C71;&#x897F;&#x3001;&#x5C71;&#x4E1C;&#x3001;&#x6C5F;&#x82CF;&#x3001;&#x6D77;&#x5357;&#x7B49;&#x7701;&#x4EFD;&#x4EE5;&#x53CA;&#x7F8E;&#x56FD;&#x3001;&#x65B0;&#x897F;&#x5170;&#x7B49;&#x56FD;&#x5BB6;&#x5EFA;&#x7ACB;&#x4E86;100&#x591A;&#x4E2A;&#x6C34;&#x679C;&#x751F;&#x4EA7;&#x57FA;&#x5730;&#xFF0C;&#x540C;&#x65F6;&#x914D;&#x6709;&#x4ECE;&#x679C;&#x56ED;&#x5230;&#x95E8;&#x5E97;&quot;, &quot;developer&quot;: &quot;&#x65B0;&#x6D6A;&#x7F51;&#x6280;&#x672F;&#xFF08;&#x4E2D;&#x56FD;&#xFF09;&#x6709;&#x9650;&#x516C;&#x53F8;&quot;} MongoDBMongoDB &#x4E2D;&#x65B0;&#x5EFA; database appstore&#xFF0C;&#x65B0;&#x5EFA; collections user_download_history &#x548C; app_info&#xFF0C;&#x5BFC;&#x5165;&#x76F8;&#x5E94;&#x6587;&#x4EF6;&#x3002;&#x5C06;&#x6587;&#x4EF6;&#x5BFC;&#x5165; MongoDB&#x3002; $ mongoimport --db appstore --collection user_download_history --drop --file user_download_history.json $ mongoimport --db appstore --collection app_info --drop --file app_info.json 123&gt; db.app_info.find(){ &quot;_id&quot; : ObjectId(&quot;577cbfade677be6b09d8dc2c&quot;), &quot;score&quot; : &quot;8&quot;, &quot;title&quot; : &quot;&#x679C;&#x6C41;&#x56DB;&#x6E85;&quot;, &quot;url&quot; : &quot;http://appstore.huawei.com:80/app/C10204319&quot;, &quot;app_id&quot; : &quot;C10204319&quot;, &quot;thumbnail_url&quot; : &quot;http://appimg.hicloud.com/hwmarket/files/application/icon144/f986a241d80d46fcb4fecc1e85121a60.png&quot;, &quot;intro&quot; : &quot;&#x3010;&#x679C;&#x6C41;&#x56DB;&#x6E85;&#x3011;&#x5E74;&#x5EA6;&#x6700;&#x201C;&#x6E85;&#x201D;&#x7684;&#x6D88;&#x9664;&#x6E38;&#x620F;&#xFF01;&#x9996;&#x53D1;&#x5927;&#x5956;10&#x53F0;iphone6&#x6E85;&#x5230;&#x4F60;&#x624B;&#xFF01; &#x2605;&#x5168;&#x7403;50&#x591A;&#x4E2A;&#x56FD;&#x5BB6;APP&#x5546;&#x5E97;&#x63A8;&#x8350;&#x2605; &#x2605;30&#x4E2A;&#x56FD;&#x5BB6;&#x684C;&#x9762;&#x6E38;&#x620F;&#x6392;&#x540D;&#x7B2C;&#x4E00;&#x2605; &#x2605;5000&#x4E07;&#x73A9;&#x5BB6;&#x4E94;&#x661F;&#x597D;&#x8BC4;&#x2605; &#x6E38;&#x620F;&#x7279;&#x8272;&#xFF1A; &#x3010;&#x4E03;&#x5927;&#x65B0;&#x73A9;&#x6CD5;&#xFF0C;&#x9177;&#x70AB;&#x62FD;&#xFF01;&#x53FC;&#x548B;&#x5929;&#xFF01;&#x3011; &#x3010;250&#x5173;&#x6311;&#x6218;&#x6781;&#x9650;&#xFF01;&#x6551;&#x6551;&#x6C34;&#x679C;&#x541B;&#x3011; &#x3010;&#x679C;&#x6C41;&#x7206;&#x6E85;&#xFF0C;&#x840C;&#x7FFB;&#x5168;&#x573A;&#xFF01;&#x3011; &#x9996;&#x53D1;&quot;, &quot;developer&quot; : &quot;&#x6DF1;&#x5733;&#x5E02;&#x552F;&#x53D8;&#x79D1;&#x6280;&#x5F00;&#x53D1;&#x6709;&#x9650;&#x516C;&#x53F8;&quot; }{ &quot;_id&quot; : ObjectId(&quot;577cbfade677be6b09d8dc2d&quot;), &quot;score&quot; : &quot;9&quot;, &quot;title&quot; : &quot;&#x6CE1;&#x6CE1;&#x9F99;&#x4E9A;&#x7279;&#x5170;&#x8482;&#x65AF;&quot;, &quot;url&quot; : &quot;http://appstore.huawei.com:80/app/C10145675&quot;, &quot;app_id&quot; : &quot;C10145675&quot;, &quot;thumbnail_url&quot; : &quot;http://appimg.hicloud.com/hwmarket/files/application/icon144/cb3c6ce12b73424990921097fe20a7b1.png&quot;, &quot;intro&quot; : &quot;&#x6CE1;&#x6CE1;&#x9F99;&#x4E9A;&#x7279;&#x5170;&#x8482;&#x65AF;:&#x4E00;&#x6B3E;&#x4EE4;&#x4EBA;&#x7740;&#x8FF7;&#x7684;&#x6CE1;&#x6CE1;&#x9F99;&#x6E38;&#x620F;&#x3002;&#x5728;&#x7ECF;&#x5178;&#x7684;&#x6E38;&#x620F;&#x6A21;&#x5F0F;&#x4E2D;&#x589E;&#x52A0;&#x4E86;&#x72EC;&#x6709;&#x7684;BOSS&#x6218;&#xFF0C;&#x6BCF;&#x4E2A;&#x573A;&#x666F;&#x90FD; &#x6709;&#x72EC;&#x7279;&#x7684;&#x5B88;&#x62A4;&#x8005;&#x7B49;&#x5F85;&#x4F60;&#x7684;&#x6311;&#x6218;&#x3002;&#x591A;&#x79CD;&#x591A;&#x6837;&#x7684;&#x5947;&#x8DA3;&#x9053;&#x5177;&#x4F9B;&#x4F60;&#x4F7F;&#x7528;&#x3002;&#x6253;BOSS&#xFF0C;&#x79C0;&#x64CD;&#x4F5C;&#xFF0C;&#x800D;&#x9053;&#x5177;&#x8BA9;&#x4F60;&#x7231;&#x4E0D;&#x91CA;&#x624B;&#x3002;&#x6B22;&#x4E50;&#x4E4B;&#x65C5;&#x7531;&#x4E00;&#x6BB5;&#x7F8E;&#x4E3D;&#x7684;&#x6545;&#x4E8B;&#x5E26;&#x4F60;&#x8FDB;&#x5165;&#x3002;&#x524D;&#x6240;&#x672A;&#x6709;&#x7684;&#x4F53;&#x9A8C;&#xFF0C;&#x5E26;&#x7ED9;&#x4F60;&#x795E;&#x5947;&#x7684;&#x4E9A;&#x7279;&#x5170;&#x8482;&#x65AF;&#x4E4B;&#x65C5;&#x3002;&quot;, &quot;developer&quot; : &quot;&#x6DF1;&#x5733;&#x5E02;&#x7075;&#x6E38;&#x79D1;&#x6280;&#x6709;&#x9650;&#x516C;&#x53F8;&quot; } 123&gt; db.user_download_history.find(){ &quot;_id&quot; : ObjectId(&quot;5691f793f0fe47e651ba1a52&quot;), &quot;user_id&quot; : 3, &quot;download_history&quot; : [ &quot;C10249215&quot;, &quot;C10221865&quot;, &quot;C10269239&quot;, &quot;C10157957&quot;, &quot;C10148546&quot;, &quot;C10241662&quot;, &quot;C10203747&quot;, &quot;C10144080&quot;, &quot;C10136202&quot;, &quot;C10271994&quot; ] }{ &quot;_id&quot; : ObjectId(&quot;5691f793f0fe47e651ba1a53&quot;), &quot;user_id&quot; : 4, &quot;download_history&quot; : [ &quot;C10026769&quot;, &quot;C10053551&quot;, &quot;C10237091&quot;, &quot;C10141383&quot;, &quot;C10162014&quot;, &quot;C10148546&quot; ] } &#x63A8;&#x8350;&#x6A21;&#x5757;&#x7B80;&#x4ECB;Skill Python collaborative-filtering algorithm cosine_similarity Performance 1 second/app(vs with 10ms/app) &#x63A8;&#x8350;&#x7B97;&#x6CD5;&#x534F;&#x540C;&#x8FC7;&#x6EE4;&#x7B97;&#x6CD5;&#x7B80;&#x8FF0;&#x57FA;&#x4E8E;&#x7528;&#x6237;&#x7684;&#x534F;&#x540C;&#x8FC7;&#x6EE4;&#x7B97;&#x6CD5;&#xFF08;User CF&#xFF09;&#x5F3A;&#x8C03; &#x628A;&#x548C;&#x4F60;&#x6709;&#x76F8;&#x4F3C;&#x7231;&#x597D;&#x7684;&#x5176;&#x4ED6;&#x7684;&#x7528;&#x6237;&#x7684;&#x7269;&#x54C1;&#x63A8;&#x8350;&#x7ED9;&#x4F60;&#x57FA;&#x4E8E;&#x7528;&#x6237;&#x5BF9;&#x7269;&#x54C1;&#x7684;&#x504F;&#x597D;&#x627E;&#x5230;&#x76F8;&#x90BB;&#x90BB;&#x5C45;&#x7528;&#x6237;&#xFF0C;&#x7136;&#x540E;&#x5C06;&#x90BB;&#x5C45;&#x7528;&#x6237;&#x559C;&#x6B22;&#x7684;&#x63A8;&#x8350;&#x7ED9;&#x5F53;&#x524D;&#x7528;&#x6237;&#x3002; &#x8FC7;&#x7A0B;&#xFF1A; &#x5C06;&#x4E00;&#x4E2A;&#x7528;&#x6237;&#x5BF9;&#x6240;&#x6709;&#x7269;&#x54C1;&#x7684;&#x504F;&#x597D;&#x4F5C;&#x4E3A;&#x4E00;&#x4E2A;&#x5411;&#x91CF;&#x6765;&#x8BA1;&#x7B97;&#x7528;&#x6237;&#x4E4B;&#x95F4;&#x7684;&#x76F8;&#x4F3C;&#x5EA6;&#xFF0C;&#x627E;&#x5230;&#x548C;&#x76EE;&#x6807;&#x7528;&#x6237;&#x5174;&#x8DA3;&#x76F8;&#x4F3C;&#x7684;&#x7528;&#x6237;&#x96C6;&#x5408;&#xFF1B; &#x627E;&#x5230;&#x8FD9;&#x4E2A;&#x96C6;&#x5408;&#x4E2D;&#x7684;&#x7528;&#x6237;&#x559C;&#x6B22;&#x7684;&#xFF0C;&#x4E14;&#x76EE;&#x6807;&#x7528;&#x6237;&#x6CA1;&#x6709;&#x8BBF;&#x95EE;&#x8FC7;&#x7684;&#x7269;&#x54C1;&#xFF0C;&#x8BA1;&#x7B97;&#x5F97;&#x5230;&#x4E00;&#x4E2A;&#x6392;&#x5E8F;&#x7684;&#x7269;&#x54C1;&#x5217;&#x8868;&#x4F5C;&#x4E3A;&#x63A8;&#x8350;&#x3002; &#x4F18;&#x70B9;&#x548C;&#x9002;&#x7528;&#x573A;&#x666F;&#xFF1A; &#x53EF;&#x4EE5;&#x53D1;&#x73B0;&#x7528;&#x6237;&#x611F;&#x5174;&#x8DA3;&#x7684;&#x70ED;&#x95E8;&#x7269;&#x54C1; &#x7528;&#x6237;&#x6709;&#x65B0;&#x884C;&#x4E3A;&#xFF0C;&#x4E0D;&#x4E00;&#x5B9A;&#x9020;&#x6210;&#x63A8;&#x8350;&#x7ED3;&#x679C;&#x7684;&#x7ACB;&#x5373;&#x53D8;&#x5316; &#x9002;&#x7528;&#x4E8E;&#x7528;&#x6237;&#x8F83;&#x5C11;&#x7684;&#x573A;&#x5408;&#xFF0C;&#x5426;&#x5219;&#x7528;&#x6237;&#x76F8;&#x4F3C;&#x5EA6;&#x77E9;&#x9635;&#x8BA1;&#x7B97;&#x4EE3;&#x4EF7;&#x5F88;&#x5927; &#x9002;&#x5408;&#x65F6;&#x6548;&#x6027;&#x8F83;&#x5F3A;&#xFF0C;&#x7528;&#x6237;&#x4E2A;&#x6027;&#x5316;&#x5174;&#x8DA3;&#x4E0D;&#x592A;&#x660E;&#x663E;&#x7684;&#x9886;&#x57DF; &#x7F3A;&#x70B9;&#xFF1A; &#x6570;&#x636E;&#x7A00;&#x758F;&#x6027;&#x3002;&#x4E00;&#x4E2A;&#x5927;&#x578B;&#x7684;&#x7535;&#x5B50;&#x5546;&#x52A1;&#x63A8;&#x8350;&#x7CFB;&#x7EDF;&#x4E00;&#x822C;&#x6709;&#x975E;&#x5E38;&#x591A;&#x7684;&#x7269;&#x54C1;&#xFF0C;&#x7528;&#x6237;&#x53EF;&#x80FD;&#x4E70;&#x7684;&#x5176;&#x4E2D;&#x4E0D;&#x5230;1%&#x7684;&#x7269;&#x54C1;&#xFF0C;&#x4E0D;&#x540C;&#x7528;&#x6237;&#x4E4B;&#x95F4;&#x4E70;&#x7684;&#x7269;&#x54C1;&#x91CD;&#x53E0;&#x6027;&#x8F83;&#x4F4E;&#xFF0C;&#x5BFC;&#x81F4;&#x7B97;&#x6CD5;&#x65E0;&#x6CD5;&#x627E;&#x5230;&#x4E00;&#x4E2A;&#x7528;&#x6237;&#x7684;&#x90BB;&#x5C45;&#xFF0C;&#x5373;&#x504F;&#x597D;&#x76F8;&#x4F3C;&#x7684;&#x7528;&#x6237;&#x3002; &#x7B97;&#x6CD5;&#x6269;&#x5C55;&#x6027;&#x3002;&#x6700;&#x8FD1;&#x90BB;&#x5C45;&#x7B97;&#x6CD5;&#x7684;&#x8BA1;&#x7B97;&#x91CF;&#x968F;&#x7740;&#x7528;&#x6237;&#x548C;&#x7269;&#x54C1;&#x6570;&#x91CF;&#x7684;&#x589E;&#x52A0;&#x800C;&#x589E;&#x52A0;&#xFF0C;&#x4E0D;&#x9002;&#x5408;&#x6570;&#x636E;&#x91CF;&#x5927;&#x7684;&#x60C5;&#x51B5;&#x4F7F;&#x7528;&#x3002; &#x5BF9;&#x65B0;&#x7528;&#x6237;&#x4E0D;&#x53CB;&#x597D;&#xFF0C;&#x5BF9;&#x65B0;&#x7269;&#x54C1;&#x53CB;&#x597D;&#xFF0C;&#x56E0;&#x4E3A;&#x7528;&#x6237;&#x76F8;&#x4F3C;&#x5EA6;&#x77E9;&#x9635;&#x4E0D;&#x80FD;&#x5B9E;&#x65F6;&#x8BA1;&#x7B97; &#x5F88;&#x96BE;&#x63D0;&#x4F9B;&#x4EE4;&#x7528;&#x6237;&#x4FE1;&#x670D;&#x7684;&#x63A8;&#x8350;&#x89E3;&#x91CA; &#x57FA;&#x4E8E;&#x7269;&#x54C1;&#x7684;&#x534F;&#x540C;&#x8FC7;&#x6EE4;&#x7B97;&#x6CD5;&#x5F3A;&#x8C03; &#x628A;&#x548C;&#x4F60;&#x559C;&#x6B22;&#x7684;&#x7269;&#x54C1;&#x76F8;&#x4F3C;&#x7684;&#x7269;&#x54C1;&#x63A8;&#x8350;&#x7ED9;&#x4F60;&#x57FA;&#x4E8E;&#x7269;&#x54C1;&#x7684; CF &#x7684;&#x539F;&#x7406;&#x548C;&#x57FA;&#x4E8E;&#x7528;&#x6237;&#x7684; CF &#x7C7B;&#x4F3C;&#xFF0C;&#x53EA;&#x662F;&#x5728;&#x8BA1;&#x7B97;&#x90BB;&#x5C45;&#x65F6;&#x91C7;&#x7528;&#x7269;&#x54C1;&#x672C;&#x8EAB;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x4ECE;&#x7528;&#x6237;&#x7684;&#x89D2;&#x5EA6;&#x3002;&#x5728;&#x4EAC;&#x4E1C;&#x3001;&#x5929;&#x732B;&#x4E0A;&#x770B;&#x5230;&#x300C;&#x8D2D;&#x4E70;&#x4E86;&#x8BE5;&#x5546;&#x54C1;&#x7684;&#x7528;&#x6237;&#x4E5F;&#x7ECF;&#x5E38;&#x8D2D;&#x4E70;&#x7684;&#x5176;&#x4ED6;&#x5546;&#x54C1;&#x300D;&#xFF0C;&#x5C31;&#x662F;&#x4E3B;&#x8981;&#x57FA;&#x4E8E; ItemBasedCF&#x3002; &#x8FC7;&#x7A0B;&#xFF1A; &#x57FA;&#x4E8E;&#x7528;&#x6237;&#x5BF9;&#x7269;&#x54C1;&#x7684;&#x504F;&#x597D;&#x8BA1;&#x7B97;&#x76F8;&#x4F3C;&#x5EA6;&#xFF0C;&#x627E;&#x5230;&#x76F8;&#x4F3C;&#x7684;&#x7269;&#x54C1;&#xFF1B; &#x6839;&#x636E;&#x7269;&#x54C1;&#x7684;&#x76F8;&#x4F3C;&#x5EA6;&#x548C;&#x7528;&#x6237;&#x7684;&#x5386;&#x53F2;&#x884C;&#x4E3A;&#x9884;&#x6D4B;&#x5F53;&#x524D;&#x7528;&#x6237;&#x8FD8;&#x6CA1;&#x6709;&#x8868;&#x793A;&#x504F;&#x597D;&#x7684;&#x7269;&#x54C1;&#xFF0C;&#x8BA1;&#x7B97;&#x5F97;&#x5230;&#x4E00;&#x4E2A;&#x6392;&#x5E8F;&#x7684;&#x7269;&#x54C1;&#x5217;&#x8868;&#x4F5C;&#x4E3A;&#x63A8;&#x8350;&#x3002; &#x56E0;&#x4E3A;&#x7269;&#x54C1;&#x76F4;&#x63A5;&#x7684;&#x76F8;&#x4F3C;&#x6027;&#x76F8;&#x5BF9;&#x6BD4;&#x8F83;&#x56FA;&#x5B9A;&#xFF0C;&#x6240;&#x4EE5;&#x53EF;&#x4EE5;&#x9884;&#x5148;&#x5728;&#x7EBF;&#x4E0B;&#x8BA1;&#x7B97;&#x597D;&#x4E0D;&#x540C;&#x7269;&#x54C1;&#x4E4B;&#x95F4;&#x7684;&#x76F8;&#x4F3C;&#x5EA6;&#xFF0C;&#x628A;&#x7ED3;&#x679C;&#x5B58;&#x5728;&#x8868;&#x4E2D;&#xFF0C;&#x5F53;&#x63A8;&#x8350;&#x65F6;&#x8FDB;&#x884C;&#x67E5;&#x8868;&#xFF0C;&#x8BA1;&#x7B97;&#x7528;&#x6237;&#x53EF;&#x80FD;&#x7684;&#x6253;&#x5206;&#x503C;&#x3002; &#x4F18;&#x70B9;&#x548C;&#x9002;&#x7528;&#x573A;&#x666F;&#xFF1A; &#x53EF;&#x4EE5;&#x53D1;&#x73B0;&#x7528;&#x6237;&#x6F5C;&#x5728;&#x7684;&#x4F46;&#x81EA;&#x5DF1;&#x5C1A;&#x672A;&#x53D1;&#x73B0;&#x7684;&#x5174;&#x8DA3;&#x7231;&#x597D; &#x6709;&#x6548;&#x7684;&#x8FDB;&#x884C;&#x957F;&#x5C3E;&#x6316;&#x6398; &#x5229;&#x7528;&#x7528;&#x6237;&#x7684;&#x5386;&#x53F2;&#x884C;&#x4E3A;&#x7ED9;&#x7528;&#x6237;&#x505A;&#x63A8;&#x8350;&#x89E3;&#x91CA;&#xFF0C;&#x4F7F;&#x7528;&#x6237;&#x6BD4;&#x8F83;&#x4FE1;&#x670D; &#x9002;&#x7528;&#x4E8E;&#x7269;&#x54C1;&#x6570;&#x660E;&#x663E;&#x5C0F;&#x4E8E;&#x7528;&#x6237;&#x6570;&#x7684;&#x573A;&#x5408;&#xFF0C;&#x5426;&#x5219;&#x7269;&#x54C1;&#x76F8;&#x4F3C;&#x5EA6;&#x77E9;&#x9635;&#x8BA1;&#x7B97;&#x4EE3;&#x4EF7;&#x5F88;&#x5927; &#x9002;&#x5408;&#x957F;&#x5C3E;&#x7269;&#x54C1;&#x4E30;&#x5BCC;&#xFF0C;&#x7528;&#x6237;&#x4E2A;&#x6027;&#x5316;&#x9700;&#x6C42;&#x5F3A;&#x7684;&#x9886;&#x57DF; &#x7F3A;&#x70B9;&#xFF1A; &#x5BF9;&#x65B0;&#x7528;&#x6237;&#x53CB;&#x597D;&#xFF0C;&#x5BF9;&#x65B0;&#x7269;&#x54C1;&#x4E0D;&#x53CB;&#x597D;&#xFF0C;&#x56E0;&#x4E3A;&#x7269;&#x54C1;&#x76F8;&#x4F3C;&#x5EA6;&#x77E9;&#x9635;&#x4E0D;&#x9700;&#x8981;&#x5F88;&#x5F3A;&#x7684;&#x5B9E;&#x65F6;&#x6027; Item CF &#x548C; User CF &#x662F;&#x57FA;&#x4E8E;&#x534F;&#x540C;&#x8FC7;&#x6EE4;&#x63A8;&#x8350;&#x7684;&#x4E24;&#x4E2A;&#x6700;&#x57FA;&#x672C;&#x7684;&#x7B97;&#x6CD5;&#xFF0C;&#x5927;&#x5BB6;&#x90FD;&#x89C9;&#x5F97; Item CF &#x4ECE;&#x6027;&#x80FD;&#x548C;&#x590D;&#x6742;&#x5EA6;&#x4E0A;&#x6BD4; User CF &#x66F4;&#x4F18;&#xFF0C;&#x5176;&#x4E2D;&#x7684;&#x4E00;&#x4E2A;&#x4E3B;&#x8981;&#x539F;&#x56E0;&#x5C31;&#x662F;&#x5BF9;&#x4E8E;&#x4E00;&#x4E2A;&#x5728;&#x7EBF;&#x7F51;&#x7AD9;&#xFF0C;&#x7528;&#x6237;&#x7684;&#x6570;&#x91CF;&#x5F80;&#x5F80;&#x5927;&#x5927;&#x8D85;&#x8FC7;&#x7269;&#x54C1;&#x7684;&#x6570;&#x91CF;&#xFF0C;&#x540C;&#x65F6;&#x7269;&#x54C1;&#x7684;&#x6570;&#x636E;&#x76F8;&#x5BF9;&#x7A33;&#x5B9A;&#xFF0C;&#x56E0;&#x6B64;&#x8BA1;&#x7B97;&#x7269;&#x54C1;&#x7684;&#x76F8;&#x4F3C;&#x5EA6;&#x4E0D;&#x4F46;&#x8BA1;&#x7B97;&#x91CF;&#x8F83;&#x5C0F;&#xFF0C;&#x4F46;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x53EA;&#x9002;&#x5E94;&#x4E8E;&#x63D0;&#x4F9B;&#x5546;&#x54C1;&#x7684;&#x7535;&#x5B50;&#x5546;&#x52A1;&#x7F51;&#x7AD9;&#xFF0C;&#x5BF9;&#x4E8E;&#x65B0;&#x95FB;&#xFF0C;&#x535A;&#x5BA2;&#x6216;&#x8005;&#x5FAE;&#x5185;&#x5BB9;&#x7684;&#x63A8;&#x8350;&#x7CFB;&#x7EDF;&#xFF0C;&#x60C5;&#x51B5;&#x5F80;&#x5F80;&#x662F;&#x76F8;&#x53CD;&#x7684;&#xFF0C;&#x7269;&#x54C1;&#x7684;&#x6570;&#x91CF;&#x662F;&#x6D77;&#x91CF;&#x7684;&#xFF0C;&#x540C;&#x65F6;&#x4E5F;&#x662F;&#x66F4;&#x65B0;&#x9891;&#x7E41;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x5355;&#x4ECE;&#x590D;&#x6742;&#x5EA6;&#x7684;&#x89D2;&#x5EA6;&#xFF0C;&#x8FD9;&#x4E24;&#x4E2A;&#x7B97;&#x6CD5;&#x5728;&#x4E0D;&#x540C;&#x7684;&#x7CFB;&#x7EDF;&#x4E2D;&#x5404;&#x6709;&#x4F18;&#x52BF;&#xFF0C;&#x63A8;&#x8350;&#x5F15;&#x64CE;&#x7684;&#x8BBE;&#x8BA1;&#x8005;&#x9700;&#x8981;&#x6839;&#x636E;&#x81EA;&#x5DF1;&#x5E94;&#x7528;&#x7684;&#x7279;&#x70B9;&#x9009;&#x62E9;&#x66F4;&#x52A0;&#x5408;&#x9002;&#x7684;&#x7B97;&#x6CD5;&#x3002; &#x4E24;&#x4E2A;&#x4F8B;&#x5B50;&#xFF1A; &#x975E;&#x793E;&#x4EA4;&#x7F51;&#x7EDC;&#xFF1A;&#x5728;&#x975E;&#x793E;&#x4EA4;&#x7F51;&#x7EDC;&#x7684;&#x7F51;&#x7AD9;&#x4E2D;&#xFF0C;&#x5185;&#x5BB9;&#x5185;&#x5728;&#x7684;&#x8054;&#x7CFB;&#x662F;&#x5F88;&#x91CD;&#x8981;&#x7684;&#x63A8;&#x8350;&#x539F;&#x5219;&#xFF0C;&#x5B83;&#x6BD4;&#x57FA;&#x4E8E;&#x76F8;&#x4F3C;&#x7528;&#x6237;&#x7684;&#x63A8;&#x8350;&#x539F;&#x5219;&#x66F4;&#x52A0;&#x6709;&#x6548;&#x3002;&#x6BD4;&#x5982;&#x5728;&#x8D2D;&#x4E66;&#x7F51;&#x7AD9;&#x4E0A;&#xFF0C;&#x5F53;&#x4F60;&#x770B;&#x4E00;&#x672C;&#x4E66;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x63A8;&#x8350;&#x5F15;&#x64CE;&#x4F1A;&#x7ED9;&#x4F60;&#x63A8;&#x8350;&#x76F8;&#x5173;&#x7684;&#x4E66;&#x7C4D;&#xFF0C;&#x8FD9;&#x4E2A;&#x63A8;&#x8350;&#x7684;&#x91CD;&#x8981;&#x6027;&#x8FDC;&#x8FDC;&#x8D85;&#x8FC7;&#x4E86;&#x7F51;&#x7AD9;&#x9996;&#x9875;&#x5BF9;&#x8BE5;&#x7528;&#x6237;&#x7684;&#x7EFC;&#x5408;&#x63A8;&#x8350;&#x3002;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#xFF0C;&#x5728;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;Item CF &#x7684;&#x63A8;&#x8350;&#x6210;&#x4E3A;&#x4E86;&#x5F15;&#x5BFC;&#x7528;&#x6237;&#x6D4F;&#x89C8;&#x7684;&#x91CD;&#x8981;&#x624B;&#x6BB5;&#x3002;&#x540C;&#x65F6; Item CF &#x4FBF;&#x4E8E;&#x4E3A;&#x63A8;&#x8350;&#x505A;&#x51FA;&#x89E3;&#x91CA;&#xFF0C;&#x5728;&#x4E00;&#x4E2A;&#x975E;&#x793E;&#x4EA4;&#x7F51;&#x7EDC;&#x7684;&#x7F51;&#x7AD9;&#x4E2D;&#xFF0C;&#x7ED9;&#x67D0;&#x4E2A;&#x7528;&#x6237;&#x63A8;&#x8350;&#x4E00;&#x672C;&#x4E66;&#xFF0C;&#x56E0;&#x4E3A;&#x8FD9;&#x672C;&#x4E66;&#x548C;&#x4F60;&#x4EE5;&#x524D;&#x770B;&#x7684;&#x67D0;&#x672C;&#x4E66;&#x76F8;&#x4F3C;&#xFF0C;&#x7528;&#x6237;&#x53EF;&#x80FD;&#x5C31;&#x89C9;&#x5F97;&#x5408;&#x7406;&#x800C;&#x91C7;&#x7EB3;&#x4E86;&#x6B64;&#x63A8;&#x8350;&#x3002; &#x793E;&#x4EA4;&#x7F51;&#x7EDC;&#xFF1A;&#x5728;&#x73B0;&#x4ECA;&#x5F88;&#x6D41;&#x884C;&#x7684;&#x793E;&#x4EA4;&#x7F51;&#x7EDC;&#x7AD9;&#x70B9;&#x4E2D;&#xFF0C;User CF &#x662F;&#x4E00;&#x4E2A;&#x66F4;&#x4E0D;&#x9519;&#x7684;&#x9009;&#x62E9;&#xFF0C;User CF &#x52A0;&#x4E0A;&#x793E;&#x4F1A;&#x7F51;&#x7EDC;&#x4FE1;&#x606F;&#xFF0C;&#x53EF;&#x4EE5;&#x589E;&#x52A0;&#x7528;&#x6237;&#x5BF9;&#x63A8;&#x8350;&#x89E3;&#x91CA;&#x7684;&#x4FE1;&#x670D;&#x7A0B;&#x5EA6;&#x3002; &#x66F4;&#x591A;&#x89C1;[&#x63A8;&#x8350;&#x7B97;&#x6CD5;]&#x57FA;&#x4E8E;&#x7528;&#x6237;&#x7684;&#x534F;&#x540C;&#x8FC7;&#x6EE4;&#x7B97;&#x6CD5; &#x9879;&#x76EE;&#x7B97;&#x6CD5;&#x91C7;&#x7528;&#x7684;&#x662F;&#x57FA;&#x4E8E;&#x7269;&#x54C1;&#x7684;&#x534F;&#x540C;&#x8FC7;&#x6EE4;&#x7B97;&#x6CD5;&#xFF0C;&#x76F8;&#x4F3C;&#x5EA6;&#x7B97;&#x6CD5;&#x7528;&#x7684;&#x662F; cosine similarity&#x3002;&#x901A;&#x8FC7;&#x8BA1;&#x7B97; similarity between a1 and all user download history &#x6765;&#x63A8;&#x5BFC; similarity between a1 and all other apps&#xFF0C;&#x524D;&#x63D0;&#x662F;&#x5047;&#x5B9A;&#x6BCF;&#x4E2A; user download history list &#x91CC;&#x7684; app &#x662F;&#x76F8;&#x4E92;&#x5173;&#x8054;&#x7684;&#x3002;&#x770B;&#x4E0B;&#x9762;&#x7684;&#x5177;&#x4F53;&#x4F8B;&#x5B50;&#x3002; cosine similarity similarity between a3 and a5 a3&#x2019;s top-5 related apps &#x5B9E;&#x73B0;&#x9996;&#x5148;&#x8BFB;&#x53D6; MongoDB &#x7684;&#x6570;&#x636E;&#xFF0C;&#x8FC7;&#x7A0B;&#x7565;&#x3002;&#x8FD9;&#x91CC;&#x4E3B;&#x8981;&#x5C55;&#x793A;&#x7B97;&#x6CD5;&#x5B9E;&#x73B0;&#x3002;cosine similarity123456789101112@classmethoddef cosine_similarity(cls, app_list1, app_list2): match_count = cls.__count_match(app_list1, app_list2) return float(match_count) / math.sqrt( len(app_list1) * len(app_list2))@classmethoddef __count_match(cls, list1, list2): count = 0 for element in list1: if element in list2: count += 1 return count top-5 related app_list1123456789101112131415161718192021222324def calculate_top_5(app, user_download_history): &apos;&apos;&apos; cosine_similarity between an App and user&apos;s history &apos;&apos;&apos; #create a dict to store each other app and its similarity to this app app_similarity = {}#{app_id: similarity} for apps in user_download_history: #calculate the similarity similarity = Helper.cosine_similarity([app], apps) # accumluate similarity for other_app in apps: if app_similarity.has_key(other_app): app_similarity[other_app] = app_similarity[other_app] + similarity else: app_similarity[other_app] = similarity # There could be app without related apps (not in any download history) if not app_similarity.has_key(app): return #sort app_similarity dict by value and get the top 5 as recommendation app_similarity.pop(app) sorted_tups = sorted(app_similarity.items(), key=operator.itemgetter(1), reverse=True)#sort by similarity top_5_app = [sorted_tups[0][0], sorted_tups[1][0], sorted_tups[2][0], sorted_tups[3][0], sorted_tups[4][0]] &#x6700;&#x540E;&#x8981;&#x66F4;&#x65B0; MongoDB &#x4E2D;&#x7684;&#x6570;&#x636E;&#x3002;&#x66F4;&#x65B0;&#x540E;&#x7684;&#x6570;&#x636E;&#x5982;&#x4E0B;12{ &quot;_id&quot; : ObjectId(&quot;577cbfade677be6b09d8dc2c&quot;), &quot;score&quot; : &quot;8&quot;, &quot;title&quot; : &quot;&#x679C;&#x6C41;&#x56DB;&#x6E85;&quot;, &quot;url&quot; : &quot;http://appstore.huawei.com:80/app/C10204319&quot;, &quot;app_id&quot; : &quot;C10204319&quot;, &quot;thumbnail_url&quot; : &quot;http://appimg.hicloud.com/hwmarket/files/application/icon144/f986a241d80d46fcb4fecc1e85121a60.png&quot;, &quot;intro&quot; : &quot;&#x3010;&#x679C;&#x6C41;&#x56DB;&#x6E85;&#x3011;&#x5E74;&#x5EA6;&#x6700;&#x201C;&#x6E85;&#x201D;&#x7684;&#x6D88;&#x9664;&#x6E38;&#x620F;&#xFF01;&#x9996;&#x53D1;&#x5927;&#x5956;10&#x53F0;iphone6&#x6E85;&#x5230;&#x4F60;&#x624B;&#xFF01; &#x2605;&#x5168;&#x7403;50&#x591A;&#x4E2A;&#x56FD;&#x5BB6;APP&#x5546;&#x5E97;&#x63A8;&#x8350;&#x2605; &#x2605;30&#x4E2A;&#x56FD;&#x5BB6;&#x684C;&#x9762;&#x6E38;&#x620F;&#x6392;&#x540D;&#x7B2C;&#x4E00;&#x2605; &#x2605;5000&#x4E07;&#x73A9;&#x5BB6;&#x4E94;&#x661F;&#x597D;&#x8BC4;&#x2605; &#x6E38;&#x620F;&#x7279;&#x8272;&#xFF1A; &#x3010;&#x4E03;&#x5927;&#x65B0;&#x73A9;&#x6CD5;&#xFF0C;&#x9177;&#x70AB;&#x62FD;&#xFF01;&#x53FC;&#x548B;&#x5929;&#xFF01;&#x3011; &#x3010;250&#x5173;&#x6311;&#x6218;&#x6781;&#x9650;&#xFF01;&#x6551;&#x6551;&#x6C34;&#x679C;&#x541B;&#x3011; &#x3010;&#x679C;&#x6C41;&#x7206;&#x6E85;&#xFF0C;&#x840C;&#x7FFB;&#x5168;&#x573A;&#xFF01;&#x3011; &#x9996;&#x53D1;&quot;, &quot;developer&quot; : &quot;&#x6DF1;&#x5733;&#x5E02;&#x552F;&#x53D8;&#x79D1;&#x6280;&#x5F00;&#x53D1;&#x6709;&#x9650;&#x516C;&#x53F8;&quot;, &quot;top_5_app&quot; : [ &quot;C10053551&quot;, &quot;C10148546&quot;, &quot;C10141383&quot;, &quot;C10189589&quot;, &quot;C10026769&quot; ] }{ &quot;_id&quot; : ObjectId(&quot;577cbfade677be6b09d8dc2d&quot;), &quot;score&quot; : &quot;9&quot;, &quot;title&quot; : &quot;&#x6CE1;&#x6CE1;&#x9F99;&#x4E9A;&#x7279;&#x5170;&#x8482;&#x65AF;&quot;, &quot;url&quot; : &quot;http://appstore.huawei.com:80/app/C10145675&quot;, &quot;app_id&quot; : &quot;C10145675&quot;, &quot;thumbnail_url&quot; : &quot;http://appimg.hicloud.com/hwmarket/files/application/icon144/cb3c6ce12b73424990921097fe20a7b1.png&quot;, &quot;intro&quot; : &quot;&#x6CE1;&#x6CE1;&#x9F99;&#x4E9A;&#x7279;&#x5170;&#x8482;&#x65AF;:&#x4E00;&#x6B3E;&#x4EE4;&#x4EBA;&#x7740;&#x8FF7;&#x7684;&#x6CE1;&#x6CE1;&#x9F99;&#x6E38;&#x620F;&#x3002;&#x5728;&#x7ECF;&#x5178;&#x7684;&#x6E38;&#x620F;&#x6A21;&#x5F0F;&#x4E2D;&#x589E;&#x52A0;&#x4E86;&#x72EC;&#x6709;&#x7684;BOSS&#x6218;&#xFF0C;&#x6BCF;&#x4E2A;&#x573A;&#x666F;&#x90FD; &#x6709;&#x72EC;&#x7279;&#x7684;&#x5B88;&#x62A4;&#x8005;&#x7B49;&#x5F85;&#x4F60;&#x7684;&#x6311;&#x6218;&#x3002;&#x591A;&#x79CD;&#x591A;&#x6837;&#x7684;&#x5947;&#x8DA3;&#x9053;&#x5177;&#x4F9B;&#x4F60;&#x4F7F;&#x7528;&#x3002;&#x6253;BOSS&#xFF0C;&#x79C0;&#x64CD;&#x4F5C;&#xFF0C;&#x800D;&#x9053;&#x5177;&#x8BA9;&#x4F60;&#x7231;&#x4E0D;&#x91CA;&#x624B;&#x3002;&#x6B22;&#x4E50;&#x4E4B;&#x65C5;&#x7531;&#x4E00;&#x6BB5;&#x7F8E;&#x4E3D;&#x7684;&#x6545;&#x4E8B;&#x5E26;&#x4F60;&#x8FDB;&#x5165;&#x3002;&#x524D;&#x6240;&#x672A;&#x6709;&#x7684;&#x4F53;&#x9A8C;&#xFF0C;&#x5E26;&#x7ED9;&#x4F60;&#x795E;&#x5947;&#x7684;&#x4E9A;&#x7279;&#x5170;&#x8482;&#x65AF;&#x4E4B;&#x65C5;&#x3002;&quot;, &quot;developer&quot; : &quot;&#x6DF1;&#x5733;&#x5E02;&#x7075;&#x6E38;&#x79D1;&#x6280;&#x6709;&#x9650;&#x516C;&#x53F8;&quot;, &quot;top_5_app&quot; : [ &quot;C2217&quot;, &quot;C40224&quot;, &quot;C10196888&quot;, &quot;C10197446&quot;, &quot;C10047107&quot; ] } &#x7F51;&#x7AD9;&#x6A21;&#x5757;Skill javascript node.js meteor mongodb Performance 1k QPS (vs 10k QPS) &#x5177;&#x4F53;&#x5B9E;&#x73B0;&#x89C1; Meteor &#x2013; App Recommender System","tags":"crawler"},{"title":"关于智能客服的思考(笔记)","url":"/2016/07/20/关于智能客服的思考/","text":"&#x5F20;&#x8F89;&#x667A;&#x80FD;&#x5BA2;&#x670D;&#x5206;&#x4EAB;&#x4F1A;&#x7B14;&#x8BB0;&#x4EE5;&#x53CA;&#x4E09;&#x4E2A;&#x6708;&#x5BA2;&#x670D;&#x673A;&#x5668;&#x4EBA;&#x5B9E;&#x4E60;&#x7684;&#x611F;&#x609F;&#x3002; &#x4E0E;&#x804A;&#x5929;&#x673A;&#x5668;&#x4EBA;&#x7684;&#x533A;&#x522B;&#x56DE;&#x7B54;&#x95EE;&#x9898;&#x7684;&#x8303;&#x56F4;&#x548C;&#x65B9;&#x5F0F;&#x4E0D;&#x540C;&#x804A;&#x5929;&#x673A;&#x5668;&#x4EBA;&#xFF1A; &#x53D1;&#x6563;&#x3002;&#x53EF;&#x4EE5;&#x56DE;&#x7B54;&#x5E7F;&#x6CDB;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x56DE;&#x7B54;&#x4E5F;&#x662F;&#x53D1;&#x6563;&#x7684;&#x3002;&#x5BA2;&#x670D;&#x673A;&#x5668;&#x4EBA;&#xFF1A; &#x6536;&#x655B;&#x3002;&#x5173;&#x6CE8;&#x7126;&#x70B9;&#x5728;&#x4E8E;&#x805A;&#x7126;&#x7684;&#x4E1A;&#x52A1;&#x8303;&#x56F4;&#x5185;&#x6709;&#x591A;&#x5927;&#x7684;&#x95EE;&#x9898;&#x5904;&#x7406;&#x80FD;&#x529B;&#x3002; &#x4F7F;&#x7528;&#x95E8;&#x69DB;&#x4E0D;&#x540C;&#x804A;&#x5929;&#x673A;&#x5668;&#x4EBA;&#xFF1A; &#x4E0D;&#x9700;&#x8981;&#x7ED9;&#x4ED6;&#x51C6;&#x5907;&#x975E;&#x5E38;&#x591A;&#x7684;&#x4E13;&#x4E1A;&#x77E5;&#x8BC6;&#xFF0C;&#x591A;&#x653E;&#x4E00;&#x4E9B;&#x5E38;&#x8BC6;&#x5E93;&#x3001;&#x95EE;&#x7B54;&#x5E93;&#x548C;&#x5BD2;&#x6684;&#x5E93;&#x7684;&#x77E5;&#x8BC6;&#xFF0C;&#x591A;&#x653E;&#x4E00;&#x4E9B;&#x7B11;&#x8BDD;&#x548C;&#x6BB5;&#x5B50;&#x7136;&#x540E;&#x63A8;&#x51FA;&#x53BB;&#x4E3A;&#x5927;&#x5BB6;&#x505A;&#x4E00;&#x4E9B;&#x5373;&#x65F6;&#x7684;&#x670D;&#x52A1;&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#xFF0C;&#x5F53;&#x7136;&#x4E5F;&#x53EF;&#x4EE5;&#x8BA9;&#x4ED6;&#x7EE7;&#x7EED;&#x5B66;&#x4E60;&#x548C;&#x4F18;&#x5316;&#x3002;&#x5BA2;&#x670D;&#x673A;&#x5668;&#x4EBA;&#xFF1A; &#x4E13;&#x4E1A;&#x77E5;&#x8BC6;&#x5E93;&#x3002; &#x7279;&#x8D28; &#x5F00;&#x653E;&#x95EE;&#x9898;&#x7684;&#x6536;&#x655B;&#x80FD;&#x529B;&#x667A;&#x80FD;&#x5BA2;&#x670D;&#x673A;&#x5668;&#x4EBA;&#x5E94;&#x6709;&#x5F52;&#x7EB3;&#x95EE;&#x9898;&#x7684;&#x80FD;&#x529B;&#x3002;&#x80FD;&#x591F;&#x5C3D;&#x91CF;&#x628A;&#x5BA2;&#x6237;&#x7684;&#x95EE;&#x9898;&#x5F15;&#x5BFC;&#x5230;&#x6B63;&#x786E;&#x7684;&#x8F68;&#x9053;&#x4E0A;&#x6765;&#x3002; &#x81EA;&#x5B66;&#x4E60;&#x7684;&#x80FD;&#x529B;&#x667A;&#x80FD;&#x5BA2;&#x670D;&#x673A;&#x5668;&#x4EBA;&#x5E94;&#x6709;&#x81EA;&#x5B66;&#x4E60;&#x7684;&#x80FD;&#x529B;&#x3002;&#x5B83;&#x53EF;&#x4EE5;&#x6839;&#x636E;&#x77E5;&#x8BC6;&#x5E93;&#x4EE5;&#x53CA;&#x5DE5;&#x5355;&#x8FDB;&#x884C;&#x6279;&#x91CF;&#x5B66;&#x4E60;&#xFF0C;&#x540C;&#x65F6;&#x80FD;&#x591F;&#x6839;&#x636E;&#x4EBA;&#x5DE5;&#x670D;&#x52A1;&#x8FC7;&#x7A0B;&#x8FDB;&#x884C;&#x5355;&#x6B21;&#x5B66;&#x4E60;&#x3002; &#x4EBA;&#x5DE5;&#x6307;&#x5BFC;&#x5B66;&#x4E60;&#x7684;&#x80FD;&#x529B;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5BF9;&#x667A;&#x80FD;&#x5BA2;&#x670D;&#x673A;&#x5668;&#x4EBA;&#x8FDB;&#x884C;&#x76F8;&#x5E94;&#x7684;&#x6D4B;&#x8BD5;&#xFF0C;&#x5E76;&#x53EF;&#x4EE5;&#x5BF9;&#x5176;&#x8FDB;&#x884C;&#x8C03;&#x6559;&#x3002; &#x5F52;&#x7EB3;&#x805A;&#x7C7B;&#x7684;&#x80FD;&#x529B;&#x667A;&#x80FD;&#x5BA2;&#x670D;&#x673A;&#x5668;&#x4EBA;&#x53EF;&#x4EE5;&#x6839;&#x636E;&#x5BA2;&#x6237;&#x95EE;&#x7684;&#x95EE;&#x9898;&#x4E0E;&#x73B0;&#x6709;&#x77E5;&#x8BC6;&#x8FDB;&#x884C;&#x5339;&#x914D;&#xFF0C;&#x5E76;&#x80FD;&#x591F;&#x5C06;&#x5339;&#x914D;&#x5EA6;&#x4F4E;&#x7684;&#x95EE;&#x9898;&#x805A;&#x7C7B;&#x4EA4;&#x7531;&#x4EBA;&#x5DE5;&#x6765;&#x8FDB;&#x884C;&#x56DE;&#x7B54;&#x53CA;&#x7EF4;&#x62A4;&#x3002;&#x4EBA;&#x5DE5;&#x56DE;&#x7B54;&#x540E;&#x667A;&#x80FD;&#x5BA2;&#x670D;&#x673A;&#x5668;&#x4EBA;&#x80FD;&#x591F;&#x540C;&#x6B65;&#x5B66;&#x4E60;&#xFF0C;&#x5E76;&#x751F;&#x6210;&#x65B0;&#x7684;&#x95EE;&#x7B54;&#x7C7B;&#x578B;&#xFF0C;&#x5728;&#x4E0B;&#x6B21;&#x56DE;&#x5230;&#x4E2D;&#x53EF;&#x4EE5;&#x81EA;&#x884C;&#x89E3;&#x51B3;&#x3002; &#x8BBE;&#x8BA1;&#x539F;&#x5219;&#x57FA;&#x4E8E;&#x4E1A;&#x52A1; &#x4E0D;&#x9760;&#x8C31;&#x95EE;&#x9898;&#x2013;&gt; &#x6536;&#x655B;&#xFF0C;&#x56DE;&#x5F52;&#x3002;eg.&#x63D0;&#x4F9B;&#x76F8;&#x4F3C;&#x95EE;&#x9898;1&#x3001;2&#x3001;3&#x2013;&gt; &#x65E0;&#x6CD5;&#x6536;&#x655B;&#xFF1F;&#x8F6C;&#x4EBA;&#x5DE5; &#x9760;&#x8C31;&#x95EE;&#x9898;&#x2013;&gt; &#x5B9A;&#x4F4D;&#xFF0C;&#x56DE;&#x7B54; &#x603B;&#x4E4B;&#x4E00;&#x53E5;&#x8BDD;&#xFF1A;&#x4E0D;&#x79BB;&#x672C;&#x884C;&#x4E0D;&#x5E9F;&#x8BDD;&#xFF01; &#x5FEB;&#x901F;&#x6536;&#x655B; &#x8F93;&#x5165;&#x95EE;&#x9898;&#x7684;&#x65F6;&#x5019;&#x5C31;&#x80FD;&#x5FEB;&#x901F;&#x6536;&#x655B;(&#x663E;&#x793A;&#x63D0;&#x793A;&#x5217;&#x8868;&#x8BA9;&#x7528;&#x6237;&#x9009;&#x62E9;) &#x5BF9;&#x4E0D;&#x9760;&#x8C31;&#x95EE;&#x9898;&#x5373;&#x65F6;&#x6536;&#x655B;&#xFF0C;&#x63D0;&#x4F9B;&#x53EF;&#x80FD;&#x7684;&#x76F8;&#x4F3C;&#x95EE;&#x9898; &#x4E8C;&#x516B;&#x539F;&#x5219;&#x5BF9;&#x4E8E;&#x5F88;&#x591A;&#x4F01;&#x4E1A;&#x7684;&#x5BA2;&#x6237;&#x670D;&#x52A1;&#x6765;&#x8BF4;&#xFF0C;80%&#x7684;&#x5BA2;&#x6237;&#x95EE;&#x9898;&#x96C6;&#x4E2D;&#x5728;20%&#x7684;&#x95EE;&#x9898;&#x7C7B;&#x578B;&#x91CC;&#x3002;&#x6240;&#x4EE5;&#x8981;&#x96C6;&#x4E2D;&#x653B;&#x514B;&#x7684;&#x662F; &#x2013; &#x4E0D;&#x505C;&#x8BAD;&#x7EC3;&#x667A;&#x80FD;&#x5BA2;&#x670D;&#x673A;&#x5668;&#x4EBA;&#x8BA9;&#x5B83;&#x80FD;&#x591F;&#x5E94;&#x5BF9;&#x8FD9;10%&#x7684;&#x95EE;&#x9898;&#x7C7B;&#x578B;&#x4E2D;&#x5404;&#x79CD;&#x5201;&#x94BB;&#x7684;&#x95EE;&#x6CD5;&#x3002; &#x77E5;&#x8BC6;&#x652F;&#x6491;&#x4E0E;&#x81EA;&#x5B66;&#x4E60;&#x5BA2;&#x670D;&#x673A;&#x5668;&#x4EBA;&#x81F3;&#x5C11;&#x8981;&#x6709;&#x7684;3&#x4E2A;&#x77E5;&#x8BC6;&#x5E93;: &#x5BD2;&#x6684;&#x5E93; &#x884C;&#x4E1A;&#x77E5;&#x8BC6;&#x5E93; &#x57FA;&#x4E8E;&#x7528;&#x6237;&#x4F53;&#x9A8C;&#x7684;&#x77E5;&#x8BC6;&#x5E93; &#x95EE;&#x9898;&#x591A;&#x5C11;&#x60C5;&#x611F;&#x542B;&#x91CF;&#xFF1F;&#x5BA2;&#x670D;&#x673A;&#x5668;&#x4EBA;&#x4E0E;&#x4EBA;&#x5DE5;&#x670D;&#x52A1;&#x5E94;&#x8BE5;&#x662F;&#x80FD;&#x8FDB;&#x884C;&#x65E0;&#x7F1D;&#x5BF9;&#x63A5;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x5B83;&#x7684;&#x611F;&#x6027;&#x5C42;&#x9762;&#x5E94;&#x8BE5;&#x7B49;&#x540C;&#x4E8E;&#x4EBA;&#x5DE5;&#x5BA2;&#x670D;&#xFF0C;&#x5728;&#x4E0D;&#x80FD;&#x56DE;&#x7B54;&#x95EE;&#x9898;&#x7684;&#x65F6;&#x5019;&#x4E5F;&#x8981;&#x5F6C;&#x5F6C;&#x6709;&#x793C;&#xFF0C;&#x5728;&#x5BD2;&#x6684;&#x7684;&#x65F6;&#x5019;&#x8981;&#x542B;&#x84C4;&#x5185;&#x655B;&#x4E0D;&#x80FD;&#x592A;&#x8FC7;&#x6D6E;&#x5938;&#x3001;&#x5954;&#x653E;&#x3002;&#x5BA2;&#x670D;&#x673A;&#x5668;&#x4EBA;&#x638C;&#x63E1;&#x7684;&#x5EA6;&#x5E94;&#x8BE5;&#x662F;&#x548C;&#x4EBA;&#x5DE5;&#x5BA2;&#x670D;&#x4E00;&#x6837;&#xFF0C;&#x80FD;&#x8BA9;&#x5BA2;&#x6237;&#x201C;&#x5982;&#x6C90;&#x6625;&#x98CE;&#x201D;&#x7684;&#x3002; &#x662F;&#x5426;&#x62D2;&#x7EDD;&#x8C29;&#x9A82;&#x7C7B;&#x5BA2;&#x6237;&#xFF1F;&#x7136;&#x800C;&#x63A5;&#x89E6;&#x4E86;&#x8FD9;&#x4E48;&#x591A;&#x7528;&#x6237;&#x95EE;&#x9898;&#xFF0C;&#x4E5F;&#x53D1;&#x73B0;&#x6709;&#x4E00;&#x90E8;&#x5206;&#x4EBA;&#x7EAF;&#x7CB9;&#x662F;&#x6765;&#x53D1;&#x7262;&#x9A9A;&#x751A;&#x81F3;&#x662F;&#x9A82;&#x4EBA;&#x7684;&#xFF0C;&#x5E76;&#x4E0D;&#x671F;&#x5F85;&#x56DE;&#x7B54;&#xFF0C;&#x5BF9;&#x4E8E;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x5982;&#x4F55;&#x5904;&#x7406;&#xFF1F;&#x4E2A;&#x4EBA;&#x8BA4;&#x4E3A;&#xFF0C;&#x201C;&#x5BA2;&#x6237;&#x662F;&#x4E0A;&#x5E1D;&#x201D;&#xFF0C;&#x7136;&#x800C;&#x4F01;&#x4E1A;&#x4E5F;&#x5FC5;&#x987B;&#x5C0A;&#x91CD;&#x5458;&#x5DE5;&#xFF0C;&#x4E0D;&#x80FD;&#x4EFB;&#x7531;&#x4EBA;&#x5DE5;&#x5BA2;&#x670D;&#x627F;&#x53D7;&#x65E0;&#x7406;&#x7684;&#x5BA2;&#x670D;&#x7684;&#x8C29;&#x9A82;&#xFF0C;&#x65E2;&#x7136;&#x673A;&#x5668;&#x4EBA;&#x548C;&#x4EBA;&#x5DE5;&#x5BA2;&#x670D;&#x65E0;&#x7F1D;&#x5BF9;&#x63A5;&#xFF0C;&#x90A3;&#x4E48;&#x673A;&#x5668;&#x4EBA;&#x4E5F;&#x4E0D;&#x5E94;&#x8BE5;&#x201C;&#x627F;&#x53D7;&#x201D;&#x8FD9;&#x4E9B;&#xFF0C;&#x800C;&#x5E94;&#x5DE7;&#x5999;&#x7684;&#x62D2;&#x7EDD;&#x5BA2;&#x6237;&#xFF0C;&#x7ED3;&#x675F;&#x5BF9;&#x8BDD;&#x3002; &#x662F;&#x5426;&#x4E0A;&#x4E0B;&#x6587;&#x5173;&#x8054;&#xFF1F;&#x5C3D;&#x53EF;&#x80FD;&#x5728;&#x4E00;&#x6B21;&#x4EA4;&#x4E92;&#x91CC;&#x89E3;&#x51B3;&#x95EE;&#x9898;&#x3002;&#x56E0;&#x4E3A;&#x901A;&#x8FC7;&#x591A;&#x6B21;&#x8BE2;&#x95EE;&#x540E;&#x5BA2;&#x6237;&#x7684;&#x573A;&#x666F;&#x5F80;&#x5F80;&#x662F;&#x6DF7;&#x4E71;&#x7684;&#xFF0C;&#x96BE;&#x4EE5;&#x8BC6;&#x522B;&#x3002; &#x6D41;&#x7A0B;&#x7B80;&#x5316;&#x7684;&#x539F;&#x7406;&#x3001;&#x6D41;&#x7A0B;&#x8F93;&#x5165;&#xFF1A;&#x5BA2;&#x6237;&#x95EE;&#x9898;&#x2013;&gt; &#x5206;&#x8BCD;&#x3001;&#x6743;&#x91CD;&#x2013;&gt; &#x8BED;&#x4E49;&#x5206;&#x6790;&#x2013;&gt; &#x5339;&#x914D;&#x77E5;&#x8BC6;&#x2013;&gt; &#x8981;&#x7D20;&#x8865;&#x8DB3;&#x2013;&gt; &#x7CBE;&#x786E;&#x5339;&#x914D;&#x2013;&gt; &#x56DE;&#x590D;&#x5185;&#x5BB9;&#x8F93;&#x51FA;: &#x6807;&#x51C6;&#x95EE;&#x9898; &#x4E2D;&#x95F4;&#x53EF;&#x80FD;&#x6709;&#x7684;&#x610F;&#x5916;&#x662F;&#x5339;&#x914D;&#x7A0B;&#x5EA6;&#x4F4E;&#xFF0C;&#x673A;&#x5668;&#x4EBA;&#x96BE;&#x4EE5;&#x7ED9;&#x51FA;&#x51C6;&#x786E;&#x56DE;&#x590D;&#xFF0C;&#x8FD9;&#x65F6;&#x8981;&#x8D70;&#x53E6;&#x4E00;&#x6761;&#x7EBF;&#xFF0C;&#x6765;&#x53D1;&#x73B0;&#x65B0;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x5B8C;&#x5584;&#x670D;&#x52A1;&#x3002;&#x7CBE;&#x786E;&#x5339;&#x914D;&#x2013;&gt; &#x5339;&#x914D;&#x5EA6;&#x4F4E;&#x2013;&gt; &#x4F20;&#x9012;&#x5230;&#x4EBA;&#x5DE5;&#x2013;&gt; &#x4EBA;&#x5DE5;&#x89E3;&#x7B54;&#x2013;&gt; &#x4EA7;&#x751F;&#x65B0;&#x7684;&#x77E5;&#x8BC6;&#x70B9;&#x2013;&gt; &#x8F6C;&#x4EA4;&#x7ED9;&#x5BA2;&#x670D;&#x673A;&#x5668;&#x4EBA; &#x6280;&#x672F;&#x4E00;&#x4EE3;&#xFF1A;&#x5173;&#x952E;&#x8BCD;&#x4E8C;&#x4EE3;&#xFF1A;&#x89C4;&#x5219;+&#x641C;&#x7D22;&#x4E09;&#x4EE3;&#xFF1A;&#x8BED;&#x4E49;&#x7F51;+&#x81EA;&#x5B66;&#x4E60; &#x76EE;&#x524D;&#x505C;&#x7559;&#x5728;&#x4E8C;&#x4EE3;&#xFF0C;&#x4E09;&#x4EE3;&#x5927;&#x591A;&#x8FD8;&#x5728;&#x5B9E;&#x9A8C;&#x5BA4;&#x9636;&#x6BB5;&#x3002; &#x5982;&#x4F55;&#x7CBE;&#x786E;&#x5339;&#x914D;&#xFF1F; &#x5C40;&#x90E8;&#xFF08;&#x6587;&#x672C;&#x76F8;&#x5173;&#xFF09;&#x7EF4;&#x5EA6;&#x8BBE;&#x8BA1;&#xFF1A; &#x547D;&#x4E2D;&#x6838;&#x5FC3;&#x8BCD;&#xFF1F;&#x5176;&#x4ED6;&#x5B57;&#x6BB5;&#xFF1F;&#x6743;&#x91CD;&#x8BBE;&#x8BA1;&#xFF1A;&#x5982;&#x4F55;&#x7ED9;&#x5404;&#x7EF4;&#x5EA6;&#x5206;&#x914D;&#x6743;&#x91CD;&#xFF1F; &#x5168;&#x5C40;&#x68C0;&#x7D22;&#x6392;&#x5E8F;&#xFF1A;&#x54EA;&#x4E2A;&#x6700;&#x76F8;&#x5173;&#xFF1F;&#x54EA;&#x4E2A;&#x6700;&#x6709;&#x53EF;&#x80FD;&#x76F8;&#x5173;&#xFF1F;","tags":"nlp"},{"title":"python-cgi + ajax 实现异步响应表单","url":"/2016/07/18/socket + python-cgi + ajax 实现异步响应表单/","text":"&#x7B80;&#x5355;&#x7684;&#x754C;&#x9762;&#x7528;&#x4E8E;&#x4E2A;&#x4EBA; or &#x516C;&#x53F8;&#x5185;&#x90E8; demo&#x3002; cgiCGI &#x76EE;&#x524D;&#x7531;NCSA&#x7EF4;&#x62A4;&#xFF0C;NCSA&#x5B9A;&#x4E49;CGI&#x5982;&#x4E0B;&#xFF1A;CGI(Common Gateway Interface),&#x901A;&#x7528;&#x7F51;&#x5173;&#x63A5;&#x53E3;,&#x5B83;&#x662F;&#x4E00;&#x6BB5;&#x7A0B;&#x5E8F;,&#x8FD0;&#x884C;&#x5728;&#x670D;&#x52A1;&#x5668;&#x4E0A;&#x5982;&#xFF1A;HTTP&#x670D;&#x52A1;&#x5668;&#xFF0C;&#x63D0;&#x4F9B;&#x540C;&#x5BA2;&#x6237;&#x7AEF;HTML&#x9875;&#x9762;&#x7684;&#x63A5;&#x53E3;&#x3002; &#x67B6;&#x6784; &#x6559;&#x7A0B;cgi &#x5B9E;&#x5728;&#x662F;&#x2026;&#x2026; &#x592A;&#xFF01;&#x7B80;&#xFF01;&#x5355;&#xFF01;&#x592A;&#xFF01;&#x65B9;&#xFF01;&#x4FBF;&#x4E86;&#xFF01;&#x4E0D;&#x5E9F;&#x8BDD;&#xFF0C;&#x4E0A;&#x4E2A;&#x6559;&#x7A0B;&#x3002;Python CGI&#x7F16;&#x7A0B; &#x914D;&#x7F6E;apache cgi &#x914D;&#x7F6E;&#x6559;&#x7A0B;&#x7F51;&#x4E0A;&#x90FD;&#x6709;&#xFF0C;&#x4E0A;&#x9762;&#x7684;&#x6559;&#x7A0B;&#x4E5F;&#x6709;&#x4ECB;&#x7ECD;&#xFF0C;&#x503C;&#x5F97;&#x4E00;&#x63D0;&#x7684;&#x662F;&#xFF0C;&#x6211;&#x9075;&#x7167;&#x4E86;&#x82E5;&#x5E72;&#x6559;&#x7A0B;&#xFF0C;&#x7136;&#x800C;&#x5E76;&#x6CA1;&#x80FD;&#x7528; mac &#x81EA;&#x5E26;&#x7684; apache &#x914D;&#x7F6E; cgi &#x6210;&#x529F;&#xFF0C;&#x6700;&#x540E;&#x662F;&#x7528; xampp &#x914D;&#x7F6E;&#x597D;&#x7684;&#xFF0C;&#x63A8;&#x6D4B;&#x662F;&#x539F;&#x6709;&#x7684; xampp &#x5BF9;&#x672C;&#x673A;&#x7684; apache &#x6709;&#x6539;&#x52A8;&#x3002; &#x4E0B;&#x9762;&#x8BB0;&#x5F55;&#x4E0B; xampp &#x914D;&#x7F6E; cgi &#x8FC7;&#x7A0B;&#x3002;&#x5728; /Application/XAMPP/etc/httpd.conf &#x6539;123456&lt;Directory &quot;/Applications/XAMPP/xamppfiles/cgi-bin/&quot;&gt; AllowOverride None Options Indexes FollowSymLinks MultiViews ExecCGI Order allow,deny Allow from all&lt;/Directory&gt; &#x5728; /Applications/XAMPP/xamppfiles/apache2/conf/httpd.conf &#x6539;123456&lt;Directory &quot;/Applications/XAMPP/xamppfiles/apache2/htdocs&quot;&gt; Options Indexes FollowSymLinks MultiViews ExecCGI AllowOverride All Order allow,deny Allow from all&lt;/Directory&gt; &#x91CD;&#x542F;&#xFF0C;&#x628A; cgi &#x4EE3;&#x7801;&#x653E;&#x5230; /Applications/XAMPP/xamppfiles/cgi-bin/ &#x76EE;&#x5F55;&#x4E0B;&#x8FD0;&#x884C;&#xFF0C;&#x5982;&#x679C;&#x65E0;&#x6CD5;&#x8FD0;&#x884C;&#xFF0C;&#x6539;&#x6743;&#x9650; chmod 755 test.py &#x9644;&#x6D4B;&#x8BD5;&#x4EE3;&#x7801;1234567891011121314#!/usr/bin/python# -*- coding: UTF-8 -*-print &quot;Content-type:text/html&quot;print # &#x7A7A;&#x884C;&#xFF0C;&#x544A;&#x8BC9;&#x670D;&#x52A1;&#x5668;&#x7ED3;&#x675F;&#x5934;&#x90E8;print &apos;&lt;html&gt;&apos;print &apos;&lt;head&gt;&apos;print &apos;&lt;meta charset=&quot;utf-8&quot;&gt;&apos;print &apos;&lt;title&gt;Hello Word - &#x6211;&#x7684;&#x7B2C;&#x4E00;&#x4E2A; CGI &#x7A0B;&#x5E8F;&#xFF01;&lt;/title&gt;&apos;print &apos;&lt;/head&gt;&apos;print &apos;&lt;body&gt;&apos;print &apos;&lt;h2&gt;Hello Word! &#x6211;&#x662F;&#x6765;&#x81EA;&#x83DC;&#x9E1F;&#x6559;&#x7A0B;&#x7684;&#x7B2C;&#x4E00;CGI&#x7A0B;&#x5E8F;&lt;/h2&gt;&apos;print &apos;&lt;/body&gt;&apos;print &apos;&lt;/html&gt;&apos; &#x6D4F;&#x89C8;&#x5668;&#x6253;&#x5F00; http://localhost/cgi-bin/test.py&#xFF0C; &#x6D4B;&#x8BD5;&#x6210;&#x529F;&#x3002; cgi &#x8C03;&#x8BD5;&#x4E3A;&#x4E86;&#x6D4F;&#x89C8;&#x5668;&#x8C03;&#x8BD5;&#xFF0C;&#x5728; cgi &#x6587;&#x4EF6;&#x4E2D;&#x52A0;&#x4E0A;&#x4E0B;&#x9762;&#x7684;&#x4EE3;&#x7801;&#x3002;12import cgitbcgitb.enable() &#x8FD9;&#x65F6;&#xFF0C;debug&#x4FE1;&#x606F;&#x4F1A;&#x663E;&#x793A;&#x5728;&#x6D4F;&#x89C8;&#x5668;&#x4E0A;&#x9762;&#xFF0C;&#x65B9;&#x4FBF;&#x8C03;&#x8BD5;&#x3002;&#x751F;&#x4EA7;&#x73AF;&#x5883;&#x4E2D;&#x51FA;&#x4E8E;&#x5B89;&#x5168;&#x7684;&#x8003;&#x8651;&#xFF0C;&#x4E00;&#x822C;&#x4F1A;&#x5173;&#x6389;debug&#x7684;&#x529F;&#x80FD;&#x3002; ajax&#x7B80;&#x4ECB;AJAX &#x5168;&#x79F0; Asynchronous JavaScript and XML&#xFF08;&#x5F02;&#x6B65;&#x7684; JavaScript &#x548C; XML&#xFF09;&#x3002;&#x5B83;&#x5E76;&#x975E;&#x4E00;&#x79CD;&#x65B0;&#x7684;&#x6280;&#x672F;&#xFF0C;&#x800C;&#x662F;&#x4EE5;&#x4E0B;&#x51E0;&#x79CD;&#x539F;&#x6709;&#x6280;&#x672F;&#x7684;&#x7ED3;&#x5408;&#x4F53;&#x3002; &#x4F7F;&#x7528; CSS &#x548C; XHTML &#x6765;&#x8868;&#x793A;&#x3002; &#x4F7F;&#x7528; DOM &#x6A21;&#x578B;&#x6765;&#x4EA4;&#x4E92;&#x548C;&#x52A8;&#x6001;&#x663E;&#x793A;&#x3002; &#x4F7F;&#x7528; XMLHttpRequest &#x6765;&#x548C;&#x670D;&#x52A1;&#x5668;&#x8FDB;&#x884C;&#x5F02;&#x6B65;&#x901A;&#x4FE1;&#x3002; &#x4F7F;&#x7528; javascript &#x6765;&#x7ED1;&#x5B9A;&#x548C;&#x8C03;&#x7528;&#x3002; &#x901A;&#x8FC7; AJAX &#x5F02;&#x6B65;&#x6280;&#x672F;&#xFF0C;&#x53EF;&#x4EE5;&#x5728;&#x5BA2;&#x6237;&#x7AEF;&#x811A;&#x672C;&#x4E0E; web &#x670D;&#x52A1;&#x5668;&#x4EA4;&#x4E92;&#x6570;&#x636E;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#x4F7F;&#x7528; XMLHttpRequest &#x5BF9;&#x8C61;&#x6765;&#x5B8C;&#x6210; HTTP &#x8BF7;&#x6C42;(Request)/&#x5E94;&#x7B54;(Response)&#x6A21;&#x578B;&#xFF1A; &#x4E0D;&#x9700;&#x8981;&#x7528;&#x6237;&#x7B49;&#x5F85;&#x670D;&#x52A1;&#x7AEF;&#x54CD;&#x5E94;&#x3002;&#x5728;&#x5F02;&#x6B65;&#x6D3E;&#x53D1; XMLHttpRequest &#x8BF7;&#x6C42;&#x540E;&#x63A7;&#x5236;&#x6743;&#x9A6C;&#x4E0A;&#x5C31;&#x88AB;&#x8FD4;&#x56DE;&#x5230;&#x6D4F;&#x89C8;&#x5668;&#x3002;&#x754C;&#x9762;&#x4E0D;&#x4F1A;&#x51FA;&#x73B0;&#x767D;&#x677F;&#xFF0C;&#x5728;&#x5F97;&#x5230;&#x670D;&#x52A1;&#x5668;&#x54CD;&#x5E94;&#x4E4B;&#x524D;&#x8FD8;&#x53EF;&#x4EE5;&#x53CB;&#x597D;&#x7684;&#x7ED9;&#x51FA;&#x4E00;&#x4E2A;&#x52A0;&#x8F7D;&#x63D0;&#x793A;&#x3002; &#x4E0D;&#x9700;&#x8981;&#x91CD;&#x65B0;&#x52A0;&#x8F7D;&#x6574;&#x4E2A;&#x9875;&#x9762;&#x3002;&#x4E3A; XMLHttpRequest &#x6CE8;&#x518C;&#x4E00;&#x4E2A;&#x56DE;&#x8C03;&#x51FD;&#x6570;&#xFF0C;&#x5F85;&#x670D;&#x52A1;&#x5668;&#x54CD;&#x5E94;&#x5230;&#x8FBE;&#x65F6;&#xFF0C;&#x89E6;&#x53D1;&#x56DE;&#x8C03;&#x51FD;&#x6570;&#xFF0C;&#x5E76;&#x4E14;&#x4F20;&#x9012;&#x6240;&#x9700;&#x7684;&#x5C11;&#x91CF;&#x6570;&#x636E;&#x3002;&#x201C;&#x6309;&#x9700;&#x53D6;&#x6570;&#x636E;&#x201D;&#x4E5F;&#x964D;&#x4F4E;&#x4E86;&#x670D;&#x52A1;&#x5668;&#x7684;&#x538B;&#x529B;&#x3002; &#x4E0D;&#x9700;&#x8981;&#x4F7F;&#x7528;&#x9690;&#x85CF;&#x6216;&#x5185;&#x5D4C;&#x7684;&#x6846;&#x67B6;&#x3002;&#x5728; XHR &#x5BF9;&#x8C61;&#x4E4B;&#x524D;&#xFF0C;&#x6A21;&#x62DF; Ajax &#x901A;&#x4FE1;&#x901A;&#x5E38;&#x4F7F;&#x7528; hack &#x624B;&#x6BB5;&#xFF0C;&#x5982;&#x4F7F;&#x7528;&#x9690;&#x85CF;&#x7684;&#x6216;&#x5185;&#x5D4C;&#x7684;&#x6846;&#x67B6;(iframe&#x6807;&#x7B7E;)&#x3002; &#x91CD;&#x8981;&#x5BF9;&#x8C61;&#xFF1A;XMLHttpRequestXMLHttpRequest &#x662F;&#x4E00;&#x5957;&#x53EF;&#x4EE5;&#x5728; Javascript&#x3001;VbScript&#x3001;Jscript &#x7B49;&#x811A;&#x672C;&#x8BED;&#x8A00;&#x4E2D;&#x901A;&#x8FC7;http&#x534F;&#x8BAE;&#x4F20;&#x9001;&#x6216;&#x63A5;&#x6536; XML &#x53CA;&#x5176;&#x4ED6;&#x6570;&#x636E;&#x7684;&#x4E00;&#x5957;API&#x3002; &#x4E3B;&#x8981;&#x51FD;&#x6570;(&#x5BA2;&#x6237;&#x7AEF;) open(method,url,async, bstrUser, bstrPassword)&#x89C4;&#x5B9A;&#x8BF7;&#x6C42;&#x7684;&#x7C7B;&#x578B;&#x3001;URL &#x4EE5;&#x53CA;&#x662F;&#x5426;&#x5F02;&#x6B65;&#x5904;&#x7406;&#x8BF7;&#x6C42;&#x3002; setRequestHeader(name,value)&#x81EA;&#x5B9A;&#x4E49;HTTP&#x5934;&#x90E8;&#x4FE1;&#x606F;&#x3002;&#x9700;&#x5728;open()&#x65B9;&#x6CD5;&#x4E4B;&#x540E;&#x548C;send()&#x4E4B;&#x524D;&#x8C03;&#x7528;&#xFF0C;&#x624D;&#x80FD;&#x6210;&#x529F;&#x53D1;&#x9001;&#x8BF7;&#x6C42;&#x5934;&#x90E8;&#x4FE1;&#x606F;&#x3002;onreadystatchange, send(string)&#x5C06;&#x8BF7;&#x6C42;&#x53D1;&#x9001;&#x5230;&#x670D;&#x52A1;&#x5668;&#x3002;&#x53C2;&#x6570;string&#x4EC5;&#x7528;&#x4E8E;POST&#x8BF7;&#x6C42;&#xFF1B;&#x5BF9;&#x4E8E;GET&#x8BF7;&#x6C42;&#x7684;&#x53C2;&#x6570;&#x5199;&#x5728;url&#x540E;&#x9762;&#xFF0C;&#x6240;&#x4EE5;string&#x53C2;&#x6570;&#x4F20;&#x9012;null&#x3002; &#x7B80;&#x5355;&#x5B9E;&#x4F8B;&#x5C01;&#x88C5;123456789101112131415161718192021222324var myAjax = { // XMLHttpRequest IE7+, Firefox, Chrome, Opera, Safari &#xFF1B; ActiveXObject IE6, IE5 xhr: window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject(&apos;Microsoft.XMLHTTP&apos;), get: function (url, callback) { this.xhr.open(&apos;get&apos;, url); this.onreadystatechange(callback, this.xhr); this.xhr.send(null); }, post: function (url, data, callback) { this.xhr.open(&apos;post&apos;, url); this.xhr.setRequestHeader(&apos;Content-Type&apos;, &apos;application/x-www-form-urlencoded&apos;); this.onreadystatechange(callback, this.xhr); this.xhr.send(data); }, onreadystatechange: function (func, _xhr) { _xhr.onreadystatechange = function () { if (_xhr.readyState == 4) { if (_xhr.status == 200) { func(_xhr.responseText); } } } }} &#x4F7F;&#x7528;123456789$(&apos;#btn_nowTime1&apos;).bind(&apos;click&apos;, null , function () { myAjax.post(&apos;AjaxHandler.ashx&apos;, &apos;func=GetServerTime&apos; , function (data) { if (data) alert(data); } ); }); socketSocket &#x662F;&#x4EFB;&#x4F55;&#x4E00;&#x79CD;&#x8BA1;&#x7B97;&#x673A;&#x7F51;&#x7EDC;&#x901A;&#x8BAF;&#x4E2D;&#x6700;&#x57FA;&#x7840;&#x7684;&#x5185;&#x5BB9;&#x3002;&#x4F8B;&#x5982;&#x5F53;&#x4F60;&#x5728;&#x6D4F;&#x89C8;&#x5668;&#x5730;&#x5740;&#x680F;&#x4E2D;&#x8F93;&#x5165; www.oschina.net &#x65F6;&#xFF0C;&#x4F60;&#x4F1A;&#x6253;&#x5F00;&#x4E00;&#x4E2A;&#x5957;&#x63A5;&#x5B57;&#xFF0C;&#x7136;&#x540E;&#x8FDE;&#x63A5;&#x5230; www.oschina.net &#x5E76;&#x8BFB;&#x53D6;&#x54CD;&#x5E94;&#x7684;&#x9875;&#x9762;&#x7136;&#x540E;&#x7136;&#x540E;&#x663E;&#x793A;&#x51FA;&#x6765;&#x3002;&#x800C;&#x5176;&#x4ED6;&#x4E00;&#x4E9B;&#x804A;&#x5929;&#x5BA2;&#x6237;&#x7AEF;&#x5982; gtalk &#x548C; skype &#x4E5F;&#x662F;&#x7C7B;&#x4F3C;&#x3002;&#x4EFB;&#x4F55;&#x7F51;&#x7EDC;&#x901A;&#x8BAF;&#x90FD;&#x662F;&#x901A;&#x8FC7; Socket &#x6765;&#x5B8C;&#x6210;&#x7684;&#x3002;&#x4E0B;&#x9762;&#x7B80;&#x5355;&#x4ECB;&#x7ECD;&#x4E0B; python &#x7684; socket &#x7F16;&#x7A0B;&#x3002; server&#x4E3B;&#x8981;&#x51FD;&#x6570; s.bind(address)&#x5C06; socket &#x7ED1;&#x5B9A;&#x5230;&#x5730;&#x5740;, &#x5728; AF_INET &#x4E0B;,&#x4EE5;&#x5143;&#x7EC4;&#xFF08;host,port&#xFF09;&#x7684;&#x5F62;&#x5F0F;&#x8868;&#x793A;&#x5730;&#x5740;. s.listen(backlog)&#x5F00;&#x59CB;&#x76D1;&#x542C; TCP &#x4F20;&#x5165;&#x8FDE;&#x63A5;&#x3002;backlog &#x6307;&#x5B9A;&#x5728;&#x62D2;&#x7EDD;&#x8FDE;&#x63A5;&#x4E4B;&#x524D;&#xFF0C;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x53EF;&#x4EE5;&#x6302;&#x8D77;&#x7684;&#x6700;&#x5927;&#x8FDE;&#x63A5;&#x6570;&#x91CF;&#x3002;&#x8BE5;&#x503C;&#x81F3;&#x5C11;&#x4E3A;1&#xFF0C;&#x5927;&#x90E8;&#x5206;&#x5E94;&#x7528;&#x7A0B;&#x5E8F;&#x8BBE;&#x4E3A;5&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#x3002; s.accept()&#x63A5;&#x53D7;TCP&#x8FDE;&#x63A5;&#x5E76;&#x8FD4;&#x56DE;&#xFF08;conn,address&#xFF09;,&#x5176;&#x4E2D; conn &#x662F;&#x65B0;&#x7684; socket &#x5BF9;&#x8C61;&#xFF0C;&#x53EF;&#x4EE5;&#x7528;&#x6765;&#x63A5;&#x6536;&#x548C;&#x53D1;&#x9001;&#x6570;&#x636E;&#x3002;address&#x662F;&#x8FDE;&#x63A5;&#x5BA2;&#x6237;&#x7AEF;&#x7684;&#x5730;&#x5740;&#x3002; &#x8FC7;&#x7A0B; &#x521B;&#x5EFA; socket socket.socket(socket.AF_INET,socket.SOCK_STREAM) &#x7ED1;&#x5B9A;&#x5230;&#x672C;&#x5730;IP&#x4E0E;&#x7AEF;&#x53E3; s.bind() &#x5F00;&#x59CB;&#x76D1;&#x542C;&#x8FDE;&#x63A5; s.listen() &#x8FDB;&#x5165;&#x5FAA;&#x73AF;&#xFF0C;&#x4E0D;&#x65AD;&#x63A5;&#x53D7;&#x5BA2;&#x6237;&#x7AEF;&#x7684;&#x8FDE;&#x63A5;&#x8BF7;&#x6C42; s.accept() &#x7136;&#x540E;&#x63A5;&#x6536;&#x4F20;&#x6765;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x5E76;&#x53D1;&#x9001;&#x7ED9;&#x5BF9;&#x65B9;&#x6570;&#x636E; # &#x63A5;&#x6536;&#x6570;&#x636E; s.recv() # &#x53D1;&#x9001;&#x6570;&#x636E; s.sendall() &#x4F20;&#x8F93;&#x5B8C;&#x6BD5;&#x540E;&#xFF0C;&#x5173;&#x95ED;socket s.close() client&#x4E3B;&#x8981;&#x51FD;&#x6570; s.connect(address)&#x8FDE;&#x63A5;&#x5230; address &#x5904;&#x7684; socket&#x3002;&#x4E00;&#x822C; address &#x7684;&#x683C;&#x5F0F;&#x4E3A;&#x5143;&#x7EC4;&#xFF08;hostname,port&#xFF09;&#xFF0C;&#x5982;&#x679C;&#x8FDE;&#x63A5;&#x51FA;&#x9519;&#xFF0C;&#x8FD4;&#x56DE; socket.error &#x9519;&#x8BEF;&#x3002; s.connect_ex(adddress)&#x529F;&#x80FD;&#x4E0E; connect(address) &#x76F8;&#x540C;&#xFF0C;&#x4F46;&#x662F;&#x6210;&#x529F;&#x8FD4;&#x56DE;0&#xFF0C;&#x5931;&#x8D25;&#x8FD4;&#x56DE;errno&#x7684;&#x503C;&#x3002; &#x8FC7;&#x7A0B; &#x521B;&#x5EFA; socket&#xFF0C;&#x8FDE;&#x63A5;&#x8FDC;&#x7AEF;&#x5730;&#x5740; socket.socket(socket.AF_INET,socket.SOCK_STREAM) s.connect() &#x8FDE;&#x63A5;&#x540E;&#x53D1;&#x9001;&#x6570;&#x636E;&#x548C;&#x63A5;&#x6536;&#x6570;&#x636E; s.sendall() s.recv() &#x4F20;&#x8F93;&#x5B8C;&#x6BD5;&#x540E;&#xFF0C;&#x5173;&#x95ED; socket s.close() server, client &#x4E3B;&#x8981;&#x516C;&#x5171;&#x51FD;&#x6570; s.recv(bufsize[,flag])&#x63A5;&#x53D7; TCP socket &#x7684;&#x6570;&#x636E;&#x3002;&#x6570;&#x636E;&#x4EE5;&#x5B57;&#x7B26;&#x4E32;&#x5F62;&#x5F0F;&#x8FD4;&#x56DE;&#xFF0C;bufsize &#x6307;&#x5B9A;&#x8981;&#x63A5;&#x6536;&#x7684;&#x6700;&#x5927;&#x6570;&#x636E;&#x91CF;&#x3002;flag&#x63D0;&#x4F9B;&#x6709;&#x5173;&#x6D88;&#x606F;&#x7684;&#x5176;&#x4ED6;&#x4FE1;&#x606F;&#xFF0C;&#x901A;&#x5E38;&#x53EF;&#x4EE5;&#x5FFD;&#x7565;&#x3002; s.send(string[,flag])&#x53D1;&#x9001;TCP&#x6570;&#x636E;&#x3002;&#x5C06;string&#x4E2D;&#x7684;&#x6570;&#x636E;&#x53D1;&#x9001;&#x5230;&#x8FDE;&#x63A5;&#x7684; socket &#x3002;&#x8FD4;&#x56DE;&#x503C;&#x662F;&#x8981;&#x53D1;&#x9001;&#x7684;&#x5B57;&#x8282;&#x6570;&#x91CF;&#xFF0C;&#x8BE5;&#x6570;&#x91CF;&#x53EF;&#x80FD;&#x5C0F;&#x4E8E; string &#x7684;&#x5B57;&#x8282;&#x5927;&#x5C0F;&#x3002; s.sendall(string[,flag])&#x5B8C;&#x6574;&#x53D1;&#x9001;TCP&#x6570;&#x636E;&#x3002;&#x5C06;string&#x4E2D;&#x7684;&#x6570;&#x636E;&#x53D1;&#x9001;&#x5230;&#x8FDE;&#x63A5;&#x7684; socket &#xFF0C;&#x4F46;&#x5728;&#x8FD4;&#x56DE;&#x4E4B;&#x524D;&#x4F1A;&#x5C1D;&#x8BD5;&#x53D1;&#x9001;&#x6240;&#x6709;&#x6570;&#x636E;&#x3002;&#x6210;&#x529F;&#x8FD4;&#x56DE; None&#xFF0C;&#x5931;&#x8D25;&#x5219;&#x629B;&#x51FA;&#x5F02;&#x5E38;&#x3002; s.close()&#x5173;&#x95ED; socket&#x3002; &#x5B9E;&#x4F8B;&#x5B9E;&#x73B0;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684; socket&#xFF0C;&#x7528;&#x6237;&#x8F93;&#x5165;&#x95EE;&#x9898;&#xFF0C;&#x5237;&#x65B0;&#x9875;&#x9762;&#x54CD;&#x5E94;&#x3002; server &#x5B8C;&#x6574;&#x4EE3;&#x7801;1234567891011121314151617181920212223242526272829303132333435363738#!/usr/bin/python# -*- coding: UTF-8 -*-import socketimport sysHOST = &apos;localhost&apos; # Symbolic name meaning all available interfacesPORT = 9000 # Arbitrary non-privileged port# create tcp sockets = socket.socket(socket.AF_INET, socket.SOCK_STREAM)print &apos;Socket created&apos;try: s.bind((HOST, PORT))except socket.error , msg: print &apos;Bind failed. Error Code : &apos; + str(msg[0]) + &apos; Message &apos; + msg[1] sys.exit()print &apos;Socket bind complete&apos;s.listen(10)print &apos;Socket now listening&apos;while 1: #wait to accept a connection - blocking call conn, addr = s.accept() print &apos;Connected with &apos; + addr[0] + &apos;:&apos; + str(addr[1]) data = conn.recv(1024) reply = &apos;{&quot;search&quot;:{&quot;cost&quot;:0.01,&quot;data&quot;:[{&quot;ask&quot;:&quot;&#x5728;&#x54EA;&#x91CC;&quot;,&quot;answer&quot;:[&quot;&#x4E0D;&#x662F;&#x5728;&#x8FD9;&#x91CC;&quot;,&quot;&#x4F60;&#x5728;&#x8FD9;&#x91CC;&quot;,&quot;&#x597D;&#x4E45;&#x4E0D;&#x89C1;&quot;],&quot;score&quot;:99}]},&quot;model&quot;:{&quot;cost&quot;:0.02,&quot;answer&quot;:&quot;&#x5728;&#x8FD9;&#x91CC;&#x54C8;&#x54C8;&#x54C8;&quot;}}&apos; print reply if not data: break conn.sendall(reply)conn.close()s.close() client &#x5B8C;&#x6574;&#x4EE3;&#x7801;client &#x54CD;&#x5E94;&#x8868;&#x5355;mysocket.py12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#!/usr/bin/python# -*- coding: UTF-8 -*-import jsonimport socketimport cgitbimport cgicgitb.enable()form = cgi.FieldStorage()question = form.getvalue(&apos;question&apos;)sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)sock.connect((&apos;localhost&apos;, 9000))message = questiontry: # Set the whole string sock.sendall(message)except socket.error: # Send failed print &apos;Send failed&apos; sys.exit()# sock.send(data)result = json.loads(sock.recv(10240))# &#x4EE5;&#x4E0B;&#x4EE3;&#x7801;&#x5904;&#x7406; json &#x5E76;&#x663E;&#x793A;&#x8868;&#x5355;search_cost = result[&apos;search&apos;][&apos;cost&apos;]answers = result[&apos;search&apos;][&apos;data&apos;][0][&apos;answer&apos;]ans = answers[0]search_score = result[&apos;search&apos;][&apos;data&apos;][0][&apos;score&apos;]rnnAns = result[&apos;model&apos;]print &quot;Content-type:text/html&quot;printprint &apos;&lt;html&gt;&apos;print &apos;&lt;head&gt;&apos;print &apos;&lt;meta charset=&quot;utf-8&quot;&gt;&apos;print &apos;&lt;title&gt;TEST&lt;/title&gt;&apos;print &apos;&lt;/head&gt;&apos;print &apos;&lt;body align=&quot;center&quot;&gt;&lt;div width=&quot;980&quot; align=&quot;center&quot;&gt;&apos;print &quot;&lt;h2&gt;Question: &quot; + question + &quot;&lt;/h2&gt;&quot;print &quot;&lt;hr &gt;&lt;h2&gt; Top 3&lt;/h2&gt;&quot;print &quot;Cost: &quot;print search_costprint &quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;print &quot;Score: &quot;print search_scoreprint &quot;&lt;br &gt;&quot;for i in range(1, len(answers) + 1): print &quot;&lt;p&gt;&quot; print i print &quot;:&amp;nbsp;&quot; print answers[i - 1].encode(&apos;utf8&apos;) print &quot;&lt;br&gt;&quot;print &quot;&lt;hr /&gt;&lt;h2&gt; RNN &amp;nbsp; Model &lt;/h2&gt;&quot;print &quot;Cost: &quot;print rnnAns[&apos;cost&apos;]print &quot;&lt;br&gt;&lt;p&gt;&quot;print rnnAns[&apos;answer&apos;].encode(&apos;utf8&apos;)print &quot;&lt;/p&gt;&quot;print &quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;print &apos;&lt;/div&gt;&lt;/body&gt;&apos;print &apos;&lt;/html&gt;&apos; client &#x4E3B;&#x9875;&#x9762;index.html12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576&lt;html&gt;&lt;head&gt; &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt; &lt;style&gt; body { font-family: &quot;arial&quot;; } table, td, th { border: 1px solid #ddd; } th, td { border-bottom: 1px solid #ddd; height: 50px; text-align: left; } table { border-collapse: collapse; width: 80%; } } &lt;/style&gt; &lt;title&gt;Simple Evaluation Check&lt;/title&gt; &lt;script language=&quot;Javascript&quot;&gt; function xmlhttpPost(strURL) { var xmlHttpReq = false; var self = this; // Mozilla/Safari if (window.XMLHttpRequest) { self.xmlHttpReq = new XMLHttpRequest(); } // IE else if (window.ActiveXObject) { self.xmlHttpReq = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;); } self.xmlHttpReq.open(&apos;POST&apos;, strURL, true); # &#x8BBE;&#x7F6E; content-type self.xmlHttpReq.setRequestHeader(&apos;Content-Type&apos;, &apos;application/x-www-form-urlencoded&apos;); self.xmlHttpReq.onreadystatechange = function() { if (self.xmlHttpReq.readyState == 4) { updatepage(self.xmlHttpReq.responseText); } } self.xmlHttpReq.send(getquerystring()); } function getquerystring() { var form = document.forms[&apos;f1&apos;]; var question = form.question.value; qstr = &apos;question=&apos; + question; // NOTE: no &apos;?&apos; before querystring return qstr; } function updatepage(str) { document.getElementById(&quot;result&quot;).innerHTML = str; } &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;form name=&quot;f1&quot;&gt; &lt;p&gt;Question: &lt;input name=&quot;question&quot; type=&quot;text&quot;&gt; &lt;input value=&quot;Go&quot; type=&quot;button&quot; onclick=&apos;JavaScript:xmlhttpPost(&quot;cgi-bin/mysocket.py&quot;)&apos;&gt; &lt;/p&gt; &lt;div id=&quot;result&quot;&gt;&lt;/div&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt; &#x8FD0;&#x884C;&#x8FD0;&#x884C; server.py&#xFF0C;&#x6D4F;&#x89C8;&#x5668;&#x8F93;&#x5165; http://localhost/index.html &#x67E5;&#x770B;&#x6548;&#x679C;&#x4E3B;&#x9875; &#x5F02;&#x6B65;&#x54CD;&#x5E94; server &#x53C2;&#x8003;&#x94FE;&#x63A5;Python CGI&#x7F16;&#x7A0B;Writing Your First Python CGI &#x2013; Ajax Script&#x89E6;&#x78B0;jQuery&#xFF1A;AJAX&#x5F02;&#x6B65;&#x8BE6;&#x89E3;","tags":"cgi 前端 ajax socket"},{"title":"Tf-idf 总结笔记","url":"/2016/07/10/Tfidf总结笔记/","text":"&#x7B80;&#x5355;&#x7684;&#x6982;&#x5FF5;&#xFF0C;&#x5F3A;&#x5927;&#x7684;&#x6548;&#x7528;&#x3002;&#x9644; sklearn &#x548C; nltk &#x5B9E;&#x73B0;&#x4EE3;&#x7801;&#x3002; &#x90E8;&#x5206;&#x622A;&#x56FE;&#x3001;&#x6982;&#x5FF5;&#x63CF;&#x8FF0;&#x6765;&#x81EA; CMU 95 - 865 Text Analytics&#xFF0C;&#x4E0A;&#x8BFE;&#x7684;&#x65F6;&#x5019;&#x6CA1;&#x6709;&#x597D;&#x597D;&#x505A;&#x7B14;&#x8BB0;&#xFF0C;&#x5230;&#x5B9E;&#x4E60;&#x7684;&#x65F6;&#x5019;&#x53D1;&#x73B0;&#xFF0C;&#x6709;&#x4E9B;&#x6982;&#x5FF5;&#x867D;&#x7136;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x4F46;&#x786E;&#x5B9E;&#x5F88;&#x5B9E;&#x7528;&#xFF0C;&#x7406;&#x89E3;&#x900F;&#x5F7B;&#x624D;&#x80FD;&#x53D1;&#x6325;&#x65E0;&#x7A77;&#x6548;&#x529B;&#x3002;&#x662F;&#x5728;&#x8BC4;&#x4F30;&#x805A;&#x7C7B;&#x7B97;&#x6CD5;&#x7684;&#x65F6;&#x5019;&#x5076;&#x7136;&#x60F3;&#x5230;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x786E;&#xFF01;&#x5B9E;&#xFF01;&#x5F88;&#xFF01;&#x6709;&#xFF01;&#x7528;&#xFF01; TF-IDF&#xFF08;term frequency&#x2013;inverse document frequency&#xFF09;&#xFF0C;&#x4E00;&#x79CD;&#x5E38;&#x7528;&#x7684;&#x52A0;&#x6743;&#x6280;&#x672F;&#xFF0C;&#x7528;&#x4EE5;&#x8BC4;&#x4F30;&#x4E00;&#x5B57;&#x8BCD;&#x5BF9;&#x4E8E;&#x4E00;&#x4E2A;&#x6587;&#x4EF6;&#x96C6;&#x6216;&#x4E00;&#x4E2A;&#x8BED;&#x6599;&#x5E93;&#x4E2D;&#x7684;&#x5176;&#x4E2D;&#x4E00;&#x4EFD;&#x6587;&#x4EF6;&#x7684;&#x91CD;&#x8981;&#x7A0B;&#x5EA6;&#x3002;&#x4E3B;&#x8981;&#x903B;&#x8F91;&#x662F;&#xFF1A;&#x5B57;&#x8BCD;&#x7684;&#x91CD;&#x8981;&#x6027;&#x968F;&#x8457;&#x5B83;&#x5728;&#x6587;&#x4EF6;&#x4E2D;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;&#x6210;&#x6B63;&#x6BD4;&#x589E;&#x52A0;&#xFF0C;&#x4F46;&#x540C;&#x65F6;&#x4F1A;&#x968F;&#x8457;&#x5B83;&#x5728;&#x8BED;&#x6599;&#x5E93;&#x4E2D;&#x51FA;&#x73B0;&#x7684;&#x9891;&#x7387;&#x6210;&#x53CD;&#x6BD4;&#x4E0B;&#x964D;&#x3002; TF-IDF&#x52A0;&#x6743;&#x7684;&#x5404;&#x79CD;&#x5F62;&#x5F0F;&#x5E38;&#x88AB;&#x641C;&#x5BFB;&#x5F15;&#x64CE;&#x5E94;&#x7528;&#xFF0C;&#x4F5C;&#x4E3A;&#x6587;&#x4EF6;&#x4E0E;&#x7528;&#x6237;&#x67E5;&#x8BE2;&#x4E4B;&#x95F4;&#x76F8;&#x5173;&#x7A0B;&#x5EA6;&#x7684;&#x5EA6;&#x91CF;&#x6216;&#x8BC4;&#x7EA7;&#x3002;&#x9664;&#x4E86;TF-IDF&#x4EE5;&#x5916;&#xFF0C;&#x56E0;&#x7279;&#x7F51;&#x4E0A;&#x7684;&#x641C;&#x5BFB;&#x5F15;&#x64CE;&#x8FD8;&#x4F1A;&#x4F7F;&#x7528;&#x57FA;&#x4E8E;&#x8FDE;&#x7ED3;&#x5206;&#x6790;&#x7684;&#x8BC4;&#x7EA7;&#x65B9;&#x6CD5;&#xFF0C;&#x4EE5;&#x786E;&#x5B9A;&#x6587;&#x4EF6;&#x5728;&#x641C;&#x5BFB;&#x7ED3;&#x679C;&#x4E2D;&#x51FA;&#x73B0;&#x7684;&#x987A;&#x5E8F;&#x3002; &#x9884;&#x5907;&#x77E5;&#x8BC6;Heap&#x2019;s law &#x901A;&#x5E38;&#x7528;&#x4E8E;&#x9884;&#x6D4B; vocabulary size&#xFF0C;Zipf&#x2019;s law &#x5219;&#x7528;&#x4E8E;&#x63CF;&#x8FF0; term frequency &#x7684;&#x5206;&#x5E03;&#x3002; Heaps&#x2019; Law&#x4E00;&#x5F20;&#x56FE;&#x89E3;&#x91CA;&#x3002; Zipf&#x2019;s Law&#x9F50;&#x666E;&#x592B;&#x5B9A;&#x5F8B;&#xFF0C;&#x672C;&#x79D1;&#x4FE1;&#x606F;&#x8BA1;&#x91CF;&#x5B66;&#x5C31;&#x5B66;&#x8FC7;&#xFF0C;&#x5927;&#x81F4;&#x662F;&#x8BF4;&#xFF0C;&#x5728;&#x4E00;&#x4E2A;&#x81EA;&#x7136;&#x8BED;&#x8A00;&#x7684;&#x8BED;&#x6599;&#x5E93;&#x4E2D;&#xFF0C;&#x4E00;&#x4E2A;&#x8BCD;&#x7684;&#x51FA;&#x73B0;&#x9891;&#x6570;&#x548C;&#x8FD9;&#x4E2A;&#x8BCD;&#x5728;&#x8FD9;&#x4E2A;&#x8BED;&#x6599;&#x4E2D;&#x7684;&#x6392;&#x540D;&#xFF08;&#x8FD9;&#x4E2A;&#x6392;&#x540D;&#x662F;&#x57FA;&#x4E8E;&#x51FA;&#x73B0;&#x6B21;&#x6570;&#x7684;&#xFF09;&#x6210;&#x53CD;&#x6BD4;&#xFF0C;&#x9891;&#x6570;&#x548C;&#x6392;&#x540D;&#x7684;&#x4E58;&#x79EF;&#x662F;&#x5E38;&#x6570;&#x3002;&#x5373; Rank Frequency = Constant (Constant = 0.1 N)&#xFF0C;&#x6216;&#x8005; P(tR) = 0.1/N&#x3002;Zipf&#x2019;s law &#x544A;&#x8BC9;&#x6211;&#x4EEC;&#x4EE5;&#x4E0B;&#x51E0;&#x70B9; &#x2018;A few terms are very common&#x2019;&#xFF0C;&#x8FD9;&#x4E9B;&#x5927;&#x90E8;&#x5206;&#x662F; stopwords&#x3002; &#x2018;Most terms are very rare&#x2019;&#xFF0C;&#x591A;&#x6570; term &#x53EA;&#x51FA;&#x73B0;&#x4E24;&#x4E09;&#x6B21;&#xFF0C;&#x5B8C;&#x5168;&#x53EF;&#x4EE5;&#x5FFD;&#x7565;&#x3002; very common &#x7684;&#xFF0C;very rare &#x7684;&#x5728;&#x6587;&#x672C;&#x5206;&#x6790;&#x4E2D;&#x90FD;&#x53EF;&#x4EE5;&#x5FFD;&#x7565;&#xFF0C;&#x771F;&#x6B63;&#x91CD;&#x8981;&#x7684;&#x662F;&#x5728;&#x4E2D;&#x95F4;&#x7684;&#x4E00;&#x90E8;&#x5206; terms&#x3002; &#x4E24;&#x5E45;&#x56FE;&#x6982;&#x62EC;&#x3002; &#x4ECE; Zipf&#x2019;s law &#x5F97;&#x5230;&#x7684;&#x4E00;&#x4E9B;&#x6570;&#x5B57;&#x662F;&#xFF1A; &#x6392;&#x540D;&#x7B2C;&#x4E00;&#x7684;&#x8BCD;&#x5360;&#x5168;&#x90E8;&#x8BCD;&#x7684; 10% &#x6392;&#x540D;&#x524D;5&#x7684;&#x8BCD;&#x5360;&#x5168;&#x90E8;&#x8BCD;&#x7684; 23% &#x524D;100 &#x7684;&#x8BCD;&#x5360;&#x5168;&#x90E8;&#x8BCD;&#x7684; 52% 50% &#x7684; term &#x53EA;&#x51FA;&#x73B0;&#x4E86;&#x4E00;&#x6B21; 91% &#x7684; term &#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;&#x5C0F;&#x4E8E; 10 &#x5E94;&#x7528;&#x5408;&#x7406;&#x4F7F;&#x7528; Zipf&#x2019;s law&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5927;&#x5927;&#x51CF;&#x5C11;&#x5B57;&#x5178;&#x5B58;&#x50A8;&#x5185;&#x5B58;&#x3002;&#x53E6;&#x5916;&#xFF0C; Zipf&#x2019;s law &#x8FD8;&#x53EF;&#x4EE5;&#x4E3A;&#x7279;&#x5B9A;&#x7684;&#x4EFB;&#x52A1;&#x5236;&#x4F5C;&#x7279;&#x5B9A;&#x7684; stopwords list&#x3002; Example: &#x201C;trading&#x201D; and &#x201C;prices&#x201D; are frequent Wall Street Journal terms&#x2022; They are candidate stopwords&#x2022; They also are important terms for financial analysis&#x2022; If your task is financial analysis, leave them in&#x2022; If your task is analysis of technology products, maybe discard them Tf-idf &#x7B14;&#x8BB0;&#x903B;&#x8F91;Zipf&#x2019;s law &#x7ED9;&#x51FA;&#x4E86;&#x81EA;&#x7136;&#x8BED;&#x8A00;&#x7684;&#x7EDF;&#x8BA1;&#x6027;&#x8D28;&#xFF0C;term frequence is highly skewed. &#x7531;&#x6B64;&#x53D1;&#x5C55;&#x51FA;&#x4E86;&#x66F4;&#x80FD;&#x4EE3;&#x8868; term weight &#x7684;&#x65B9;&#x6CD5;&#xFF0C;tf - idf&#xFF0C;&#x7528;&#x4E2D;&#x6587;&#x6765;&#x8868;&#x8FF0;&#x6CA1;&#x90A3;&#x4E48;&#x76F4;&#x89C2;&#xFF0C;&#x4E14;&#x770B;&#x82F1;&#x6587;&#x89E3;&#x91CA;&#x3002;&#x7B80;&#x5355;&#x6765;&#x8BB2;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x5982;&#x679C;&#x67D0;&#x4E2A;&#x8BCD;&#x6216;&#x77ED;&#x8BED;&#x5728;&#x4E00;&#x7BC7;&#x6587;&#x7AE0;&#x4E2D;&#x51FA;&#x73B0;&#x7684;&#x9891;&#x7387; TF &#x9AD8;&#xFF0C;&#x5E76;&#x4E14;&#x5728;&#x5176;&#x4ED6;&#x6587;&#x7AE0;&#x4E2D;&#x5F88;&#x5C11;&#x51FA;&#x73B0;&#xFF0C;&#x5219;&#x8BA4;&#x4E3A;&#x6B64;&#x8BCD;&#x6216;&#x8005;&#x77ED;&#x8BED;&#x5177;&#x6709;&#x5F88;&#x597D;&#x7684;&#x7C7B;&#x522B;&#x533A;&#x5206;&#x80FD;&#x529B;&#xFF0C;&#x9002;&#x5408;&#x7528;&#x6765;&#x5206;&#x7C7B;&#x3002; &#x516C;&#x5F0F; tf &#x901A;&#x5E38;&#x4F1A;&#x88AB;&#x6B63;&#x89C4;&#x5316;&#xFF0C;&#x4EE5;&#x9632;&#x6B62;&#x5B83;&#x504F;&#x5411;&#x957F;&#x7684;&#x6587;&#x4EF6;&#x3002;&#xFF08;&#x540C;&#x4E00;&#x4E2A;&#x8BCD;&#x8BED;&#x5728;&#x957F;&#x6587;&#x4EF6;&#x91CC;&#x53EF;&#x80FD;&#x4F1A;&#x6BD4;&#x77ED;&#x6587;&#x4EF6;&#x6709;&#x66F4;&#x9AD8;&#x7684;&#x8BCD;&#x9891;&#xFF0C;&#x800C;&#x4E0D;&#x7BA1;&#x8BE5;&#x8BCD;&#x8BED;&#x91CD;&#x8981;&#x4E0E;&#x5426;&#x3002;&#xFF09; &#x610F;&#x4E49; Reward words that better represent each document Reward words that discriminate among different documents Scale for document length &#x5F53;&#x7136;&#x4E5F;&#x6709;&#x4E9B;&#x60C5;&#x5883;&#x4E0B; tf &#x5DF2;&#x7ECF;&#x8DB3;&#x591F;&#xFF0C;&#x5E76;&#x4E0D;&#x9700;&#x8981; tfidf&#xFF0C;&#x5982; &#x6587;&#x4EF6;&#x90FD;&#x662F;&#x540C;&#x4E00;&#x957F;&#x5EA6; &#x5E76;&#x4E0D;&#x9700;&#x8981;&#x533A;&#x5206;&#x6587;&#x4EF6;&#xFF08;&#x4E5F;&#x5C31;&#x4E0D;&#x9700;&#x8981;idf&#xFF09; &#x673A;&#x5668;&#x5B66;&#x4E60;&#x7B97;&#x6CD5;&#x53EF;&#x4EE5;&#x5B66;&#x4E60;&#x7279;&#x5F81;&#x7B49; &#x4EE3;&#x7801;&#x5B9E;&#x73B0;sklearn &#x65B9;&#x6CD5;&#x9996;&#x5148;&#x770B;&#x4E0B;&#x8981;&#x7528;&#x5230;&#x7684;&#x4E24;&#x4E2A;&#x7C7B;&#xFF0C;CountVectorizer &#x548C; TfidfTransformer&#x3002;&#x53C2;&#x6570;&#x4E00;&#x76EE;&#x4E86;&#x7136;&#xFF0C;&#x4E4B;&#x540E;&#x5BF9;&#x6BD4;&#x4E0E; nltk &#x7ED3;&#x679C;&#x5DEE;&#x5F02;&#x65F6;&#x518D;&#x505A;&#x89E3;&#x91CA;&#x3002;CountVectorizer12345678&gt;&gt;&gt; vectorizer = CountVectorizer()&gt;&gt;&gt; vectorizerCountVectorizer(analyzer=u&apos;word&apos;, binary=False, decode_error=u&apos;strict&apos;, dtype=&lt;type &apos;numpy.int64&apos;&gt;, encoding=u&apos;utf-8&apos;, input=u&apos;content&apos;, lowercase=True, max_df=1.0, max_features=None, min_df=1, ngram_range=(1, 1), preprocessor=None, stop_words=None, strip_accents=None, token_pattern=u&apos;(?u)\\\\b\\\\w\\\\w+\\\\b&apos;, tokenizer=None, vocabulary=None) TfidfTransformer1234&gt;&gt;&gt; tfidfTransformer = TfidfTransformer()&gt;&gt;&gt; tfidfTransformerTfidfTransformer(norm=u&apos;l2&apos;, smooth_idf=True, sublinear_tf=False, use_idf=True) &#x8BA1;&#x7B97; tfidf &#x4EE3;&#x7801;123456789101112131415161718192021222324252627282930from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformercorpus = []doc1 = &quot;I love Chinese food&quot;doc2 = &quot;I love American spirits&quot;corpus.append(doc1)corpus.append(doc2)def calTfidf(corpus): # &#x8BE5;&#x8F6C;&#x6362;&#x4E3A;&#x8BCD;&#x9891;&#x77E9;&#x9635; &#x77E9;&#x9635;&#x5143;&#x7D20;a[i][j] &#x8868;&#x793A;j&#x8BCD;&#x5728;i&#x7C7B;&#x6587;&#x672C;&#x4E0B;&#x7684;&#x8BCD;&#x9891; vectorizer = CountVectorizer() # vectorizer = CountVectorizer(token_pattern=&apos;(?u)\\\\b\\\\w+\\\\b&apos;) # &#x7EDF;&#x8BA1;&#x6BCF;&#x4E2A;&#x8BCD;&#x8BED;&#x7684;tf-idf&#x6743;&#x503C; transformer = TfidfTransformer() # transformer = TfidfTransformer(norm=None) tfidf = transformer.fit_transform(vectorizer.fit_transform(corpus)) tfidf_weight = tfidf.toarray() idf_weight = transformer.idf_ # idf np.log(float(n_samples) / df) + 1.0 word = vectorizer.get_feature_names() # &#x83B7;&#x53D6;&#x8BCD;&#x888B;&#x6A21;&#x578B;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x8BCD;&#x8BED; termWeights = dict() for i in range(len(tfidf_weight)): lwords = [(word[j], float(tfidf_weight[i][j]), float(idf_weight[j])) for j in range(len(word))] lwords = sorted(lwords, key=lambda m: -m[1]) termWeights[i] = lwords for key, items in termWeights.items(): print u&quot;-------&#x7B2C;&quot;, key, u&quot;&#x7C7B;&#x6587;&#x672C;&#x7684;&#x8BCD;&#x8BED;tf-idf&#x6743;&#x91CD;------&quot; for item in items: print &apos;Word: {}\\tTfidf: {}\\tIdf: {}&apos;.format(item[0], item[1], item[2]) &#x8F93;&#x51FA; -------&#x7B2C; 0 &#x7C7B;&#x6587;&#x672C;&#x7684;&#x8BCD;&#x8BED;tf-idf&#x6743;&#x91CD;------ Word: chinese Tfidf: 0.631667201738 Idf: 1.40546510811 Word: food Tfidf: 0.631667201738 Idf: 1.40546510811 Word: love Tfidf: 0.449436416524 Idf: 1.0 Word: american Tfidf: 0.0 Idf: 1.40546510811 Word: spirits Tfidf: 0.0 Idf: 1.40546510811 -------&#x7B2C; 1 &#x7C7B;&#x6587;&#x672C;&#x7684;&#x8BCD;&#x8BED;tf-idf&#x6743;&#x91CD;------ Word: american Tfidf: 0.631667201738 Idf: 1.40546510811 Word: spirits Tfidf: 0.631667201738 Idf: 1.40546510811 Word: love Tfidf: 0.449436416524 Idf: 1.0 Word: chinese Tfidf: 0.0 Idf: 1.40546510811 Word: food Tfidf: 0.0 Idf: 1.40546510811 &#x4E3A;&#x4EC0;&#x4E48;&#x5C11;&#x4E86;&#x4E2A; I &#xFF1F;&#x770B; CountVectorizer &#x6784;&#x9020;&#x5668;&#x6709;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#x662F; token_pattern&#xFF0C;&#x5FFD;&#x7565;&#x4E86;&#x5355;&#x4E2A;&#x5B57;&#x6BCD;&#x7684; word&#x3002; token_pattern (default u&apos;(?u)\\b\\w\\w+\\b&apos;), regular expression identifying tokens&#x2013;by default words that consist of a single character (e.g., &#x2018;a&#x2019;, &#x2018;2&#x2019;) are ignored, setting token_pattern to &apos;(?u)\\b\\w+\\b&apos; will include these tokens &#x6539;&#x6210; vectorizer = CountVectorizer(token_pattern=&#x2019;(?u)\\b\\w+\\b&#x2019;) &#x5C31;&#x4F1A;&#x5305;&#x62EC; I -------&#x7B2C; 0 &#x7C7B;&#x6587;&#x672C;&#x7684;&#x8BCD;&#x8BED;tf-idf&#x6743;&#x91CD;------ Word: chinese Tfidf: 0.576152355165 Idf: 1.40546510811 Word: food Tfidf: 0.576152355165 Idf: 1.40546510811 Word: i Tfidf: 0.40993714596 Idf: 1.0 Word: love Tfidf: 0.40993714596 Idf: 1.0 Word: american Tfidf: 0.0 Idf: 1.40546510811 Word: spirits Tfidf: 0.0 Idf: 1.40546510811 -------&#x7B2C; 1 &#x7C7B;&#x6587;&#x672C;&#x7684;&#x8BCD;&#x8BED;tf-idf&#x6743;&#x91CD;------ Word: american Tfidf: 0.576152355165 Idf: 1.40546510811 Word: spirits Tfidf: 0.576152355165 Idf: 1.40546510811 Word: i Tfidf: 0.40993714596 Idf: 1.0 Word: love Tfidf: 0.40993714596 Idf: 1.0 Word: chinese Tfidf: 0.0 Idf: 1.40546510811 Word: food Tfidf: 0.0 Idf: 1.40546510811 nltk &#x65B9;&#x6CD5;1234567891011121314151617181920212223242526272829303132333435363738from __future__ import division, unicode_literalsfrom textblob import TextBlob as tbimport mathcorpus = []doc1 = &quot;I love Chinese food&quot;doc2 = &quot;I love American spirits&quot;corpus.append(doc1)corpus.append(doc2)def tf(word, blob): return blob.words.count(word) / len(blob.words)def n_containing(word, bloblist): return sum(1 for blob in bloblist if word in blob.words)def idf(word, bloblist): return math.log(len(bloblist) / n_containing(word, bloblist)) + 1def tfidf(word, blob, bloblist): return tf(word, blob) * idf(word, bloblist)def calTfidf(corpus): bloblist = [tb(doc.strip(&apos;\\n&apos;)) for doc in corpus] for i, blob in enumerate(bloblist): tf_scores = {word: tf(word, blob) for word in blob.words} idf_scores = {word: idf(word, bloblist) for word in blob.words} tfidf_scores = {word: tfidf(word, blob, bloblist) for word in blob.words} sorted_words = sorted(tfidf_scores.items(), key=lambda x: x[1], reverse=True) print &apos;u&quot;-------&#x7B2C;&quot;, key, u&quot;&#x7C7B;&#x6587;&#x672C;&#x7684;&#x8BCD;&#x8BED;tf-idf&#x6743;&#x91CD;------&quot;&apos; for word, score in sorted_words[:50]: print (&quot;Word: {}\\t TF-IDF: {}\\t TF: {}\\t IDF: {}&quot;.format(word, round(score, 5), tf_scores[word], round(idf_scores[word], 5))) &#x8F93;&#x51FA; u&quot;-------&#x7B2C;&quot;, key, u&quot;&#x7C7B;&#x6587;&#x672C;&#x7684;&#x8BCD;&#x8BED;tf-idf&#x6743;&#x91CD;------&quot; Word: food TF-IDF: 0.42329 TF: 0.25 IDF: 1.69315 Word: Chinese TF-IDF: 0.42329 TF: 0.25 IDF: 1.69315 Word: I TF-IDF: 0.25 TF: 0.25 IDF: 1.0 Word: love TF-IDF: 0.25 TF: 0.25 IDF: 1.0 u&quot;-------&#x7B2C;&quot;, key, u&quot;&#x7C7B;&#x6587;&#x672C;&#x7684;&#x8BCD;&#x8BED;tf-idf&#x6743;&#x91CD;------&quot; Word: American TF-IDF: 0.42329 TF: 0.25 IDF: 1.69315 Word: spirits TF-IDF: 0.42329 TF: 0.25 IDF: 1.69315 Word: I TF-IDF: 0.25 TF: 0.25 IDF: 1.0 Word: love TF-IDF: 0.25 TF: 0.25 IDF: 1.0 &#x6BD4;&#x8F83;&#x53D1;&#x73B0; sklearn &#x548C; nltk &#x4E24;&#x79CD;&#x65B9;&#x6CD5;&#x8BA1;&#x7B97;&#x7684;&#x7ED3;&#x679C;&#x4E0D;&#x540C;&#xFF0C;&#x7814;&#x7A76;&#x4E00;&#x4E0B;&#x53D1;&#x73B0;&#x662F;&#x5BF9; tf &#x7684;&#x5904;&#x7406;&#x4E0D;&#x540C;&#x3002; &#x770B; sklearn &#x7684; TfidfTransformer&#xFF0C;&#x53D1;&#x73B0;&#x8FDB;&#x884C;&#x4E86;&#x6B63;&#x5219;&#x5316;(L2)&#xFF0C;norm=u&#x2019;l2&#x2019;&#x3002; &#x800C; nltk&#xFF0C;&#x6211;&#x4EEC;&#x7528;&#x7684;&#x662F; Linear scaling &#x7684;&#x65B9;&#x6CD5;&#x3002; &#x4E3A;&#x4EC0;&#x4E48;&#x8981;&#x8FDB;&#x884C;&#x8FD9;&#x6837;&#x7684;&#x6BD4;&#x8F83;&#xFF0C;&#x5B9E;&#x9645;&#x662F;&#x56E0;&#x4E3A;&#x5F53;&#x65F6;&#x9700;&#x8981;&#x770B; tf-idf, tf, idf &#x5404;&#x81EA;&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x5374;&#x53D1;&#x73B0; sklearn &#x5F97;&#x4E0D;&#x5230;&#x6B63;&#x786E;&#x7684; tf&#xFF0C;&#x4E8E;&#x662F;&#x624D;&#x6298;&#x817E;&#x7684;&#x7528;&#x4E86; nltk&#xFF0C;&#x5B9E;&#x9645;&#x4E0A;&#x901A;&#x8FC7; nltk &#x81EA;&#x5DF1;&#x5199;&#x51FD;&#x6570;&#x4F1A;&#x66F4;&#x7075;&#x6D3B;&#xFF0C;&#x5177;&#x4F53;&#x95EE;&#x9898;&#x5177;&#x4F53;&#x5206;&#x6790;&#x5427;&#x3002; &#x7F3A;&#x9677;&#x4E0E;&#x4E0D;&#x8DB3;TF-IDF &#x5E76;&#x4E0D;&#x662F;&#x4E07;&#x80FD;&#x7684;&#xFF0C;&#x5B83;&#x5355;&#x7EAF;&#x5730;&#x8BA4;&#x4E3A;&#x6587;&#x672C;&#x9891;&#x6570;&#x5C0F;&#x7684;&#x5355;&#x8BCD;&#x5C31;&#x8D8A;&#x91CD;&#x8981;&#xFF0C;&#x6587;&#x672C;&#x9891;&#x6570;&#x5927;&#x7684;&#x5355;&#x8BCD;&#x5C31;&#x8D8A;&#x65E0;&#x7528;&#xFF0C;&#x663E;&#x7136;&#x8FD9;&#x5E76;&#x4E0D;&#x662F;&#x5B8C;&#x5168;&#x6B63;&#x786E;&#x7684;&#x3002;&#x53EF;&#x80FD;&#x4F1A;&#x51FA;&#x73B0;&#x7684;&#x7ED3;&#x679C;&#xFF1A; &#x88AB;&#x5FFD;&#x7565;&#x7684;&#x9AD8;&#x9891;&#x8BCD;&#x3002;&#x9AD8;&#x9891;&#x8BCD; != &#x65E0;&#x610F;&#x4E49;&#x7684;&#x8BCD;&#x3002;&#x5F15;&#x5165; idf&#xFF0C;&#x521D;&#x8877;&#x662F;&#x6291;&#x5236;&#x65E0;&#x610F;&#x4E49;&#x7684;&#x9AD8;&#x9891;&#x8BCD;&#xFF08;&#x901A;&#x5E38;&#x662F; stopwords&#xFF09;&#x7684;&#x5F71;&#x54CD;&#xFF0C;&#x5982;&#x4E0A;&#x6587;&#x63D0;&#x5230;&#x7684; Wall Street Journal &#x4F8B;&#x5B50;&#xFF0C;&#x5982;&#x679C;&#x5728;&#x91D1;&#x878D;&#x5206;&#x6790;&#x7684;&#x573A;&#x666F;&#x4E0B;&#xFF0C;&#x201C;trading&#x201D; &#x548C; &#x201C;prices&#x201D; &#x8FD9;&#x7C7B;&#x9AD8;&#x9891;&#x8BCD;&#x672C;&#x4E0D;&#x8BE5;&#x88AB;&#x5FFD;&#x7565;&#x3002; &#x88AB;&#x5F3A;&#x8C03;&#x7684;&#x4F4E;&#x9891;&#x8BCD;&#x3002; &#x8FD9;&#x4E5F;&#x662F;&#x4E3A;&#x4EC0;&#x4E48;&#x6211;&#x5728;&#x8BA1;&#x7B97;&#x4E86; tf-idf &#x7684;&#x540C;&#x65F6;&#xFF0C;&#x8FD8;&#x8981;&#x89C2;&#x5BDF; tf&#x3001;idf &#x7684;&#x503C;&#x7684;&#x539F;&#x56E0;&#x3002;&#x6839;&#x636E;&#x4E0D;&#x540C;&#x7684;&#x573A;&#x666F;&#xFF0C;&#x53EF;&#x80FD;&#x9700;&#x8981;&#x5F15;&#x5165;&#x9608;&#x503C;&#xFF0C;&#x9650;&#x5236;IDF&#x503C;&#x8FC7;&#x5927;&#x7684;&#x8BCD;&#x8BED;&#x5BFC;&#x5165;&#x3002;&#x53E6;&#x5916; tfidf &#x8FD9;&#x79CD;&#x57FA;&#x4E8E;&#x8BCD;&#x888B;&#x7684;&#x7B97;&#x6CD5;&#x8FD8;&#x6709;&#x4E2A;&#x4E0E;&#x751F;&#x4FF1;&#x6765;&#x7684;&#x786C;&#x4F24; &#x2013; &#x4F4D;&#x7F6E;&#x4FE1;&#x606F;&#x88AB;&#x5FFD;&#x7565;&#x3002;","tags":"nlp"},{"title":"Meteor--App_Recommender_System","url":"/2016/07/07/Meteor-App-Recommender-System/","text":"Meteor &#x662F;&#x4E00;&#x4E2A;&#x6784;&#x5EFA;&#x5728; Node.js &#x4E4B;&#x4E0A;&#x7684;&#x5E73;&#x53F0;&#xFF0C;&#x7528;&#x6765;&#x5F00;&#x53D1;&#x5B9E;&#x65F6;&#x7F51;&#x9875;&#x7A0B;&#x5E8F;&#xFF0C;&#x8FD9;&#x4E00;&#x7BC7;&#x7528; Meteor &#x642D;&#x5EFA; App_Recommender_System &#x7684; front-end. &#x57FA;&#x7840;Meteor &#x7684;&#x521B;&#x65B0;Meteor &#x7684;&#x5173;&#x952E;&#x6027;&#x521B;&#x65B0;&#x5728;&#x4E8E; Rails &#x7A0B;&#x5E8F;&#x53EA;&#x8DD1;&#x5728;&#x670D;&#x52A1;&#x5668;&#x4E0A;&#xFF0C;&#x800C;&#x4E00;&#x4E2A; Meteor App &#x8FD8;&#x5305;&#x62EC;&#x5728;&#x5BA2;&#x6237;&#x7AEF;&#xFF08;&#x6D4F;&#x89C8;&#x5668;&#xFF09;&#x4E0A;&#x8FD0;&#x884C;&#x7684;&#x5BA2;&#x6237;&#x7AEF;&#x7EC4;&#x4EF6;&#x3002;&#x8FD9;&#x5C31;&#x76F8;&#x5F53;&#x4E8E;&#x4E66;&#x5E97;&#x7684;&#x4F19;&#x8BA1;&#x4E0D;&#x4EC5;&#x4EC5;&#x5728;&#x4E66;&#x5E97;&#x91CC;&#x5E2E;&#x4F60;&#x627E;&#x4E66;&#xFF0C;&#x8FD8;&#x8DDF;&#x4F60;&#x56DE;&#x5BB6;&#xFF0C;&#x6BCF;&#x5929;&#x665A;&#x4E0A;&#x8BFB;&#x7ED9;&#x4F60;&#x542C;&#xFF08;&#x8FD9;&#x542C;&#x8D77;&#x6765;&#x602A;&#x602A;&#x7684;&#xFF09;&#x3002;&#x8FD9;&#x79CD;&#x67B6;&#x6784;&#x8BA9; Meteor &#x53D8;&#x5F97;&#x6570;&#x636E;&#x5E93;&#x65E0;&#x5904;&#x4E0D;&#x5728;&#x3002;&#x7B80;&#x5355;&#x8BF4;&#xFF0C;Meteor &#x628A;&#x4F60;&#x7684;&#x6570;&#x636E;&#x62FF;&#x51FA;&#x4E00;&#x90E8;&#x5206;&#x5B50;&#x96C6;&#x590D;&#x5236;&#x5230;&#x5BA2;&#x6237;&#x7AEF;&#x3002;&#x8FD9;&#x6837;&#x540E;&#x4E24;&#x4E2A;&#x4E3B;&#x8981;&#x7ED3;&#x679C;&#xFF1A;&#x7B2C;&#x4E00;&#xFF0C;&#x670D;&#x52A1;&#x5668;&#x4E0D;&#x518D;&#x53D1;&#x9001; HTML &#x4EE3;&#x7801;&#x5230;&#x5BA2;&#x6237;&#x7AEF;&#xFF0C;&#x800C;&#x662F;&#x53D1;&#x9001;&#x771F;&#x5B9E;&#x7684;&#x539F;&#x59CB;&#x6570;&#x636E;&#xFF0C;&#x8BA9;&#x5BA2;&#x6237;&#x7AEF;&#x51B3;&#x5B9A;&#x5982;&#x4F55;&#x5904;&#x7406;&#x7EBF;&#x4F20;&#x6570;&#x636E;&#x3002;&#x7B2C;&#x4E8C;&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x4E0D;&#x5FC5;&#x7B49;&#x5F85;&#x670D;&#x52A1;&#x5668;&#x4F20;&#x56DE;&#x6570;&#x636E;&#xFF0C;&#x800C;&#x662F;&#x7ACB;&#x5373;&#x8BBF;&#x95EE;&#x751A;&#x81F3;&#x4FEE;&#x6539;&#x6570;&#x636E;&#xFF08;&#x5EF6;&#x8FDF;&#x8865;&#x507F; latency compensation&#xFF09;&#x3002; Meteor &#x7279;&#x70B9;Meteor &#x4F4D;&#x4E8E;&#x7A0B;&#x5E8F;&#x6570;&#x636E;&#x5E93;&#x548C;&#x7528;&#x6237;&#x754C;&#x9762;&#x4E4B;&#x95F4;&#xFF0C;&#x4FDD;&#x6301;&#x4E8C;&#x8005;&#x4E4B;&#x95F4;&#x7684;&#x6570;&#x636E;&#x540C;&#x6B65;&#x66F4;&#x65B0;&#x3002;&#x9664;&#x6B64;&#x4E4B;&#x5916;&#xFF0C;Meteor &#x8FD8;&#x6709;&#x4EE5;&#x4E0B;&#x7279;&#x70B9;&#xFF1A; &#x7EAF;&#x6570;&#x636E;&#x5BF9;&#x8BDD;&#x3002;&#x670D;&#x52A1;&#x5668;&#x4E0E;&#x5BA2;&#x6237;&#x7AEF;&#x521D;&#x59CB;&#x5316;&#x540E;&#x53EA;&#x4F20;&#x8F93;&#x6570;&#x636E;&#xFF0C;&#x7531;&#x5BA2;&#x6237;&#x7AEF;&#x51B3;&#x5B9A;&#x5982;&#x4F55;&#x6E32;&#x67D3;&#x3002; &#x4E00;&#x79CD;&#x8BED;&#x8A00;&#x3002;&#x524D;&#x540E;&#x7AEF;&#x7EDF;&#x4E00;&#x4F7F;&#x7528; JavaScript &#x8FDB;&#x884C;&#x5F00;&#x53D1;&#x3002; &#x65E0;&#x5904;&#x4E0D;&#x5728;&#x7684;&#x6570;&#x636E;&#x5E93;&#x3002;&#x6D4F;&#x89C8;&#x5668;&#x7AEF;&#x4F7F;&#x7528;&#x4E0E;&#x670D;&#x52A1;&#x5668;&#x7AEF;&#x4E00;&#x81F4;&#x7684; API &#x8BBF;&#x95EE;&#x672C;&#x5730;&#x6570;&#x636E;&#x5E93;&#x3002; &#x5EF6;&#x8FDF;&#x8865;&#x507F;&#x3002;&#x5728;&#x5BA2;&#x6237;&#x7AEF;&#x4F7F;&#x7528;&#x9884;&#x53D6;&#x548C;&#x6570;&#x636E;&#x6A21;&#x578B;&#x6A21;&#x62DF;&#x6280;&#x672F;&#xFF0C;&#x63D0;&#x4F9B;&#x63A5;&#x8FD1;&#x96F6;&#x5EF6;&#x8FDF;&#x7684;&#x6570;&#x636E;&#x5E93;&#x8FDE;&#x63A5;&#x4F53;&#x9A8C;&#x3002; &#x5168;&#x6808;&#x54CD;&#x5E94;&#x5F0F;&#x3002;&#x5B9E;&#x65F6;&#x4F5C;&#x4E3A;&#x9ED8;&#x8BA4;&#x6A21;&#x5F0F;&#xFF0C;&#x4ECE;&#x6570;&#x636E;&#x5E93;&#x5230;&#x6A21;&#x7248;&#x7684;&#x6240;&#x6709;&#x5C42;&#x9762;&#x4E0A;&#xFF0C;&#x90FD;&#x5E94;&#x5F53;&#x5177;&#x5907;&#x53EF;&#x7528;&#x7684;&#x4E8B;&#x4EF6;&#x9A71;&#x52A8;&#x63A5;&#x53E3;&#x3002; &#x793E;&#x533A;&#x751F;&#x6001;&#x53CB;&#x597D;&#x3002;Meteor &#x5F00;&#x653E;&#x6E90;&#x4EE3;&#x7801;&#x5E76;&#x80FD;&#x4E0E;&#x73B0;&#x6709;&#x7684;&#x5F00;&#x6E90;&#x5DE5;&#x5177;&#x548C;&#x6846;&#x67B6;&#x6574;&#x5408;&#xFF0C;&#x800C;&#x975E;&#x53D6;&#x4EE3;&#x5B83;&#x4EEC; &#x7B80;&#x5355;&#x5373;&#x751F;&#x4EA7;&#x529B;&#x3002;&#x8BA9;&#x4E8B;&#x60C5;&#x770B;&#x8D77;&#x6765;&#x7B80;&#x5355;&#x7684;&#x6700;&#x4F73;&#x65B9;&#x5F0F;&#x5C31;&#x662F;&#x8BA9;&#x5B83;&#x771F;&#x6B63;&#x53D8;&#x5F97;&#x7B80;&#x5355;&#xFF0C;&#x901A;&#x8FC7;&#x5E72;&#x51C0;&#x4E14;&#x5177;&#x53E4;&#x5178;&#x7F8E;&#x7684; API &#x6765;&#x5B9E;&#x73B0;&#x3002; Meteor &#x7ED3;&#x6784;&#x4E00;&#x822C;&#x6765;&#x8BF4;&#x9700;&#x8981;&#x65B0;&#x5EFA;&#x56DB;&#x4E2A;&#x5B50;&#x6587;&#x4EF6;&#x5939;&#xFF1A;/client&#xFF0C;/server&#xFF0C;/public &#x548C; /lib&#x3002;&#x7136;&#x540E;&#x5728; /client &#x6587;&#x4EF6;&#x5939;&#x4E2D;&#x65B0;&#x5EFA; main.html &#x548C; main.js &#x6587;&#x4EF6;&#x3002;&#x8FD9;&#x4E9B;&#x6587;&#x4EF6;&#x5939;&#x4E2D;&#x6709;&#x4E00;&#x4E9B;&#x62E5;&#x6709;&#x7279;&#x522B;&#x7684;&#x4F5C;&#x7528;&#x3002; Meteor &#x6587;&#x4EF6;&#x89C4;&#x5219; &#x5728; /server &#x6587;&#x4EF6;&#x5939;&#x4E2D;&#x7684;&#x4EE3;&#x7801;&#x53EA;&#x4F1A;&#x5728;&#x670D;&#x52A1;&#x5668;&#x7AEF;&#x8FD0;&#x884C;&#x3002; &#x5728; /client &#x6587;&#x4EF6;&#x5939;&#x4E2D;&#x7684;&#x4EE3;&#x7801;&#x53EA;&#x4F1A;&#x5728;&#x5BA2;&#x6237;&#x7AEF;&#x8FD0;&#x884C;&#x3002; &#x5176;&#x5B83;&#x4EE3;&#x7801;&#x5219;&#x5C06;&#x540C;&#x65F6;&#x8FD0;&#x884C;&#x4E8E;&#x670D;&#x52A1;&#x5668;&#x7AEF;&#x548C;&#x5BA2;&#x6237;&#x7AEF;&#x4E0A;&#x3002; &#x8BF7;&#x5C06;&#x6240;&#x6709;&#x7684;&#x9759;&#x6001;&#x6587;&#x4EF6;&#xFF08;&#x5B57;&#x4F53;&#xFF0C;&#x56FE;&#x7247;&#x7B49;&#xFF09;&#x653E;&#x7F6E;&#x5728; /public &#x6587;&#x4EF6;&#x5939;&#x4E2D;&#x3002; Meteor &#x52A0;&#x8F7D;&#x6587;&#x4EF6;&#x987A;&#x5E8F; &#x5728; /lib &#x6587;&#x4EF6;&#x5939;&#x4E2D;&#x7684;&#x6587;&#x4EF6;&#x5C06;&#x88AB;&#x4F18;&#x5148;&#x8F7D;&#x5165;&#x3002; &#x6240;&#x6709;&#x4EE5; main.* &#x547D;&#x540D;&#x7684;&#x6587;&#x4EF6;&#x5C06;&#x5728;&#x5176;&#x4ED6;&#x6587;&#x4EF6;&#x8F7D;&#x5165;&#x540E;&#x8F7D;&#x5165;&#x3002; &#x5176;&#x4ED6;&#x6587;&#x4EF6;&#x4EE5;&#x6587;&#x4EF6;&#x540D;&#x7684;&#x5B57;&#x6BCD;&#x987A;&#x5E8F;&#x8F7D;&#x5165;&#x3002; Meteor &#x6838;&#x5FC3;&#x6982;&#x5FF5;&#x6A21;&#x677F;&#x7CFB;&#x7EDF; SpacebarsSpacebar &#x5C31;&#x662F;&#x7B80;&#x5355;&#x7684; HTML &#x52A0;&#x4E0A;&#x4E09;&#x4EF6;&#x4E8B;&#x60C5;&#xFF1A;Inclusion &#xFF08;&#x6709;&#x65F6;&#x4E5F;&#x79F0;&#x4F5C; &#x201C;partial&#x201D;&#xFF09;&#x3001;Expression &#x548C; Block Helper&#x3002;123- Inclusion &#xFF1A;&#x901A;&#x8FC7; {{&gt; templateName}} &#x6807;&#x8BB0;&#xFF0C;&#x7B80;&#x5355;&#x76F4;&#x63A5;&#x5730;&#x544A;&#x8BC9; Meteor &#x8FD9;&#x90E8;&#x5206;&#x9700;&#x8981;&#x7528;&#x76F8;&#x540C;&#x540D;&#x79F0;&#x7684;&#x6A21;&#x677F;&#x6765;&#x53D6;&#x4EE3;- Expression &#xFF1A;&#x6BD4;&#x5982; {{title}} &#x6807;&#x8BB0;&#xFF0C;&#x5B83;&#x8981;&#x4E48;&#x662F;&#x8C03;&#x7528;&#x5F53;&#x524D;&#x5BF9;&#x8C61;&#x7684;&#x5C5E;&#x6027;&#xFF0C;&#x8981;&#x4E48;&#x5C31;&#x662F;&#x5BF9;&#x5E94;&#x5230;&#x5F53;&#x524D;&#x6A21;&#x677F;&#x7BA1;&#x7406;&#x5668;&#x4E2D;&#x5B9A;&#x4E49;&#x7684; helper &#x65B9;&#x6CD5;&#xFF0C;&#x5E76;&#x8FD4;&#x56DE;&#x5176;&#x65B9;&#x6CD5;&#x503C;&#x3002;- Block Helper &#xFF1A;&#x5728;&#x6A21;&#x677F;&#x4E2D;&#x63A7;&#x5236;&#x6D41;&#x7A0B;&#x7684;&#x7279;&#x6B8A;&#x6807;&#x7B7E;&#xFF0C;&#x5982; {{#each}}&#x2026;{{/each}} &#x6216; {{#if}}&#x2026;{{/if}} &#x3002; &#x6A21;&#x677F;&#x7684;&#x4F5C;&#x7528;&#x5C40;&#x9650;&#x4E8E;&#x663E;&#x793A;&#x6216;&#x5FAA;&#x73AF;&#x53D8;&#x91CF;&#xFF0C;&#x800C; helper &#x5219;&#x626E;&#x6F14;&#x7740;&#x4E00;&#x4E2A;&#x76F8;&#x5F53;&#x91CD;&#x8981;&#x7684;&#x89D2;&#x8272;&#xFF1A;&#x628A;&#x503C;&#x5206;&#x914D;&#x7ED9;&#x6BCF;&#x4E2A;&#x53D8;&#x91CF;&#x3002; Spacebars &#x6587;&#x6863; collectionmeteor collection &#x662F; MongoDB Collections &#x7684;&#x6269;&#x5C55;&#xFF0C;&#x5728; server &#x4E0B;&#x63D2;&#x5165; collection &#x7684;&#x6570;&#x636E;&#x5C06;&#x4F1A;&#x5728; MongoDB &#x81EA;&#x52A8;&#x66F4;&#x65B0;&#x3002;&#x4EFB;&#x4F55;&#x5728; client &#x4E0B; publish &#x7684;&#x6570;&#x636E;&#x5C06;&#x4F1A;&#x5728;&#x5BA2;&#x6237;&#x7AEF;&#x9875;&#x9762;&#x5B9E;&#x65F6;&#x663E;&#x793A;&#x3002; All collections are reactively updated on both the client and the server. If a new app were published to our store, and thousands of clients were connected, all of their app stores would update immediately without any extra work on our end! &#x670D;&#x52A1;&#x5668;&#x7AEF;&#x5728;&#x670D;&#x52A1;&#x5668;&#xFF0C;collection &#x6709;&#x4E00;&#x4E2A;&#x4EFB;&#x52A1;&#x5C31;&#x662F;&#x548C; Mongo &#x6570;&#x636E;&#x5E93;&#x8054;&#x7EDC;&#xFF0C;&#x8BFB;&#x53D6;&#x4EFB;&#x4F55;&#x6570;&#x636E;&#x53D8;&#x5316;&#x3002; &#x5728;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x5B83;&#x53EF;&#x4EE5;&#x6BD4;&#x5BF9;&#x6807;&#x51C6;&#x7684;&#x6570;&#x636E;&#x5E93;&#x3002;collection &#x8FD8;&#x53EF;&#x4EE5;&#x50CF; API &#x4E00;&#x6837;&#x64CD;&#x4F5C; Mongo &#x6570;&#x636E;&#x5E93;&#x3002;&#x5728;&#x670D;&#x52A1;&#x5668;&#x7AEF;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x5199;&#x50CF; Posts.insert() &#x6216; Posts.update() &#x8FD9;&#x6837;&#x7684; Mongo &#x547D;&#x4EE4;&#xFF0C;&#x6765;&#x5BF9; Mongo &#x6570;&#x636E;&#x5E93;&#x4E2D;&#x7684; posts &#x96C6;&#x5408;&#x8FDB;&#x884C;&#x64CD;&#x4F5C;&#x3002; &#x5BA2;&#x6237;&#x7AEF;&#x5728;&#x5BA2;&#x6237;&#x7AEF;&#xFF0C;collection &#x662F;&#x4E00;&#x4E2A;&#x5B89;&#x5168;&#x62F7;&#x8D1D;&#x6765;&#x81EA;&#x4E8E;&#x5B9E;&#x65F6;&#x4E00;&#x81F4;&#x7684;&#x6570;&#x636E;&#x5B50;&#x96C6;&#x3002;&#x5BA2;&#x6237;&#x7AEF;&#x7684; collection &#x603B;&#x662F;&#xFF08;&#x901A;&#x5E38;&#xFF09;&#x900F;&#x660E;&#x5730;&#x5B9E;&#x65F6;&#x66F4;&#x65B0;&#x6570;&#x636E;&#x5B50;&#x96C6;&#x3002;&#x5F53;&#x4F60;&#x5728;&#x5BA2;&#x6237;&#x7AEF;&#x7533;&#x660E; Posts = new Mongo.Collection(&#x2018;posts&#x2019;); &#x4F60;&#x5B9E;&#x9645;&#x4E0A;&#x662F;&#x521B;&#x5EFA;&#x4E86;&#x4E00;&#x4E2A;&#x672C;&#x5730;&#x7684;&#xFF0C;&#x5728;&#x6D4F;&#x89C8;&#x5668;&#x7F13;&#x5B58;&#x4E2D;&#x7684;&#x771F;&#x5B9E;&#x7684; Mongo &#x96C6;&#x5408;&#x3002; &#x5F53;&#x6211;&#x4EEC;&#x8BF4;&#x5BA2;&#x6237;&#x7AEF; collection &#x88AB;&#x201D;&#x7F13;&#x5B58;&#x201D;&#x662F;&#x6307;&#x5B83;&#x4FDD;&#x5B58;&#x4E86;&#x4F60;&#x6570;&#x636E;&#x7684;&#x4E00;&#x4E2A;&#x5B50;&#x96C6;&#xFF0C;&#x800C;&#x4E14;&#x5BF9;&#x8FD9;&#x4E9B;&#x6570;&#x636E;&#x63D0;&#x4F9B;&#x4E86;&#x5341;&#x5206;&#x5FEB;&#x901F;&#x7684;&#x8BBF;&#x95EE;&#x3002; &#x6709;&#x4E00;&#x70B9;&#x6211;&#x4EEC;&#x5FC5;&#x987B;&#x8981;&#x660E;&#x767D;&#xFF0C;&#x56E0;&#x4E3A;&#x8FD9;&#x662F; Meteor &#x5DE5;&#x4F5C;&#x7684;&#x4E00;&#x4E2A;&#x57FA;&#x7840;: &#x901A;&#x5E38;&#x8BF4;&#x6765;&#xFF0C;&#x5BA2;&#x6237;&#x7AEF;&#x7684;&#x96C6;&#x5408;&#x7684;&#x6570;&#x636E;&#x662F;&#x4F60; Mongo &#x6570;&#x636E;&#x5E93;&#x7684;&#x6240;&#x6709;&#x6570;&#x636E;&#x7684;&#x4E00;&#x4E2A;&#x5B50;&#x96C6;&#xFF08;&#x6BD5;&#x7ADF;&#x6211;&#x4EEC;&#x4E0D;&#x4F1A;&#x60F3;&#x628A;&#x6574;&#x4E2A;&#x6570;&#x636E;&#x5E93;&#x7684;&#x6570;&#x636E;&#x5168;&#x4F20;&#x5230;&#x5BA2;&#x6237;&#x7AEF;&#x6765;&#xFF09;&#x3002; &#x53E6;&#x5916;&#xFF0C;&#x90A3;&#x4E9B;&#x6570;&#x636E;&#x662F;&#x88AB;&#x5B58;&#x50A8;&#x5728;&#x6D4F;&#x89C8;&#x5668;&#x5185;&#x5B58;&#x4E2D;&#x7684;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x8BBF;&#x95EE;&#x8FD9;&#x4E9B;&#x6570;&#x636E;&#x51E0;&#x4E4E;&#x4E0D;&#x9700;&#x8981;&#x65F6;&#x95F4;&#xFF0C;&#x4E0D;&#x50CF;&#x53BB;&#x670D;&#x52A1;&#x5668;&#x8BBF;&#x95EE; Posts.find() &#x90A3;&#x6837;&#x9700;&#x8981;&#x7B49;&#x5F85;&#xFF0C;&#x56E0;&#x4E3A;&#x6570;&#x636E;&#x4E8B;&#x5B9E;&#x4E0A;&#x5DF2;&#x7ECF;&#x8F7D;&#x5165;&#x4E86;&#x3002; &#x5BA2;&#x6237;&#x7AEF;-&#x670D;&#x52A1;&#x5668;&#x901A;&#x8BAF;&#x5B9E;&#x9645;&#x60C5;&#x51B5;&#x662F;&#x670D;&#x52A1;&#x5668;&#x7AEF;&#x7684; collection &#x88AB;&#x5BA2;&#x6237;&#x7AEF;&#x7684; collection &#x901A;&#x77E5;&#x8BF4;&#x6709;&#x4E00;&#x4E2A;&#x65B0; item&#xFF0C;&#x7136;&#x540E;&#x6267;&#x884C;&#x4E86;&#x4E00;&#x4E2A;&#x4EFB;&#x52A1;&#x628A;&#x8FD9;&#x4E2A; item &#x653E;&#x5165; Mongo &#x6570;&#x636E;&#x5E93;&#xFF0C;&#x8FDB;&#x800C;&#x9001;&#x5230;&#x6240;&#x6709;&#x8FDE;&#x63A5;&#x7740;&#x7684;&#x5BA2;&#x6237;&#x7AEF;&#x3002;&#x5728;&#x6D4F;&#x89C8;&#x5668;&#x7684;&#x63A7;&#x5236;&#x53F0;&#x53D6;&#x51FA;&#x6240;&#x6709;&#x7684; item &#x6CA1;&#x4EC0;&#x4E48;&#x7528;&#x5904;&#x3002;&#x9700;&#x8981;&#x628A;&#x8FD9;&#x4E9B;&#x6570;&#x636E;&#x663E;&#x793A;&#x5728;&#x6A21;&#x677F;&#x4E2D;&#xFF0C;&#x5E76;&#x628A;&#x8FD9;&#x4E2A;&#x7B80;&#x5355;&#x7684; HTML &#x539F;&#x578B;&#x53D8;&#x6210;&#x4E00;&#x4E2A;&#x6709;&#x7528;&#x7684;&#x5B9E;&#x65F6; Web &#x5E94;&#x7528;&#x3002; &#x53D1;&#x5E03;&#xFF08;Publication&#xFF09;&#x548C;&#x8BA2;&#x9605;&#xFF08;Subscription&#xFF09;collection &#x901A;&#x8FC7;&#x53D1;&#x5E03;&#xFF08;publications&#xFF09;&#x548C;&#x8BA2;&#x9605;&#xFF08;subscriptions&#xFF09;&#x673A;&#x5236;&#x628A;&#x6570;&#x636E;&#x5B9E;&#x65F6;&#x540C;&#x6B65;&#x4E0A;&#x884C;&#x6216;&#x8005;&#x4E0B;&#x884C;&#x5230;&#x8FDE;&#x63A5;&#x7740;&#x7684;&#x5404;&#x4E2A;&#x7528;&#x6237;&#x7684;&#x6D4F;&#x89C8;&#x5668;&#x6216;&#x8005;Mongo&#x6570;&#x636E;&#x5E93;&#x4E2D;&#x3002;Meteor App &#x4FDD;&#x8BC1;&#x53EA;&#x53D1;&#x5E03;&#x4F60;&#x8BA9;&#x8FD9;&#x4E2A;&#x5F53;&#x524D;&#x7528;&#x6237;&#x770B;&#x5230;&#x7684;&#x6570;&#x636E;&#x3002;autopublish &#x7684;&#x76EE;&#x7684;&#x662F;&#x8BA9; Meteor &#x5E94;&#x7528;&#x6709;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x8D77;&#x6B65;&#x9636;&#x6BB5;&#xFF0C;&#x5B83;&#x7B80;&#x5355;&#x5730;&#x76F4;&#x63A5;&#x628A;&#x670D;&#x52A1;&#x5668;&#x4E0A;&#x7684;&#x5168;&#x90E8;&#x6570;&#x636E;&#x955C;&#x50CF;&#x5230;&#x5BA2;&#x6237;&#x7AEF;&#xFF0C;&#x56E0;&#x6B64;&#x4F60;&#x5C31;&#x4E0D;&#x7528;&#x7BA1;&#x53D1;&#x5E03;&#x548C;&#x8BA2;&#x9605;&#x4E86;&#x3002;&#x7136;&#x800C;&#x5728;&#x5B9E;&#x9645;&#x5DE5;&#x7A0B;&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x5220;&#x9664;&#x5B83;&#x3002; meteor remove autopublish &#x53D1;&#x5E03;&#x4E00;&#x4E2A; App &#x7684;&#x6570;&#x636E;&#x5E93;&#x53EF;&#x80FD;&#x7528;&#x4E0A;&#x4E07;&#x6761;&#x6570;&#x636E;&#xFF0C;&#x5176;&#x4E2D;&#x4E00;&#x4E9B;&#x8FD8;&#x53EF;&#x80FD;&#x662F;&#x79C1;&#x7528;&#x548C;&#x4FDD;&#x5BC6;&#x654F;&#x611F;&#x6570;&#x636E;&#x3002;&#x663E;&#x800C;&#x6613;&#x89C1;&#x6211;&#x4EEC;&#x4E0D;&#x80FD;&#x7B80;&#x5355;&#x5730;&#x628A;&#x6570;&#x636E;&#x5E93;&#x955C;&#x50CF;&#x5230;&#x5BA2;&#x6237;&#x7AEF;&#x53BB;&#xFF0C;&#x65E0;&#x8BBA;&#x662F;&#x5B89;&#x5168;&#x539F;&#x56E0;&#x8FD8;&#x662F;&#x6269;&#x5C55;&#x6027;&#x539F;&#x56E0;&#x3002;&#x53D1;&#x5E03; &#x5C31;&#x662F;&#x544A;&#x8BC9; Meteor &#x54EA;&#x4E9B;&#x6570;&#x636E;&#x5B50;&#x96C6;&#x662F;&#x9700;&#x8981;&#x9001;&#x5230;&#x5BA2;&#x6237;&#x7AEF;&#x3002;&#x4E3A;&#x8FBE;&#x5230;&#x8FD9;&#x4E2A;&#x76EE;&#x7684;&#xFF0C;&#x6211;&#x4EEC;&#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684; Publish() &#x51FD;&#x6570;&#xFF0C;&#x53EA;&#x53D1;&#x5E03;&#x6CA1;&#x6709;&#x6253;&#x6807;&#x8BB0;&#x7684;&#x5E16;&#x5B50; // &#x5728;&#x670D;&#x52A1;&#x5668;&#x7AEF; Meteor.publish(&apos;posts&apos;, function() { return Posts.find({flagged: false}); }); &#x8BA2;&#x9605;&#x8BA2;&#x9605; &#x5C31;&#x662F;&#x8BA9;&#x5BA2;&#x6237;&#x7AEF;&#x6765;&#x786E;&#x5B9A;&#x54EA;&#x4E9B;&#x5B50;&#x96C6;&#x662F;&#x4ED6;&#x4EEC;&#x5728;&#x67D0;&#x4E2A;&#x7279;&#x522B;&#x65F6;&#x5019;&#x7279;&#x522B;&#x9700;&#x8981;&#x7684;&#x3002; &#x5728;&#x5BA2;&#x6237;&#x7AEF;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x8BA2;&#x9605;&#x8FD9;&#x4E2A;&#x53D1;&#x5E03;&#x3002;&#x6211;&#x4EEC;&#x4EC5;&#x4EC5;&#x9700;&#x8981;&#x589E;&#x52A0;&#x8FD9;&#x6837;&#x4E00;&#x884C;&#x5230; main.js &#x6587;&#x4EF6;&#x4E2D; Meteor.subscribe(&apos;posts&apos;); Meteor &#x7A0B;&#x5E8F;&#x5728;&#x5BA2;&#x6237;&#x7AEF;&#x80FD;&#x591F;&#x5177;&#x6709;&#x53EF;&#x4F38;&#x7F29;&#x6027;&#xFF1A;&#x4E0D;&#x53BB;&#x8BA2;&#x9605;&#x5168;&#x90E8;&#x6570;&#x636E;&#xFF0C;&#x800C;&#x662F;&#x6307;&#x9009;&#x62E9;&#x4F60;&#x73B0;&#x5728;&#x9700;&#x8981;&#x7684;&#x6570;&#x636E;&#x53BB;&#x8BA2;&#x9605;&#x3002;&#x8FD9;&#x6837;&#x7684;&#x8BDD;&#xFF0C;&#x4F60;&#x5C31;&#x53EF;&#x4EE5;&#x907F;&#x514D;&#x6D88;&#x8017;&#x5927;&#x91CF;&#x7684;&#x5BA2;&#x6237;&#x7AEF;&#x5185;&#x5B58;&#xFF0C;&#x65E0;&#x8BBA;&#x670D;&#x52A1;&#x5668;&#x7AEF;&#x7684;&#x603B;&#x6570;&#x636E;&#x91CF;&#x6709;&#x591A;&#x5927;&#x3002; DDP &#x57FA;&#x672C;&#x4E0A;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x628A;&#x53D1;&#x5E03;/&#x8BA2;&#x9605;&#x6A21;&#x5F0F;&#x60F3;&#x8C61;&#x6210;&#x4E3A;&#x4E00;&#x4E2A;&#x6F0F;&#x6597;&#xFF0C;&#x4ECE;&#x670D;&#x52A1;&#x5668;&#x7AEF;&#xFF08;&#x6570;&#x636E;&#x6E90;&#xFF09;&#x8FC7;&#x6EE4;&#x6570;&#x636E;&#x4F20;&#x9001;&#x5230;&#x5BA2;&#x6237;&#x7AEF;&#xFF08;&#x76EE;&#x6807;&#xFF09;&#x3002; &#x8FD9;&#x4E2A;&#x6F0F;&#x6597;&#x7684;&#x4E13;&#x5C5E;&#x534F;&#x8BAE;&#x53EB;&#x505A; DDP&#xFF08;&#x5206;&#x5E03;&#x5F0F;&#x6570;&#x636E;&#x534F;&#x8BAE; Distributed Data Protocol &#x7684;&#x7F29;&#x5199;&#xFF09;&#x3002;&#x5982;&#x679C;&#x60F3;&#x4E86;&#x89E3; DDP &#x7684;&#x66F4;&#x591A;&#x7EC6;&#x8282;&#xFF0C;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x770B; Matt DeBergalis&#xFF08;Meteor &#x521B;&#x59CB;&#x4EBA;&#x4E4B;&#x4E00;&#xFF09;&#x5728; Real-time &#x5927;&#x4F1A;&#x4E0A;&#x7684;&#x8BB2;&#x6F14;&#x89C6;&#x9891;&#xFF0C;&#x6216;&#x8005;&#x6765;&#x81EA; Chris Mather &#x7684;&#x8FD9;&#x4E2A;&#x622A;&#x5C4F;&#x89C6;&#x9891;&#xFF0C;&#x6765;&#x5B66;&#x4E60;&#x5173;&#x4E8E;&#x8FD9;&#x4E2A;&#x6982;&#x5FF5;&#x66F4;&#x591A;&#x7684;&#x7EC6;&#x8282;&#x3002; DDP distributed data protocol. the stateful websocket protocol.(under &quot;Publish and subscribe&quot;, &quot;Methods&quot;, and &quot;Server connections&quot;) `ddp` can be configured to use a randomly generated subdomain for each long polling connection(Web browsers put a limit on the total number of HTTP connections that can be open to a particular domain at any one time, across all browser tabs.) &#x6240;&#x8C13; wire up(Mongo driver will automatically register with `ddp` to receive incoming data for `mycollection` and use it to keep `MyCollection` up to date.) &#x7279;&#x6027;&#xFF1A; database driver integration automatic latency compensation&#xFF08;client&apos;s screen update instantly when they make changes &#x4E0D;&#x7528; wait for server round trip. &#x548C; full-stack db drivers to snapshot and restore records??&#xFF09; transparent reconnect authentication (authentication hooks work great with Meteor Account.) input sanitization&#xFF08;audit-argument-checks&#xFF0C; match&apos;s check&#xFF09; tracker-aware&#xFF08;connection status, subscription readiness, currently logged-in user &#x90FD;&#x662F; reactive variables&#xFF09; default connect&#xFF08;meteor tools &#x6784;&#x5EFA;&#x4F1A;&#x81EA;&#x52A8;set up server, &#x8FD9;&#x6837;&#x5C31;&#x53EF;&#x4EE5;&#x76F4;&#x63A5; meteor.subscribe&#xFF0C;&#x800C;&#x4E0D;&#x7528; myconn = DPP.connect(url), myconn.subscribe &#x4E86;&#xFF09; connection lifecycle hooks (&#x5F53;connection&#x5EFA;&#x7ACB;&#x6216;&#x5173;&#x95ED;&#x65F6;&#xFF0C;&#x5B9E;&#x73B0;&#x7528;&#x6237;&#x5728;&#x7EBF;&#x7EDF;&#x8BA1;&#x529F;&#x80FD;) CRUD bilerplate and quickstart packages &#xFF08;The `insecure` package turns off `allow`/`deny` rule checking for the generic `create`, `update`, and `delete` methods. The `autopublish` package automatically subscribes every connected client to the full contents of every database collection.&#xFF09; Router&#x5047;&#x8BBE;&#x6709;&#x4E00;&#x4E2A;&#x5E16;&#x5B50;&#x5217;&#x8868;&#x9875;&#x9762;&#xFF0C;&#x6211;&#x4EEC;&#x8FD8;&#x5E0C;&#x671B;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x56FA;&#x5B9A;&#x94FE;&#x63A5;&#x8BBF;&#x95EE;&#x5230;&#x6BCF;&#x4E2A;&#x5355;&#x72EC;&#x7684;&#x5E16;&#x5B50;&#x9875;&#x9762;&#xFF0C;URL &#x5F62;&#x5F0F;&#x662F; http://myapp.com/posts/xyz&#xFF08;&#x8FD9;&#x91CC;&#x7684; xyz &#x662F; MongoDB &#x7684; _id &#x6807;&#x8BC6;&#x7B26;&#xFF09;&#xFF0C;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x5E16;&#x5B50;&#x6765;&#x8BF4;&#x662F;&#x552F;&#x4E00;&#x7684;&#x3002;&#x8FD9;&#x610F;&#x5473;&#x7740;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x67D0;&#x4E9B;&#x8DEF;&#x7531;&#x6765;&#x770B;&#x770B;&#x6D4F;&#x89C8;&#x5668;&#x7684;&#x5730;&#x5740;&#x680F;&#x91CC;&#x9762;&#x7684;&#x8DEF;&#x5F84;&#x662F;&#x4EC0;&#x4E48;&#xFF0C;&#x5E76;&#x76F8;&#x5E94;&#x5730;&#x663E;&#x793A;&#x6B63;&#x786E;&#x7684;&#x5185;&#x5BB9;&#x3002;&#x8FD9;&#x5C31;&#x662F; router &#x7684;&#x4F5C;&#x7528;&#x3002; &#x6DFB;&#x52A0; Iron Router &#x5305;meteor add iron:router &#x57FA;&#x672C;&#x6982;&#x5FF5; &#x8DEF;&#x7531;&#x89C4;&#x5219;&#xFF08;Route&#xFF09;&#xFF1A;&#x8DEF;&#x7531;&#x89C4;&#x5219;&#x662F;&#x8DEF;&#x7531;&#x7684;&#x57FA;&#x672C;&#x5143;&#x7D20;&#x3002;&#x5B83;&#x7684;&#x5DE5;&#x4F5C;&#x5C31;&#x662F;&#x5F53;&#x7528;&#x6237;&#x8BBF;&#x95EE; App &#x7684;&#x67D0;&#x4E2A; URL &#x7684;&#x65F6;&#x5019;&#xFF0C;&#x544A;&#x8BC9; App &#x5E94;&#x8BE5;&#x505A;&#x4EC0;&#x4E48;&#xFF0C;&#x8FD4;&#x56DE;&#x4EC0;&#x4E48;&#x4E1C;&#x897F;&#x3002; &#x8DEF;&#x5F84;&#xFF08;Path&#xFF09;&#xFF1A;&#x8DEF;&#x5F84;&#x662F;&#x8BBF;&#x95EE; App &#x7684; URL&#x3002;&#x5B83;&#x53EF;&#x4EE5;&#x662F;&#x9759;&#x6001;&#x7684;&#xFF08;/terms_of_service&#xFF09;&#x6216;&#x8005;&#x52A8;&#x6001;&#x7684;&#xFF08;/posts/xyz&#xFF09;&#xFF0C;&#x751A;&#x81F3;&#x8FD8;&#x53EF;&#x4EE5;&#x5305;&#x542B;&#x67E5;&#x8BE2;&#x53C2;&#x6570;&#xFF08;- /search?keyword=meteor&#xFF09;&#x3002; &#x76EE;&#x5F55;&#xFF08;Segment&#xFF09;&#xFF1A;&#x8DEF;&#x5F84;&#x7684;&#x4E00;&#x90E8;&#x5206;&#xFF0C;&#x4F7F;&#x7528;&#x6B63;&#x659C;&#x6760;&#xFF08;/&#xFF09;&#x8FDB;&#x884C;&#x5206;&#x9694;&#x3002; Hooks&#xFF1A;Hooks &#x662F;&#x53EF;&#x4EE5;&#x6267;&#x884C;&#x5728;&#x8DEF;&#x7531;&#x4E4B;&#x524D;&#xFF0C;&#x4E4B;&#x540E;&#xFF0C;&#x751A;&#x81F3;&#x662F;&#x8DEF;&#x7531;&#x6B63;&#x5728;&#x8FDB;&#x884C;&#x7684;&#x65F6;&#x5019;&#x3002;&#x4E00;&#x4E2A;&#x5178;&#x578B;&#x7684;&#x4F8B;&#x5B50;&#x662F;&#xFF0C;&#x5728;&#x663E;&#x793A;&#x4E00;&#x4E2A;&#x9875;&#x9762;&#x4E4B;&#x524D;&#x68C0;&#x6D4B;&#x7528;&#x6237;&#x662F;&#x5426;&#x62E5;&#x6709;&#x8FD9;&#x4E2A;&#x6743;&#x9650;&#x3002; &#x8FC7;&#x6EE4;&#x5668;&#xFF08;Filter&#xFF09;&#xFF1A;&#x8FC7;&#x6EE4;&#x5668;&#x7C7B;&#x4F3C;&#x4E8E; Hooks &#xFF0C;&#x4E3A;&#x4E00;&#x4E2A;&#x6216;&#x8005;&#x591A;&#x4E2A;&#x8DEF;&#x7531;&#x89C4;&#x5219;&#x5B9A;&#x4E49;&#x7684;&#x5168;&#x5C40;&#x8FC7;&#x6EE4;&#x5668;&#x3002; &#x8DEF;&#x7531;&#x6A21;&#x677F;&#xFF08;Route Template&#xFF09;&#xFF1A;&#x6BCF;&#x4E2A;&#x8DEF;&#x7531;&#x89C4;&#x5219;&#x6307;&#x5411;&#x7684; Meteor &#x6A21;&#x677F;&#x3002;&#x5982;&#x679C;&#x4F60;&#x4E0D;&#x6307;&#x5B9A;&#xFF0C;&#x8DEF;&#x7531;&#x5668;&#x5C06;&#x4F1A;&#x9ED8;&#x8BA4;&#x53BB;&#x5BFB;&#x627E;&#x4E00;&#x4E2A;&#x5177;&#x6709;&#x76F8;&#x540C;&#x540D;&#x79F0;&#x7684;&#x6A21;&#x677F;&#x3002; &#x5E03;&#x5C40;&#xFF08;Layout&#xFF09;&#xFF1A;&#x4F60;&#x53EF;&#x4EE5;&#x60F3;&#x8C61;&#x6210;&#x4E00;&#x4E2A;&#x6570;&#x7801;&#x76F8;&#x6846;&#x7684;&#x5E03;&#x5C40;&#x3002;&#x5B83;&#x4EEC;&#x5305;&#x542B;&#x6240;&#x6709;&#x7684; HTML &#x4EE3;&#x7801;&#x653E;&#x7F6E;&#x5728;&#x5F53;&#x524D;&#x7684;&#x6A21;&#x677F;&#x4E2D;&#xFF0C;&#x5373;&#x4F7F;&#x6A21;&#x677F;&#x53D1;&#x751F;&#x6539;&#x53D8;&#x5B83;&#x4EEC;&#x4E5F;&#x4E0D;&#x4F1A;&#x53D8;&#x3002; &#x63A7;&#x5236;&#x5668;&#xFF08;Controller&#xFF09;&#xFF1A;&#x6709;&#x65F6;&#x5019;&#xFF0C;&#x4F60;&#x4F1A;&#x53D1;&#x73B0;&#x5F88;&#x591A;&#x4F60;&#x7684;&#x6A21;&#x677F;&#x90FD;&#x5728;&#x91CD;&#x590D;&#x4F7F;&#x7528;&#x4E00;&#x4E9B;&#x53C2;&#x6570;&#x3002;&#x4E3A;&#x4E86;&#x4E0D;&#x91CD;&#x590D;&#x4F60;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x8BA9;&#x8FD9;&#x4E9B;&#x8DEF;&#x7531;&#x89C4;&#x5219;&#x7EE7;&#x627F;&#x4E00;&#x4E2A;&#x8DEF;&#x7531;&#x63A7;&#x5236;&#x5668;&#xFF08;Routing Controller&#xFF09;&#x53BB;&#x5305;&#x542B;&#x6240;&#x6709;&#x7684;&#x8DEF;&#x7531;&#x903B;&#x8F91;&#x3002; &#x8DEF;&#x7531;&#xFF1A;&#x628A; URL &#x6620;&#x5C04;&#x5230;&#x6A21;&#x677F;&#x9ED8;&#x8BA4;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;Iron Router &#x4F1A;&#x4E3A;&#x8DEF;&#x7531;&#x89C4;&#x5219;&#xFF0C;&#x6307;&#x5B9A;&#x76F8;&#x540C;&#x540D;&#x5B57;&#x7684;&#x6A21;&#x677F;&#x3002;&#x800C;&#x5982;&#x679C;&#x8DEF;&#x5F84;&#xFF08;path &#x53C2;&#x6570;&#xFF09;&#x6CA1;&#x6709;&#x6307;&#x5B9A;&#xFF0C;&#x5B83;&#x4E5F;&#x4F1A;&#x6839;&#x636E;&#x8DEF;&#x7531;&#x89C4;&#x5219;&#x7684;&#x540D;&#x5B57;&#xFF0C;&#x53BB;&#x6307;&#x5B9A;&#x540C;&#x6837;&#x540D;&#x5B57;&#x7684;&#x8DEF;&#x5F84;&#x3002; &#x4F60;&#x53EF;&#x80FD;&#x60F3;&#x77E5;&#x9053;&#x4E3A;&#x4EC0;&#x4E48;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x5728;&#x4E00;&#x5F00;&#x59CB;&#x53BB;&#x5236;&#x5B9A;&#x8DEF;&#x7531;&#x89C4;&#x5219;&#x3002;&#x8FD9;&#x662F;&#x56E0;&#x4E3A; Iron Router &#x7684;&#x90E8;&#x5206;&#x529F;&#x80FD;&#x9700;&#x8981;&#x4F7F;&#x7528;&#x8DEF;&#x7531;&#x89C4;&#x5219;&#x53BB;&#x751F;&#x6210; App &#x7684;&#x94FE;&#x63A5;&#x4FE1;&#x606F;&#x3002;&#x5176;&#x4E2D;&#x6700;&#x5E38;&#x89C1;&#x7684;&#x4E00;&#x4E2A;&#x662F; &#x7684; Spacebars helper&#xFF0C;&#x5B83;&#x9700;&#x8981;&#x8FD4;&#x56DE;&#x8DEF;&#x7531;&#x89C4;&#x5219;&#x7684; URL &#x8DEF;&#x5F84;&#x3002; &#x9664;&#x4E86;&#x6307;&#x5B9A;&#x9759;&#x6001;&#x7684; / URL &#xFF0C;&#x6211;&#x4EEC;&#x8FD8;&#x53EF;&#x4EE5;&#x4F7F;&#x7528; Spacebars helper&#x3002;&#x867D;&#x7136;&#x5B83;&#x4EEC;&#x7684;&#x6548;&#x679C;&#x662F;&#x4E00;&#x6837;&#x7684;&#xFF0C;&#x4E0D;&#x8FC7;&#x8FD9;&#x7ED9;&#x4E86;&#x6211;&#x4EEC;&#x66F4;&#x591A;&#x7684;&#x7075;&#x6D3B;&#x6027;&#xFF0C;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x66F4;&#x6539;&#x4E86;&#x8DEF;&#x7531;&#x89C4;&#x5219;&#x7684;&#x6620;&#x5C04;&#x8DEF;&#x5F84;&#xFF0C;helper &#x4ECD;&#x7136;&#x53EF;&#x4EE5;&#x8F93;&#x51FA;&#x6B63;&#x786E;&#x7684; URL &#x3002; &#x7B49;&#x5F85;&#x6570;&#x636E;&#x5982;&#x679C;&#x4F60;&#x8981;&#x90E8;&#x7F72;&#x5F53;&#x524D;&#x7248;&#x672C;&#x7684; App&#xFF08;&#x6216;&#x542F;&#x52A8;&#x8D77;&#x6765;&#x53BB;&#x4F7F;&#x7528;&#x4E0A;&#x9762;&#x7684;&#x94FE;&#x63A5;&#xFF09;&#xFF0C;&#x4F60;&#x4F1A;&#x6CE8;&#x610F;&#x5230;&#x5728;&#x6240;&#x6709;&#x5E16;&#x5B50;&#x5B8C;&#x5168;&#x51FA;&#x73B0;&#x4E4B;&#x524D;&#xFF0C;&#x5217;&#x8868;&#x91CC;&#x9762;&#x4F1A;&#x7A7A;&#x4E86;&#x4E00;&#x6BB5;&#x65F6;&#x95F4;&#x3002;&#x8FD9;&#x662F;&#x56E0;&#x4E3A;&#x5728;&#x7B2C;&#x4E00;&#x6B21;&#x52A0;&#x8F7D;&#x9875;&#x9762;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x8981;&#x7B49;&#x5230; posts &#x8BA2;&#x9605;&#x5B8C;&#x6210;&#x540E;&#xFF0C;&#x5373;&#x4ECE;&#x670D;&#x52A1;&#x5668;&#x6293;&#x53D6;&#x5B8C;&#x5E16;&#x5B50;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x624D;&#x80FD;&#x6709;&#x5E16;&#x5B50;&#x663E;&#x793A;&#x5728;&#x9875;&#x9762;&#x4E0A;&#x3002; &#x8FD9;&#x5E94;&#x8BE5;&#x8981;&#x6709;&#x4E00;&#x4E2A;&#x66F4;&#x597D;&#x7684;&#x7528;&#x6237;&#x4F53;&#x9A8C;&#xFF0C;&#x6BD4;&#x5982;&#x63D0;&#x4F9B;&#x4E00;&#x4E9B;&#x89C6;&#x89C9;&#x4E0A;&#x7684;&#x53CD;&#x9988;&#x8BA9;&#x7528;&#x6237;&#x77E5;&#x9053;&#x6B63;&#x5728;&#x8BFB;&#x53D6;&#x6570;&#x636E;&#xFF0C;&#x8FD9;&#x6837;&#x7528;&#x6237;&#x624D;&#x4F1A;&#x53BB;&#x7EE7;&#x7EED;&#x7B49;&#x5F85;&#x3002;Iron Router &#x7ED9;&#x4E86;&#x6211;&#x4EEC;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x65B9;&#x6CD5;&#x53BB;&#x5B9E;&#x73B0;&#x5B83;&#x3002;&#x6211;&#x4EEC;&#x628A;&#x8BA2;&#x9605;&#x653E;&#x5230; waitOn &#x7684;&#x8FD4;&#x56DE;&#x4E0A;&#x3002; Meteor &#x90E8;&#x7F72;meteor deploy myapp.meteor.com &#x5F53;&#x7136;&#xFF0C;&#x4F60;&#x8981;&#x628A;&#x201C;myapp&#x201D;&#x66FF;&#x6362;&#x6210;&#x4F60;&#x60F3;&#x8981;&#x7684;&#x540D;&#x79F0;&#xFF0C;&#x6700;&#x597D;&#x662F;&#x547D;&#x540D;&#x4E00;&#x4E2A;&#x6CA1;&#x6709;&#x88AB;&#x4F7F;&#x7528;&#x7684;&#x3002;&#x5982;&#x679C;&#x4F60;&#x7684;&#x540D;&#x79F0;&#x5DF2;&#x7ECF;&#x88AB;&#x4F7F;&#x7528;&#xFF0C;Meteor &#x4F1A;&#x63D0;&#x793A;&#x4F60;&#x53BB;&#x8F93;&#x5165;&#x5BC6;&#x7801;&#x3002;&#x5982;&#x679C;&#x53D1;&#x751F;&#x8FD9;&#x6837;&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x53EA;&#x9700;&#x901A;&#x8FC7; ctrl+c &#x6765;&#x53D6;&#x6D88;&#x5F53;&#x524D;&#x64CD;&#x4F5C;&#xFF0C;&#x7136;&#x540E;&#x7528;&#x53E6;&#x4E00;&#x4E2A;&#x4E0D;&#x540C;&#x7684;&#x540D;&#x79F0;&#x518D;&#x8BD5;&#x4E00;&#x6B21;&#x3002; &#x5982;&#x679C;&#x987A;&#x5229;&#x5730;&#x90E8;&#x7F72;&#x6210;&#x529F;&#x4E86;&#xFF0C;&#x51E0;&#x79D2;&#x949F;&#x540E;&#x4F60;&#x5C31;&#x80FD;&#x591F;&#x5728; http://myapp.meteor.com &#x4E0A;&#x8BBF;&#x95EE;&#x5230;&#x4F60;&#x7684;&#x5E94;&#x7528;&#x4E86;&#x3002; &#x5B9E;&#x4F8B;&#x5B89;&#x88C5; meteorjs$ curl https://install.meteor.com/ | sh &#x521B;&#x5EFA;&#x9879;&#x76EE; $ meteor create app_store $ cd App-Recommender-System/ $ meteor &#x6D4F;&#x89C8;&#x5668;&#x6253;&#x5F00; http://localhost:3000/&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x770B;&#x5230; Meteor App &#x7684;&#x72B6;&#x6001;&#x3002; &#x7B2C;&#x4E09;&#x65B9; packageAdd three packages: twbs:bootstrap - Twitter Bootstrap packaged for Meteor iron:router &#x2013; A Meteor package that handles routing between pages barbatus:stars-rating &#x2013; A small library to give us nice rating stars for the app store. meteor add iron:router twbs:bootstrap barbatus:stars-rating Remove two default packages: autopublish &#x2013; a development package that publishes all of our MongoDB data to the client. Great for prototyping, insecure for production! insecure &#x2013; The package name says it all. This package allows the user client to create, update, read and delete any data in our database. It&#x2019;s another package meant to make development easier, but we won&#x2019;t have a need for this in our project. meteor remove autopublish insecure serverCreate app collection&#x65B0;&#x5EFA; lib &#x6587;&#x4EF6;&#x5939;&#xFF0C;&#x521B;&#x5EFA; apps.js &#x6587;&#x4EF6;&#xFF0C;&#x6DFB;&#x52A0;&#x5982;&#x4E0B;&#x4EE3;&#x7801; Apps = new Meteor.Collection(&apos;apps&apos;); Put json files&#x8FD9;&#x91CC;&#x8854;&#x63A5;&#x4E0A;&#x4E00;&#x4E2A;&#x90E8;&#x5206; crawler &#x7684;&#x5DE5;&#x4F5C;&#xFF0C;&#x5C06;&#x6211;&#x4EEC;&#x4FDD;&#x5B58;&#x5728; MongoDB &#x7684;&#x6570;&#x636E;&#x5BFC;&#x51FA;&#x6765;&#x653E;&#x5728; server &#x6587;&#x4EF6;&#x5939;&#x4E0B;&#x3002; mongoexport -d appstore -c app_info -o ./app_info_new.json Populate app collectionserver &#x6587;&#x4EF6;&#x5939;&#x4E0B;&#x65B0;&#x5EFA; fixures.js &#x6765; load data. // checks if app collection is empty so we don&apos;t call this code on every run if(Apps.find({}).count() &lt; 1){ // read in json file using Npm filesystem package var fs = Npm.require(&apos;fs&apos;); fs.readFile(&apos;../../../../../server/app_info.json&apos;, &apos;utf8&apos;, Meteor.bindEnvironment(function(err, data) { if (err) throw err; var appData = data.split(&quot;\\n&quot;); for (var i = 0; i &lt; appData.length - 1; i++) { var rawAppData = JSON.parse(appData[i]); var app = {}; app.name = rawAppData.title; app.app_id = rawAppData.app_id; app.developer = rawAppData.developer; app.description = rawAppData.intro; app.avgRating = parseInt(rawAppData.score) / 2; app.iconUrl = rawAppData.thumbnail_url; app.recommendedApps = rawAppData.top_5_app; app.numberOfRecommendations = 0; // insert app into collection Apps.insert(app); } }, function(err){ throw err; })); } Publish app collectionserver &#x6587;&#x4EF6;&#x5939;&#x4E0B;&#x65B0;&#x5EFA; publications.js &#x6587;&#x4EF6; publish data1234567891011121314151617/** returns all apps in the collection, takes an options object that is used to pushsorting and filtering operations onto the server side, this publication will be usedin top charts list*/Meteor.publish(&apos;apps&apos;,function(options){ return Apps.find({},options);});/** takes an appid as a parameter and returns just one app that matches the appid,this publication will be used by our app details page for a single app */Meteor.publish(&apos;singleApp&apos;,function(id){ return Apps.find({_id:id});});/** this publication will be used to look up the recommended apps*/Meteor.publish(&apos;singleAppByAppId&apos;,function(appId){ return Apps.find({app_id:appId});}); client&#x65B0;&#x5EFA; index.html &#x6587;&#x4EF6;&#x5728; client &#x76EE;&#x5F55;&#x4E0B;&#x65B0;&#x5EFA; index.html &#x6587;&#x4EF6;&#x3002;&#x6DFB;&#x52A0; head&#xFF0C;meteor &#x7684; Blaze template engine &#x4F1A;&#x4EA7;&#x751F; body&#x3002;123456&lt;head&gt; &lt;title&gt;App Store&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt; &#x6DFB;&#x52A0; css &#x6587;&#x4EF6;&#x8FD9;&#x91CC;&#x5C31;&#x4E0D;&#x8D34;&#x4EE3;&#x7801;&#x4E86; Tell iron:router where to rend templates&#x5728; layouts &#x91CC;&#x65B0;&#x5EFA; master_layout.html &#x6587;&#x4EF6;1234567891011&lt;template name=&quot;masterLayout&quot;&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-md-4 col-md-offset-4 col-sm-12 col-xs-12 mainContainer&quot;&gt; {{&gt; yield }} &lt;!-- tells iron:router where to render our view templates inside of this layout--&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt; topChart template&#x65B0;&#x5EFA; views &#x6587;&#x4EF6;&#x5939;&#xFF0C;&#x65B0;&#x5EFA; topChart.html &#x6587;&#x4EF6;1234567891011&lt;!-- define a template named topChart --&gt;&lt;template name=&quot;topChart&quot;&gt; &lt;!-- utilize the bootstrap navbar class to give us the App Store top bar --&gt; &lt;nav class=&quot;navbar navbar-default&quot;&gt; &lt;div class=&quot;container-fluid&quot;&gt; &lt;div class=&quot;text-center&quot; id=&quot;navTitle&quot;&gt; &lt;strong&gt;Top Charts&lt;/strong&gt; &lt;/div&gt; &lt;/div&gt; &lt;/nav&gt;&lt;/template&gt; &#x4E3A; topChart template &#x586B;&#x5145;&#x6570;&#x636E;&#x4E4B;&#x524D;&#x6211;&#x4EEC;&#x52A0;&#x4E86; &#x201C;iron:router&#x201D; &#x5305;&#xFF0C;&#x7528;&#x8FD9;&#x4E2A;&#x5305;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x63D0;&#x4F9B;&#x4E00;&#x4E2A;&#x5F97;&#x5230; topChart template &#x7684;&#x8DEF;&#x5F84;&#xFF0C;&#x4E3A;&#x8FD9;&#x4E2A; template &#x8BBE;&#x7F6E;&#x6570;&#x636E;&#x5728; lib &#x4E0B;&#x65B0;&#x5EFA; routing &#x6587;&#x4EF6;&#x5939;&#xFF0C;&#x6DFB;&#x52A0; router.js &#x6587;&#x4EF6;12345678910111213141516171819202122Router.configure({ // tell iron router to render our individual templates inside of our masterLayout template layoutTemplate: &quot;masterLayout&quot;});Router.route(&apos;/&apos;, {// describe the route path, &apos;/&apos; - root path of our web app name: &apos;topChart&apos;,// the template this route will use waitOn: function() { // iron router will hold off rendering our page until the waitOn function completes // returns a subscription to our &#x201C;apps&#x201D; publication // passes a set of options to the server, // tells the server to sort our apps based off of avgRating and app_id. And to only give us a max of 20 results. Meteor.subscribe(&apos;apps&apos;, {sort: {avgRating: -1, app_id: -1}, limit: 50}); }, // The return value of the data function becomes the Blaze template&#x2019;s &#x201C;data context&#x201D;. // returns an object with a single property &#x201C;apps&#x201D; that contains all the Apps returned via our subscription. data: function () { return { apps: Apps.find({}, {sort: {avgRating: -1, app_id: -1}, limit: 50}) }; }}); &#x66F4;&#x65B0; topChart.html &#x6587;&#x4EF6;123456789&lt;ul class=&quot;list-group&quot;&gt; &lt;!-- use the built in SpaceBars {{#each}} to iterate through the &#x201C;apps&#x201D; property that we set inside our route&#x2019;s &#x201D;data&#x201D; function. Inside the {{#each}}{{/each}} block the data context changes from &#x201C;apps&#x201D; to be the app in scope for each iteration.--&gt; {{#each apps}} &lt;!-- call the &#x201C;appPreview&#x201D; template. Since it is inside the {{#each}} block it will be passed the data for each individual app as its context as we iterate through our parent data context. --&gt; {{&gt; appPreview this}} {{/each}}&lt;/ul&gt; appPreview templateviews &#x91CC;&#x6DFB;&#x52A0; appPreview.html &#x6587;&#x4EF6;1234567891011121314151617181920212223242526&lt;template name=&quot;appPreview&quot;&gt; &lt;!-- each app preview will be wrapped in an &lt;li&gt; element, as the topChart template will insert each app into a &lt;ul&gt;--&gt; &lt;li class=&quot;list-group-item&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-xs-1 appRank text-muted&quot;&gt; {{rank}} &lt;/div&gt; &lt;!-- set the img src to the iconUrl property that we scraped--&gt; &lt;div class=&quot;col-xs-3 appIconPreview&quot;&gt; &lt;img height=50 width=50 src=&quot;{{iconUrl}}&quot;/&gt; &lt;/div&gt; &lt;div class=&quot;col-xs-6 nameColumn&quot;&gt; &lt;a href=&quot;{{pathFor &apos;appPage&apos;}}&quot;&gt;{{name}}&lt;/a&gt;&lt;br/&gt; &lt;div style=&quot;display:flex&quot;&gt; &lt;!-- the stars-rating package with this template. pass apps avgRating property to the templates &quot;rating&quot; property so that it can color the correct # of stars--&gt; {{&gt; starsRating rating=avgRating class=&apos;mystar&apos; size=&apos;sm&apos;}} &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;col-xs-2 text-right getApp&quot;&gt; &lt;!-- pathFor is a built in helper that takes the name of the route and returns a correct path. --&gt; &lt;a href=&quot;{{pathFor &apos;appPage&apos;}}&quot; class=&quot;btn btn-primary&quot;&gt;+ Get&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/li&gt;&lt;/template&gt; appPage template&#x548C;&#x4E0A;&#x9762;&#x662F;&#x540C;&#x6837;&#x7684;&#x9053;&#x7406;&#xFF0C;&#x5728; views &#x91CC;&#x6DFB;&#x52A0; appPage.html &#x6587;&#x4EF6;&#xFF0C;&#x7136;&#x540E;&#x4E3A; appPage template &#x586B;&#x5145;&#x6570;&#x636E;&#xFF0C;&#x4E0D;&#x540C;&#x7684;&#x662F;&#x8FD9;&#x91CC;&#x591A;&#x4E86;&#x4E2D;&#x95F4;&#x4E00;&#x6B65;&#xFF0C;&#x901A;&#x8FC7;&#x904D;&#x5386; recommendedApps&#xFF0C;&#x6211;&#x4EEC;&#x53EA;&#x80FD;&#x4ECE;&#x6570;&#x636E;&#x5E93;&#x91CC;&#x5F97;&#x5230; recommended app &#x7684; appid, &#x7136;&#x800C;&#x5E76;&#x6CA1;&#x6709; data context&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x6211;&#x4EEC;&#x8FD8;&#x9700;&#x8981;&#x6709;&#x4E00;&#x4E2A; template helper &#x6765;&#x8BBE;&#x7F6E; recommended apps &#x7684; data context&#xFF0C;&#x6240;&#x4EE5;&#x9700;&#x8981;&#x65B0;&#x5EFA;&#x4E00;&#x4E2A; appPage.js &#x6587;&#x4EF6;&#x6765;&#x5B8C;&#x6210;&#x8FD9;&#x4E2A;&#x5DE5;&#x4F5C;&#x3002;123456789101112131415161718192021// Template.{{templateName}}.helpers() takes a JSON object where the keys are the name of hte helper function// these functions can be called directly from a blaze templateTemplate.appPage.helpers({ getSuggestedApp: function(appId) { // use singleAppByAppId subscription, then use Apps.findOne() to retrieve the app object and return it to our Blaze // template, the pass the object to suggestedApp templates as the data context Meteor.subscribe(&apos;singleAppByAppId&apos;, appId); return Apps.findOne({app_id: appId}); }});// attach JQuerystyle event listeners on a template by passing a json object to Template.{{templateName}}.events().// the key here is the event type(click in this case) followed by the CSS selecter(#backLink in this case)// values are the functions to be executed on event click. here we are using a feature of iron router &#x201C;history.back()&#x201D; to// bring us back to the previous pageTemplate.appPage.events({ &quot;click #backLink&quot; : function(evt) { history.back(); }}); &#x4E4B;&#x540E;&#x518D;&#x4FEE;&#x6539; routers.js &#x6587;&#x4EF6;&#xFF0C;&#x52A0;&#x4E0A;1234567891011Router.route(&apos;/app/:_id&apos;, {//&#x2019;:&#x2019; tells Iron Router that this is a variable that will be bound to the _id parameter name: &apos;appPage&apos;, waitOn: function() { // pass the app id passed in the url by using this.params._id Meteor.subscribe(&apos;singleApp&apos;, this.params._id); }, data: function () { // bind the app with the given id to the data context of template return Apps.findOne(this.params._id); }}); &#x8FD0;&#x884C;&#x6548;&#x679C; &#x4EE3;&#x7801; &#x53C2;&#x8003;&#x94FE;&#x63A5;DISCOVER METEOR","tags":"crawler meteor"},{"title":"项目实战--云计算Social Networking Timeline","url":"/2016/07/05/项目实战--云计算Social Networking Timeline/","text":"CMU 15619 Cloud Computing &#x7684; individual project&#xFF0C;&#x9879;&#x76EE;&#x5168;&#x540D;&#x662F; Social Networking Timeline with Heterogeneous Back-ends&#xFF0C;&#x901A;&#x8FC7; MySQL/HBase/MongoDB &#x5B9E;&#x73B0;&#x7B80;&#x5316;&#x7248; twitter &#x7684;&#x540E;&#x7AEF;&#x3002; Implementing Basic Login with MySQL on RDSAWS RDS &#x914D;&#x7F6E; MySQL &#x5E76;&#x5BFC;&#x5165; users.csv and userinfo.csv &#x6570;&#x636E;&#x96C6;&#xFF0C; &#x6570;&#x636E;&#x96C6;&#xFF1A; users.csv [UserID, Password] userinfo.csv [UserID, Name, Profile Image URL] &#x5982;&#x679C;&#x7528;&#x6237;&#x540D;&#x5BC6;&#x7801;&#x6B63;&#x786E;&#xFF0C;&#x8FD4;&#x56DE; user name and Profile Image Url&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x6B63;&#x786E;&#xFF0C;name &#x8FD4;&#x56DE; &#x201C;Unauthorized&#x201D;&#xFF0C;Profile Image URL &#x8FD4;&#x56DE; &#x201C;#&#x201D;. Request: GET /task1?id=[UserID]&amp;pwd=[Password] Response: returnRes({&quot;name&quot;:&quot;my_name&quot;, &quot;profile&quot;:&quot;profile_image_url&quot;}) &#x6548;&#x679C;&#xFF1A; Storing Social Graph using HBase&#x6570;&#x636E;&#x96C6;&#xFF1A; links.csv [Followee, Follower] &#x5BF9; followers &#x8FDB;&#x884C;&#x6392;&#x5E8F;&#x3002;&#x6392;&#x5E8F;&#x89C4;&#x5219;&#xFF1A; &#x6309;&#x59D3;&#x540D;&#x8FDB;&#x884C;&#x5347;&#x5E8F;&#x6392;&#x5E8F; &#x6309; Profile Image URL &#x8FDB;&#x884C;&#x5347;&#x5E8F;&#x6392;&#x5E8F; &#x5B9E;&#x73B0;&#xFF1A;&#x4ECE; HBase &#x4E2D;&#x6839;&#x636E; userid &#x627E;&#x51FA; followers&#xFF0C;&#x518D;&#x4ECE; MySQL &#x4E2D;&#x6839;&#x636E; follower userid &#x627E;&#x51FA; name &#x548C; profile url &#x5E76;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#x3002; &#x8FD9;&#x91CC;&#x7684;&#x95EE;&#x9898;&#x662F; HBase &#x7684;&#x8868;&#x5982;&#x4F55;&#x8BBE;&#x8BA1;&#x80FD;&#x6700;&#x5927;&#x5316;&#x6027;&#x80FD;&#x3002;&#x53EF;&#x4EE5;&#x91C7;&#x7528;&#x7684;&#x65B9;&#x5F0F;&#x4E3A;&#xFF1A;&#x5BF9;&#x6570;&#x636E;&#x96C6;&#x8FDB;&#x884C;&#x5904;&#x7406;&#xFF0C;&#x6309; followee &#x6392;&#x5E8F;&#x7136;&#x540E;&#x6309; followers &#x6392;&#x5E8F;&#xFF0C;&#x5E76;&#x8FDB;&#x884C;&#x5408;&#x5E76;&#xFF0C;&#x5F97;&#x5230; [Followee, FollowerList]&#xFF0C;followee &#x4F5C;&#x4E3A; rowkey&#x3002; Request: GET /task2?id=[UserID] Response: {&quot;followers&quot;:[{&quot;name&quot;:&quot;follower_name_1&quot;, &quot;profile&quot;:&quot;profile_image_url_1&quot;}, {&quot;name&quot;:&quot;follower_name_2&quot;, &quot;profile&quot;:&quot;profile_image_url_2&quot;}, ...]} Build Homepage using MongoDB&#x540C;&#x6837;&#x662F;&#x5BF9; HBase &#x8868;&#x7684;&#x8BBE;&#x8BA1;&#x3002;&#x8FD9;&#x91CC;&#x8981;&#x6C42;&#x7684;&#x662F;&#x6839;&#x636E; userid &#x627E;&#x5230; followees&#xFF0C;&#x7136;&#x540E;&#x518D;&#x627E;&#x5230; followees &#x7684; posts&#x3002;&#x4E3A;&#x4E86;&#x63D0;&#x9AD8;&#x6027;&#x80FD;&#xFF0C;&#x53EF;&#x4EE5;&#x505A;&#x7684;&#x662F;&#xFF1A;&#x5BF9;&#x6570;&#x636E;&#x96C6;&#x8FDB;&#x884C;&#x5904;&#x7406;&#xFF0C;&#x6309; follower &#x6392;&#x5E8F;&#x7136;&#x540E;&#x6309; followees &#x6392;&#x5E8F;&#xFF0C;&#x5E76;&#x8FDB;&#x884C;&#x5408;&#x5E76;&#xFF0C;&#x5F97;&#x5230; [Follower, FolloweeList] &#x6570;&#x636E;&#x96C6;&#xFF1A;posts.csv{ &#x201C;pid&#x201D;:xxx, // PostID &#x201C;uid&#x201D;:xxx, // UserID of poster &#x201C;name&#x201D;:&#x201D;xxx&#x201D;, // User name of poster &#x201C;profile&#x201D;:&#x201D;xxx&#x201D;, // Poster profile image URL &#x201C;timestamp&#x201D;:&#x201D;YYYY-MM-DD HH:MM:SS&#x201D;, // When post is posted &#x201C;image&#x201D;:&#x201D;xxx&#x201D;, // Post image &#x201C;content&#x201D;:&#x201D;xxx&#x201D;, // Post text content &#x201C;comments&#x201D;:[ // comments json array { &#x201C;uid&#x201D;:xxx, // UserID of commenter &#x201C;name&#x201D;:&#x201D;xxx&#x201D;, // User name of commenter &#x201C;profile&#x201D;:&#x201D;xxx&#x201D;, // Commenter profile image URL &#x201C;timestamp&#x201D;:&#x201D;YYYY-MM-DD HH:MM:SS&#x201D;, // When comment is made &#x201C;content&#x201D;:&#x201D;xxx&#x201D; // Comment text content }, { &#x201C;uid&#x201D;:xxx, &#x2026;&#x2026;. }, &#x2026;&#x2026; ]} Request: GET /task3?id=[UserID] Response: {&quot;posts&quot;:[{post1_json}, {post2_json}, ...]} Put Everything Together&#x663E;&#x793A; user &#x5173;&#x6CE8;&#x7684;&#x4EBA;&#x7684;&#x6700;&#x65B0; 30 &#x7BC7; posts&#x6392;&#x5E8F;&#x89C4;&#x5219;&#xFF1A;&#x5BF9; followers &#x8FDB;&#x884C;&#x6392;&#x5E8F;&#x3002;&#x6392;&#x5E8F;&#x89C4;&#x5219;&#xFF1A; &#x6309;&#x59D3;&#x540D;&#x8FDB;&#x884C;&#x5347;&#x5E8F;&#x6392;&#x5E8F; &#x6309; Profile Image URL &#x8FDB;&#x884C;&#x5347;&#x5E8F;&#x6392;&#x5E8F; &#x5BF9;&#x6700;&#x65B0; 30 &#x7BC7; posts &#x6392;&#x5E8F;&#xFF1A; &#x6309; timestamp &#x5347;&#x5E8F;&#x6392;&#x5E8F; &#x6309; pid (PostID) &#x5347;&#x5E8F;&#x6392;&#x5E8F; &#x4E0D;&#x6EE1; 30 &#x7BC7; posts &#x8FD4;&#x56DE;&#x5168;&#x90E8;&#x3002; Sample Request: http://backend-public-dns:8080/MiniSite/task4?id=99 Sample Response:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879 &quot;followers&quot;: [ { &quot;name&quot;: &quot;Alastair Moock&quot;, &quot;profile&quot;: &quot;https://cmucloudsocial.s3.amazonaws.com/profiles/61ed34b1f6bcd5498d888e3c2a1768.png&quot; }, { &quot;name&quot;: &quot;Amr Diab&quot;, &quot;profile&quot;: &quot;https://cmucloudsocial.s3.amazonaws.com/profiles/507e08e097e49ffaa584b988748180.png&quot; }, { &quot;name&quot;: &quot;CJ Bolland&quot;, &quot;profile&quot;: &quot;https://cmucloudsocial.s3.amazonaws.com/profiles/699bb8d37e61d66750e58fd1513637.png&quot; }, ... (more followers ommitted) ], &quot;name&quot;: &quot;Accent&quot;, &quot;posts&quot;: [ { &quot;content&quot;: &quot;Wow, just experienced Screamers (2006)&quot;, &quot;timestamp&quot;: &quot;2015-08-07 19:06:57&quot;, &quot;uid&quot;: 2587, &quot;_id&quot;: { &quot;$oid&quot;: &quot;56b06bde2fa550d2061f30c2&quot; }, &quot;name&quot;: &quot;Beggars Opera&quot;, &quot;image&quot;: &quot;http://cmucloudsocial.s3.amazonaws.com/posts/Screamers_2006_.png&quot;, &quot;pid&quot;: 156154, &quot;comments&quot;: [ { &quot;uid&quot;: 34190, &quot;timestamp&quot;: &quot;2015-10-21 13:57:59&quot;, &quot;content&quot;: &quot;I have seen this movie on starz, I regret to say that I was not lucky enough to have watched it while the screening took place. This documentary follows the one and only System Of A Down, throughout several locations from LA to Europe, while diggin deep in history and showing the truth about the forgotten genocide. This movie includes interviews with experts and some of the survivors of the genocide. This sad story of human history also follows the massacre that took place in africa during 2004 while the whole world stood watching, idle in the face of massive death. To conclude this, several SOAD fans won&apos;t be dissapointed by the extensive repertoire of songs played throughout the film. I&apos;m glad I&apos;m finally getting the DVD after a long wait, I hope you feel the same way.&quot;, &quot;name&quot;: &quot;Youngster&quot;, &quot;profile&quot;: &quot;https://cmucloudsocial.s3.amazonaws.com/profiles/6a75f0eea78b8cd2c0ae4da2f85f34.png&quot; }, { &quot;uid&quot;: 27184, &quot;timestamp&quot;: &quot;2015-10-21 21:36:12&quot;, &quot;content&quot;: &quot;Great movie for fans of System of a Down. Better yet, this is a great movie documenting genocide in general, and the Armenian genocide in particular. I highly recommend this movie. It is a must see. Share the movie with friends, family, and members of your local community. Everyone will thank you for it. Very eye-opening experience.&quot;, &quot;name&quot;: &quot;Shirobon&quot;, &quot;profile&quot;: &quot;https://cmucloudsocial.s3.amazonaws.com/profiles/539869e8b863511771c3b0b5e13d94.png&quot; }, ... (more comments omitted) ], &quot;profile&quot;: &quot;https://cmucloudsocial.s3.amazonaws.com/profiles/8f64d02d77cf734ddde87b7832ca76.png&quot; }, { &quot;content&quot;: &quot;Wow, just experienced The Tube (2004)&quot;, &quot;timestamp&quot;: &quot;2015-08-11 02:42:40&quot;, &quot;uid&quot;: 357, &quot;_id&quot;: { &quot;$oid&quot;: &quot;56b06be12fa550d2061f706a&quot; }, &quot;name&quot;: &quot;Agoria&quot;, &quot;image&quot;: &quot;http://cmucloudsocial.s3.amazonaws.com/posts/The_Tube_2004_.png&quot;, &quot;pid&quot;: 175927, &quot;comments&quot;: [ { &quot;uid&quot;: 29700, &quot;timestamp&quot;: &quot;2015-09-15 10:20:44&quot;, &quot;content&quot;: &quot;A FORMER GOVERNMENT AGENT HOLDS A TRAIN HOSTAGE WITH A BOMB THAT&apos;LL BLOW UP IF THE TRAIN STOPS AND IT&apos;S UP TO A DETECTIVE TO STOP HIM AND FIND A WAY TO SAVE THE LIVES OF THE PASSENGERS. WHAT WE HAVE HERE IS BASICALLY ANOTHER IMITATION OF &apos;&apos;SPEED&apos;&apos;. THE DIALOGUE IS LAUGHABLE AND THE ACTION [WHICH THERE IS PLENTY OF] IS NOT REALLY THAT ENTERTAINING. THE ACTING IS ALSO PRETTY BAD, BUT THE MOVIE TENDS TO SHOW A FEW SIGNS OF LIFE IN THE LAST 30 MINUTES. IF YOU&apos;RE AN ACTION FAN [LIKE ME] AND YOU&apos;RE CURIOUS ABOUT THIS MOVIE, RENT IT. BUT DON&apos;T BUY IT. ON THIS DVD, YOU HAVE THE CHOICE OF WATCHING THIS MOVIE DUBBED IN EITHER ENGLISH OR FRENCH OR YOU CAN WATCH THIS MOVIE IN ITS ORIGINAL LANGUAGE, WHICH IS KOREAN.&quot;, &quot;name&quot;: &quot;Teimoso&quot;, &quot;profile&quot;: &quot;https://cmucloudsocial.s3.amazonaws.com/profiles/a3a08f80ee44be2438293a04d2f9f2.png&quot; }, { &quot;uid&quot;: 31346, &quot;timestamp&quot;: &quot;2015-10-12 06:16:52&quot;, &quot;content&quot;: &quot;A Hollywood movie went out into the world, traveled to Korea, got assimilated and regurgitated, and now it returns to our shores as this. The studios know it and advertise it using reviews that cast it as the Korean version of Speed. It also &quot;borrows&quot; a score straight from Hans Zimmer&apos;s work for The Rock, and the main actor looks and acts like Chow Yun Fat light. It&apos;s discouraging to see Korean cinema paying homage to American action flicks when it has so many more interesting stories to tell. At least Woon-Hak Baek&apos;s first feature, Shiri, spoke in a unique voice and told a story personal to the Korean experience. This is a step backwards for him.On the other hand, this movie composite of so many action movies we&apos;ve seen before is fascinating in its skewed familiarity. It&apos;s not terrible; the production values are high, the acting occasionally thrilling, the one-liners sometimes amusing. It&apos;s no more or less diverting than the average Hollywood Die Hard knockoff. I think of it as top notch karaoke, like American Idol. In the proper context, it&apos;s impressive.In the grand scheme of things, though, it&apos;s depressing, especially when Korean directors like Chan-wook Park are producing such unique and energetic work.&quot;, &quot;name&quot;: &quot;The Veronicas&quot;, &quot;profile&quot;: &quot;https://cmucloudsocial.s3.amazonaws.com/profiles/1bd4dc1a4ca7a49daf53ca9a03735e.png&quot; }, ... (more comments omitted) ], &quot;profile&quot;: &quot;https://cmucloudsocial.s3.amazonaws.com/profiles/329125b52f0db7d04ed8828b5eccac.png&quot; }, ... (more posts ommitted) ], &quot;profile&quot;: &quot;https://cmucloudsocial.s3.amazonaws.com/profiles/8e8a1b156037ed1ecfba40b917084e.png&quot;}) Basic Recommendation&#x6839;&#x636E; userid &#x63A8;&#x8350; 10 &#x4E2A; user&#x3002;&#x7B97;&#x6CD5;&#xFF1A; &#x57FA;&#x4E8E;&#x7528;&#x6237;&#x7684;&#x534F;&#x540C;&#x8FC7;&#x6EE4;&#x7B97;&#x6CD5;&#x3002;Eg.assume A follows {B, C, D}.Followee B follows {C, E, A},followee C follows {F, G} andfollowee D follows {G, H}. &#x5F97;&#x5206;&#xFF1A;{G: 2, E: 1, F: 1, H: 1} &#x6392;&#x5E8F;&#x89C4;&#x5219;&#xFF1A; &#x6309;&#x5F97;&#x5206;&#x964D;&#x5E8F;&#x6392;&#x5E8F; &#x6309; user id &#x5347;&#x5E8F;&#x6392;&#x5E8F; &#x5C11;&#x4E8E; 10 &#x4E2A;&#x7528;&#x6237;&#x8FD4;&#x56DE;&#x5168;&#x90E8;&#x3002; Request: GET /task2?id=[UserID] Response: returnRes({&quot;recommendation&quot;:[{name:, profile:},{name:, profile:},...,{name:, profile:]})","tags":"back-ends"},{"title":"爬虫总结--汇总贴","url":"/2016/06/27/爬虫总结--汇总贴/","text":"&#x4ECE; &#x6293;&#x53D6; &#x2013;&gt; &#x5206;&#x6790; &#x2013;&gt; &#x5B58;&#x50A8; &#x4E09;&#x4E2A;&#x90E8;&#x5206;&#x5BF9;&#x4E4B;&#x524D;5&#x7BC7;&#x535A;&#x5BA2;&#x548C;&#x4EE3;&#x7801;&#x8FDB;&#x884C;&#x91CD;&#x7EC4;&#x3002; &#x6293;&#x53D6;cloud scrapy&#x535A;&#x5BA2; &#x9632;&#x6B62;&#x722C;&#x866B;&#x88AB; ban&#x8BBE;&#x7F6E; user-agent &#x548C; ip &#x4EE3;&#x7406;&#x6765;&#x9632;&#x6B62;&#x722C;&#x866B;&#x88AB; ban &#x7684;&#x6D4B;&#x8BD5;&#x4EE3;&#x7801;&#x535A;&#x5BA2; &#x6A21;&#x62DF;&#x767B;&#x5F55;&#x4EE3;&#x7801;&#x535A;&#x5BA2; scrapy-splash &#x722C;&#x53D6;js&#x4EA4;&#x4E92;&#x5F0F;&#x8868;&#x683C;&#x6570;&#x636E;&#x4EE3;&#x7801;&#x535A;&#x5BA2; &#x540C;&#x65F6;&#x8FD0;&#x884C;&#x591A;&#x4E2A;&#x722C;&#x866B;&#x4EE3;&#x7801; &#x5206;&#x5E03;&#x5F0F;&#x722C;&#x866B;&#x535A;&#x5BA2;&#x4EE3;&#x7801; &#x589E;&#x91CF;&#x722C;&#x53D6;&#x5229;&#x7528; redis&#x535A;&#x5BA2; &#x5904;&#x7406;&#x9A8C;&#x8BC1;&#x7801; &#x66F4;&#x6362;ip&#x5730;&#x5740; &#x4F7F;&#x7528;cookie&#x767B;&#x9646; &#x9A8C;&#x8BC1;&#x7801;&#x8BC6;&#x522B;&#x624B;&#x6BB5; &#x5206;&#x6790;&#x4E0D;&#x89C4;&#x5219;&#x7684; html&#x4EE3;&#x7801;&#x535A;&#x5BA2; &#x5B58;&#x50A8;&#x5982;&#x4F55;&#x8FDB;&#x884C;&#x7F51;&#x9875;&#x53BB;&#x91CD;&#xFF1F;&#x5C06; url &#x62BD;&#x8C61;&#x4E3A;&#x5173;&#x952E;&#x7279;&#x5F81;&#x76F8;&#x4F3C;&#x5EA6;&#x7684;&#x8BA1;&#x7B97;&#x3002;&#x6BD4;&#x5982;&#x53EF;&#x4EE5;&#x628A;&#x7AD9;&#x70B9;&#x62BD;&#x8C61;&#x4E3A;&#x4E00;&#x7EF4;&#x7279;&#x5F81;&#xFF0C;&#x76EE;&#x5F55;&#x6DF1;&#x5EA6;&#x62BD;&#x8C61;&#x4E3A;&#x4E00;&#x7EF4;&#x7279;&#x5F81;&#xFF0C;&#x4E00;&#x7EA7;&#x76EE;&#x5F55;&#x3001;&#x4E8C;&#x7EA7;&#x76EE;&#x5F55;&#x3001;&#x5C3E;&#x90E8;&#x9875;&#x9762;&#x7684;&#x540D;&#x5B57;&#x4E5F;&#x90FD;&#x53EF;&#x4EE5;&#x62BD;&#x8C61;&#x4E3A;&#x4E00;&#x7EF4;&#x7279;&#x5F81;&#x3002;&#x5F97;&#x5230;&#x5404;&#x4E2A;&#x7EF4;&#x5EA6;&#x7684;&#x7279;&#x5F81;&#xFF0C;&#x5B9A;&#x4E49;&#x6BCF;&#x4E2A;&#x7279;&#x5F81;&#x7684;&#x91CD;&#x8981;&#x7A0B;&#x5EA6;&#xFF0C;&#x7ED9;&#x51FA;&#x516C;&#x5F0F;&#xFF0C;&#x628A;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x7B80;&#x5316;&#x6210;&#x4E00;&#x4E2A;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x4EBA;&#x4E3A;&#x5224;&#x65AD;&#x51FA;&#x4E00;&#x6279;url&#x662F;&#x5426;&#x76F8;&#x4F3C;&#xFF0C;&#x7528;svm&#x8BAD;&#x7EC3;&#x4E00;&#x4E0B;&#x5C31;&#x53EF;&#x4EE5;&#x8FBE;&#x5230;&#x673A;&#x5668;&#x5224;&#x65AD;&#x7684;&#x76EE;&#x7684;&#x3002;&#x535A;&#x5BA2; &#x5185;&#x5BB9;&#x4EE5;&#x4EC0;&#x4E48;&#x5F62;&#x5F0F;&#x5B58;&#x50A8;&#xFF1F;&#x5173;&#x7CFB;&#x6570;&#x636E;&#x5E93; or NoSQL? (&#x5F85;&#x8865;&#x5145;) &#x4EE3;&#x7801;&#x5FEB;&#x901F;&#x901A;&#x9053;&#x767E;&#x5EA6;&#x8D34;&#x5427;&#x767E;&#x5EA6;&#x77E5;&#x9053;&#x7F51;&#x6613;&#x65B0;&#x95FB;&#x767E;&#x5EA6;&#x641C;&#x7D22;&#x3001;&#x8D34;&#x5427;&#x3001;&#x77E5;&#x9053;&#x5206;&#x5E03;&#x5F0F;&#x722C;&#x866B;&#x4EAC;&#x4E1C;&#x3001;&#x82CF;&#x5B81;FAQ","tags":"crawler"},{"title":"numpy－理解 keepdims=True","url":"/2016/06/26/numpy－理解keepdims=True/","text":"&#x7406;&#x89E3; numpy &#x4E2D;&#x7684; keepdims&#x3002;&#x5B9E;&#x73B0; softmax &#x65F6;&#x9047;&#x5230;&#x7684;&#x5751;&#x3002; &#x5B98;&#x65B9;&#x6587;&#x6863;&#x6587;&#x6863;&#x5BF9; numpy.sum &#x91CC; keepdims &#x7684;&#x8BF4;&#x660E;&#x5982;&#x4E0B;&#xFF1A;1234numpy.sum(a, axis=None, dtype=None, out=None, keepdims=False)[source]keepdims : bool, optionalIf this is set to True, the axes which are reduced are left in the result as dimensions with size one. With this option, the result will broadcast correctly against the input array. &#x8FB9;&#x505A;&#x5B9E;&#x9A8C;&#x8FB9;&#x6765;&#x89E3;&#x91CA;&#x3002; np.max(x)12345&gt;&gt;&gt; x=np.array([[1001, 1002], [3, 4]])&gt;&gt;&gt; x -= np.max(x)&gt;&gt;&gt; xarray([[ -1, 0], [-999, -998]]) np.max(x) &#x7684;&#x7ED3;&#x679C;&#x4E00;&#x4E2A;&#x6570; 1002, &#x77E9;&#x9635;&#x7684;&#x6700;&#x5927;&#x503C;&#x3002;&#x56E0;&#x6B64; x -= np.max(x) &#x7684;&#x6548;&#x679C;&#x662F;&#x51CF;&#x53BB;&#x77E9;&#x9635; x &#x4E2D;&#x6240;&#x6709;&#x5143;&#x7D20;&#x6700;&#x5927;&#x503C; np.max(x, axis=1)12345&gt;&gt;&gt; x=np.array([[1001, 1002], [3, 4]])&gt;&gt;&gt; x -= np.max(x, axis=1)&gt;&gt;&gt; xarray([[ -1, 998], [-999, 0]]) axis=1 &#x4EE3;&#x8868;&#x4EE5;&#x884C;&#x4E3A;&#x5355;&#x4F4D;&#xFF0C;&#x56E0;&#x6B64; np.max(x, axis&#xFF1D;1) &#x6C42;&#x7684;&#x662F;&#x6BCF;&#x884C;&#x7684;&#x6700;&#x5927;&#x503C;&#xFF0C;&#x7136;&#x800C;&#x6CE8;&#x610F;&#x5B83;&#x7684;&#x7ED3;&#x679C;&#x9ED8;&#x8BA4;&#x662F;&#x4E00;&#x4E2A;&#x884C;&#x5411;&#x91CF;&#xFF0C;[1002, 4]&#x5982;&#x679C;&#x662F; axis=0&#xFF0C;&#x4EE3;&#x8868;&#x4EE5;&#x5217;&#x4E3A;&#x5355;&#x4F4D;&#xFF0C;&#x6C42;&#x6BCF;&#x4E00;&#x5217;&#x6700;&#x5927;&#x503C;&#xFF0C;&#x7ED3;&#x679C;&#x662F; [1001, 1002]x -= np.max(x, axis=1) &#x5728;&#x8FD9;&#x91CC;&#x5B8C;&#x5168;&#x4E0D; make sense&#xFF0C;&#x5982;&#x679C;&#x786C;&#x8981;&#x89E3;&#x91CA;&#x7684;&#x8BDD;&#xFF0C;&#x5C31;&#x662F;&#x7B2C; i &#x5217;&#x51CF;&#x53BB; &#x7B2C; i &#x884C;&#x7684;&#x6700;&#x5927;&#x503C;&#xFF0C;&#x5F53;&#x7136;&#x8FD9;&#x5C31;&#x8981;&#x6C42;&#x77E9;&#x9635;&#x5FC5;&#x987B;&#x662F;&#x65B9;&#x9635;&#x3002;&#xFF08;&#x6CA1;&#x6709; broadcast&#xFF09;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x8981;&#x505A;&#x7684;&#x5B9E;&#x9645;&#x5C31;&#x662F;&#x628A;&#x8FD9;&#x4E2A;&#x884C;&#x5411;&#x91CF;&#x8F6C;&#x5316;&#x4E3A;&#x5217;&#x5411;&#x91CF;&#xFF0C;&#x7136;&#x540E; broadcast correctly against the input array&#xFF0C;&#x8FD9;&#x4E5F;&#x5C31;&#x662F; keepdims &#x7684;&#x529F;&#x80FD;&#x3002; np.max(x, axis=1, keepdims=True) &#x51CF;&#x53BB;&#x6BCF;&#x4E00;&#x884C;&#x6700;&#x5927;&#x503C;&#x7684;&#x6B63;&#x786E;&#x6253;&#x5F00;&#x65B9;&#x5F0F;123456&gt;&gt;&gt; import numpy as np&gt;&gt;&gt; x=np.array([[1001, 1002], [3, 4]])&gt;&gt;&gt; x -= np.max(x, axis=1, keepdims=True)&gt;&gt;&gt; xarray([[-1, 0], [-1, 0]])","tags":"numpy"},{"title":"句向量总结笔记（简洁版）","url":"/2016/06/22/句向量总结笔记（简洁版）/","text":"&#x7B97;&#x6CD5;&#x7684;PV-DM&#x7248;&#x672C;&#x4E0E;PV-DBOW&#x7684;&#x6838;&#x5FC3;&#x7406;&#x8BBA; &#x539F;&#x6587;&#xFF1A; LE, Quoc V.; MIKOLOV, Tomas. Distributed representations of sentences and documents). arXiv preprint arXiv:1405.4053, 2014. &#x8BD1;&#x6587;&#xFF1A; Word2vec &#x53E5;&#x5411;&#x91CF;&#x6A21;&#x578B;PV-DM&#x4E0E;PV-DBOW&#x539F;&#x8BBA;&#x6587;&#x7FFB;&#x8BD1; &#x5206;&#x5E03;&#x8BB0;&#x5FC6;&#x6A21;&#x578B;(PV-DM)&#x5728;&#x53E5;&#xFF08;Paragraph&#xFF09;&#x5411;&#x91CF;&#x6A21;&#x578B;&#x4E2D;&#xFF0C;&#x6BCF;&#x4E00;&#x4E2A;&#x53E5;&#x5B50;&#x90FD;&#x88AB;&#x6620;&#x5C04;&#x6210;&#x4E00;&#x4E2A;&#x72EC;&#x7ACB;&#x7684;&#x5411;&#x91CF;&#xFF0C;&#x8FD9;&#x4E2A;&#x53E5;&#x5411;&#x91CF;&#x4F5C;&#x4E3A;&#x77E9;&#x9635; D &#x7684;&#x4E00;&#x5217;&#xFF1B;&#x540C;&#x65F6;&#xFF0C;&#x6BCF;&#x4E00;&#x4E2A;&#x8BCD;&#x4E5F;&#x88AB;&#x6620;&#x5C04;&#x6210;&#x4E00;&#x4E2A;&#x72EC;&#x7ACB;&#x7684;&#x5411;&#x91CF;&#xFF0C;&#x8FD9;&#x4E2A;&#x8BCD;&#x5411;&#x91CF;&#x4F5C;&#x4E3A;&#x77E9;&#x9635; W &#x7684;&#x4E00;&#x5217;&#x3002;&#x5BF9;&#x8FD9;&#x4E2A;&#x53E5;&#x5411;&#x91CF;&#x548C;&#x8FD9;&#x4E9B;&#x8BCD;&#x5411;&#x91CF;&#x6C42;&#x5E73;&#x5747;&#x6216;&#x8005;&#x9996;&#x5C3E;&#x76F8;&#x8FDE;&#xFF0C;&#x7528;&#x6765;&#x9884;&#x6D4B;&#x6587;&#x672C;&#x4E2D;&#x7684;&#x4E0B;&#x4E00;&#x4E2A;&#x8BCD;&#x3002;&#x8FD9;&#x91CC;&#xFF0C;&#x6211;&#x4EEC;&#x9009;&#x7528;&#x9996;&#x5C3E;&#x76F8;&#x8FDE;&#x6765;&#x7EC4;&#x5408;&#x8FD9;&#x4E9B;&#x77E9;&#x9635;&#x3002; &#x4E25;&#x683C;&#x7684;&#x8BF4;&#xFF0C;&#x4E0E;&#x516C;&#x5F0F;1&#xFF08;Word2vec&#x7684;&#x516C;&#x5F0F;&#xFF09;&#x76F8;&#x6BD4;&#xFF0C;&#x552F;&#x4E00;&#x7684;&#x4E0D;&#x540C;&#x70B9;&#x5728;&#x4E8E;&#x8FD9;&#x91CC;&#x4ECE; W &#x548C;D &#x4E24;&#x4E2A;&#x77E9;&#x9635;&#x4E2D;&#x6784;&#x9020; h&#x3002;&#x53E5;&#x5B50;&#x7684;&#x6807;&#x8BC6;&#xFF08;Token&#xFF09;&#x88AB;&#x5F53;&#x505A;&#x53E6;&#x5916;&#x4E00;&#x4E2A;&#x201C;&#x8BCD;&#x201D;&#x770B;&#x5F85;&#x3002;&#x5B83;&#x626E;&#x6F14;&#x4E00;&#x4E2A;&#x201C;Memory&#x201D;&#x7684;&#x89D2;&#x8272;&#xFF0C;&#x7528;&#x6765;&#x8BB0;&#x5FC6;&#x5F53;&#x524D;&#x6587;&#x672C;&#x6216;&#x6587;&#x7AE0;&#x4E3B;&#x9898;&#x4E2D;&#x6F0F;&#x6389;&#x4E86;&#x4EC0;&#x4E48;&#x3002;&#x56E0;&#x6B64;&#xFF0C;&#x8FD9;&#x4E2A;&#x6A21;&#x578B;&#x88AB;&#x79F0;&#x4E3A;&#x201C;&#x53E5;&#x5411;&#x91CF;&#x7684;&#x5206;&#x5E03;&#x8BB0;&#x5FC6;&#x6A21;&#x578B;&#x201D;(PV-DM: Distributed Memory Model of Paragraph Vectors)&#x3002; &#x4E0A;&#x4E0B;&#x6587;&#x662F;&#x56FA;&#x5B9A;&#x957F;&#x5EA6;&#x7684;&#xFF0C;&#x4ECE;&#x53E5;&#x5B50;&#x7684;&#x4E00;&#x4E2A;&#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x4E2D;&#x53D6;&#x6837;&#x3002;&#x53E5;&#x5411;&#x91CF;&#x88AB;&#x9650;&#x5236;&#x5728;&#x4E00;&#x4E2A;&#x53E5;&#x5B50;&#x7684;&#x6240;&#x6709;&#x4E0A;&#x4E0B;&#x6587;&#x91CC;&#x9762;&#xFF0C;&#x4F46;&#x4E0D;&#x8D85;&#x8D8A;&#x53E5;&#x5B50;&#x3002;&#x4F46;&#x662F;&#x8BCD;&#x5411;&#x91CF;&#x77E9;&#x9635; W &#x662F;&#x8D85;&#x8D8A;&#x53E5;&#x5B50;&#x7684;&#x3002;&#x6BD4;&#x5982;&#x8BF4;&#xFF0C;&#x201D;powerful&#x201D;&#x7684;&#x8BCD;&#x5411;&#x91CF;&#x4E5F;&#x5BF9;&#x6240;&#x6709;&#x7684;&#x53E5;&#x5B50;&#x6709;&#x6548;&#x3002; &#x901A;&#x8FC7;&#x968F;&#x673A;&#x68AF;&#x5EA6;&#x4E0B;&#x964D;&#x6CD5;&#x6765;&#x8BAD;&#x7EC3;&#x8FD9;&#x4E9B;&#x53E5;&#x5411;&#x91CF;&#x548C;&#x8BCD;&#x5411;&#x91CF;&#xFF0C;&#x5728;&#x6B64;&#x8FC7;&#x7A0B;&#x4E2D;&#x901A;&#x8FC7;&#x53CD;&#x5411;&#x4F20;&#x64AD;&#x83B7;&#x5F97;&#x68AF;&#x5EA6;&#x3002;&#x5728;&#x968F;&#x673A;&#x68AF;&#x5EA6;&#x4E0B;&#x964D;&#x7684;&#x6BCF;&#x4E00;&#x6B65;&#xFF0C;&#x90FD;&#x53EF;&#x4EE5;&#x4ECE;&#x4E00;&#x4E2A;&#x968F;&#x673A;&#x7684;&#x53E5;&#x5B50;&#x4E2D;&#x62BD;&#x53D6;&#x4E00;&#x4E2A;&#x5B9A;&#x957F;&#x7684;&#x4E0A;&#x4E0B;&#x6587;&#xFF0C;&#x4ECE;&#x7F51;&#x7EDC;&#x4E2D;&#x8BA1;&#x7B97;&#x51FA;&#x68AF;&#x5EA6;&#x8BEF;&#x5DEE;&#xFF0C;&#x7136;&#x540E;&#x66F4;&#x65B0;&#x6A21;&#x578B;&#x7684;&#x53C2;&#x6570;&#x3002; &#x5728;&#x9884;&#x6D4B;&#x9636;&#x6BB5;&#xFF0C;&#x9700;&#x8981;&#x6267;&#x884C;&#x4E00;&#x4E2A;&#x201C;&#x63A8;&#x65AD;&#xFF08;inference&#xFF09;&#x201D;&#x6B65;&#x9AA4;&#x8BA1;&#x7B97;&#x65B0;&#x53E5;&#x5B50;&#x7684;&#x53E5;&#x5411;&#x91CF;&#x3002;&#x4E5F;&#x662F;&#x901A;&#x8FC7;&#x68AF;&#x5EA6;&#x4E0A;&#x5347;&#x6765;&#x83B7;&#x53D6;&#x3002;&#x5728;&#x8FD9;&#x4E2A;&#x9636;&#x6BB5;&#xFF0C;&#x5176;&#x4F59;&#x7684;&#x6A21;&#x578B;&#x53C2;&#x6570;&#x3001;&#x8BCD;&#x5411;&#x91CF;&#x77E9;&#x9635; W &#x548C; softmax &#x6743;&#x91CD;&#x662F;&#x56FA;&#x5B9A;&#x7684;&#x3002; &#x5047;&#x8BBE;&#x8BED;&#x6599;&#x5E93;&#x4E2D;&#x6709; N &#x4E2A;&#x53E5;&#x5B50;&#xFF0C;&#x5B57;&#x5178;&#x91CC;&#x6709; M &#x4E2A;&#x8BCD;&#x6C47;&#xFF1B;&#x6211;&#x4EEC;&#x8BD5;&#x56FE;&#x5C06;&#x6BCF;&#x4E00;&#x4E2A;&#x53E5;&#x5B50;&#x6620;&#x5C04;&#x5230; p &#x7EF4;&#x7A7A;&#x95F4;&#xFF0C;&#x6BCF;&#x4E00;&#x4E2A;&#x8BCD;&#x6620;&#x5C04;&#x5230; q &#x7EF4;&#x7A7A;&#x95F4;&#xFF0C;&#x4E8E;&#x662F;&#x8FD9;&#x4E2A;&#x6A21;&#x578B;&#x5C31;&#x6709;&#x603B;&#x5171; N&#xD7;p+M&#xD7;q &#x4E2A;&#x53C2;&#x6570;&#xFF08;&#x5305;&#x62EC;softmax&#x53C2;&#x6570;&#xFF09;&#x3002;&#x5373;&#x4F7F;&#x53E5;&#x5B50;&#x7684;&#x6570;&#x91CF;&#x4F1A;&#x968F;&#x7740; N &#x7684;&#x589E;&#x5927;&#x800C;&#x589E;&#x5927;&#xFF0C;&#x8BAD;&#x7EC3;&#x4E2D;&#x7684;&#x66F4;&#x65B0;&#x8FD8;&#x662F;&#x7A00;&#x758F;&#x4E14;&#x9AD8;&#x6548;&#x3002; &#x7ECF;&#x8FC7;&#x8BAD;&#x7EC3;&#xFF0C;&#x8FD9;&#x4E9B;&#x53E5;&#x5411;&#x91CF;&#x5C31;&#x53EF;&#x4EE5;&#x5F53;&#x505A;&#x53E5;&#x5B50;&#x7684;&#x7279;&#x5F81;&#x4F7F;&#x7528;&#x3002;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x628A;&#x8FD9;&#x4E9B;&#x7279;&#x5F81;&#x76F4;&#x63A5;&#x7528;&#x4E8E;&#x4F20;&#x7EDF;&#x7684;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x6280;&#x672F;&#xFF0C;&#x6BD4;&#x5982;&#x903B;&#x8F91;&#x56DE;&#x5F52;&#x3001;&#x652F;&#x6301;&#x5411;&#x91CF;&#x673A;&#x6216;&#x8005;K-means&#x805A;&#x7C7B;&#x3002;&#x603B;&#x800C;&#x8A00;&#x4E4B;&#xFF0C;&#x8FD9;&#x4E2A;&#x7B97;&#x6CD5;&#x6709;&#x4E24;&#x4E2A;&#x5173;&#x952E;&#x9636;&#x6BB5;&#xFF1A; &#x901A;&#x8FC7;&#x8BAD;&#x7EC3;&#x83B7;&#x5F97;&#x8BCD;&#x5411;&#x91CF;&#x77E9;&#x9635; W, softmax&#x6743;&#x91CD; U, b &#x4EE5;&#x53CA; &#x53E5;&#x5411;&#x91CF; D &#x4ECE;&#x5DF2;&#x77E5;&#x7684;&#x53E5;&#x5B50;&#x91CC;&#xFF1B; &#x7B2C;&#x4E8C;&#x4E2A;&#x9636;&#x6BB5;&#x662F;&#x63A8;&#x65AD;&#x9636;&#x6BB5;&#xFF0C;&#x7528;&#x4E8E;&#x53D6;&#x5F97;&#x4E00;&#x4E2A;&#x65B0;&#x53E5;&#x5B50;&#xFF08;&#x6CA1;&#x6709;&#x51FA;&#x73B0;&#x8FC7;&#xFF09;&#x7684;&#x53E5;&#x5411;&#x91CF; D&#xFF0C;&#x901A;&#x8FC7;&#x589E;&#x52A0;&#x66F4;&#x591A;&#x7684;&#x5217;&#x5728;&#x77E9;&#x9635; D &#x91CC;&#xFF0C;&#x5E76;&#x4FDD;&#x6301; W, U, b &#x4E0D;&#x53D8;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x5728;&#x77E9;&#x9635; D &#x4E0A;&#x8FDB;&#x884C;&#x68AF;&#x5EA6;&#x4E0B;&#x964D;&#x3002;&#x6211;&#x4EEC;&#x4F7F;&#x7528; D &#x901A;&#x8FC7;&#x4E00;&#x4E2A;&#x57FA;&#x7840;&#x7684;&#x5206;&#x7C7B;&#x5668;&#x7ED9;&#x53E5;&#x5B50;&#x52A0;&#x4E0A;&#x6807;&#x7B7E;&#x3002; &#x53E5;&#x5411;&#x91CF;&#x6709;&#x4E24;&#x4E2A;&#x663E;&#x8457;&#x7684;&#x4F18;&#x70B9;&#xFF1A; &#x5B83;&#x7684;&#x8BAD;&#x7EC3;&#x96C6;&#x662F;&#x6CA1;&#x6709;&#x88AB;&#x52A0;&#x4E0A;&#x6807;&#x7B7E;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x56E0;&#x6B64;&#x5B83;&#x53EF;&#x4EE5;&#x88AB;&#x7528;&#x4E8E;&#x4E00;&#x4E9B;&#x8BAD;&#x7EC3;&#x6837;&#x672C;&#x6807;&#x7B7E;&#x4E0D;&#x8DB3;&#x7684;&#x4EFB;&#x52A1;&#x3002; &#x53E5;&#x5411;&#x91CF;&#x4E5F;&#x89E3;&#x51B3;&#x4E86;&#x8BCD;&#x888B;&#x6A21;&#x578B;&#x7684;&#x4E00;&#x4E9B;&#x5173;&#x952E;&#x7684;&#x5F31;&#x70B9;&#x3002;&#x7B2C;&#x4E00;&#xFF0C;&#x5B83;&#x4F20;&#x627F;&#x4E86;&#x8BCD;&#x5411;&#x91CF;&#x7684;&#x4E00;&#x4E2A;&#x91CD;&#x8981;&#x7279;&#x6027;&#x2014;&#x2014;&#x8BCD;&#x548C;&#x8BCD;&#x4E4B;&#x95F4;&#x7684;&#x8BED;&#x4E49;&#x3002;&#x5728;&#x8BED;&#x4E49;&#x91CC;&#xFF0C;&#x201C;&#x5F3A;&#x6709;&#x529B;&#x201D;&#x6BD4;&#x8D77;&#x201C;&#x5DF4;&#x9ECE;&#x201D;&#x6765;&#x8BF4;&#xFF0C;&#x548C;&#x201C;&#x5F3A;&#x58EE;&#x201D;&#x66F4;&#x63A5;&#x8FD1;&#x3002;&#x7B2C;&#x4E8C;&#xFF0C;&#x5B83;&#x8003;&#x8651;&#x5230;&#x4E86;&#x201C;&#x8BCD;&#x5E8F;&#xFF08;word order&#xFF09;&#x201D;&#xFF0C;n-gram&#x6A21;&#x578B;&#x5219;&#x9700;&#x8981;&#x8BBE;&#x7F6E;&#x4E00;&#x4E2A;&#x8F83;&#x5927;&#x7684;n&#x624D;&#x80FD;&#x505A;&#x5230;&#x3002;&#x8FD9;&#x4E00;&#x70B9;&#x5F88;&#x91CD;&#x8981;&#xFF0C;&#x56E0;&#x4E3A;&#x6A21;&#x578B;&#x4FDD;&#x5B58;&#x4E86;&#x53E5;&#x5B50;&#x4E2D;&#x5927;&#x91CF;&#x7684;&#x4FE1;&#x606F;&#xFF0C;&#x5305;&#x62EC;&#x8BCD;&#x5E8F;&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x6211;&#x4EEC;&#x7684;&#x6A21;&#x578B;&#x4F18;&#x4E8E;&#x8BCD;&#x888B;n-gram&#x6A21;&#x578B;&#x56E0;&#x4E3A;&#x540E;&#x8005;&#x4F1A;&#x8868;&#x73B0;&#x51FA;&#x4E00;&#x4E2A;&#x6781;&#x9AD8;&#x7684;&#x7EF4;&#x5EA6;&#xFF0C;&#x8FD9;&#x4F1A;&#x5F71;&#x54CD;&#x6548;&#x7387;&#x3002; &#x5206;&#x5E03;&#x8BCD;&#x888B;&#x6A21;&#x578B;(PV-DBOW)-&#x65E0;&#x8BCD;&#x5E8F;&#x53E5;&#x5411;&#x91CF;&#x4E0A;&#x9762;&#x7684;&#x65B9;&#x6CD5;&#x8BA8;&#x8BBA;&#x4E86;&#x5728;&#x4E00;&#x4E2A;&#x6587;&#x672C;&#x7A97;&#x53E3;&#x5185;&#xFF0C;&#x901A;&#x8FC7;&#x53E5;&#x5411;&#x91CF;&#x548C;&#x8BCD;&#x5411;&#x91CF;&#x7684;&#x9996;&#x5C3E;&#x76F8;&#x63A5;&#x6765;&#x9884;&#x6D4B;&#x4E0B;&#x4E00;&#x4E2A;&#x8BCD;&#x3002;&#x53E6;&#x4E00;&#x79CD;&#x65B9;&#x6CD5;&#x4E0D;&#x628A;&#x4E0A;&#x4E0B;&#x6587;&#x4E2D;&#x7684;&#x8BCD;&#x4F5C;&#x4E3A;&#x8F93;&#x5165;&#xFF0C;&#x800C;&#x662F;&#x5F3A;&#x5236;&#x8FD9;&#x4E2A;&#x6A21;&#x578B;&#x5728;&#x8F93;&#x51FA;&#x4E2D;&#x4ECE;&#x53E5;&#x5B50;&#x4E2D;&#x968F;&#x673A;&#x62BD;&#x53D6;&#x8BCD;&#x6C47;&#x6765;&#x8FDB;&#x884C;&#x9884;&#x6D4B;&#x3002;&#x5B9E;&#x9645;&#x4E0A;&#xFF0C;&#x5176;&#x610F;&#x4E49;&#x5728;&#x4E8E;&#x5728;&#x6BCF;&#x4E00;&#x4E2A;&#x968F;&#x673A;&#x68AF;&#x5EA6;&#x4E0B;&#x964D;&#x7684;&#x5FAA;&#x73AF;&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x62BD;&#x53D6;&#x4E00;&#x4E2A;&#x6587;&#x672C;&#x7A97;&#x53E3;&#xFF0C;&#x7136;&#x540E;&#x4ECE;&#x8FD9;&#x4E2A;&#x6587;&#x672C;&#x7A97;&#x53E3;&#x4E2D;&#x62BD;&#x53D6;&#x4E00;&#x4E2A;&#x8BCD;&#xFF0C;&#x7136;&#x540E;&#x901A;&#x8FC7;&#x4E00;&#x4E2A;&#x5206;&#x7C7B;&#x4EFB;&#x52A1;&#x5F97;&#x5230;&#x53E5;&#x5411;&#x91CF;&#x3002;&#x8FD9;&#x9879;&#x6280;&#x672F;&#x5982;&#x56FE;&#x6240;&#x793A;&#x3002;&#x6211;&#x4EEC;&#x628A;&#x8FD9;&#x4E2A;&#x7248;&#x672C;&#x79F0;&#x4E3A;&#x53E5;&#x5411;&#x91CF;&#x7684;&#x5206;&#x5E03;&#x8BCD;&#x888B;(PV-DBOW): Distributed Bag of Words version of Paragraph Vector&#xFF09;&#x3002; &#x53E5;&#x5411;&#x91CF;&#x88AB;&#x8BAD;&#x7EC3;&#x51FA;&#x6765;&#xFF0C;&#x7528;&#x6765;&#x9884;&#x6D4B;&#x5728;&#x4E00;&#x4E2A;&#x5C0F;&#x7A97;&#x53E3;&#x4E2D;&#x7684;&#x8BCD;&#x6C47;&#x3002; &#x9664;&#x4E86;&#x5728;&#x6982;&#x5FF5;&#x4E0A;&#x7B80;&#x5355;&#x4EE5;&#x5916;&#xFF0C;&#x8FD9;&#x4E2A;&#x6A21;&#x578B;&#x53EA;&#x9700;&#x8981;&#x5B58;&#x50A8;&#x5C11;&#x91CF;&#x7684;&#x6570;&#x636E;&#x3002;&#x76F8;&#x6BD4;&#x4E8E;&#x4E0A;&#x4E00;&#x4E2A;&#x6A21;&#x578B;&#x9700;&#x8981;&#x5B58;&#x50A8;softmax&#x6743;&#x91CD;&#x548C;&#x8BCD;&#x5411;&#x91CF;&#xFF0C;&#x8FD9;&#x4E2A;&#x6A21;&#x578B;&#x53EA;&#x9700;&#x8981;&#x5B58;&#x50A8;softmax&#x6743;&#x91CD;&#x3002;&#x540C;&#x6837;&#x7684;&#xFF0C;&#x8FD9;&#x4E2A;&#x6A21;&#x578B;&#x4E5F;&#x8FD1;&#x4F3C;&#x4E8E;Skip-gram&#x6A21;&#x578B;&#x3002; PV-DM &amp; PV-DBOW &#x7ED3;&#x5408;&#x53EF;&#x4EE5;&#x628A;&#x6BCF;&#x4E00;&#x4E2A;&#x53E5;&#x5411;&#x91CF;&#x5F53;&#x4F5C;&#x4E24;&#x4E2A;&#x5411;&#x91CF;&#x7684;&#x7EC4;&#x5408;&#xFF1A;&#x4E00;&#x4E2A;&#x901A;&#x8FC7;PV-DM&#x8BAD;&#x7EC3;&#xFF0C;&#x53E6;&#x4E00;&#x4E2A;&#x901A;&#x8FC7;PV-DBOW&#x8BAD;&#x7EC3;&#x3002;PV-DM&#x80FD;&#x591F;&#x5F88;&#x597D;&#x5730;&#x6267;&#x884C;&#x591A;&#x79CD;&#x4EFB;&#x52A1;&#xFF0C;&#x4F46;&#x662F;&#x5B83;&#x7ED3;&#x5408;PV-DBOW&#x540E;&#xFF0C;&#x5E38;&#x5E38;&#x80FD;&#x591F;&#x66F4;&#x52A0;&#x51FA;&#x8272;&#x5B8C;&#x6210;&#x4EFB;&#x52A1;&#x3002; &#x53C2;&#x8003;&#x94FE;&#x63A5;Word2vec &#x53E5;&#x5411;&#x91CF;&#x6A21;&#x578B;PV-DM&#x4E0E;PV-DBOW&#x539F;&#x8BBA;&#x6587;&#x7FFB;&#x8BD1;","tags":"word2vec deep-learning"},{"title":"词向量总结笔记（简洁版）","url":"/2016/06/21/词向量总结笔记（简洁版）/","text":"&#x7EFC;&#x5408;&#x5404;&#x5BB6;&#x535A;&#x5BA2;&#x6574;&#x7406;&#x7684;&#x8BCD;&#x5411;&#x91CF;&#x603B;&#x7ED3;&#x7B14;&#x8BB0;&#x3002; &#x673A;&#x5668;&#x5B66;&#x4E60;&#x901A;&#x7528;&#x62DB;&#x6570;&#x5BF9;&#x95EE;&#x9898;&#x5EFA;&#x6A21;&#xFF0C;&#x6784;&#x9020;&#x76EE;&#x6807;&#x51FD;&#x6570;&#xFF0C;&#x5BF9;&#x76EE;&#x6807;&#x51FD;&#x6570;&#x8FDB;&#x884C;&#x4F18;&#x5316;&#xFF0C;&#x6C42;&#x5F97;&#x4E00;&#x7EC4;&#x6700;&#x4F18;&#x53C2;&#x6570;&#xFF0C;&#x5229;&#x7528;&#x8FD9;&#x7EC4;&#x6700;&#x4F18;&#x53C2;&#x6570;&#x5BF9;&#x5E94;&#x7684;&#x6A21;&#x578B;&#x6765;&#x9884;&#x6D4B;&#x3002; &#x8BCD;&#x5411;&#x91CF;one-hot Vectorone-hot vector&#x6700;&#x7B80;&#x5355;&#x7684;&#x7F16;&#x7801;&#x65B9;&#x5F0F;&#xFF1A;&#x5047;&#x8BBE;&#x6211;&#x4EEC;&#x7684;&#x8BCD;&#x5E93;&#x603B;&#x5171;&#x6709;n&#x4E2A;&#x8BCD;&#xFF0C;&#x90A3;&#x6211;&#x4EEC;&#x5F00;&#x4E00;&#x4E2A;1*n&#x7684;&#x9AD8;&#x7EF4;&#x5411;&#x91CF;&#xFF0C;&#x800C;&#x6BCF;&#x4E2A;&#x8BCD;&#x90FD;&#x4F1A;&#x5728;&#x67D0;&#x4E2A;&#x7D22;&#x5F15;index&#x4E0B;&#x53D6;&#x5230;1&#xFF0C;&#x5176;&#x4F59;&#x4F4D;&#x7F6E;&#x5168;&#x90E8;&#x90FD;&#x53D6;&#x503C;&#x4E3A;0&#x3002; &#x95EE;&#x9898;&#x8FD9;&#x79CD;&#x8BCD;&#x5411;&#x91CF;&#x7F16;&#x7801;&#x65B9;&#x5F0F;&#x7B80;&#x5355;&#x7C97;&#x66B4;&#xFF0C;&#x6211;&#x4EEC;&#x5C06;&#x6BCF;&#x4E00;&#x4E2A;&#x8BCD;&#x4F5C;&#x4E3A;&#x4E00;&#x4E2A;&#x5B8C;&#x5168;&#x72EC;&#x7ACB;&#x7684;&#x4E2A;&#x4F53;&#x6765;&#x8868;&#x8FBE;&#x3002;&#x9057;&#x61BE;&#x7684;&#x662F;&#xFF0C;&#x8FD9;&#x79CD;&#x65B9;&#x5F0F;&#x4E0B;&#xFF0C;&#x6211;&#x4EEC;&#x7684;&#x8BCD;&#x5411;&#x91CF;&#x6CA1;&#x529E;&#x6CD5;&#x7ED9;&#x6211;&#x4EEC;&#x4EFB;&#x4F55;&#x5F62;&#x5F0F;&#x7684;&#x8BCD;&#x7EC4;&#x76F8;&#x4F3C;&#x6027;&#x6743;&#x8861;&#x3002;&#x56E0;&#x4E3A;&#x4F60;&#x5F00;&#x4E86;&#x4E00;&#x4E2A;&#x6781;&#x9AD8;&#x7EF4;&#x5EA6;&#x7684;&#x7A7A;&#x95F4;&#xFF0C;&#x7136;&#x540E;&#x6BCF;&#x4E2A;&#x8BCD;&#x8BED;&#x90FD;&#x4F1A;&#x5360;&#x636E;&#x4E00;&#x4E2A;&#x7EF4;&#x5EA6;&#xFF0C;&#x56E0;&#x6B64;&#x6CA1;&#x6709;&#x529E;&#x6CD5;&#x5728;&#x7A7A;&#x95F4;&#x4E2D;&#x5173;&#x8054;&#x8D77;&#x6765;&#x3002; &#x89E3;&#x51B3;&#x65B9;&#x6848;&#x53EF;&#x4EE5;&#x628A;&#x8BCD;&#x5411;&#x91CF;&#x7684;&#x7EF4;&#x5EA6;&#x964D;&#x4F4E;&#x4E00;&#x4E9B;&#xFF0C;&#x5728;&#x8FD9;&#x6837;&#x4E00;&#x4E2A;&#x5B50;&#x7A7A;&#x95F4;&#x4E2D;&#xFF0C;&#x53EF;&#x80FD;&#x539F;&#x672C;&#x6CA1;&#x6709;&#x5173;&#x8054;&#x7684;&#x8BCD;&#x5C31;&#x5173;&#x8054;&#x8D77;&#x6765;&#x4E86;&#x3002; &#x57FA;&#x4E8E; SVD &#x7684;&#x65B9;&#x6CD5;SVD&#x8FD9;&#x662F;&#x4E00;&#x79CD;&#x6784;&#x9020;&#x8BCD;&#x5D4C;&#x5165;&#xFF08;&#x5373;&#x8BCD;&#x5411;&#x91CF;&#xFF09;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x6211;&#x4EEC;&#x9996;&#x5148;&#x4F1A;&#x904D;&#x5386;&#x6240;&#x6709;&#x7684;&#x6587;&#x672C;&#x6570;&#x636E;&#x96C6;&#xFF0C;&#x7136;&#x540E;&#x7EDF;&#x8BA1;&#x8BCD;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;&#xFF0C;&#x63A5;&#x7740;&#x7528;&#x4E00;&#x4E2A;&#x77E9;&#x9635; X &#x6765;&#x8868;&#x793A;&#x6240;&#x6709;&#x7684;&#x6B21;&#x6570;&#x60C5;&#x51B5;&#xFF0C;&#x7D27;&#x63A5;&#x7740;&#x5BF9;X&#x8FDB;&#x884C;&#x5947;&#x5F02;&#x503C;&#x5206;&#x89E3;&#x5F97;&#x5230;&#x4E00;&#x4E2A; USVT &#x7684;&#x5206;&#x89E3;&#x3002;&#x7136;&#x540E;&#x7528; U &#x7684;&#x884C;&#xFF08;rows&#xFF09;&#x4F5C;&#x4E3A;&#x6240;&#x6709;&#x8BCD;&#x8868;&#x4E2D;&#x8BCD;&#x7684;&#x8BCD;&#x5411;&#x91CF;&#x3002;&#x5BF9;&#x4E8E;&#x77E9;&#x9635; X &#xFF0C;&#x6709;2&#x79CD;&#x9009;&#x62E9;&#xFF1A;&#x5168;&#x6587;&#x6216;&#x8005;&#x7A97;&#x53E3;&#x957F;&#x5EA6;&#x3002; &#x8BCD;-&#x6587;&#x6863;&#x77E9;&#x9635;&#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;&#x8BCD;&#x7EC4;&#x6587;&#x6863;&#x77E9;&#x9635; X&#xFF0C;&#x5177;&#x4F53;&#x662F;&#x8FD9;&#x4E48;&#x505A;&#x7684;&#xFF1A;&#x904D;&#x5386;&#x6D77;&#x91CF;&#x7684;&#x6587;&#x4EF6;&#xFF0C;&#x6BCF;&#x6B21;&#x8BCD;&#x7EC4; i &#x51FA;&#x73B0;&#x5728;&#x6587;&#x4EF6; j &#x4E2D;&#x65F6;&#xFF0C;&#x5C06; Xij &#x7684;&#x503C;&#x52A0;1&#x3002;&#x4E0D;&#x8FC7;&#x5927;&#x5BB6;&#x53EF;&#x60F3;&#x800C;&#x77E5;&#xFF0C;&#x8FD9;&#x4F1A;&#x662F;&#x4E2A;&#x5F88;&#x5927;&#x7684;&#x77E9;&#x9635;R|V|&#xD7;M&#xFF0C;&#x800C;&#x4E14;&#x77E9;&#x9635;&#x5927;&#x5C0F;&#x8FD8;&#x548C;&#x6587;&#x6863;&#x4E2A;&#x6570;M&#x6709;&#x5173;&#x7CFB;&#x3002;&#x6240;&#x4EE5;&#x54B1;&#x4EEC;&#x6700;&#x597D;&#x60F3;&#x529E;&#x6CD5;&#x5904;&#x7406;&#x548C;&#x4F18;&#x5316;&#x4E00;&#x4E0B;&#x3002;word-document&#x7684;&#x5171;&#x73B0;&#x77E9;&#x9635;&#x6700;&#x7EC8;&#x4F1A;&#x5F97;&#x5230;&#x6CDB;&#x5316;&#x7684;&#x4E3B;&#x9898;&#xFF08;&#x4F8B;&#x5982;&#x4F53;&#x80B2;&#x7C7B;&#x8BCD;&#x6C47;&#x4F1A;&#x6709;&#x76F8;&#x4F3C;&#x7684;&#x6807;&#x8BB0;&#xFF09;&#xFF0C;&#x8FD9;&#x5C31;&#x662F;&#x6D45;&#x5C42;&#x8BED;&#x4E49;&#x5206;&#x6790;(LSA, Latent Semantic Analysis) &#x57FA;&#x4E8E;&#x7A97;&#x53E3;&#x7684;&#x5171;&#x73B0;&#x77E9;&#x9635; X&#x628A;&#x77E9;&#x9635;X&#x8BB0;&#x5F55;&#x7684;&#x8BCD;&#x9891;&#x53D8;&#x6210;&#x4E00;&#x4E2A;&#x76F8;&#x5173;&#x6027;&#x77E9;&#x9635;&#xFF0C;&#x5BF9;X&#x505A;&#x5947;&#x5F02;&#x503C;&#x5206;&#x89E3;&#xFF0C;&#x89C2;&#x5BDF;&#x89C2;&#x5BDF;&#x5947;&#x5F02;&#x503C;&#xFF08;&#x77E9;&#x9635;&#x7684;&#x5BF9;&#x89D2;&#x5143;&#x7D20;&#xFF09;&#xFF0C;&#x5E76;&#x6839;&#x636E;&#x6211;&#x4EEC;&#x671F;&#x5F85;&#x4FDD;&#x7559;&#x7684;&#x767E;&#x5206;&#x6BD4;&#x6765;&#x8FDB;&#x884C;&#x9636;&#x6BB5;&#xFF08;&#x53EA;&#x4FDD;&#x7559;&#x524D;k&#x4E2A;&#x7EF4;&#x5EA6;&#xFF09;&#xFF0C;&#x628A;&#x5B50;&#x77E9;&#x9635; U1:|V|,1:k &#x89C6;&#x4F5C;&#x6211;&#x4EEC;&#x7684;&#x8BCD;&#x5D4C;&#x5165;&#x77E9;&#x9635;&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x5BF9;&#x4E8E;&#x8BCD;&#x8868;&#x4E2D;&#x7684;&#x6BCF;&#x4E00;&#x4E2A;&#x8BCD;&#xFF0C;&#x6211;&#x4EEC;&#x90FD;&#x7528;&#x4E00;&#x4E2A; k &#x7EF4;&#x7684;&#x5411;&#x91CF;&#x6765;&#x8868;&#x8FBE;&#x4E86;&#x3002;&#x7A97;&#x53E3;&#x957F;&#x5EA6;&#x5BB9;&#x6613;&#x6355;&#x83B7;&#x8BED;&#x6CD5;&#xFF08;POS&#xFF09;&#x548C;&#x8BED;&#x4E49;&#x4FE1;&#x606F; &#x5BF9;&#x5171;&#x73B0;&#x77E9;&#x9635;X&#x8FDB;&#x884C;&#x5947;&#x5F02;&#x503C;&#x5206;&#x89E3;&#x7279;&#x5F81;&#x503C;&#x5206;&#x89E3;&#x4E0E;&#x5947;&#x5F02;&#x503C;&#x5206;&#x89E3;&#x7279;&#x5F81;&#x503C;&#x5206;&#x89E3;&#x53EA;&#x9002;&#x7528;&#x4E8E;&#x65B9;&#x9635;&#x3002;&#x5F53;&#x77E9;&#x9635;&#x662F;&#x9AD8;&#x7EF4;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x90A3;&#x4E48;&#x8FD9;&#x4E2A;&#x77E9;&#x9635;&#x5C31;&#x662F;&#x9AD8;&#x7EF4;&#x7A7A;&#x95F4;&#x4E0B;&#x7684;&#x4E00;&#x4E2A;&#x7EBF;&#x6027;&#x53D8;&#x6362;&#xFF0C;&#x4E00;&#x4E2A;&#x77E9;&#x9635;&#x4E58;&#x4EE5;&#x4E00;&#x4E2A;&#x5411;&#x91CF;&#x540E;&#x5F97;&#x5230;&#x7684;&#x5411;&#x91CF;&#xFF0C;&#x5176;&#x5B9E;&#x5C31;&#x76F8;&#x5F53;&#x4E8E;&#x5C06;&#x8FD9;&#x4E2A;&#x5411;&#x91CF;&#x8FDB;&#x884C;&#x4E86;&#x7EBF;&#x6027;&#x53D8;&#x6362;&#x3002;&#x6211;&#x4EEC;&#x901A;&#x8FC7;&#x7279;&#x5F81;&#x503C;&#x5206;&#x89E3;&#x5F97;&#x5230;&#x7684;&#x524D;N&#x4E2A;&#x7279;&#x5F81;&#x5411;&#x91CF;&#xFF0C;&#x5BF9;&#x5E94;&#x4E86;&#x8FD9;&#x4E2A;&#x77E9;&#x9635;&#x6700;&#x4E3B;&#x8981;&#x7684;N&#x4E2A;&#x53D8;&#x5316;&#x65B9;&#x5411;&#x3002;&#x5229;&#x7528;&#x8FD9;&#x524D;N&#x4E2A;&#x53D8;&#x5316;&#x65B9;&#x5411;&#xFF0C;&#x53EF;&#x4EE5;&#x8FD1;&#x4F3C;&#x8FD9;&#x4E2A;&#x77E9;&#x9635;&#xFF08;&#x53D8;&#x6362;&#xFF09;&#x3002;&#x4E5F;&#x5C31;&#x662F; &#x2013; &#x63D0;&#x53D6;&#x8FD9;&#x4E2A;&#x77E9;&#x9635;&#x6700;&#x91CD;&#x8981;&#x7684;&#x7279;&#x5F81;&#x3002;&#x603B;&#x7ED3;&#x4E00;&#x4E0B;&#xFF0C;&#x7279;&#x5F81;&#x503C;&#x5206;&#x89E3;&#x53EF;&#x4EE5;&#x5F97;&#x5230;&#x7279;&#x5F81;&#x503C;&#x4E0E;&#x7279;&#x5F81;&#x5411;&#x91CF;&#xFF0C;&#x7279;&#x5F81;&#x503C;&#x8868;&#x793A;&#x7684;&#x662F;&#x8FD9;&#x4E2A;&#x7279;&#x5F81;&#x5230;&#x5E95;&#x6709;&#x591A;&#x91CD;&#x8981;&#xFF0C;&#x800C;&#x7279;&#x5F81;&#x5411;&#x91CF;&#x8868;&#x793A;&#x8FD9;&#x4E2A;&#x7279;&#x5F81;&#x662F;&#x4EC0;&#x4E48;&#xFF0C;&#x53EF;&#x4EE5;&#x5C06;&#x6BCF;&#x4E00;&#x4E2A;&#x7279;&#x5F81;&#x5411;&#x91CF;&#x7406;&#x89E3;&#x4E3A;&#x4E00;&#x4E2A;&#x7EBF;&#x6027;&#x7684;&#x5B50;&#x7A7A;&#x95F4;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5229;&#x7528;&#x8FD9;&#x4E9B;&#x7EBF;&#x6027;&#x7684;&#x5B50;&#x7A7A;&#x95F4;&#x5E72;&#x5F88;&#x591A;&#x7684;&#x4E8B;&#x60C5;&#x3002;&#x5947;&#x5F02;&#x503C;&#x5206;&#x89E3;&#x662F;&#x4E00;&#x4E2A;&#x80FD;&#x9002;&#x7528;&#x4E8E;&#x4EFB;&#x610F;&#x7684;&#x77E9;&#x9635;&#x7684;&#x4E00;&#x79CD;&#x5206;&#x89E3;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x6C42;&#x7279;&#x5F81;&#x503C;&#x5F97;&#x5230;&#x3002; Python&#x4E2D;&#x7B80;&#x5355;&#x7684;&#x8BCD;&#x5411;&#x91CF;SVD&#x5206;&#x89E3; &#x95EE;&#x9898; &#x77E9;&#x9635;&#x7684;&#x7EF4;&#x5EA6;&#x4F1A;&#x7ECF;&#x5E38;&#x53D8;&#x5316;&#xFF08;&#x65B0;&#x7684;&#x8BCD;&#x8BED;&#x7ECF;&#x5E38;&#x4F1A;&#x589E;&#x52A0;&#xFF0C;&#x8BED;&#x6599;&#x5E93;&#x7684;&#x5927;&#x5C0F;&#x4E5F;&#x4F1A;&#x968F;&#x65F6;&#x53D8;&#x5316;&#xFF09;&#x3002; &#x77E9;&#x9635;&#x662F;&#x975E;&#x5E38;&#x7A00;&#x758F;&#x7684;&#xFF0C;&#x56E0;&#x4E3A;&#x5927;&#x591A;&#x6570;&#x8BCD;&#x5E76;&#x4E0D;&#x540C;&#x65F6;&#x51FA;&#x73B0;&#x3002; &#x77E9;&#x9635;&#x7684;&#x7EF4;&#x5EA6;&#x901A;&#x5E38;&#x975E;&#x5E38;&#x9AD8;&#xFF08;&#x2248;106&#xD7;106&#xFF09;&#xFF0C;&#x9700;&#x8981;&#x5927;&#x91CF;&#x7684;&#x5B58;&#x50A8; &#x8BAD;&#x7EC3;&#x9700;&#x8981;O(n2)&#x7684;&#x590D;&#x6742;&#x5EA6; &#x5BF9;&#x4E8E;&#x65B0;&#x8BCD;&#x6216;&#x8005;&#x65B0;&#x7684;&#x6587;&#x6863;&#x5F88;&#x96BE;&#x53CA;&#x65F6;&#x66F4;&#x65B0; &#x9700;&#x8981;&#x4E13;&#x95E8;&#x5BF9;&#x77E9;&#x9635;X&#x8FDB;&#x884C;&#x7279;&#x6B8A;&#x5904;&#x7406;&#xFF0C;&#x4EE5;&#x5E94;&#x5BF9;&#x8BCD;&#x7EC4;&#x9891;&#x7387;&#x7684;&#x6781;&#x5EA6;&#x4E0D;&#x5E73;&#x8861;&#x7684;&#x72B6;&#x51B5; &#x89E3;&#x51B3;&#x65B9;&#x6848;&#xFF1A;&#x76F4;&#x63A5;&#x5B66;&#x4E60;&#x4F4E;&#x7EF4;&#x5EA6;&#x7684;&#x8BCD;&#x5411;&#x91CF;idea: &#x5C06;&#x6700;&#x91CD;&#x8981;&#x7684;&#x4FE1;&#x606F;&#x5B58;&#x50A8;&#x5728;&#x56FA;&#x5B9A;&#x7684;&#xFF0C;&#x4F4E;&#x7EF4;&#x5EA6;&#x7684;&#x5411;&#x91CF;&#x91CC;&#xFF1A;&#x5BC6;&#x96C6;&#x5411;&#x91CF;&#xFF08;dense vector)&#xFF0C;&#x7EF4;&#x6570;&#x901A;&#x5E38;&#x662F;25-1000&#x7136;&#x800C;&#xFF0C;&#x5982;&#x4F55;&#x964D;&#x7EF4;&#xFF1F; &#x57FA;&#x4E8E;&#x8FED;&#x4EE3;&#x7684;&#x65B9;&#x6CD5;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x6A21;&#x578B;&#xFF0C;&#x5B83;&#x80FD;&#x591F;&#x4E00;&#x6B65;&#x6B65;&#x8FED;&#x4EE3;&#x5730;&#x8FDB;&#x884C;&#x5B66;&#x4E60;&#xFF0C;&#x5E76;&#x6700;&#x7EC8;&#x5F97;&#x51FA;&#x6BCF;&#x4E2A;&#x5355;&#x8BCD;&#x57FA;&#x4E8E;&#x5176;&#x4E0A;&#x4E0B;&#x6587;&#x7684;&#x6761;&#x4EF6;&#x6982;&#x7387;&#x3002; n-gram&#x57FA;&#x672C;&#x601D;&#x60F3;&#xFF1A;&#x4E00;&#x4E2A;&#x8BCD;&#x51FA;&#x73B0;&#x7684;&#x6982;&#x7387;&#x53EA;&#x4E0E;&#x5B83;&#x524D;&#x9762;&#x56FA;&#x5B9A;&#x6570;&#x76EE;&#x7684;&#x8BCD;&#x76F8;&#x5173;&#x3002;&#x4E3B;&#x8981;&#x5DE5;&#x4F5C;&#x662F;&#x5728;&#x9884;&#x6599;&#x4E2D;&#x7EDF;&#x8BA1;&#x5404;&#x79CD;&#x8BCD;&#x4E32;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;&#x4EE5;&#x53CA;&#x5E73;&#x6ED1;&#x5316;&#x5904;&#x7406;&#xFF0C;&#x6982;&#x7387;&#x503C;&#x8BA1;&#x7B97;&#x53F7;&#x4E4B;&#x540E;&#x5C31;&#x5B58;&#x50A8;&#x8D77;&#x6765;&#xFF0C;&#x4E0B;&#x6B21;&#x9700;&#x8981;&#x8BA1;&#x7B97;&#x4E00;&#x4E2A;&#x53E5;&#x5B50;&#x7684;&#x6982;&#x7387;&#x65F6;&#xFF0C;&#x53EA;&#x9700;&#x627E;&#x5230;&#x76F8;&#x5173;&#x7684;&#x6982;&#x7387;&#x53C2;&#x6570;&#xFF0C;&#x5C06;&#x5B83;&#x4EEC;&#x8FDE;&#x4E58;&#x8D77;&#x6765;&#x5C31;&#x597D;&#x4E86;&#x3002;&#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;&#x6982;&#x7387;&#x6A21;&#x578B;&#xFF0C;&#x5B83;&#x5305;&#x542B;&#x5DF2;&#x77E5;&#x548C;&#x672A;&#x77E5;&#x53C2;&#x6570;&#x3002;&#x6BCF;&#x589E;&#x52A0;&#x4E00;&#x4E2A;&#x8BAD;&#x7EC3;&#x6837;&#x672C;&#xFF0C;&#x5B83;&#x5C31;&#x80FD;&#x4ECE;&#x6A21;&#x578B;&#x7684;&#x8F93;&#x5165;&#x3001;&#x8F93;&#x51FA;&#x548C;&#x671F;&#x671B;&#x8F93;&#x51FA;&#xFF08;&#x6807;&#x7B7E;&#xFF09;&#xFF0C;&#x591A;&#x5B66;&#x5230;&#x4E00;&#x70B9;&#x70B9;&#x672A;&#x77E5;&#x53C2;&#x6570;&#x7684;&#x4FE1;&#x606F;&#x3002;&#x5728;&#x6BCF;&#x6B21;&#x8FED;&#x4EE3;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x8FD9;&#x4E2A;&#x6A21;&#x578B;&#x90FD;&#x80FD;&#x591F;&#x8BC4;&#x4F30;&#x5176;&#x8BEF;&#x5DEE;&#xFF0C;&#x5E76;&#x6309;&#x7167;&#x4E00;&#x5B9A;&#x7684;&#x66F4;&#x65B0;&#x89C4;&#x5219;&#xFF0C;&#x60E9;&#x7F5A;&#x90A3;&#x4E9B;&#x5BFC;&#x81F4;&#x8BEF;&#x5DEE;&#x7684;&#x53C2;&#x6570;&#x3002;(&#x8BEF;&#x5DEE;&#x201C;&#x53CD;&#x5411;&#x4F20;&#x64AD;&#x201D;&#x6CD5;)&#x3002; &#x8FDE;&#x7EED;&#x8BCD;&#x888B;&#x6A21;&#x578B;&#xFF08;CBOW&#xFF09;&#x4EE5; {&#x201C;The&#x201D;, &#x201C;cat&#x201D;, &#x201C;over&#x201D;, &#x201C;the&#x201D;, &#x201C;puddle&#x201D;} &#x4E3A;&#x4E0A;&#x4E0B;&#x6587;&#xFF0C;&#x80FD;&#x591F;&#x9884;&#x6D4B;&#x6216;&#x4EA7;&#x751F;&#x5B83;&#x4EEC;&#x4E2D;&#x5FC3;&#x7684;&#x8BCD;&#x8BED;&#x201D;jumped&#x201D;&#x3002;&#x6A21;&#x578B;&#x8F93;&#x5165;&#x4E3A; x(c)&#xFF0C;&#x6A21;&#x578B;&#x8F93;&#x51FA;&#x4E3A; y&#xFF0C;y &#x5C31;&#x662F;&#x4E2D;&#x5FC3;&#x8BCD; &#x2018;jumped&#x2019;&#x3002;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x8BCD;&#x8BED;wi&#x5B66;&#x4E60;&#x4E86;&#x4E24;&#x4E2A;&#x5411;&#x91CF;&#x3002; &#x8FDE;&#x7EED;&#x8BCD;&#x888B;&#x6A21;&#x578B;&#xFF08;CBOW&#xFF09;&#x4E2D;&#x7684;&#x5404;&#x4E2A;&#x8BB0;&#x53F7;&#xFF1A; $W_i$&#xFF1A;&#x5355;&#x8BCD;&#x8868; V &#x4E2D;&#x7684;&#x7B2C; i &#x4E2A;&#x5355;&#x8BCD;, one-hot &#x5411;&#x91CF; $v&#x2208;R^{n&#x2217;|V|}$&#xFF1A;&#x8F93;&#x5165;&#x8BCD;&#x77E9;&#x9635; $v_i$&#xFF1A;V&#x7684;&#x7B2C;i&#x5217;&#xFF0C;n &#x7EF4; $W_i$ &#x7684;&#x8F93;&#x5165;&#x5411;&#x91CF; $U&#x2208;R^{|V|&#x2217;n}$&#xFF1A;&#x8F93;&#x51FA;&#x8BCD;&#x77E9;&#x9635; $U_i$&#xFF1A;U &#x7684;&#x7B2C; i &#x884C;&#xFF0C;n &#x7EF4; $W_i$ &#x7684;&#x8F93;&#x51FA;&#x5411;&#x91CF; &#x628A;&#x6574;&#x4E2A;&#x8FC7;&#x7A0B;&#x62C6;&#x5206;&#x6210;&#x4EE5;&#x4E0B;&#x51E0;&#x6B65;&#xFF1A; &#x5BF9;&#x4E8E; m &#x4E2A;&#x8BCD;&#x957F;&#x5EA6;&#x7684;&#x8F93;&#x5165;&#x4E0A;&#x4E0B;&#x6587;&#xFF0C;&#x6211;&#x4EEC;&#x4EA7;&#x751F;&#x5B83;&#x4EEC;&#x7684; one-hot &#x5411;&#x91CF; $(x^{c&#x2212;m},&#x22EF;,x^{c&#x2212;1},x^{c+1},&#x22EF;,x^{c+m})$&#xFF0C;&#x4F5C;&#x4E3A;&#x6A21;&#x578B;&#x8F93;&#x5165;&#x3002; &#x6211;&#x4EEC;&#x5F97;&#x5230;&#x4E0A;&#x4E0B;&#x6587;&#x7684;&#x5D4C;&#x5165;&#x8BCD;&#x5411;&#x91CF; $(v_{c&#x2212;m+1}=Vx^{c&#x2212;m+1},&#x22EF;,v_{c+m}=Vx^{c+m})$ &#x5C06;&#x8FD9;&#x4E9B;&#x5411;&#x91CF;&#x53D6;&#x5E73;&#x5747; $\\widehat{v}=\\frac {V_{c&#x2212;m} +V_{c&#x2212;m+1} +&#x22EF;+V_{c+m}}{2m}$ &#x4EA7;&#x751F;&#x4E00;&#x4E2A;&#x5F97;&#x5206;&#x5411;&#x91CF; $z=U\\widehat{v}$ &#x5C06;&#x5F97;&#x5206;&#x5411;&#x91CF;&#x8F6C;&#x6362;&#x6210;&#x6982;&#x7387;&#x5206;&#x5E03;&#x5F62;&#x5F0F; $\\widehat{y}=softmax(z)$ &#x6211;&#x4EEC;&#x5E0C;&#x671B;&#x6211;&#x4EEC;&#x4EA7;&#x751F;&#x7684;&#x6982;&#x7387;&#x5206;&#x5E03; ,&#x4E0E;&#x771F;&#x5B9E;&#x6982;&#x7387;&#x5206;&#x5E03; $\\widehat{y}$ &#x76F8;&#x5339;&#x914D;&#x3002;&#x800C; y &#x521A;&#x597D;&#x4E5F;&#x5C31;&#x662F;&#x6211;&#x4EEC;&#x671F;&#x671B;&#x7684;&#x771F;&#x5B9E;&#x8BCD;&#x8BED;&#x7684;one-hot&#x5411;&#x91CF;&#x3002; &#x600E;&#x6837;&#x627E;&#x5230;&#x77E9;&#x9635;U&#x3001;V&#xFF1F;&#x76EE;&#x6807;&#x51FD;&#x6570;&#x9009;&#x4EA4;&#x53C9;&#x71B5;&#xFF0C;&#x7528;&#x68AF;&#x5EA6;&#x4E0B;&#x964D;&#x6CD5;&#x53BB;&#x66F4;&#x65B0;&#x6BCF;&#x4E00;&#x4E2A;&#x76F8;&#x5173;&#x7684;&#x8BCD;&#x5411;&#x91CF; $U_c$ &#x548C; $V_j$. &#x5F53;&#x6211;&#x4EEC;&#x8BD5;&#x56FE;&#x4ECE;&#x5DF2;&#x77E5;&#x6982;&#x7387;&#x5B66;&#x4E60;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x6982;&#x7387;&#x65F6;&#xFF0C;&#x6700;&#x5E38;&#x89C1;&#x7684;&#x662F;&#x4ECE;&#x4FE1;&#x606F;&#x8BBA;&#x7684;&#x89D2;&#x5EA6;&#x5BFB;&#x627E;&#x65B9;&#x6CD5;&#x6765;&#x8BC4;&#x4F30;&#x4E24;&#x4E2A;&#x6982;&#x7387;&#x5206;&#x5E03;&#x7684;&#x5DEE;&#x8DDD;&#x3002;&#x5176;&#x4E2D;&#x5E7F;&#x53D7;&#x597D;&#x8BC4;&#x53C8;&#x5E7F;&#x6CDB;&#x5E94;&#x7528;&#x7684;&#x4E00;&#x4E2A;&#x8BC4;&#x4F30;&#x5DEE;&#x5F02;/&#x635F;&#x5931;&#x7684;&#x51FD;&#x6570;&#x662F;&#x4EA4;&#x53C9;&#x71B5;&#xFF1A;$H(\\widehat{y},y) = -\\sum_{j=1}^{|V|}y_jlog(\\widehat{y}_j)$ &#x7ED3;&#x5408;&#x6211;&#x4EEC;&#x5F53;&#x4E0B;&#x7684;&#x4F8B;&#x5B50;&#xFF0C;y &#x53EA;&#x662F;&#x4E00;&#x4E2A;one-hot&#x5411;&#x91CF;&#xFF0C;&#x4E8E;&#x662F;&#x4E0A;&#x9762;&#x7684;&#x635F;&#x5931;&#x51FD;&#x6570;&#x5C31;&#x53EF;&#x4EE5;&#x7B80;&#x5316;&#x4E3A;&#xFF1A;$H(\\widehat{y},y) = -y_jlog(\\widehat{y}_j)$ &#x6211;&#x4EEC;&#x7528; c &#x8868;&#x793A; y &#x8FD9;&#x4E2A; one-hot &#x5411;&#x91CF;&#x53D6;&#x503C;&#x4E3A; 1 &#x7684;&#x90A3;&#x4E2A;&#x7EF4;&#x5EA6;&#x7684;&#x4E0B;&#x6807;&#x3002;&#x6240;&#x4EE5;&#x5728;&#x6211;&#x4EEC;&#x9884;&#x6D4B;&#x4E3A;&#x51C6;&#x786E;&#x503C;&#x7684;&#x60C5;&#x51B5;&#x4E0B; $\\widehat{y}_c=1$&#x3002;&#x4E8E;&#x662F;&#x635F;&#x5931;&#x4E3A; &#x2212;1 log(1) = 0&#x3002;&#x6240;&#x4EE5;&#x5BF9;&#x4E8E;&#x4E00;&#x4E2A;&#x7406;&#x60F3;&#x7684;&#x9884;&#x6D4B;&#x503C;&#xFF0C;&#x56E0;&#x4E3A;&#x9884;&#x6D4B;&#x5F97;&#x5230;&#x7684;&#x6982;&#x7387;&#x5206;&#x5E03;&#x548C;&#x771F;&#x5B9E;&#x6982;&#x7387;&#x5206;&#x5E03;&#x5B8C;&#x5168;&#x4E00;&#x6837;&#xFF0C;&#x56E0;&#x6B64;&#x635F;&#x5931;&#x4E3A;0&#x3002;&#x76F8;&#x53CD;,&#x5F53;&#x6211;&#x4EEC;&#x7684;&#x9884;&#x6D4B;&#x7ED3;&#x679C;&#x975E;&#x5E38;&#x4E0D;&#x7406;&#x60F3;&#xFF0C; $\\widehat{y}_c=0.01$&#x3002;&#x8BA1;&#x7B97;&#x5F97;&#x5230;&#x7684;&#x635F;&#x5931;&#x4E3A;&#x2212;1 log(0.01) &#x2248; 4.605&#xFF0C;&#x635F;&#x5931;&#x975E;&#x5E38;&#x5927;&#xFF0C;&#x539F;&#x672C;&#x8FD9;&#x624D;&#x662F;&#x6807;&#x51C6;&#x7ED3;&#x679C;&#xFF0C;&#x53EF;&#x662F;&#x4F60;&#x7ED9;&#x4E86;&#x4E00;&#x4E2A;&#x975E;&#x5E38;&#x4F4E;&#x7684;&#x6982;&#x7387;&#xFF0C;&#x56E0;&#x6B64;&#x4F1A;&#x62FF;&#x5230;&#x4E00;&#x4E2A;&#x975E;&#x5E38;&#x5927;&#x7684;loss&#x3002;&#x6700;&#x7EC8;&#x7684;&#x4F18;&#x5316;&#x51FD;&#x6570;&#x4E3A;&#xFF1A; Skip-Gram&#x6A21;&#x578B;&#x4E0E;&#x4E0A;&#x9762;&#x63D0;&#x5230;&#x7684;&#x6A21;&#x578B;&#x5BF9;&#x5E94;&#x7684;&#x53E6;&#x4E00;&#x79CD;&#x601D;&#x8DEF;&#xFF0C;&#x662F;&#x4EE5;&#x4E2D;&#x5FC3;&#x7684;&#x8BCD;&#x8BED; &#x201D;jumped&#x201D; &#x4E3A;&#x8F93;&#x5165;&#xFF0C;&#x80FD;&#x591F;&#x9884;&#x6D4B;&#x6216;&#x4EA7;&#x751F;&#x5B83;&#x5468;&#x56F4;&#x7684;&#x8BCD;&#x8BED; &#x201D;The&#x201D;, &#x201C;cat&#x201D;, &#x201C;over&#x201D;, &#x201C;the&#x201D;, &#x201C;puddle&#x201D; &#x7B49;&#x3002;&#x8FD9;&#x91CC;&#x6211;&#x4EEC;&#x53EB; &#x201D;jumped&#x201D; &#x4E3A;&#x4E0A;&#x4E0B;&#x6587;&#x3002;&#x6211;&#x4EEC;&#x628A;&#x5B83;&#x53EB;&#x505A;Skip-Gram &#x6A21;&#x578B;&#x3002; &#x8FD9;&#x4E2A;&#x6A21;&#x578B;&#x7684;&#x5EFA;&#x7ACB;&#x4E0E;&#x8FDE;&#x7EED;&#x8BCD;&#x888B;&#x6A21;&#x578B;&#xFF08;CBOW&#xFF09;&#x975E;&#x5E38;&#x76F8;&#x4F3C;&#xFF0C;&#x4F46;&#x672C;&#x8D28;&#x4E0A;&#x662F;&#x4EA4;&#x6362;&#x4E86;&#x8F93;&#x5165;&#x548C;&#x8F93;&#x51FA;&#x7684;&#x4F4D;&#x7F6E;&#x3002;&#x6211;&#x4EEC;&#x4EE4;&#x8F93;&#x5165;&#x7684;one-hot&#x5411;&#x91CF;&#xFF08;&#x4E2D;&#x5FC3;&#x8BCD;&#xFF09;&#x4E3A;x&#xFF08;&#x56E0;&#x4E3A;&#x5B83;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#xFF09;&#xFF0C;&#x8F93;&#x51FA;&#x5411;&#x91CF;&#x4E3A;y(j)&#x3002;U&#x548C;V&#x7684;&#x5B9A;&#x4E49;&#x4E0E;&#x8FDE;&#x7EED;&#x8BCD;&#x888B;&#x6A21;&#x578B;&#x4E00;&#x6837;&#x3002; &#x4E3E;&#x4E2A;&#x4F8B;&#x5B50;&#xFF0C;&#x5047;&#x8BBE;&#x73B0;&#x5728;&#x7684;&#x6570;&#x636E;&#x96C6;&#x5982;&#x4E0B;&#xFF1A; the quick brown fox jumped over the lazy dog &#x8FD9;&#x4E2A;&#x6570;&#x636E;&#x96C6;&#x4E2D;&#x5305;&#x542B;&#x4E86;&#x8BCD;&#x8BED;&#x53CA;&#x5176;&#x4E0A;&#x4E0B;&#x6587;&#x4FE1;&#x606F;&#x3002;&#x4E0A;&#x4E0B;&#x6587;&#x4FE1;&#x606F;(Context)&#x662F;&#x4E00;&#x4E2A;&#x6BD4;&#x8F83;&#x5BBD;&#x6CDB;&#x7684;&#x6982;&#x5FF5;&#xFF0C;&#x6709;&#x591A;&#x79CD;&#x4E0D;&#x540C;&#x7684;&#x7406;&#x89E3;&#xFF1A;&#x4F8B;&#x5982;&#xFF0C;&#x8BCD;&#x8BED;&#x5468;&#x8FB9;&#x7684;&#x53E5;&#x6CD5;&#x7ED3;&#x6784;&#xFF0C;&#x8BCD;&#x8BED;&#x7684;&#x5DE6;&#x8FB9;&#x90E8;&#x5206;&#x7684;&#x82E5;&#x5E72;&#x4E2A;&#x8BCD;&#x8BED;&#x4FE1;&#x606F;&#xFF0C;&#x5BF9;&#x5E94;&#x7684;&#x53F3;&#x534A;&#x90E8;&#x5206;&#x7B49;&#x3002;&#x8FD9;&#x91CC;&#xFF0C;&#x6211;&#x4EEC;&#x4F7F;&#x7528;&#x6700;&#x539F;&#x59CB;&#x548C;&#x57FA;&#x672C;&#x7684;&#x5B9A;&#x4E49;&#xFF0C;&#x5373;&#x8BA4;&#x4E3A;&#x8BCD;&#x8BED;&#x5DE6;&#x53F3;&#x76F8;&#x90BB;&#x7684;&#x82E5;&#x5E72;&#x4E2A;&#x8BCD;&#x6C47;&#x662F;&#x8BE5;&#x8BCD;&#x5BF9;&#x5E94;&#x7684;&#x4E0A;&#x4E0B;&#x6587;&#x4FE1;&#x606F;&#x3002;&#x4F8B;&#x5982;&#xFF0C;&#x53D6;&#x5DE6;&#x53F3;&#x7684;&#x8BCD;&#x7A97;&#x53E3;&#x4E3A;1&#xFF0C;&#x4E0B;&#x9762;&#x662F;&#x6570;&#x636E;&#x96C6;&#x4E2D;&#x7684;(&#x4E0A;&#x4E0B;&#x6587;&#x4FE1;&#x606F;&#xFF0C;&#x5BF9;&#x5E94;&#x7684;&#x8BCD;)&#x7684;pairs&#xFF1A; ([the, brown], quick), ([quick, fox], brown), ([brown, jumped], fox), ... Skip-Gram&#x6A21;&#x578B;&#x662F;&#x901A;&#x8FC7;&#x8F93;&#x5165;&#x7684;&#x76EE;&#x6807;&#x8BCD;&#x6765;&#x9884;&#x6D4B;&#x5176;&#x5BF9;&#x5E94;&#x7684;&#x4E0A;&#x4E0B;&#x6587;&#x4FE1;&#x606F;&#xFF0C;&#x6240;&#x4EE5;&#x76EE;&#x6807;&#x662F;&#x901A;&#x8FC7;[quick]&#x6765;&#x9884;&#x6D4B;[the]&#x548C;[brown]&#xFF0C;&#x901A;&#x8FC7;[brown]&#x6765;&#x9884;&#x6D4B;[quick]&#x548C;[fox]&#x2026; &#x5C06;&#x4E0A;&#x9762;&#x7684;pair&#x8F6C;&#x6362;&#x4E3A;(inpUt, output)&#x7684;&#x5F62;&#x5F0F;&#x5982;&#x4E0B;&#xFF1A; (quick, the), (quick, brown), (brown, quick), (brown, fox), ... &#x5BF9;&#x5E94;&#x5230;&#x4E0A;&#x9762;&#x90E8;&#x5206;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x628A;Skip-Gram &#x6A21;&#x578B;&#x7684;&#x8FD0;&#x4F5C;&#x65B9;&#x5F0F;&#x62C6;&#x5206;&#x6210;&#x4EE5;&#x4E0B;&#x51E0;&#x6B65;&#xFF1A; &#x751F;&#x6210; one-hot &#x8F93;&#x5165;&#x5411;&#x91CF; x&#x3002; &#x5F97;&#x5230;&#x4E0A;&#x4E0B;&#x6587;&#x7684;&#x5D4C;&#x5165;&#x8BCD;&#x5411;&#x91CF; $V_c$=$V_x$&#x3002; &#x56E0;&#x4E3A;&#x8FD9;&#x91CC;&#x4E0D;&#x9700;&#x8981;&#x53D6;&#x5E73;&#x5747;&#x503C;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;&#x6240;&#x4EE5;&#x76F4;&#x63A5;&#x662F;$\\widehat{v}=v_c$&#x3002; &#x901A;&#x8FC7;$U=UV_c$&#x4EA7;&#x751F; 2m &#x4E2A;&#x5F97;&#x5206;&#x5411;&#x91CF; $U_{c&#x2212;m},&#x22EF;,U_{c&#x2212;1},U_{c+1},&#x22EF;,U_{c+m}$&#x3002; &#x5C06;&#x5F97;&#x5206;&#x5411;&#x91CF;&#x8F6C;&#x6362;&#x6210;&#x6982;&#x7387;&#x5206;&#x5E03;&#x5F62;&#x5F0F; $y=softmax(u)$&#x3002; &#x6211;&#x4EEC;&#x5E0C;&#x671B;&#x6211;&#x4EEC;&#x4EA7;&#x751F;&#x7684;&#x6982;&#x7387;&#x5206;&#x5E03;&#x4E0E;&#x771F;&#x5B9E;&#x6982;&#x7387;&#x5206;&#x5E03; $y^{c&#x2212;m},&#x22EF;,y^{c&#x2212;1},,y^{c+1}&#x22EF;,y^{c+m}$ &#x76F8;&#x5339;&#x914D;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x6211;&#x4EEC;&#x771F;&#x5B9E;&#x8F93;&#x51FA;&#x7ED3;&#x679C;&#x7684; one-hot &#x5411;&#x91CF;&#x3002; &#x4E3A;&#x6A21;&#x578B;&#x8BBE;&#x5B9A;&#x4E00;&#x4E2A;&#x76EE;&#x6807;/&#x635F;&#x5931;&#x51FD;&#x6570;&#x3002;&#x4E0D;&#x8FC7;&#x4E0D;&#x540C;&#x7684;&#x5730;&#x65B9;&#x662F;&#x6211;&#x4EEC;&#x8FD9;&#x91CC;&#x9700;&#x8981;&#x5F15;&#x5165;&#x6734;&#x7D20;&#x8D1D;&#x53F6;&#x65AF;&#x5047;&#x8BBE;&#x6765;&#x5C06;&#x8054;&#x5408;&#x6982;&#x7387;&#x62C6;&#x5206;&#x6210;&#x72EC;&#x7ACB;&#x6982;&#x7387;&#x76F8;&#x4E58;&#x3002;&#x53EA;&#x8981;&#x7ED9;&#x51FA;&#x4E86;&#x4E2D;&#x5FC3;&#x8BCD;&#xFF0C;&#x6240;&#x6709;&#x7684;&#x8F93;&#x51FA;&#x8BCD;&#x662F;&#x5B8C;&#x5168;&#x72EC;&#x7ACB;&#x7684;&#x3002;&#x4F7F;&#x7528;&#x968F;&#x673A;&#x68AF;&#x5EA6;&#x4E0B;&#x964D;&#x7B97;&#x6CD5;(SGD)&#x6765;&#x8FDB;&#x884C;&#x6700;&#x4F18;&#x5316;&#x6C42;&#x89E3;&#xFF0C;&#x5E76;&#x4E14;&#x4F7F;&#x7528;mini-batch&#x65B9;&#x6CD5; (&#x901A;&#x5E38;batch_size&#x5728;16&#x5230;512&#x4E4B;&#x95F4;)&#x3002;&#x53EF;&#x4EE5;&#x7528;&#x968F;&#x673A;&#x68AF;&#x5EA6;&#x4E0B;&#x964D;&#x6CD5;&#x53BB;&#x66F4;&#x65B0;&#x672A;&#x77E5;&#x53C2;&#x6570;&#x7684;&#x68AF;&#x5EA6;&#x3002;&#x5BF9;&#x5E94;&#x7684;&#x4F18;&#x5316;&#x51FD;&#x6570;&#x662F; &#x6211;&#x4EEC;&#x518D;&#x6B21;&#x89C2;&#x5BDF;&#x4E00;&#x4E0B;&#x76EE;&#x6807;&#x51FD;&#x6570;&#xFF0C;&#x6CE8;&#x610F;&#x5230;&#x5BF9;&#x6574;&#x4E2A;&#x5355;&#x8BCD;&#x8868;|V|&#x6C42;&#x548C;&#x7684;&#x8BA1;&#x7B97;&#x91CF;&#x662F;&#x975E;&#x5E38;&#x5DE8;&#x5927;&#x7684;&#xFF0C;&#x4EFB;&#x4F55;&#x4E00;&#x4E2A;&#x5BF9;&#x76EE;&#x6807;&#x51FD;&#x6570;&#x7684;&#x66F4;&#x65B0;&#x548C;&#x6C42;&#x503C;&#x64CD;&#x4F5C;&#x90FD;&#x4F1A;&#x6709;O(|V|)&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x3002;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x4E00;&#x4E2A;&#x601D;&#x8DEF;&#x53BB;&#x7B80;&#x5316;&#x4E00;&#x4E0B;&#xFF0C;&#x6211;&#x4EEC;&#x60F3;&#x529E;&#x6CD5;&#x53BB;&#x6C42;&#x5B83;&#x7684;&#x8FD1;&#x4F3C;&#xFF0C;&#x53EF;&#x4EE5;&#x53C2;&#x7167;&#x8D1F;&#x9762;&#x91C7;&#x6837;&#xFF08;Negative Sampling&#xFF09; why skip-gram&#x5728;NLP&#x4E2D;&#xFF0C;&#x8BED;&#x6599;&#x7684;&#x9009;&#x53D6;&#x662F;&#x4E00;&#x4E2A;&#x76F8;&#x5F53;&#x91CD;&#x8981;&#x7684;&#x95EE;&#x9898;&#x3002;&#x9996;&#x5148;&#xFF0C;&#x8BED;&#x6599;&#x5FC5;&#x987B;&#x5145;&#x5206;&#x3002;&#x4E00;&#x65B9;&#x9762;&#x8BCD;&#x5178;&#x7684;&#x8BCD;&#x91CF;&#x8981;&#x8DB3;&#x591F;&#x5927;&#xFF0C;&#x53E6;&#x4E00;&#x65B9;&#x9762;&#x5C3D;&#x53EF;&#x80FD;&#x5730;&#x5305;&#x542B;&#x53CD;&#x6620;&#x8BCD;&#x8BED;&#x4E4B;&#x95F4;&#x5173;&#x7CFB;&#x7684;&#x53E5;&#x5B50;&#xFF0C;&#x5982;&#x201C;&#x9C7C;&#x5728;&#x6C34;&#x4E2D;&#x6E38;&#x201D;&#x8FD9;&#x79CD;&#x53E5;&#x5F0F;&#x5728;&#x8BED;&#x6599;&#x4E2D;&#x5C3D;&#x53EF;&#x80FD;&#x5730;&#x591A;&#xFF0C;&#x6A21;&#x578B;&#x624D;&#x80FD;&#x5B66;&#x4E60;&#x5230;&#x8BE5;&#x53E5;&#x4E2D;&#x7684;&#x8BED;&#x4E49;&#x548C;&#x8BED;&#x6CD5;&#x5173;&#x7CFB;&#xFF0C;&#x8FD9;&#x548C;&#x4EBA;&#x7C7B;&#x5B66;&#x4E60;&#x81EA;&#x7136;&#x8BED;&#x8A00;&#x662F;&#x4E00;&#x4E2A;&#x9053;&#x7406;&#xFF0C;&#x91CD;&#x590D;&#x6B21;&#x6570;&#x591A;&#x4E86;&#xFF0C;&#x4E5F;&#x5C31;&#x4F1A;&#x6A21;&#x578B;&#x4E86;&#x3002;&#x5176;&#x6B21;&#xFF0C;&#x8BED;&#x6599;&#x5FC5;&#x987B;&#x51C6;&#x786E;&#x3002;&#x6240;&#x9009;&#x53D6;&#x7684;&#x8BED;&#x6599;&#x80FD;&#x591F;&#x6B63;&#x786E;&#x53CD;&#x6620;&#x8BE5;&#x8BED;&#x8A00;&#x7684;&#x8BED;&#x4E49;&#x548C;&#x8BED;&#x6CD5;&#x5173;&#x7CFB;&#x3002;&#x5982;&#x4E2D;&#x6587;&#x7684;&#x300A;&#x4EBA;&#x6C11;&#x65E5;&#x62A5;&#x300B;&#x6BD4;&#x8F83;&#x51C6;&#x786E;&#x3002;&#x4F46;&#x66F4;&#x591A;&#x65F6;&#x5019;&#x4E0D;&#x662F;&#x8BED;&#x6599;&#x9009;&#x53D6;&#x5F15;&#x53D1;&#x51C6;&#x786E;&#x6027;&#x95EE;&#x9898;&#xFF0C;&#x800C;&#x662F;&#x5904;&#x7406;&#x7684;&#x65B9;&#x6CD5;&#x3002;&#x7531;&#x4E8E;&#x7A97;&#x53E3;&#x5927;&#x5C0F;&#x7684;&#x9650;&#x5236;&#xFF0C;&#x8FD9;&#x4F1A;&#x5BFC;&#x81F4;&#x8D85;&#x51FA;&#x7A97;&#x53E3;&#x7684;&#x8BCD;&#x8BED;&#x4E0E;&#x5F53;&#x524D;&#x8BCD;&#x4E4B;&#x95F4;&#x7684;&#x5173;&#x7CFB;&#x4E0D;&#x80FD;&#x6B63;&#x786E;&#x5730;&#x53CD;&#x6620;&#x5230;&#x6A21;&#x578B;&#x4E2D;&#xFF0C;&#x5982;&#x679C;&#x5355;&#x7EAF;&#x6269;&#x5927;&#x7A97;&#x53E3;&#x5927;&#x5C0F;&#x4F1A;&#x589E;&#x52A0;&#x8BAD;&#x7EC3;&#x7684;&#x590D;&#x6742;&#x5EA6;&#x3002;Skip-gram&#x6A21;&#x578B;&#x7684;&#x63D0;&#x51FA;&#x5F88;&#x597D;&#x89E3;&#x51B3;&#x4E86;&#x8FD9;&#x4E9B;&#x95EE;&#x9898;&#x3002; &#x6211;&#x4EEC;&#x6765;&#x770B;&#x770B; skip-gram &#x7684;&#x5B9A;&#x4E49;&#x3002; Skip-gram &#x5B9E;&#x9645;&#x4E0A;&#x7684;&#x5B9A;&#x4E49;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x5C31;&#x662F;&#x5141;&#x8BB8;&#x8DF3;&#x51E0;&#x4E2A;&#x5B57;&#x7684;&#x610F;&#x601D;&#x3002;&#x4F9D;&#x7167;&#x539F;&#x8BBA;&#x6587;&#x91CC;&#x7684;&#x5B9A;&#x4E49;&#xFF0C;&#x8FD9;&#x4E2A;&#x53E5;&#x5B50;&#xFF1A; Insurgents killed in ongoing fighting. &#x5728; bi-grams &#x7684;&#x65F6;&#x5019;&#x662F;&#x62C6;&#x6210;&#xFF1A; { insurgents killed, killed in, in ongoing, ongoing fighting } &#x5728; 2-skip-bi-grams &#x7684;&#x65F6;&#x5019;&#x62C6;&#x6210;&#xFF1A; { insurgents killed, insurgents in, insurgents ongoing, killed in, killed ongoing, killed fighting, in ongoing, in fighting, ongoing fighting } &#x5728; tri-grams &#x7684;&#x65F6;&#x5019;&#x662F;&#xFF1A; { insurgents killed in, killed in ongoing, in ongoing fighting } &#x5728; 2-skip-tri-grams &#x7684;&#x65F6;&#x5019;&#x662F;&#xFF1A; { insurgents killed in, insurgents killed ongoing, insurgents killed fighting, insurgentsin ongoing, insurgents in fighting, insurgents ongoing fighting, killed in ongoing, killed in fighting, killed ongoing fighting, in ongoing fighting } &#x8FD9;&#x6837;&#x5C31;&#x6709;&#x529E;&#x6CD5;&#x5728;&#x6574;&#x7BC7;&#x6587;&#x7AE0;&#x90FD;&#x662F;&#x7528;&#x201C;&#x53F0;&#x6E7E;&#x5927;&#x5B66;&#x201D;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x4EE5;&#x201C;&#x53F0;&#x5927;&#x201D;&#x627E;&#x5230;&#x6587;&#x7AE0;&#xFF0C;&#x89E3;&#x51B3;&#x4E00;&#x4E9B;&#x201C;&#x540C;&#x4E49;&#x8BCD;&#x201D;&#x60F3;&#x8981;&#x89E3;&#x51B3;&#x7684;&#x95EE;&#x9898;&#x3002;Skip-gram &#x4E00;&#x65B9;&#x9762;&#x53CD;&#x6620;&#x4E86;&#x53E5;&#x5B50;&#x7684;&#x771F;&#x5B9E;&#x610F;&#x601D;&#xFF0C;&#x53E6;&#x4E00;&#x65B9;&#x9762;&#x8FD8;&#x6269;&#x5927;&#x4E86;&#x8BED;&#x6599;&#xFF0C;2&#x5143;&#x8BCD;&#x7EC4;&#x7531;&#x539F;&#x6765;&#x7684;4&#x4E2A;&#x6269;&#x5C55;&#x5230;&#x4E86;9&#x4E2A;&#xFF0C;3&#x5143;&#x8BCD;&#x7EC4;&#x7531;&#x539F;&#x6765;&#x7684;3&#x4E2A;&#x6269;&#x5C55;&#x5230;&#x4E86;10&#x4E2A;&#x3002; Word2Vec &#x662F;&#x4E00;&#x4E2A;&#x5178;&#x578B;&#x7684;&#x9884;&#x6D4B;&#x6A21;&#x578B;&#xFF0C;&#x7528;&#x4E8E;&#x9AD8;&#x6548;&#x5730;&#x5B66;&#x4E60;Word Embedding&#x3002;&#x5B9E;&#x73B0;&#x7684;&#x6A21;&#x578B;&#x6709;&#x4E24;&#x79CD;&#xFF1A;&#x8FDE;&#x7EED;&#x8BCD;&#x888B;&#x6A21;&#x578B;(CBOW)&#x548C;Skip-Gram&#x6A21;&#x578B;&#x3002;&#x7B97;&#x6CD5;&#x4E0A;&#x8FD9;&#x4E24;&#x4E2A;&#x6A21;&#x578B;&#x662F;&#x76F8;&#x4F3C;&#x7684; CBOW &#x4ECE;&#x8F93;&#x5165;&#x7684;&#x4E0A;&#x4E0B;&#x6587;&#x4FE1;&#x606F;&#x6765;&#x9884;&#x6D4B;&#x76EE;&#x6807;&#x8BCD; skip-gram&#x6A21;&#x578B;&#x5219;&#x662F;&#x76F8;&#x53CD;&#x7684;&#xFF0C;&#x4ECE;&#x76EE;&#x6807;&#x8BCD;&#x6765;&#x9884;&#x6D4B;&#x4E0A;&#x4E0B;&#x6587;&#x4FE1;&#x606F;&#x4E00;&#x822C;&#x800C;&#x8A00;&#xFF0C;&#x8FD9;&#x79CD;&#x65B9;&#x5F0F;&#x4E0A;&#x7684;&#x533A;&#x522B;&#x4F7F;&#x5F97;CBOW&#x6A21;&#x578B;&#x66F4;&#x9002;&#x5408;&#x5E94;&#x7528;&#x5728;&#x5C0F;&#x89C4;&#x6A21;&#x7684;&#x6570;&#x636E;&#x96C6;&#x4E0A;&#xFF0C;&#x80FD;&#x591F;&#x5BF9;&#x5F88;&#x591A;&#x7684;&#x5206;&#x5E03;&#x5F0F;&#x4FE1;&#x606F;&#x8FDB;&#x884C;&#x5E73;&#x6ED1;&#x5904;&#x7406;&#xFF1B;&#x800C;Skip-Gram&#x6A21;&#x578B;&#x5219;&#x6BD4;&#x8F83;&#x9002;&#x5408;&#x7528;&#x4E8E;&#x5927;&#x89C4;&#x6A21;&#x7684;&#x6570;&#x636E;&#x96C6;&#x4E0A;&#x3002; &#x5411;&#x91CF;&#x7A7A;&#x95F4;&#x6A21;&#x578B;(Vector space models, VSMs)&#x5C06;&#x8BCD;&#x8BED;&#x8868;&#x793A;&#x4E3A;&#x4E00;&#x4E2A;&#x8FDE;&#x7EED;&#x7684;&#x8BCD;&#x5411;&#x91CF;&#xFF0C;&#x5E76;&#x4E14;&#x8BED;&#x4E49;&#x63A5;&#x8FD1;&#x7684;&#x8BCD;&#x8BED;&#x5BF9;&#x5E94;&#x7684;&#x8BCD;&#x5411;&#x91CF;&#x5728;&#x7A7A;&#x95F4;&#x4E0A;&#x4E5F;&#x662F;&#x63A5;&#x8FD1;&#x7684;&#x3002;&#x5206;&#x5E03;&#x5F0F;&#x5047;&#x8BF4;&#x7406;&#x8BBA;&#xFF1A;&#x8BE5;&#x5047;&#x8BF4;&#x7684;&#x601D;&#x60F3;&#x662F;&#x5982;&#x679C;&#x4E24;&#x4E2A;&#x8BCD;&#x7684;&#x4E0A;&#x4E0B;&#x6587;(context)&#x76F8;&#x540C;&#xFF0C;&#x90A3;&#x4E48;&#x8FD9;&#x4E24;&#x4E2A;&#x8BCD;&#x6240;&#x8868;&#x8FBE;&#x7684;&#x8BED;&#x4E49;&#x4E5F;&#x662F;&#x4E00;&#x6837;&#x7684;&#xFF1B;&#x6362;&#x8A00;&#x4E4B;&#xFF0C;&#x4E24;&#x4E2A;&#x8BCD;&#x7684;&#x8BED;&#x4E49;&#x662F;&#x5426;&#x76F8;&#x540C;&#x6216;&#x76F8;&#x4F3C;&#xFF0C;&#x53D6;&#x51B3;&#x4E8E;&#x4E24;&#x4E2A;&#x8BCD;&#x7684;&#x4E0A;&#x4E0B;&#x6587;&#x5185;&#x5BB9;&#xFF0C;&#x4E0A;&#x4E0B;&#x6587;&#x76F8;&#x540C;&#x8868;&#x793A;&#x4E24;&#x4E2A;&#x8BCD;&#x662F;&#x53EF;&#x4EE5;&#x7B49;&#x4EF7;&#x66FF;&#x6362;&#x7684;&#x3002; &#x8BCD;&#x5411;&#x91CF;&#x751F;&#x6210;&#x65B9;&#x6CD5;&#x4E3B;&#x8981;&#x5206;&#x4E24;&#x5927;&#x7C7B;&#xFF1A; &#x8BA1;&#x6570;&#x6CD5;(coUnt-based methods, e.g. Latent Semantic Analysis)&#x5728;&#x5927;&#x578B;&#x8BED;&#x6599;&#x4E2D;&#x7EDF;&#x8BA1;&#x8BCD;&#x8BED;&#x53CA;&#x90BB;&#x8FD1;&#x7684;&#x8BCD;&#x7684;&#x5171;&#x73B0;&#x9891;&#x7387;&#xFF0C;&#x7136;&#x540E;&#x5C06;&#x4E4B;&#x4E3A;&#x6BCF;&#x4E2A;&#x8BCD;&#x90FD;&#x6620;&#x5C04;&#x4E3A;&#x4E00;&#x4E2A;&#x7A20;&#x5BC6;&#x7684;&#x5411;&#x91CF;&#x8868;&#x793A;&#xFF1B; &#x9884;&#x6D4B;&#x6CD5;(predictiVe methods, e.g. neural probabilistic language models)&#x3002;&#x76F4;&#x63A5;&#x5229;&#x7528;&#x8BCD;&#x8BED;&#x7684;&#x90BB;&#x8FD1;&#x8BCD;&#x4FE1;&#x606F;&#x6765;&#x5F97;&#x5230;&#x9884;&#x6D4B;&#x8BCD;&#x7684;&#x8BCD;&#x5411;&#x91CF;&#xFF08;&#x8BCD;&#x5411;&#x91CF;&#x901A;&#x5E38;&#x4F5C;&#x4E3A;&#x6A21;&#x578B;&#x7684;&#x8BAD;&#x7EC3;&#x53C2;&#x6570;&#xFF09;&#x3002; &#x8BCD;&#x5411;&#x91CF;&#x4EFB;&#x52A1;&#x8BC4;&#x4EF7;&#x5185;&#x90E8;&#x4EFB;&#x52A1;&#x8BC4;&#x4EF7;&#x5185;&#x90E8;&#x4EFB;&#x52A1;&#x8BC4;&#x4EF7;&#x7684;&#x7279;&#x70B9;&#x5982;&#x4E0B;&#xFF1A; &#x4E00;&#x822C;&#x662F;&#x5728;&#x4E00;&#x4E2A;&#x7279;&#x5B9A;&#x7684;&#x5B50;&#x4EFB;&#x52A1;&#x4E2D;&#x8FDB;&#x884C;&#x8BC4;&#x6D4B; &#x8BA1;&#x7B97;&#x5F88;&#x5FEB; &#x6709;&#x52A9;&#x4E8E;&#x7406;&#x89E3;&#x76F8;&#x5173;&#x7684;&#x7CFB;&#x7EDF; &#x5728;&#x5B9E;&#x9645;&#x7684;NLP&#x4EFB;&#x52A1;&#x4E2D;&#x8868;&#x73B0;&#x597D;&#x574F;&#xFF0C;&#x53EF;&#x80FD;&#x9700;&#x8981;&#x5916;&#x90E8;&#x5173;&#x8054;&#x5B9E;&#x9645;&#x5E94;&#x7528; &#x65B9;&#x6CD5;&#xFF1A;&#x8BCD;&#x5411;&#x91CF;&#x7C7B;&#x6BD4;&#x6211;&#x4EEC;&#x5148;&#x8F93;&#x5165;&#x4E00;&#x7EC4;&#x4E0D;&#x5B8C;&#x6574;&#x7684;&#x7C7B;&#x6BD4; a:b::c:? &#x5185;&#x90E8;&#x4EFB;&#x52A1;&#x8BC4;&#x4EF7;&#x7CFB;&#x7EDF;&#x627E;&#x51FA;&#x6700;&#x5927;&#x5316;&#x4F59;&#x5F26;&#x76F8;&#x4F3C;&#x5EA6;&#x7684;&#x8BCD;&#x5411;&#x91CF;&#x7406;&#x60F3;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x6211;&#x4EEC;&#x60F3;&#x5F97;&#x5230;xb&#x2212;xa=xd&#x2212;xc(&#x4F8B;&#x5982;&#xFF0C;&#x738B;&#x540E;&#x2013;&#x56FD;&#x738B; = &#x5973;&#x6F14;&#x5458; &#x2013; &#x7537;&#x6F14;&#x5458;)&#x3002;&#x4E8E;&#x662F;xb&#x2212;xa+xc=xd, &#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x53EA;&#x9700;&#x8981;&#x627E;&#x51FA;&#x4E00;&#x4E2A;&#x4E0E;xb&#x2212;xa+xc&#x7684;&#x6807;&#x51C6;&#x5316;&#x5185;&#x79EF;&#xFF08;&#x6BD4;&#x5982;&#x4F59;&#x5F26;&#x76F8;&#x4F3C;&#x5EA6;&#xFF09;&#x53D6;&#x6700;&#x5927;&#x503C;&#x7684;&#x8BCD;&#x5411;&#x91CF;&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#x3002; &#x7C7B;&#x6BD4;&#x8BED;&#x6599;&#x793A;&#x4F8B;&#xFF1A; &#x9996;&#x90FD;&#x57CE;&#x5E02;1 : &#x56FD;&#x5BB6;1 : : &#x9996;&#x90FD;&#x57CE;&#x5E02;2 : &#x56FD;&#x5BB6;2 Beijing:China::Astana Kazakhstan Beijing:China::Asmara Eritrea ... &#x6BD4;&#x8F83;&#x7EA7; bad:worst::big biggest bad:worst::easy easiest ... &#x65F6;&#x6001; dancing:danced::decreased decreased dancing:danced::falling fell ... &#x8BC4;&#x6D4B;&#x8BED;&#x6599; &#x65B9;&#x6CD5;&#xFF1A;&#x76F8;&#x5173;&#x6027;&#x8BC4;&#x4EF7;&#x53E6;&#x5916;&#x4E00;&#x4E2A;&#x8BC4;&#x6D4B;&#x8BCD;&#x5411;&#x91CF;&#x8D28;&#x91CF;&#x7684;&#x7B80;&#x5355;&#x65B9;&#x6CD5;&#x662F;&#x4EBA;&#x4E3A;&#x5BF9;&#x4E24;&#x4E2A;&#x8BCD;&#x7684;&#x76F8;&#x4F3C;&#x5EA6;&#x5728;&#x4E00;&#x4E2A;&#x56FA;&#x5B9A;&#x533A;&#x95F4;&#x5185;&#x6253;&#x5206;(&#x6BD4;&#x5982;&#x8BF4; 0-10)&#xFF0C;&#x518D;&#x8DDF;&#x5BF9;&#x5E94;&#x5411;&#x91CF;&#x7684;&#x4F59;&#x5F26;&#x76F8;&#x9002;&#x5EA6;&#x8FDB;&#x884C;&#x5BF9;&#x6BD4;&#x3002;&#x8BC4;&#x6D4B;&#x8BED;&#x6599; &#x8003;&#x8651;&#x53C2;&#x6570; &#x8BCD;&#x5411;&#x91CF;&#x7684;&#x7EF4;&#x5EA6; &#x8D44;&#x6599;&#x5E93;&#x7684;&#x5927;&#x5C0F; &#x8D44;&#x6599;&#x6E90;/&#x7C7B;&#x578B; &#x4E0A;&#x4E0B;&#x6587;&#x7A97;&#x53E3;&#x7684;&#x5927;&#x5C0F; &#x4E0A;&#x4E0B;&#x6587;&#x7684;&#x5BF9;&#x79F0;&#x6027; &#x4E00;&#x822C;&#x800C;&#x8A00;&#xFF0C; &#x7CBE;&#x5EA6;&#x548C;&#x4F7F;&#x7528;&#x7684;&#x6A21;&#x578B;&#x9AD8;&#x5EA6;&#x76F8;&#x5173;&#xFF0C;&#x56E0;&#x4E3A;&#x8FD9;&#x4E9B;&#x751F;&#x6210;&#x8BCD;&#x5411;&#x91CF;&#x7684;&#x65B9;&#x6CD5;&#x6240;&#x4F9D;&#x636E;&#x7684;&#x7279;&#x6027;&#x662F;&#x5B8C;&#x5168;&#x4E0D;&#x540C;&#x7684;(&#x5982;&#x540C;&#x65F6;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;&#xFF0C;&#x5947;&#x5F02;&#x5411;&#x91CF;&#x7B49;&#x3002;) &#x6587;&#x96C6;&#x91CF;&#x8D8A;&#x5927;&#xFF0C;&#x7CBE;&#x5EA6;&#x8D8A;&#x9AD8;&#xFF0C;&#x56E0;&#x4E3A;&#x4F8B;&#x5B50;&#x8D8A;&#x591A;&#xFF0C;&#x751F;&#x6210;&#x7684;&#x7CFB;&#x7EDF;&#x5B66;&#x4E60;&#x5230;&#x7684;&#x7ECF;&#x9A8C;&#x5C31;&#x66F4;&#x4E30;&#x5BCC;&#x3002;&#x6BD4;&#x5982;&#x5728;&#x5B8C;&#x6210;&#x8BCD;&#x6C47;&#x7C7B;&#x6BD4;&#x7684;&#x4F8B;&#x5B50;&#x4E2D;&#xFF0C;&#x7CFB;&#x7EDF;&#x5982;&#x679C;&#x4E4B;&#x524D;&#x6CA1;&#x6709;&#x63A5;&#x89E6;&#x6D4B;&#x8BD5;&#x8BCD;&#xFF0C;&#x5C31;&#x53EF;&#x80FD;&#x4F1A;&#x751F;&#x6210;&#x9519;&#x8BEF;&#x7684;&#x7ED3;&#x679C;&#x3002; &#x5982;&#x679C;&#x7EF4;&#x5EA6;&#x7279;&#x522B;&#x4F4E;&#x6216;&#x7279;&#x522B;&#x9AD8;&#xFF0C;&#x7CBE;&#x5EA6;&#x5C31;&#x4F1A;&#x6BD4;&#x8F83;&#x4F4E;&#x3002;&#x4F4E;&#x7EF4;&#x5EA6;&#x8BCD;&#x5411;&#x91CF;&#x65E0;&#x6CD5;&#x6355;&#x6349;&#x6587;&#x96C6;&#x4E2D;&#x4E0D;&#x540C;&#x8BCD;&#x8BED;&#x7684;&#x4E0D;&#x540C;&#x610F;&#x4E49;&#x3002;&#x8FD9;&#x53EF;&#x4EE5;&#x89C6;&#x4E3A;&#x6211;&#x4EEC;&#x6A21;&#x578B;&#x590D;&#x6742;&#x5EA6;&#x8FC7;&#x4F4E;&#x800C;&#x5BFC;&#x81F4;&#x7684;&#x9AD8;&#x504F;&#x5DEE;&#x3002;&#x6BD4;&#x5982; &#x201C;king&#x201D;, &#x201C;queen&#x201D;, &#x201C;man&#x201D;, &#x201C;woman&#x201D; &#x8FD9;&#x51E0;&#x4E2A;&#x8BCD;&#xFF0C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x81F3;&#x5C11;2&#x4E2A;&#x7EF4;&#x5EA6;&#x50CF;&#x201D;gender&#x201D; &#x5982; &#x201C;leadership&#x201D; &#x6765;&#x628A;&#x5B83;&#x4EEC;&#x7F16;&#x8BD1;&#x6210; 2-&#x5B57;&#x8282; &#x8BCD;&#x5411;&#x91CF;&#x3002; &#x8FC7;&#x4F4E;&#x7684;&#x7EF4;&#x5EA6;&#x5C06;&#x65E0;&#x6CD5;&#x6355;&#x6349;&#x56DB;&#x4E2A;&#x8BCD;&#x4E4B;&#x95F4;&#x7684;&#x8BED;&#x4E49;&#x5DEE;&#x522B;&#xFF0C;&#x800C;&#x8FC7;&#x9AD8;&#x7684;&#x7EF4;&#x5EA6;&#x5C06;&#x6355;&#x6349;&#x5230;&#x4E00;&#x4E9B;&#x5BF9;&#x6CDB;&#x5316;&#x80FD;&#x529B;&#x6CA1;&#x6709;&#x7528;&#x7684;&#x566A;&#x97F3;&#x2013; &#x5373;&#x9AD8;&#x65B9;&#x5DEE;&#x7684;&#x95EE;&#x9898;&#x3002; &#x5916;&#x90E8;&#x4EFB;&#x52A1;&#x8BC4;&#x4EF7;&#x5916;&#x90E8;&#x4EFB;&#x52A1;&#x8BC4;&#x4EF7;&#x7684;&#x7279;&#x70B9;&#x5982;&#x4E0B;&#xFF1A; &#x5728;&#x4E00;&#x4E2A;&#x5B9E;&#x9645;&#x4EFB;&#x52A1;&#x4E2D;&#x8FDB;&#x884C;&#x8BC4;&#x6D4B; &#x9700;&#x8981;&#x82B1;&#x5F88;&#x957F;&#x7684;&#x65F6;&#x95F4;&#x6765;&#x8BA1;&#x7B97;&#x7CBE;&#x5EA6; &#x4E0D;&#x592A;&#x6E05;&#x695A;&#x662F;&#x5426;&#x662F;&#x67D0;&#x4E2A;&#x5B50;&#x7CFB;&#x7EDF;&#x6216;&#x8005;&#x5176;&#x4ED6;&#x5B50;&#x7CFB;&#x7EDF;&#xFF0C;&#x53C8;&#x6216;&#x662F;&#x51E0;&#x4E2A;&#x5B50;&#x7CFB;&#x7EDF;&#x4E92;&#x76F8;&#x4F5C;&#x7528;&#x5F15;&#x8D77;&#x7684;&#x95EE;&#x9898; &#x5982;&#x679C;&#x66FF;&#x6362;&#x539F;&#x6709;&#x7684;&#x5B50;&#x7CFB;&#x7EDF;&#x540E;&#x83B7;&#x5F97;&#x7CBE;&#x5EA6;&#x63D0;&#x5347;&#xFF0C;&#x5219;&#x8BF4;&#x660E;&#x66FF;&#x6362;&#x5F88;&#x53EF;&#x80FD;&#x662F;&#x6709;&#x6548;&#x7684; &#x53C2;&#x8003;&#x94FE;&#x63A5;&#xFF1A;&#x65AF;&#x5766;&#x798F;&#x5927;&#x5B66;&#x8BFE;&#x7A0B;&#xFF1A;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x4E0E;&#x81EA;&#x7136;&#x8BED;&#x8A00;&#x5904;&#x7406;&#x65AF;&#x5766;&#x798F;&#x5927;&#x5B66;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x4E0E;&#x81EA;&#x7136;&#x8BED;&#x8A00;&#x5904;&#x7406;&#x7B2C;&#x4E8C;&#x8BB2;&#xFF1A;&#x8BCD;&#x5411;&#x91CF;","tags":"word2vec deep-learning"},{"title":"TensorFlow实战-MNIST","url":"/2016/06/20/TensorFlow实战-MNIST/","text":"&#x5DE5;&#x4F5C;&#x4E2D;&#x9700;&#x8981;&#x5B9E;&#x73B0; CNN&#x3001;RNN &#x6A21;&#x578B;&#xFF0C;&#x4E8E;&#x662F;&#x5F00;&#x59CB;&#x5B66;&#x4E60; TensorFlow&#x3002;&#x8FD9;&#x662F;&#x7B2C;&#x4E00;&#x7BC7;&#xFF0C;MNIST&#x7684;&#x5B9E;&#x6218;&#x3002;&#x5B98;&#x65B9;&#x6587;&#x6863;&#x8BB2;&#x7684;&#x5F88;&#x8BE6;&#x7EC6;&#xFF0C;&#x8FD9;&#x91CC;&#x6211;&#x4E0D;&#x8FC7;&#x662F;&#x7528;&#x6211;&#x7684;&#x601D;&#x8DEF;&#x6574;&#x7406;&#x4E00;&#x904D;&#xFF0C;&#x65B9;&#x4FBF;&#x65E5;&#x540E;&#x7684;&#x67E5;&#x9605;&#x3002; TensorFlow &#x4ECB;&#x7ECD;&#x7EFC;&#x8FF0;TensorFlow &#x662F;&#x4E00;&#x4E2A;&#x7F16;&#x7A0B;&#x7CFB;&#x7EDF;, &#x4F7F;&#x7528;&#x56FE;&#x6765;&#x8868;&#x793A;&#x8BA1;&#x7B97;&#x4EFB;&#x52A1;. &#x56FE;&#x4E2D;&#x7684;&#x8282;&#x70B9;&#x88AB;&#x79F0;&#x4E4B;&#x4E3A; op (operation &#x7684;&#x7F29;&#x5199;). &#x4E00;&#x4E2A; op &#x83B7;&#x5F97; 0 &#x4E2A;&#x6216;&#x591A;&#x4E2A; Tensor, &#x6267;&#x884C;&#x8BA1;&#x7B97;, &#x4EA7;&#x751F; 0 &#x4E2A;&#x6216;&#x591A;&#x4E2A; Tensor. &#x6BCF;&#x4E2A; Tensor &#x662F;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x5316;&#x7684;&#x591A;&#x7EF4;&#x6570;&#x7EC4;. &#x4F8B;&#x5982;, &#x4F60;&#x53EF;&#x4EE5;&#x5C06;&#x4E00;&#x5C0F;&#x7EC4;&#x56FE;&#x50CF;&#x96C6;&#x8868;&#x793A;&#x4E3A;&#x4E00;&#x4E2A;&#x56DB;&#x7EF4;&#x6D6E;&#x70B9;&#x6570;&#x6570;&#x7EC4;, &#x8FD9;&#x56DB;&#x4E2A;&#x7EF4;&#x5EA6;&#x5206;&#x522B;&#x662F; [batch, height, width, channels]. &#x4E00;&#x4E2A; TensorFlow &#x56FE;&#x63CF;&#x8FF0;&#x4E86;&#x8BA1;&#x7B97;&#x7684;&#x8FC7;&#x7A0B;. &#x4E3A;&#x4E86;&#x8FDB;&#x884C;&#x8BA1;&#x7B97;, &#x56FE;&#x5FC5;&#x987B;&#x5728; &#x4F1A;&#x8BDD; &#x91CC;&#x88AB;&#x542F;&#x52A8;. &#x4F1A;&#x8BDD; &#x5C06;&#x56FE;&#x7684; op &#x5206;&#x53D1;&#x5230;&#x8BF8;&#x5982; CPU &#x6216; GPU &#x4E4B;&#x7C7B;&#x7684; &#x8BBE;&#x5907; &#x4E0A;, &#x540C;&#x65F6;&#x63D0;&#x4F9B;&#x6267;&#x884C; op &#x7684;&#x65B9;&#x6CD5;. &#x8FD9;&#x4E9B;&#x65B9;&#x6CD5;&#x6267;&#x884C;&#x540E;, &#x5C06;&#x4EA7;&#x751F;&#x7684; tensor &#x8FD4;&#x56DE;. &#x5728; Python &#x8BED;&#x8A00;&#x4E2D;, &#x8FD4;&#x56DE;&#x7684; tensor &#x662F; numpy ndarray &#x5BF9;&#x8C61;; &#x5728; C &#x548C; C++ &#x8BED;&#x8A00;&#x4E2D;, &#x8FD4;&#x56DE;&#x7684; tensor &#x662F; tensorflow::Tensor &#x5B9E;&#x4F8B;. &#x4E0B;&#x8F7D;&#x5B89;&#x88C5; sudo pip install &#x2014;upgrade https://storage.googleapis.com/tensorflow/mac/tensorflow-0.8.0-py2-none-any.whl &#x521D;&#x6B65;&#x4F7F;&#x7528; &#x4F7F;&#x7528;&#x56FE; (graph) &#x6765;&#x8868;&#x793A;&#x8BA1;&#x7B97;&#x4EFB;&#x52A1;. &#x5728;&#x88AB;&#x79F0;&#x4E4B;&#x4E3A; &#x4F1A;&#x8BDD; (Session) &#x7684;&#x4E0A;&#x4E0B;&#x6587; (context) &#x4E2D;&#x6267;&#x884C;&#x56FE;. &#x4F7F;&#x7528; tensor &#x8868;&#x793A;&#x6570;&#x636E;. &#x901A;&#x8FC7; &#x53D8;&#x91CF; (Variable) &#x7EF4;&#x62A4;&#x72B6;&#x6001;. &#x4F7F;&#x7528; feed &#x548C; fetch &#x53EF;&#x4EE5;&#x4E3A;&#x4EFB;&#x610F;&#x7684;&#x64CD;&#x4F5C;(arbitrary operation) &#x8D4B;&#x503C;&#x6216;&#x8005;&#x4ECE;&#x5176;&#x4E2D;&#x83B7;&#x53D6;&#x6570;&#x636E;. # &#x5E38;&#x91CF; a = tf.constant([3.0, 3.0]) # &#x53D8;&#x91CF;&#xFF0C;&#x53D8;&#x91CF;&#x8981;&#x8FDB;&#x884C;&#x521D;&#x59CB;&#x5316; x = tf.Variable([1.0, 2.0]) # &#x53D8;&#x91CF;&#x521D;&#x59CB;&#x5316; init_op = tf.initialize_all_variables() # &#x77E9;&#x9635;&#x4E58;&#x6CD5; product = tf.matmul(matrix1, matrix2) # &#x51CF;&#x6CD5; sub = tf.sub(x, a) # &#x52A0;&#x6CD5; new_value = tf.add(state, one) # Fetch # &#x542F;&#x52A8;&#x9ED8;&#x8BA4;&#x56FE; sess = tf.Session() # &#x6267;&#x884C;&#x77E9;&#x9635;&#x4E58;&#x6CD5;&#x3002;&#x51FD;&#x6570;&#x8C03;&#x7528; &apos;run(product)&apos; &#x89E6;&#x53D1;&#x4E86;&#x56FE;&#x4E2D;&#x4E09;&#x4E2A; op (&#x4E24;&#x4E2A;&#x5E38;&#x91CF; op &#x548C;&#x4E00;&#x4E2A;&#x77E9;&#x9635;&#x4E58;&#x6CD5; op) &#x7684;&#x6267;&#x884C; result = sess.run(product) # &#x4EFB;&#x52A1;&#x5B8C;&#x6210;, &#x5173;&#x95ED;&#x4F1A;&#x8BDD;. sess.close() # Session &#x5BF9;&#x8C61;&#x5728;&#x4F7F;&#x7528;&#x5B8C;&#x540E;&#x9700;&#x8981;&#x5173;&#x95ED;&#x4EE5;&#x91CA;&#x653E;&#x8D44;&#x6E90;. &#x9664;&#x4E86;&#x663E;&#x5F0F;&#x8C03;&#x7528; close &#x5916;, &#x4E5F;&#x53EF;&#x4EE5;&#x4F7F;&#x7528; &quot;with&quot; &#x4EE3;&#x7801;&#x5757; &#x6765;&#x81EA;&#x52A8;&#x5B8C;&#x6210;&#x5173;&#x95ED;&#x52A8;&#x4F5C;. with tf.Session() as sess: result = sess.run([product]) print result # &#x53D6;&#x56DE;&#x591A;&#x4E2A; tensor: input1 = tf.constant(3.0) input2 = tf.constant(2.0) input3 = tf.constant(5.0) intermed = tf.add(input2, input3) mul = tf.mul(input1, intermed) with tf.Session() as sess: result = sess.run([mul, intermed]) print result # Feed #feed &#x4F7F;&#x7528;&#x4E00;&#x4E2A; tensor &#x503C;&#x4E34;&#x65F6;&#x66FF;&#x6362;&#x4E00;&#x4E2A;&#x64CD;&#x4F5C;&#x7684;&#x8F93;&#x51FA;&#x7ED3;&#x679C;. &#x4F60;&#x53EF;&#x4EE5;&#x63D0;&#x4F9B; feed &#x6570;&#x636E;&#x4F5C;&#x4E3A; run() &#x8C03;&#x7528;&#x7684;&#x53C2;&#x6570;. feed &#x53EA;&#x5728;&#x8C03;&#x7528;&#x5B83;&#x7684;&#x65B9;&#x6CD5;&#x5185;&#x6709;&#x6548;, &#x65B9;&#x6CD5;&#x7ED3;&#x675F;, feed &#x5C31;&#x4F1A;&#x6D88;&#x5931;. &#x6700;&#x5E38;&#x89C1;&#x7684;&#x7528;&#x4F8B;&#x662F;&#x5C06;&#x67D0;&#x4E9B;&#x7279;&#x6B8A;&#x7684;&#x64CD;&#x4F5C;&#x6307;&#x5B9A;&#x4E3A; &quot;feed&quot; &#x64CD;&#x4F5C;, &#x6807;&#x8BB0;&#x7684;&#x65B9;&#x6CD5;&#x662F;&#x4F7F;&#x7528; tf.placeholder() &#x4E3A;&#x8FD9;&#x4E9B;&#x64CD;&#x4F5C;&#x521B;&#x5EFA;&#x5360;&#x4F4D;&#x7B26;. input1 = tf.placeholder(tf.float32) input2 = tf.placeholder(tf.float32) output = tf.mul(input1, input2) with tf.Session() as sess: print sess.run([output], feed_dict={input1:[7.], input2:[2.]}) &#x5355;&#x5C42; SoftMax &#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x6A21;&#x578B;&#x52A0;&#x8F7D; MNIST &#x6570;&#x636E;60000&#x884C;&#x7684;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x96C6;&#xFF08;mnist.train&#xFF09;&#x548C;10000&#x884C;&#x7684;&#x6D4B;&#x8BD5;&#x6570;&#x636E;&#x96C6;&#xFF08;mnist.test&#xFF09;&#x3002; &#x6BCF;&#x4E00;&#x4E2A;MNIST&#x6570;&#x636E;&#x5355;&#x5143;&#x6709;&#x4E24;&#x90E8;&#x5206;&#x7EC4;&#x6210;&#xFF1A;&#x4E00;&#x5F20;&#x5305;&#x542B;&#x624B;&#x5199;&#x6570;&#x5B57;&#x7684;&#x56FE;&#x7247;&#x548C;&#x4E00;&#x4E2A;&#x5BF9;&#x5E94;&#x7684;&#x6807;&#x7B7E;&#x3002;&#x56FE;&#x7247;&#x8BBE;&#x4E3A;&#x201C;xs&#x201D;&#xFF0C;&#x6807;&#x7B7E;&#x8BBE;&#x4E3A;&#x201C;ys&#x201D;&#x3002;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x96C6;&#x548C;&#x6D4B;&#x8BD5;&#x6570;&#x636E;&#x96C6;&#x90FD;&#x5305;&#x542B;xs&#x548C;ys&#xFF0C;&#x6BD4;&#x5982;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x96C6;&#x7684;&#x56FE;&#x7247;&#x662F; mnist.train.images &#xFF0C;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x96C6;&#x7684;&#x6807;&#x7B7E;&#x662F; mnist.train.labels&#x3002; &#x6BCF;&#x4E00;&#x5F20;&#x56FE;&#x7247;&#x5305;&#x542B;28X28&#x4E2A;&#x50CF;&#x7D20;&#x70B9;&#x3002;&#x6211;&#x4EEC;&#x628A;&#x8FD9;&#x4E2A;&#x6570;&#x7EC4;&#x5C55;&#x5F00;&#x6210;&#x4E00;&#x4E2A;&#x5411;&#x91CF;&#xFF0C;&#x957F;&#x5EA6;&#x662F; 28x28 = 784&#x3002; &#x5728; MNIST &#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x96C6;&#x4E2D;&#xFF0C;mnist.train.images &#x662F;&#x4E00;&#x4E2A;&#x5F62;&#x72B6;&#x4E3A; [60000, 784] &#x7684;&#x5F20;&#x91CF;&#xFF0C;&#x7B2C;&#x4E00;&#x4E2A;&#x7EF4;&#x5EA6;&#x6570;&#x5B57;&#x7528;&#x6765;&#x7D22;&#x5F15;&#x56FE;&#x7247;&#xFF0C;&#x7B2C;&#x4E8C;&#x4E2A;&#x7EF4;&#x5EA6;&#x6570;&#x5B57;&#x7528;&#x6765;&#x7D22;&#x5F15;&#x6BCF;&#x5F20;&#x56FE;&#x7247;&#x4E2D;&#x7684;&#x50CF;&#x7D20;&#x70B9;&#x3002;&#x5728;&#x6B64;&#x5F20;&#x91CF;&#x91CC;&#x7684;&#x6BCF;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x90FD;&#x8868;&#x793A;&#x67D0;&#x5F20;&#x56FE;&#x7247;&#x91CC;&#x7684;&#x67D0;&#x4E2A;&#x50CF;&#x7D20;&#x7684;&#x5F3A;&#x5EA6;&#x503C;&#xFF0C;&#x503C;&#x4ECB;&#x4E8E;0&#x548C;1&#x4E4B;&#x95F4;&#x3002; &#x76F8;&#x5BF9;&#x5E94;&#x7684; MNIST &#x6570;&#x636E;&#x96C6;&#x7684;&#x6807;&#x7B7E;&#x662F;&#x4ECB;&#x4E8E;0&#x5230;9&#x7684;&#x6570;&#x5B57;&#xFF0C;&#x7528;&#x6765;&#x63CF;&#x8FF0;&#x7ED9;&#x5B9A;&#x56FE;&#x7247;&#x91CC;&#x8868;&#x793A;&#x7684;&#x6570;&#x5B57;&#x3002;&#x4E3A;&#x4E86;&#x7528;&#x4E8E;&#x8FD9;&#x4E2A;&#x6559;&#x7A0B;&#xFF0C;&#x6211;&#x4EEC;&#x4F7F;&#x6807;&#x7B7E;&#x6570;&#x636E;&#x662F;&#x201D;one-hot vectors&#x201D;&#x3002; &#x4E00;&#x4E2A;one-hot&#x5411;&#x91CF;&#x9664;&#x4E86;&#x67D0;&#x4E00;&#x4F4D;&#x7684;&#x6570;&#x5B57;&#x662F;1&#x4EE5;&#x5916;&#x5176;&#x4F59;&#x5404;&#x7EF4;&#x5EA6;&#x6570;&#x5B57;&#x90FD;&#x662F;0&#x3002;&#x6240;&#x4EE5;&#x5728;&#x6B64;&#x6559;&#x7A0B;&#x4E2D;&#xFF0C;&#x6570;&#x5B57;n&#x5C06;&#x8868;&#x793A;&#x6210;&#x4E00;&#x4E2A;&#x53EA;&#x6709;&#x5728;&#x7B2C;n&#x7EF4;&#x5EA6;&#xFF08;&#x4ECE;0&#x5F00;&#x59CB;&#xFF09;&#x6570;&#x5B57;&#x4E3A;1&#x7684;10&#x7EF4;&#x5411;&#x91CF;&#x3002;&#x6BD4;&#x5982;&#xFF0C;&#x6807;&#x7B7E;0&#x5C06;&#x8868;&#x793A;&#x6210;([1,0,0,0,0,0,0,0,0,0,0])&#x3002;&#x56E0;&#x6B64;&#xFF0C; mnist.train.labels &#x662F;&#x4E00;&#x4E2A; [60000, 10] &#x7684;&#x6570;&#x5B57;&#x77E9;&#x9635;&#x3002; import tensorflow.examples.tutorials.mnist.input_data as input_data mnist = input_data.read_data_sets(&quot;MNIST_data/&quot;, one_hot=True) &#x8FD0;&#x884C; TensorFlow &#x7684; InteractiveSessionTensorflow &#x4F9D;&#x8D56;&#x4E8E;&#x4E00;&#x4E2A;&#x9AD8;&#x6548;&#x7684;C++&#x540E;&#x7AEF;&#x6765;&#x8FDB;&#x884C;&#x8BA1;&#x7B97;&#x3002;&#x4E0E;&#x540E;&#x7AEF;&#x7684;&#x8FD9;&#x4E2A;&#x8FDE;&#x63A5;&#x53EB;&#x505A;session&#x3002;&#x4E00;&#x822C;&#x800C;&#x8A00;&#xFF0C;&#x4F7F;&#x7528;TensorFlow&#x7A0B;&#x5E8F;&#x7684;&#x6D41;&#x7A0B;&#x662F;&#x5148;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x56FE;&#xFF0C;&#x7136;&#x540E;&#x5728;session&#x4E2D;&#x542F;&#x52A8;&#x5B83;&#x3002;&#x8FD9;&#x91CC;&#xFF0C;&#x6211;&#x4EEC;&#x4F7F;&#x7528;&#x66F4;&#x52A0;&#x65B9;&#x4FBF;&#x7684;InteractiveSession&#x7C7B;&#x3002;&#x901A;&#x8FC7;&#x5B83;&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x66F4;&#x52A0;&#x7075;&#x6D3B;&#x5730;&#x6784;&#x5EFA;&#x4F60;&#x7684;&#x4EE3;&#x7801;&#x3002;&#x5B83;&#x80FD;&#x8BA9;&#x4F60;&#x5728;&#x8FD0;&#x884C;&#x56FE;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x63D2;&#x5165;&#x4E00;&#x4E9B;&#x8BA1;&#x7B97;&#x56FE;&#xFF0C;&#x8FD9;&#x4E9B;&#x8BA1;&#x7B97;&#x56FE;&#x662F;&#x7531;&#x67D0;&#x4E9B;&#x64CD;&#x4F5C;(operations)&#x6784;&#x6210;&#x7684;&#x3002;&#x8FD9;&#x5BF9;&#x4E8E;&#x5DE5;&#x4F5C;&#x5728;&#x4EA4;&#x4E92;&#x5F0F;&#x73AF;&#x5883;&#x4E2D;&#x7684;&#x4EBA;&#x4EEC;&#x6765;&#x8BF4;&#x975E;&#x5E38;&#x4FBF;&#x5229;&#xFF0C;&#x6BD4;&#x5982;&#x4F7F;&#x7528;IPython&#x3002;&#x5982;&#x679C;&#x4F60;&#x6CA1;&#x6709;&#x4F7F;&#x7528;InteractiveSession&#xFF0C;&#x90A3;&#x4E48;&#x4F60;&#x9700;&#x8981;&#x5728;&#x542F;&#x52A8;session&#x4E4B;&#x524D;&#x6784;&#x5EFA;&#x6574;&#x4E2A;&#x8BA1;&#x7B97;&#x56FE;&#xFF0C;&#x7136;&#x540E;&#x542F;&#x52A8;&#x8BE5;&#x8BA1;&#x7B97;&#x56FE;&#x3002; import tensorflow as tf sess = tf.InteractiveSession() &#x6784;&#x5EFA; Softmax &#x56DE;&#x5F52;&#x6A21;&#x578B;y = softmax(Wx + b) # x &#x662F;&#x4E00;&#x4E2A;&#x5360;&#x4F4D;&#x7B26;placeholder&#xFF0C;&#x5728;TensorFlow&#x8FD0;&#x884C;&#x8BA1;&#x7B97;&#x65F6;&#x8F93;&#x5165;&#x8FD9;&#x4E2A;&#x503C;&#x3002;&#x6211;&#x4EEC;&#x5E0C;&#x671B;&#x80FD;&#x591F;&#x8F93;&#x5165;&#x4EFB;&#x610F;&#x6570;&#x91CF;&#x7684;MNIST&#x56FE;&#x50CF;&#xFF0C;&#x6BCF;&#x4E00;&#x5F20;&#x56FE;&#x5C55;&#x5E73;&#x6210;784&#x7EF4;&#x7684;&#x5411;&#x91CF;&#x3002;&#x6211;&#x4EEC;&#x7528;2&#x7EF4;&#x7684;&#x6D6E;&#x70B9;&#x6570;&#x5F20;&#x91CF;&#x6765;&#x8868;&#x793A;&#x8FD9;&#x4E9B;&#x56FE;&#xFF0C;&#x8FD9;&#x4E2A;&#x5F20;&#x91CF;&#x7684;&#x5F62;&#x72B6;&#x662F;[None&#xFF0C;784 ]&#x3002;&#xFF08;&#x8FD9;&#x91CC;&#x7684;None&#x8868;&#x793A;&#x6B64;&#x5F20;&#x91CF;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x7EF4;&#x5EA6;&#x53EF;&#x4EE5;&#x662F;&#x4EFB;&#x4F55;&#x957F;&#x5EA6;&#x7684;&#x3002;&#xFF09; x = tf.placeholder(tf.float32, [None, 784]) # &#x6743;&#x91CD;&#x503C; W = tf.Variable(tf.zeros([784,10])) # &#x504F;&#x79BB;&#x503C; b = tf.Variable(tf.zeros([10])) # &#x7C7B;&#x522B;&#x9884;&#x6D4B; &#xFF0D; softmax &#x6A21;&#x578B; y = tf.nn.softmax(tf.matmul(x,W) + b) &#x6211;&#x4EEC;&#x5728;&#x8C03;&#x7528;tf.Variable&#x7684;&#x65F6;&#x5019;&#x4F20;&#x5165;&#x521D;&#x59CB;&#x503C;&#x3002;&#x5728;&#x8FD9;&#x4E2A;&#x4F8B;&#x5B50;&#x91CC;&#xFF0C;&#x6211;&#x4EEC;&#x628A; W &#x548C; b &#x90FD;&#x521D;&#x59CB;&#x5316;&#x4E3A;&#x96F6;&#x5411;&#x91CF;&#x3002;W &#x662F;&#x4E00;&#x4E2A;784x10&#x7684;&#x77E9;&#x9635;&#xFF08;&#x56E0;&#x4E3A;&#x6211;&#x4EEC;&#x6709;784&#x4E2A;&#x7279;&#x5F81;&#x548C;10&#x4E2A;&#x8F93;&#x51FA;&#x503C;&#xFF09;&#x3002;b &#x662F;&#x4E00;&#x4E2A;10&#x7EF4;&#x7684;&#x5411;&#x91CF;&#xFF08;&#x56E0;&#x4E3A;&#x6211;&#x4EEC;&#x6709;10&#x4E2A;&#x5206;&#x7C7B;&#xFF09;&#x3002; &#x6784;&#x5EFA;&#x4EE3;&#x4EF7;&#x51FD;&#x6570;&#x6307;&#x6807;&#x4EA4;&#x53C9;&#x71B5; &#x4EE3;&#x7801; # &#x6B63;&#x786E;&#x503C; y_ = tf.placeholder(&quot;float&quot;, [None,10]) # &#x635F;&#x5931;&#x51FD;&#x6570; cross_entropy = -tf.reduce_sum(y_*tf.log(y)) &#x6CE8;&#x610F;&#xFF0C;tf.reduce_sum&#x628A;minibatch&#x91CC;&#x7684;&#x6BCF;&#x5F20;&#x56FE;&#x7247;&#x7684;&#x4EA4;&#x53C9;&#x71B5;&#x503C;&#x90FD;&#x52A0;&#x8D77;&#x6765;&#x4E86;&#x3002;&#x6211;&#x4EEC;&#x8BA1;&#x7B97;&#x7684;&#x4EA4;&#x53C9;&#x71B5;&#x662F;&#x6307;&#x6574;&#x4E2A;minibatch&#x7684;&#x3002; &#x8BAD;&#x7EC3;&#x6A21;&#x578B;train_step = tf.train.GradientDescentOptimizer(0.01).minimize(cross_entropy) TensorFlow&#x7528;&#x68AF;&#x5EA6;&#x4E0B;&#x964D;&#x7B97;&#x6CD5;&#xFF08;gradient descent algorithm&#xFF09;&#x4EE5;0.01&#x7684;&#x5B66;&#x4E60;&#x901F;&#x7387;&#x6700;&#x5C0F;&#x5316;&#x4EA4;&#x53C9;&#x71B5;&#x3002;&#x68AF;&#x5EA6;&#x4E0B;&#x964D;&#x7B97;&#x6CD5;&#xFF08;gradient descent algorithm&#xFF09;&#x662F;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x5B66;&#x4E60;&#x8FC7;&#x7A0B;&#xFF0C;TensorFlow&#x53EA;&#x9700;&#x5C06;&#x6BCF;&#x4E2A;&#x53D8;&#x91CF;&#x4E00;&#x70B9;&#x70B9;&#x5730;&#x5F80;&#x4F7F;&#x6210;&#x672C;&#x4E0D;&#x65AD;&#x964D;&#x4F4E;&#x7684;&#x65B9;&#x5411;&#x79FB;&#x52A8;&#x3002; TensorFlow&#x5728;&#x8FD9;&#x91CC;&#x5B9E;&#x9645;&#x4E0A;&#x6240;&#x505A;&#x7684;&#x662F;&#xFF0C;&#x5B83;&#x4F1A;&#x5728;&#x540E;&#x53F0;&#x7ED9;&#x8BA1;&#x7B97;&#x56FE;&#x589E;&#x52A0;&#x4E00;&#x7CFB;&#x5217;&#x65B0;&#x7684;&#x8BA1;&#x7B97;&#x64CD;&#x4F5C;&#x5355;&#x5143;&#x7528;&#x4E8E;&#x5B9E;&#x73B0;&#x53CD;&#x5411;&#x4F20;&#x64AD;&#x7B97;&#x6CD5;&#x548C;&#x68AF;&#x5EA6;&#x4E0B;&#x964D;&#x7B97;&#x6CD5;&#x3002;&#x7136;&#x540E;&#xFF0C;&#x5B83;&#x8FD4;&#x56DE;&#x7ED9;&#x4F60;&#x7684;&#x53EA;&#x662F;&#x4E00;&#x4E2A;&#x5355;&#x4E00;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;&#x5F53;&#x8FD0;&#x884C;&#x8FD9;&#x4E2A;&#x64CD;&#x4F5C;&#x65F6;&#xFF0C;&#x5B83;&#x7528;&#x68AF;&#x5EA6;&#x4E0B;&#x964D;&#x7B97;&#x6CD5;&#x8BAD;&#x7EC3;&#x4F60;&#x7684;&#x6A21;&#x578B;&#xFF0C;&#x5FAE;&#x8C03;&#x4F60;&#x7684;&#x53D8;&#x91CF;&#xFF0C;&#x4E0D;&#x65AD;&#x51CF;&#x5C11;&#x6210;&#x672C;&#x3002; &#x8FD4;&#x56DE;&#x7684;train_step&#x64CD;&#x4F5C;&#x5BF9;&#x8C61;&#xFF0C;&#x5728;&#x8FD0;&#x884C;&#x65F6;&#x4F1A;&#x4F7F;&#x7528;&#x68AF;&#x5EA6;&#x4E0B;&#x964D;&#x6765;&#x66F4;&#x65B0;&#x53C2;&#x6570;&#x3002;&#x56E0;&#x6B64;&#xFF0C;&#x6574;&#x4E2A;&#x6A21;&#x578B;&#x7684;&#x8BAD;&#x7EC3;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x53CD;&#x590D;&#x5730;&#x8FD0;&#x884C;train_step&#x6765;&#x5B8C;&#x6210;&#x3002; &#x8BAD;&#x7EC3; # &#x521D;&#x59CB;&#x5316;&#x53D8;&#x91CF; init = tf.initialize_all_variables() # &#x5728;session&#x91CC;&#x542F;&#x52A8;&#x6A21;&#x578B; sess = tf.Session() sess.run(init) # &#x5F00;&#x59CB;&#x8BAD;&#x7EC3;&#x6A21;&#x578B;&#xFF0C;&#x8FD9;&#x91CC;&#x6211;&#x4EEC;&#x8BA9;&#x6A21;&#x578B;&#x5FAA;&#x73AF;&#x8BAD;&#x7EC3;1000&#x6B21;&#xFF01; for i in range(1000): batch = mnist.train.next_batch(50) sess.run(train_step,feed_dict={x: batch[0], y_: batch[1]}) &#x6BCF;&#x4E00;&#x6B65;&#x8FED;&#x4EE3;&#xFF0C;&#x6211;&#x4EEC;&#x90FD;&#x4F1A;&#x968F;&#x673A;&#x52A0;&#x8F7D;50&#x4E2A;&#x8BAD;&#x7EC3;&#x6837;&#x672C;&#xFF0C;&#x7136;&#x540E;&#x6267;&#x884C;&#x4E00;&#x6B21;train_step&#xFF0C;&#x5E76;&#x901A;&#x8FC7;feeddict&#x5C06;x &#x548C; y&#x5F20;&#x91CF;&#x5360;&#x4F4D;&#x7B26;&#x7528;&#x8BAD;&#x7EC3;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x66FF;&#x4EE3;&#x3002; &#x4F7F;&#x7528;&#x4E00;&#x5C0F;&#x90E8;&#x5206;&#x7684;&#x968F;&#x673A;&#x6570;&#x636E;&#x6765;&#x8FDB;&#x884C;&#x8BAD;&#x7EC3;&#x88AB;&#x79F0;&#x4E3A;&#x968F;&#x673A;&#x8BAD;&#x7EC3;&#xFF08;stochastic training&#xFF09;- &#x5728;&#x8FD9;&#x91CC;&#x66F4;&#x786E;&#x5207;&#x7684;&#x8BF4;&#x662F;&#x968F;&#x673A;&#x68AF;&#x5EA6;&#x4E0B;&#x964D;&#x8BAD;&#x7EC3;&#x3002;&#x5728;&#x7406;&#x60F3;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x6211;&#x4EEC;&#x5E0C;&#x671B;&#x7528;&#x6211;&#x4EEC;&#x6240;&#x6709;&#x7684;&#x6570;&#x636E;&#x6765;&#x8FDB;&#x884C;&#x6BCF;&#x4E00;&#x6B65;&#x7684;&#x8BAD;&#x7EC3;&#xFF0C;&#x56E0;&#x4E3A;&#x8FD9;&#x80FD;&#x7ED9;&#x6211;&#x4EEC;&#x66F4;&#x597D;&#x7684;&#x8BAD;&#x7EC3;&#x7ED3;&#x679C;&#xFF0C;&#x4F46;&#x663E;&#x7136;&#x8FD9;&#x9700;&#x8981;&#x5F88;&#x5927;&#x7684;&#x8BA1;&#x7B97;&#x5F00;&#x9500;&#x3002;&#x6240;&#x4EE5;&#xFF0C;&#x6BCF;&#x4E00;&#x6B21;&#x8BAD;&#x7EC3;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x4E0D;&#x540C;&#x7684;&#x6570;&#x636E;&#x5B50;&#x96C6;&#xFF0C;&#x8FD9;&#x6837;&#x505A;&#x65E2;&#x53EF;&#x4EE5;&#x51CF;&#x5C11;&#x8BA1;&#x7B97;&#x5F00;&#x9500;&#xFF0C;&#x53C8;&#x53EF;&#x4EE5;&#x6700;&#x5927;&#x5316;&#x5730;&#x5B66;&#x4E60;&#x5230;&#x6570;&#x636E;&#x96C6;&#x7684;&#x603B;&#x4F53;&#x7279;&#x6027;&#x3002; &#x8BC4;&#x4F30;&#x6A21;&#x578B;&#x627E;&#x51FA;&#x9884;&#x6D4B;&#x6B63;&#x786E;&#x7684;&#x6807;&#x7B7E;tf.argmax &#x7ED9;&#x51FA;&#x67D0;&#x4E2A;tensor&#x5BF9;&#x8C61;&#x5728;&#x67D0;&#x4E00;&#x7EF4;&#x4E0A;&#x7684;&#x5176;&#x6570;&#x636E;&#x6700;&#x5927;&#x503C;&#x6240;&#x5728;&#x7684;&#x7D22;&#x5F15;&#x503C;&#x3002;&#x7531;&#x4E8E;&#x6807;&#x7B7E;&#x5411;&#x91CF;&#x662F;&#x7531;0,1&#x7EC4;&#x6210;&#xFF0C;&#x56E0;&#x6B64;&#x6700;&#x5927;&#x503C;1&#x6240;&#x5728;&#x7684;&#x7D22;&#x5F15;&#x4F4D;&#x7F6E;&#x5C31;&#x662F;&#x7C7B;&#x522B;&#x6807;&#x7B7E;&#x3002;tf.argmax(y,1)&#x8FD4;&#x56DE;&#x7684;&#x662F;&#x6A21;&#x578B;&#x5BF9;&#x4E8E;&#x4EFB;&#x4E00;&#x8F93;&#x5165;x&#x9884;&#x6D4B;&#x5230;&#x7684;&#x6807;&#x7B7E;&#x503C;tf.argmax(y_,1) &#x4EE3;&#x8868;&#x6B63;&#x786E;&#x7684;&#x6807;&#x7B7E;tf.equal &#x6765;&#x68C0;&#x6D4B;&#x6211;&#x4EEC;&#x7684;&#x9884;&#x6D4B;&#x662F;&#x5426;&#x771F;&#x5B9E;&#x6807;&#x7B7E;&#x5339;&#x914D;(&#x7D22;&#x5F15;&#x4F4D;&#x7F6E;&#x4E00;&#x6837;&#x8868;&#x793A;&#x5339;&#x914D;) correct_prediction = tf.equal(tf.argmax(y,1), tf.argmax(y_,1)) &#x8FD9;&#x91CC;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x5E03;&#x5C14;&#x6570;&#x7EC4;&#x3002;&#x4E3A;&#x4E86;&#x8BA1;&#x7B97;&#x6211;&#x4EEC;&#x5206;&#x7C7B;&#x7684;&#x51C6;&#x786E;&#x7387;&#xFF0C;&#x6211;&#x4EEC;&#x5C06;&#x5E03;&#x5C14;&#x503C;&#x8F6C;&#x6362;&#x4E3A;&#x6D6E;&#x70B9;&#x6570;&#x6765;&#x4EE3;&#x8868;&#x5BF9;&#x3001;&#x9519;&#xFF0C;&#x7136;&#x540E;&#x53D6;&#x5E73;&#x5747;&#x503C;&#x3002;&#x4F8B;&#x5982;&#xFF1A;[True, False, True, True]&#x53D8;&#x4E3A;[1,0,1,1]&#xFF0C;&#x8BA1;&#x7B97;&#x51FA;&#x5E73;&#x5747;&#x503C;&#x4E3A;0.75&#x3002; accuracy = tf.reduce_mean(tf.cast(correct_prediction, &quot;float&quot;)) &#x6700;&#x540E;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x8BA1;&#x7B97;&#x51FA;&#x5728;&#x6D4B;&#x8BD5;&#x6570;&#x636E;&#x4E0A;&#x7684;&#x51C6;&#x786E;&#x7387;&#xFF0C;&#x5927;&#x6982;&#x662F;90.92%&#x3002; print sess.run(accuracy,feed_dict={x: mnist.test.images, y_: mnist.test.labels}) &#x591A;&#x5C42;&#x5377;&#x79EF;&#x7F51;&#x7EDC;&#x6A21;&#x578B;&#x5377;&#x79EF;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x603B;&#x7ED3;&#x4F20;&#x7EDF;&#x7684;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x90FD;&#x662F;&#x91C7;&#x7528;&#x5168;&#x8FDE;&#x63A5;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;&#x5373;&#x8F93;&#x5165;&#x5C42;&#x5230;&#x9690;&#x85CF;&#x5C42;&#x7684;&#x795E;&#x7ECF;&#x5143;&#x90FD;&#x662F;&#x5168;&#x90E8;&#x8FDE;&#x63A5;&#x7684;&#xFF0C;&#x8FD9;&#x6837;&#x505A;&#x5C06;&#x5BFC;&#x81F4;&#x53C2;&#x6570;&#x91CF;&#x5DE8;&#x5927;&#xFF0C;&#x4F7F;&#x5F97;&#x7F51;&#x7EDC;&#x8BAD;&#x7EC3;&#x8017;&#x65F6;&#x751A;&#x81F3;&#x96BE;&#x4EE5;&#x8BAD;&#x7EC3;&#xFF0C;&#x800C;CNN&#x5219;&#x901A;&#x8FC7;&#x5C40;&#x90E8;&#x8FDE;&#x63A5;&#x3001;&#x6743;&#x503C;&#x5171;&#x4EAB;&#x7B49;&#x65B9;&#x6CD5;&#x907F;&#x514D;&#x4E86;&#x8FD9;&#x4E00;&#x56F0;&#x96BE;&#x3002; &#x7279;&#x70B9; &#x5C40;&#x90E8;&#x611F;&#x53D7;&#x91CE; &#x6743;&#x503C;&#x5171;&#x4EAB; &#x6C60;&#x5316; &#x901A;&#x8FC7;&#x611F;&#x53D7;&#x91CE;&#x548C;&#x6743;&#x503C;&#x5171;&#x4EAB;&#x51CF;&#x5C11;&#x4E86;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x9700;&#x8981;&#x8BAD;&#x7EC3;&#x7684;&#x53C2;&#x6570;&#x7684;&#x4E2A;&#x6570; &#x8BAD;&#x7EC3;&#x7B97;&#x6CD5;&#x8BAD;&#x7EC3;&#x7B97;&#x6CD5;&#x4E0E;&#x4F20;&#x7EDF;&#x7684;BP&#x7B97;&#x6CD5;&#x5DEE;&#x4E0D;&#x591A;&#x3002;&#x4E3B;&#x8981;&#x5305;&#x62EC;4&#x6B65;&#xFF0C;&#x5206;&#x4E3A;&#x4E24;&#x4E2A;&#x9636;&#x6BB5;&#xFF1A; &#x7B2C;&#x4E00;&#x9636;&#x6BB5;&#xFF0C;&#x5411;&#x524D;&#x4F20;&#x64AD;&#x9636;&#x6BB5;&#xFF1A; a&#xFF09;&#x4ECE;&#x6837;&#x672C;&#x96C6;&#x4E2D;&#x53D6;&#x4E00;&#x4E2A;&#x6837;&#x672C;(X,Yp)&#xFF0C;&#x5C06;X&#x8F93;&#x5165;&#x7F51;&#x7EDC;&#xFF1B; b&#xFF09;&#x8BA1;&#x7B97;&#x76F8;&#x5E94;&#x7684;&#x5B9E;&#x9645;&#x8F93;&#x51FA;Op&#x3002; &#x5728;&#x6B64;&#x9636;&#x6BB5;&#xFF0C;&#x4FE1;&#x606F;&#x4ECE;&#x8F93;&#x5165;&#x5C42;&#x7ECF;&#x8FC7;&#x9010;&#x7EA7;&#x7684;&#x53D8;&#x6362;&#xFF0C;&#x4F20;&#x9001;&#x5230;&#x8F93;&#x51FA;&#x5C42;&#x3002;&#x8FD9;&#x4E2A;&#x8FC7;&#x7A0B;&#x4E5F;&#x662F;&#x7F51;&#x7EDC;&#x5728;&#x5B8C;&#x6210;&#x8BAD;&#x7EC3;&#x540E;&#x6B63;&#x5E38;&#x8FD0;&#x884C;&#x65F6;&#x6267;&#x884C;&#x7684;&#x8FC7;&#x7A0B;&#x3002;&#x5728;&#x6B64;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x7F51;&#x7EDC;&#x6267;&#x884C;&#x7684;&#x662F;&#x8BA1;&#x7B97;&#xFF08;&#x5B9E;&#x9645;&#x4E0A;&#x5C31;&#x662F;&#x8F93;&#x5165;&#x4E0E;&#x6BCF;&#x5C42;&#x7684;&#x6743;&#x503C;&#x77E9;&#x9635;&#x76F8;&#x70B9;&#x4E58;&#xFF0C;&#x5F97;&#x5230;&#x6700;&#x540E;&#x7684;&#x8F93;&#x51FA;&#x7ED3;&#x679C;&#xFF09;&#xFF1A; Op=Fn&#xFF08;&#x2026;&#xFF08;F2&#xFF08;F1&#xFF08;XpW&#xFF08;1&#xFF09;&#xFF09;W&#xFF08;2&#xFF09;&#xFF09;&#x2026;&#xFF09;W&#xFF08;n&#xFF09;&#xFF09; &#x7B2C;&#x4E8C;&#x9636;&#x6BB5;&#xFF0C;&#x5411;&#x540E;&#x4F20;&#x64AD;&#x9636;&#x6BB5; a&#xFF09;&#x7B97;&#x5B9E;&#x9645;&#x8F93;&#x51FA;Op&#x4E0E;&#x76F8;&#x5E94;&#x7684;&#x7406;&#x60F3;&#x8F93;&#x51FA;Yp&#x7684;&#x5DEE;&#xFF1B; b&#xFF09;&#x6309;&#x6781;&#x5C0F;&#x5316;&#x8BEF;&#x5DEE;&#x7684;&#x65B9;&#x6CD5;&#x53CD;&#x5411;&#x4F20;&#x64AD;&#x8C03;&#x6574;&#x6743;&#x77E9;&#x9635;&#x3002; CNN &#x524D;&#x5411;&#x4F20;&#x64AD;&#x3001;&#x53CD;&#x5411;&#x4F20;&#x64AD;&#x8BE6;&#x89E3; &#x4E00;&#x822C;&#x9884;&#x6D4B;&#x8FC7;&#x7A0B;&#x5377;&#x79EF; &#x2013;&gt; &#x6C60;&#x5316;&#xFF08;&#x4E0B;&#x91C7;&#x6837;&#xFF09;&#x2013;&gt; &#x5149;&#x6805;&#x5316; &#x2013;&gt; &#x591A;&#x5C42;&#x611F;&#x77E5;&#x5668; &#x601D;&#x8DEF;&#x4EE5;&#x5C42;&#x4E3A;&#x5355;&#x4F4D;&#xFF0C;&#x5206;&#x522B;&#x5B9E;&#x73B0;&#x5377;&#x79EF;&#x5C42;&#x3001;&#x6C60;&#x5316;&#x5C42;&#x3001;&#x5149;&#x6805;&#x5316;&#x5C42;&#x3001;MLP&#x9690;&#x5C42;&#x3001;Softmax&#x5C42;&#x8FD9;&#x4E94;&#x4E2A;&#x5C42;&#x7684;&#x7C7B;&#x3002;&#x5176;&#x4E2D;&#x6BCF;&#x4E2A;&#x7C7B;&#x90FD;&#x6709;output&#x548C;backpropagate&#x8FD9;&#x4E24;&#x4E2A;&#x65B9;&#x6CD5;&#x3002;&#x53E6;&#x5916;&#xFF0C;&#x8FD8;&#x9700;&#x8981;&#x4E00;&#x7CFB;&#x5217;&#x7684;&#x8F85;&#x52A9;&#x65B9;&#x6CD5;&#xFF0C;&#x5305;&#x62EC;&#xFF1A;conv2d&#xFF08;&#x4E8C;&#x7EF4;&#x79BB;&#x6563;&#x5377;&#x79EF;&#xFF0C;valid&#x548C;full&#x6A21;&#x5F0F;&#xFF09;&#xFF0C;downsample&#xFF08;&#x6C60;&#x5316;&#x4E2D;&#x9700;&#x8981;&#x7684;&#x4E0B;&#x91C7;&#x6837;&#xFF0C;&#x4E24;&#x79CD;&#x8FB9;&#x754C;&#x6A21;&#x5F0F;&#xFF09;&#xFF0C;upsample&#xFF08;&#x6C60;&#x5316;&#x4E2D;&#x7684;&#x4E0A;&#x91C7;&#x6837;&#xFF09;&#xFF0C;&#x4EE5;&#x53CA;dsigmoid&#x548C;dtanh&#x7B49;&#x3002; TensorFlow &#x5B9E;&#x73B0;&#x521D;&#x59CB;&#x5316;&#x6743;&#x91CD;&#x548C;&#x504F;&#x7F6E;&#x9879;&#x4E3A;&#x4E86;&#x521B;&#x5EFA;&#x8FD9;&#x4E2A;&#x6A21;&#x578B;&#xFF0C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x521B;&#x5EFA;&#x5927;&#x91CF;&#x7684;&#x6743;&#x91CD;&#x548C;&#x504F;&#x7F6E;&#x9879;&#x3002;&#x8FD9;&#x4E2A;&#x6A21;&#x578B;&#x4E2D;&#x7684;&#x6743;&#x91CD;&#x5728;&#x521D;&#x59CB;&#x5316;&#x65F6;&#x5E94;&#x8BE5;&#x52A0;&#x5165;&#x5C11;&#x91CF;&#x7684;&#x566A;&#x58F0;&#x6765;&#x6253;&#x7834;&#x5BF9;&#x79F0;&#x6027;&#x4EE5;&#x53CA;&#x907F;&#x514D;0&#x68AF;&#x5EA6;&#x3002;&#x7531;&#x4E8E;&#x6211;&#x4EEC;&#x4F7F;&#x7528;&#x7684;&#x662F;ReLU&#x795E;&#x7ECF;&#x5143;&#xFF0C;&#x56E0;&#x6B64;&#x6BD4;&#x8F83;&#x597D;&#x7684;&#x505A;&#x6CD5;&#x662F;&#x7528;&#x4E00;&#x4E2A;&#x8F83;&#x5C0F;&#x7684;&#x6B63;&#x6570;&#x6765;&#x521D;&#x59CB;&#x5316;&#x504F;&#x7F6E;&#x9879;&#xFF0C;&#x4EE5;&#x907F;&#x514D;&#x795E;&#x7ECF;&#x5143;&#x8282;&#x70B9;&#x8F93;&#x51FA;&#x6052;&#x4E3A;0&#x7684;&#x95EE;&#x9898;&#xFF08;dead neurons&#xFF09;&#x3002;&#x4E3A;&#x4E86;&#x4E0D;&#x5728;&#x5EFA;&#x7ACB;&#x6A21;&#x578B;&#x7684;&#x65F6;&#x5019;&#x53CD;&#x590D;&#x505A;&#x521D;&#x59CB;&#x5316;&#x64CD;&#x4F5C;&#xFF0C;&#x6211;&#x4EEC;&#x5B9A;&#x4E49;&#x4E24;&#x4E2A;&#x51FD;&#x6570;&#x7528;&#x4E8E;&#x521D;&#x59CB;&#x5316;&#x3002; def weight_variable(shape): initial = tf.truncated_normal(shape, stddev=0.1) return tf.Variable(initial) def bias_variable(shape): initial = tf.constant(0.1, shape=shape) return tf.Variable(initial) &#x5377;&#x79EF;&#x548C;&#x6C60;&#x5316;&#x6211;&#x4EEC;&#x7684;&#x5377;&#x79EF;&#x4F7F;&#x7528;1&#x6B65;&#x957F;&#xFF08;stride size&#xFF09;&#xFF0C;0&#x8FB9;&#x8DDD;&#xFF08;padding size&#xFF09;&#x7684;&#x6A21;&#x677F;&#xFF0C;&#x4FDD;&#x8BC1;&#x8F93;&#x51FA;&#x548C;&#x8F93;&#x5165;&#x662F;&#x540C;&#x4E00;&#x4E2A;&#x5927;&#x5C0F;&#x3002;&#x6211;&#x4EEC;&#x7684;&#x6C60;&#x5316;&#x7528;&#x7B80;&#x5355;&#x4F20;&#x7EDF;&#x7684;2x2&#x5927;&#x5C0F;&#x7684;&#x6A21;&#x677F;&#x505A;max pooling&#x3002;&#x4E3A;&#x4E86;&#x4EE3;&#x7801;&#x66F4;&#x7B80;&#x6D01;&#xFF0C;&#x6211;&#x4EEC;&#x628A;&#x8FD9;&#x90E8;&#x5206;&#x62BD;&#x8C61;&#x6210;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x3002; # &#x5377;&#x79EF;&#x51FD;&#x6570; def conv2d(x, W): return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding=&apos;SAME&apos;) # &#x6C60;&#x5316;&#x51FD;&#x6570; def max_pool_2x2(x): return tf.nn.max_pool(x, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding=&apos;SAME&apos;) &#x7B2C;&#x4E00;&#x5C42;&#x5377;&#x79EF;&#x7B2C;&#x4E00;&#x5C42;&#x5377;&#x79EF;&#x7531;&#x4E00;&#x4E2A;&#x5377;&#x79EF;&#x63A5;&#x4E00;&#x4E2A;max pooling&#x5B8C;&#x6210;&#x3002;&#x5377;&#x79EF;&#x5728;&#x6BCF;&#x4E2A;5x5&#x7684;patch&#x4E2D;&#x7B97;&#x51FA;32&#x4E2A;&#x7279;&#x5F81;&#x3002;&#x5377;&#x79EF;&#x7684;&#x6743;&#x91CD;&#x5F20;&#x91CF;&#x5F62;&#x72B6;&#x662F;[5, 5, 1, 32]&#xFF0C;&#x524D;&#x4E24;&#x4E2A;&#x7EF4;&#x5EA6;&#x662F;patch&#x7684;&#x5927;&#x5C0F;&#xFF0C;&#x63A5;&#x7740;&#x662F;&#x8F93;&#x5165;&#x7684;&#x901A;&#x9053;&#x6570;&#x76EE;&#xFF0C;&#x6700;&#x540E;&#x662F;&#x8F93;&#x51FA;&#x7684;&#x901A;&#x9053;&#x6570;&#x76EE;&#x3002; &#x800C;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E00;&#x4E2A;&#x8F93;&#x51FA;&#x901A;&#x9053;&#x90FD;&#x6709;&#x4E00;&#x4E2A;&#x5BF9;&#x5E94;&#x7684;&#x504F;&#x7F6E;&#x91CF;&#x3002; W_conv1 = weight_variable([5, 5, 1, 32]) b_conv1 = bias_variable([32]) # &#x628A; x &#x53D8;&#x6210;&#x4E00;&#x4E2A;4d&#x5411;&#x91CF;&#xFF0C;&#x5176;&#x7B2C;2&#x3001;&#x7B2C;3&#x7EF4;&#x5BF9;&#x5E94;&#x56FE;&#x7247;&#x7684;&#x5BBD;&#x3001;&#x9AD8;&#xFF0C;&#x6700;&#x540E;&#x4E00;&#x7EF4;&#x4EE3;&#x8868;&#x56FE;&#x7247;&#x7684;&#x989C;&#x8272;&#x901A;&#x9053;&#x6570;(&#x56E0;&#x4E3A;&#x662F;&#x7070;&#x5EA6;&#x56FE;&#x6240;&#x4EE5;&#x8FD9;&#x91CC;&#x7684;&#x901A;&#x9053;&#x6570;&#x4E3A;1&#xFF0C;&#x5982;&#x679C;&#x662F;rgb&#x5F69;&#x8272;&#x56FE;&#xFF0C;&#x5219;&#x4E3A;3)&#x3002; x_image = tf.reshape(x, [-1,28,28,1]) # &#x628A;x_image&#x548C;&#x6743;&#x503C;&#x5411;&#x91CF;&#x8FDB;&#x884C;&#x5377;&#x79EF;&#xFF0C;&#x52A0;&#x4E0A;&#x504F;&#x7F6E;&#x9879;&#xFF0C;&#x7136;&#x540E;&#x5E94;&#x7528;ReLU&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#xFF0C;&#x6700;&#x540E;&#x8FDB;&#x884C;max pooling&#x3002; h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1) h_pool1 = max_pool_2x2(h_conv1) &#x7B2C;&#x4E8C;&#x5C42;&#x5377;&#x79EF;&#x4E3A;&#x4E86;&#x6784;&#x5EFA;&#x4E00;&#x4E2A;&#x66F4;&#x6DF1;&#x7684;&#x7F51;&#x7EDC;&#xFF0C;&#x6211;&#x4EEC;&#x4F1A;&#x628A;&#x51E0;&#x4E2A;&#x7C7B;&#x4F3C;&#x7684;&#x5C42;&#x5806;&#x53E0;&#x8D77;&#x6765;&#x3002;&#x7B2C;&#x4E8C;&#x5C42;&#x4E2D;&#xFF0C;&#x6BCF;&#x4E2A;5x5&#x7684;patch&#x4F1A;&#x5F97;&#x5230;64&#x4E2A;&#x7279;&#x5F81;&#x3002; W_conv2 = weight_variable([5, 5, 32, 64]) b_conv2 = bias_variable([64]) h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2) h_pool2 = max_pool_2x2(h_conv2) &#x5BC6;&#x96C6;&#x8FDE;&#x63A5;&#x5C42;(&#x5168;&#x8FDE;&#x63A5;&#x5C42;)&#x7ECF;&#x8FC7;&#x7B2C;&#x4E00;&#x6B21;&#x6C60;&#x5316;&#xFF0C;&#x56FE;&#x7247;&#x5C3A;&#x5BF8;&#x51CF;&#x5C0F;&#x5230;14*14&#xFF0C;&#x7ECF;&#x8FC7;&#x7B2C;&#x4E8C;&#x6B21;&#x6C60;&#x5316;&#xFF0C;&#x56FE;&#x7247;&#x5C3A;&#x5BF8;&#x51CF;&#x5C0F;&#x5230;7x7&#x3002;&#x6211;&#x4EEC;&#x52A0;&#x5165;&#x4E00;&#x4E2A;&#x6709;1024&#x4E2A;&#x795E;&#x7ECF;&#x5143;&#x7684;&#x5168;&#x8FDE;&#x63A5;&#x5C42;&#xFF0C;&#x7528;&#x4E8E;&#x5904;&#x7406;&#x6574;&#x4E2A;&#x56FE;&#x7247;&#x3002;&#x6211;&#x4EEC;&#x628A;&#x6C60;&#x5316;&#x5C42;&#x8F93;&#x51FA;&#x7684;&#x5F20;&#x91CF;reshape&#x6210;&#x4E00;&#x4E9B;&#x5411;&#x91CF;&#xFF0C;&#x4E58;&#x4E0A;&#x6743;&#x91CD;&#x77E9;&#x9635;&#xFF0C;&#x52A0;&#x4E0A;&#x504F;&#x7F6E;&#xFF0C;&#x7136;&#x540E;&#x5BF9;&#x5176;&#x4F7F;&#x7528;ReLU&#x3002; W_fc1 = weight_variable([7 * 7 * 64, 1024]) b_fc1 = bias_variable([1024]) h_pool2_flat = tf.reshape(h_pool2, [-1, 7*7*64]) h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1) Dropout&#x4E3A;&#x4E86;&#x51CF;&#x5C11;&#x8FC7;&#x62DF;&#x5408;&#xFF0C;&#x6211;&#x4EEC;&#x5728;&#x8F93;&#x51FA;&#x5C42;&#x4E4B;&#x524D;&#x52A0;&#x5165;dropout&#x3002;&#x6211;&#x4EEC;&#x7528;&#x4E00;&#x4E2A;placeholder&#x6765;&#x4EE3;&#x8868;&#x4E00;&#x4E2A;&#x795E;&#x7ECF;&#x5143;&#x7684;&#x8F93;&#x51FA;&#x5728;dropout&#x4E2D;&#x4FDD;&#x6301;&#x4E0D;&#x53D8;&#x7684;&#x6982;&#x7387;&#x3002;&#x8FD9;&#x6837;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5728;&#x8BAD;&#x7EC3;&#x8FC7;&#x7A0B;&#x4E2D;&#x542F;&#x7528;dropout&#xFF0C;&#x5728;&#x6D4B;&#x8BD5;&#x8FC7;&#x7A0B;&#x4E2D;&#x5173;&#x95ED;dropout&#x3002; TensorFlow&#x7684;tf.nn.dropout&#x64CD;&#x4F5C;&#x9664;&#x4E86;&#x53EF;&#x4EE5;&#x5C4F;&#x853D;&#x795E;&#x7ECF;&#x5143;&#x7684;&#x8F93;&#x51FA;&#x5916;&#xFF0C;&#x8FD8;&#x4F1A;&#x81EA;&#x52A8;&#x5904;&#x7406;&#x795E;&#x7ECF;&#x5143;&#x8F93;&#x51FA;&#x503C;&#x7684;scale&#x3002;&#x6240;&#x4EE5;&#x7528;dropout&#x7684;&#x65F6;&#x5019;&#x53EF;&#x4EE5;&#x4E0D;&#x7528;&#x8003;&#x8651;scale&#x3002; keep_prob = tf.placeholder(&quot;float&quot;) h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob) &#x8F93;&#x51FA;&#x5C42;&#x6700;&#x540E;&#xFF0C;&#x6211;&#x4EEC;&#x6DFB;&#x52A0;&#x4E00;&#x4E2A;softmax&#x5C42;&#xFF0C;&#x5C31;&#x50CF;&#x524D;&#x9762;&#x7684;&#x5355;&#x5C42;softmax regression&#x4E00;&#x6837;&#x3002; W_fc2 = weight_variable([1024, 10]) b_fc2 = bias_variable([10]) y_conv=tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2) &#x8BAD;&#x7EC3;&#x548C;&#x8BC4;&#x4F30;&#x6A21;&#x578B;&#x4F7F;&#x7528;&#x4E0E;&#x4E4B;&#x524D;&#x7B80;&#x5355;&#x7684;&#x5355;&#x5C42;SoftMax&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x6A21;&#x578B;&#x51E0;&#x4E4E;&#x76F8;&#x540C;&#x7684;&#x4E00;&#x5957;&#x4EE3;&#x7801;&#xFF0C;&#x53EA;&#x662F;&#x6211;&#x4EEC;&#x4F1A;&#x7528;&#x66F4;&#x52A0;&#x590D;&#x6742;&#x7684;ADAM&#x4F18;&#x5316;&#x5668;&#x6765;&#x505A;&#x68AF;&#x5EA6;&#x6700;&#x901F;&#x4E0B;&#x964D;&#xFF0C;&#x5728;feed_dict&#x4E2D;&#x52A0;&#x5165;&#x989D;&#x5916;&#x7684;&#x53C2;&#x6570;keep_prob&#x6765;&#x63A7;&#x5236;dropout&#x6BD4;&#x4F8B;&#x3002;&#x7136;&#x540E;&#x6BCF;100&#x6B21;&#x8FED;&#x4EE3;&#x8F93;&#x51FA;&#x4E00;&#x6B21;&#x65E5;&#x5FD7;&#x3002;&#x6700;&#x540E;&#x7684;&#x51C6;&#x786E;&#x7387;&#x662F; 99.2&#xFF05; cross_entropy = -tf.reduce_sum(y_*tf.log(y_conv)) train_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy) correct_prediction = tf.equal(tf.argmax(y_conv,1), tf.argmax(y_,1)) accuracy = tf.reduce_mean(tf.cast(correct_prediction, &quot;float&quot;)) sess.run(tf.initialize_all_variables()) for i in range(20000): batch = mnist.train.next_batch(50) if i % 100 == 0: train_accuracy = sess.run( accuracy, feed_dict={x: batch[0], y_: batch[1], keep_prob: 1.0}) print &quot;step %d, training accuracy %g&quot; % (i, train_accuracy) sess.run(train_step, feed_dict={x: batch[0], y_: batch[1], keep_prob: 0.5}) print &quot;test accuracy %g&quot; % sess.run(accuracy, feed_dict={x: mnist.test.images, y_: mnist.test.labels, keep_prob: 1.0}) &#x4EE3;&#x7801; &#x53C2;&#x8003;&#x94FE;&#x63A5;: &#x4E2D;&#x6587;&#x6587;&#x6863;github &#x9879;&#x76EE;&#x5730;&#x5740;http://blog.csdn.net/zouxy09/article/details/8781543http://blog.csdn.net/celerychen2009/article/details/8973218&#x5377;&#x79EF;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;(CNN)&#x5B66;&#x4E60;&#x7B14;&#x8BB0; - LeNet5&#x7F51;&#x7EDC;&#x8BE6;&#x89E3;","tags":"tensorflow,-deep-learning"},{"title":"爬虫总结(五)-- 其他技巧","url":"/2016/06/20/爬虫总结-五-其他技巧/","text":"&#x8865;&#x5145;&#x524D;&#x9762;&#x6CA1;&#x6709;&#x63D0;&#x5230;&#x7684;&#x4E00;&#x4E9B;&#x6280;&#x5DE7;&#x3002; &#x6A21;&#x62DF;&#x767B;&#x5F55;&#x7814;&#x7A76;&#x6E90;&#x7801;&#x4EE5; github &#x767B;&#x5F55;&#xFF08;https://github.com/login&#xFF09; &#x4E3A;&#x4F8B;&#xFF0C;&#x67E5;&#x770B;html&#x6E90;&#x7801;&#x4F1A;&#x53D1;&#x73B0;&#x8868;&#x5355;&#x91CC;&#x9762;&#x6709;&#x4E2A;&#x9690;&#x85CF;&#x7684;authenticity_token&#x503C;&#xFF0C;&#x8FD9;&#x4E2A;&#x662F;&#x9700;&#x8981;&#x5148;&#x83B7;&#x53D6;&#x7136;&#x540E;&#x8DDF;&#x7528;&#x6237;&#x540D;&#x548C;&#x5BC6;&#x7801;&#x4E00;&#x8D77;&#x63D0;&#x4EA4;&#x7684;&#x3002;1234567891011121314151617181920212223242526&lt;div class=&quot;auth-form p-3&quot; id=&quot;login&quot;&gt; &lt;!-- &lt;/textarea&gt; --&gt;&lt;!-- &apos;&quot;` --&gt;&lt;form accept-charset=&quot;UTF-8&quot; action=&quot;/session&quot; data-form-nonce=&quot;b2e0b5f779ddbb5dbf93b903a82e5fc5204da96b&quot; method=&quot;post&quot;&gt;&lt;div style=&quot;margin:0;padding:0;display:inline&quot;&gt;&lt;input name=&quot;utf8&quot; type=&quot;hidden&quot; value=&quot;&amp;#x2713;&quot; /&gt;&lt;input name=&quot;authenticity_token&quot; type=&quot;hidden&quot; value=&quot;MDOLdxNeNMPn2sjrj51G+v/yMYpikLru8QWiLI170WRME4UBfvGItiAhzZWFujZVUSoT7SFygFcjE8pMfRcMHQ==&quot; /&gt;&lt;/div&gt; &lt;div class=&quot;auth-form-header&quot;&gt; &lt;h1&gt;Sign in to GitHub&lt;/h1&gt; &lt;/div&gt; &lt;div id=&quot;js-flash-container&quot;&gt;&lt;/div&gt; &lt;div class=&quot;auth-form-body mt-4&quot;&gt; &lt;label for=&quot;login_field&quot;&gt; Username or email address &lt;/label&gt; &lt;input autocapitalize=&quot;off&quot; autocorrect=&quot;off&quot; autofocus=&quot;autofocus&quot; class=&quot;form-control input-block&quot; id=&quot;login_field&quot; name=&quot;login&quot; tabindex=&quot;1&quot; type=&quot;text&quot; /&gt; &lt;label for=&quot;password&quot;&gt; Password &lt;a href=&quot;/password_reset&quot; class=&quot;label-link&quot;&gt;Forgot password?&lt;/a&gt; &lt;/label&gt; &lt;input class=&quot;form-control form-control input-block&quot; id=&quot;password&quot; name=&quot;password&quot; tabindex=&quot;2&quot; type=&quot;password&quot; /&gt; &lt;input class=&quot;btn btn-primary btn-block&quot; data-disable-with=&quot;Signing in&#x2026;&quot; name=&quot;commit&quot; tabindex=&quot;3&quot; type=&quot;submit&quot; value=&quot;Sign in&quot; /&gt; &lt;/div&gt;&lt;/form&gt; &#x91CD;&#x5199;start_requests&#x65B9;&#x6CD5;&#x9996;&#x5148;&#x786E;&#x4FDD; cookie &#x6253;&#x5F00; COOKIES_ENABLES = True &#x91CD;&#x5199;start_requests&#x65B9;&#x6CD5; # &#x91CD;&#x5199;&#x4E86;&#x722C;&#x866B;&#x7C7B;&#x7684;&#x65B9;&#x6CD5;, &#x5B9E;&#x73B0;&#x4E86;&#x81EA;&#x5B9A;&#x4E49;&#x8BF7;&#x6C42;, &#x8FD0;&#x884C;&#x6210;&#x529F;&#x540E;&#x4F1A;&#x8C03;&#x7528;callback&#x56DE;&#x8C03;&#x51FD;&#x6570; def start_requests(self): return [Request(&quot;https://github.com/login&quot;, meta={&apos;cookiejar&apos;: 1}, callback=self.post_login)] # FormRequeset def post_login(self, response): # &#x5148;&#x53BB;&#x62FF;&#x9690;&#x85CF;&#x7684;&#x8868;&#x5355;&#x53C2;&#x6570;authenticity_token authenticity_token = response.xpath( &apos;//input[@name=&quot;authenticity_token&quot;]/@value&apos;).extract_first() logging.info(&apos;authenticity_token=&apos; + authenticity_token) pass start_requests&#x65B9;&#x6CD5;&#x6307;&#x5B9A;&#x4E86;&#x56DE;&#x8C03;&#x51FD;&#x6570;&#xFF0C;&#x7528;&#x6765;&#x83B7;&#x53D6;&#x9690;&#x85CF;&#x8868;&#x5355;&#x503C;authenticity_token&#xFF0C;&#x540C;&#x65F6;&#x6211;&#x4EEC;&#x8FD8;&#x7ED9;Request&#x6307;&#x5B9A;&#x4E86;cookiejar&#x7684;&#x5143;&#x6570;&#x636E;&#xFF0C;&#x7528;&#x6765;&#x5F80;&#x56DE;&#x8C03;&#x51FD;&#x6570;&#x4F20;&#x9012;cookie&#x6807;&#x8BC6;&#x3002; &#x4F7F;&#x7528;FormRequestScrapy&#x4E3A;&#x6211;&#x4EEC;&#x51C6;&#x5907;&#x4E86;FormRequest&#x7C7B;&#x4E13;&#x95E8;&#x7528;&#x6765;&#x8FDB;&#x884C;Form&#x8868;&#x5355;&#x63D0;&#x4EA4;&#x7684;&#x3002; # FormRequeset def post_login(self, response): # &#x5148;&#x53BB;&#x62FF;&#x9690;&#x85CF;&#x7684;&#x8868;&#x5355;&#x53C2;&#x6570;authenticity_token authenticity_token = response.xpath( &apos;//input[@name=&quot;authenticity_token&quot;]/@value&apos;).extract_first() logging.info(&apos;authenticity_token=&apos; + authenticity_token) # FormRequeset.from_response&#x662F;Scrapy&#x63D0;&#x4F9B;&#x7684;&#x4E00;&#x4E2A;&#x51FD;&#x6570;, &#x7528;&#x4E8E;post&#x8868;&#x5355; # &#x767B;&#x9646;&#x6210;&#x529F;&#x540E;, &#x4F1A;&#x8C03;&#x7528;after_login&#x56DE;&#x8C03;&#x51FD;&#x6570;&#xFF0C;&#x5982;&#x679C;url&#x8DDF;Request&#x9875;&#x9762;&#x7684;&#x4E00;&#x6837;&#x5C31;&#x7701;&#x7565;&#x6389; return [FormRequest.from_response(response, url=&apos;https://github.com/session&apos;, meta={&apos;cookiejar&apos;: response.meta[&apos;cookiejar&apos;]}, #headers=self.post_headers, formdata={ &apos;login&apos;: &apos;shuang0420&apos;, &apos;password&apos;: &apos;XXXXXXXXXXXXXXXXX&apos;, &apos;authenticity_token&apos;: authenticity_token }, callback=self.after_login, dont_filter=True )] FormRequest.from_response()&#x65B9;&#x6CD5;&#x8BA9;&#x4F60;&#x6307;&#x5B9A;&#x63D0;&#x4EA4;&#x7684;url&#xFF0C;&#x8BF7;&#x6C42;&#x5934;&#x8FD8;&#x6709;form&#x8868;&#x5355;&#x503C;&#xFF0C;&#x6CE8;&#x610F;&#x6211;&#x4EEC;&#x8FD8;&#x901A;&#x8FC7;meta&#x4F20;&#x9012;&#x4E86;cookie&#x6807;&#x8BC6;&#x3002;&#x5B83;&#x540C;&#x6837;&#x6709;&#x4E2A;&#x56DE;&#x8C03;&#x51FD;&#x6570;&#xFF0C;&#x767B;&#x5F55;&#x6210;&#x529F;&#x540E;&#x8C03;&#x7528;&#x3002;&#x4E0B;&#x9762;&#x6211;&#x4EEC;&#x6765;&#x5B9E;&#x73B0;&#x5B83;&#x3002;&#x6CE8;&#x610F;&#x8FD9;&#x91CC;&#x6211;&#x7EE7;&#x7EED;&#x4F20;&#x9012;cookiejar&#xFF0C;&#x8BBF;&#x95EE;&#x521D;&#x59CB;&#x9875;&#x9762;&#x65F6;&#x5E26;&#x4E0A;cookie&#x4FE1;&#x606F;&#x3002; def after_login(self, response): # &#x767B;&#x5F55;&#x4E4B;&#x540E;&#xFF0C;&#x5F00;&#x59CB;&#x8FDB;&#x5165;&#x6211;&#x8981;&#x722C;&#x53D6;&#x7684;&#x79C1;&#x4FE1;&#x9875;&#x9762; for url in self.start_urls: logging.info(&apos;letter url=&apos; + url) yield Request(url, meta={&apos;cookiejar&apos;: response.meta[&apos;cookiejar&apos;]},callback=self.parse_page) &#x9875;&#x9762;&#x5904;&#x7406;&#x8FD9;&#x4E2A;&#x4F8B;&#x5B50;&#x7684;&#x4E3B;&#x8981;&#x4EFB;&#x52A1;&#x662F;&#x6A21;&#x62DF;&#x767B;&#x5F55;&#xFF0C;&#x5728;&#x767B;&#x5F55; github &#x540E;&#x722C;&#x53D6;&#x4E3B;&#x9875;&#x7684; comments &#x5185;&#x5BB9;&#x3002; &#x4EE3;&#x7801;123456789101112def parse_page(self, response): &quot;&quot;&quot;comments &#x5185;&#x5BB9;&quot;&quot;&quot; logging.info(u&apos;--------------&#x6D88;&#x606F;&#x5206;&#x5272;&#x7EBF;-----------------&apos;) logging.info(response.url) replaceTags = re.compile(&apos;&lt;.*?&gt;&apos;) replaceLine = re.compile(&apos;\\r|\\n|\\t&apos;) message = response.xpath( &apos;//div[@class=&quot;details&quot;]/div[@class=&quot;message markdown-body&quot;]|div[@class=&quot;message markdown-body&quot;]/blockquote&apos;).extract() for m in message: m = replaceTags.sub(&quot;&quot;, m) m = replaceLine.sub(&quot;&quot;, m) print m &#x722C;&#x53D6;&#x7ED3;&#x679C; I like topn (or perhaps top_n) a little better, because it&apos;s not dependent on what the features represent (words, phrases, entities, characters...). &#x2026; Note: as of now, the classes and methods are not well arranged, and there are a few mock classes (which will be removed) to help me with testing. O&#x2026; Hello @gojomo thank you for replying fast.I have used save() to save the model and load_word2vec_format() to load the model. Thats where the probl&#x2026; The unicode_errors=&apos;ignore&apos; option should make it impossible for the exact same error to occur; perhaps you&apos;re getting some other very-similar error? (Nevermind, #758 added annoy.) It looks like the tests don&apos;t run on Travis, since Annoy is not installed there. Not sure how to fix the test failure in Python 2.6 either. Hello,Sorry for posting after even you have created the FAQ.I trained a model with tweets which had some undecodable unicode characters. When i t&#x2026; dtto Misleading comment: there is no &quot;training&quot;, the model is transferred from Mallet. These parameters only affect inference, model is unchanged. PEP8: Hanging indent of 4 spaces. @piskvorky I&apos;ve addressed the comments. Could you please check? Thanks, that was quick :) @piskvorky , @tmylk , could you review? Added comment, made change in changelog. No, this was after that in 0.13.2. I noticed it because when I was testing the #768 solution, print_topics was failing. @tmylk how do you review these PRs before merging? There are too many errors, we cannot merge code so carelessly. Looks good to me... except still needs a comment explaining why the alias is there. And maybe a mention in the changelog, so we can deprecate the o&#x2026; Yes, assign self.wordtopics = self.word_topics, with a big fat comment explaining why this alias is there. I don&apos;t understand how this version with storing unicode to binary files even worked. It means our unit tests must be faulty / incomplete. &#x4EE3;&#x7801; &#x8BC6;&#x522B;&#x9A8C;&#x8BC1;&#x7801;&#x9A8C;&#x8BC1;&#x7801;&#x662F;&#x4E00;&#x79CD;&#x975E;&#x5E38;&#x6709;&#x6548;&#x7684;&#x53CD;&#x722C;&#x866B;&#x673A;&#x5236;&#xFF0C;&#x5B83;&#x80FD;&#x963B;&#x6B62;&#x5927;&#x90E8;&#x5206;&#x7684;&#x66B4;&#x529B;&#x6293;&#x53D6;&#xFF0C;&#x5728;&#x7535;&#x5546;&#x7C7B;&#x3001;&#x6295;&#x7968;&#x7C7B;&#x4EE5;&#x53CA;&#x793E;&#x4EA4;&#x7C7B;&#x7B49;&#x7F51;&#x7AD9;&#x4E0A;&#x5E94;&#x7528;&#x5E7F;&#x6CDB;&#x3002;&#x5982;&#x679C;&#x7834;&#x89E3;&#x9A8C;&#x8BC1;&#x7801;&#xFF0C;&#x6210;&#x4E3A;&#x4E86;&#x6570;&#x636E;&#x6293;&#x53D6;&#x5DE5;&#x4F5C;&#x8005;&#x5FC5;&#x987B;&#x8981;&#x9762;&#x5BF9;&#x7684;&#x95EE;&#x9898;&#x3002;&#x4E0B;&#x9762;&#x4ECB;&#x7ECD;3&#x79CD;&#x5E38;&#x7528;&#x7684;&#x65B9;&#x6CD5;&#x3002; &#x66F4;&#x6362;ip&#x5730;&#x5740;&#x5728;&#x8BBF;&#x95EE;&#x67D0;&#x4E9B;&#x7F51;&#x7AD9;&#x65F6;&#xFF0C;&#x6211;&#x4EEC;&#x6700;&#x521D;&#x53EA;&#x662F;&#x9700;&#x8981;&#x63D0;&#x4F9B;&#x7528;&#x6237;&#x540D;&#x5BC6;&#x7801;&#x5C31;&#x53EF;&#x4EE5;&#x767B;&#x9646;&#x7684;&#xFF0C;&#x6BD4;&#x5982;&#x8BF4;&#x8C46;&#x74E3;&#x7F51;&#xFF0C;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x8981;&#x662F;&#x9891;&#x7E41;&#x767B;&#x9646;&#x8BBF;&#x95EE;&#xFF0C;&#x53EF;&#x80FD;&#x8FD9;&#x65F6;&#x7F51;&#x7AD9;&#x5C31;&#x4F1A;&#x51FA;&#x73B0;&#x4E00;&#x4E2A;&#x9A8C;&#x8BC1;&#x7801;&#x56FE;&#x7247;&#xFF0C;&#x8981;&#x6C42;&#x6211;&#x4EEC;&#x8F93;&#x5165;&#x9A8C;&#x8BC1;&#x7801;&#x624D;&#x80FD;&#x767B;&#x9646;&#xFF0C;&#x8FD9;&#x6837;&#x5728;&#x4FDD;&#x8BC1;&#x7528;&#x6237;&#x65B9;&#x4FBF;&#x8BBF;&#x95EE;&#x7684;&#x540C;&#x65F6;&#xFF0C;&#x53C8;&#x9632;&#x6B62;&#x4E86;&#x673A;&#x5668;&#x7684;&#x6076;&#x610F;&#x9891;&#x7E41;&#x8BBF;&#x95EE;&#x3002;&#x5BF9;&#x4E8E;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x4EE3;&#x7406;&#x670D;&#x52A1;&#x5668;&#x8BBF;&#x95EE;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x6362;&#x4E2A;ip&#x5730;&#x5740;&#x518D;&#x6B21;&#x8BBF;&#x95EE;&#xFF0C;&#x9A8C;&#x8BC1;&#x7801;&#x5C31;&#x4E0D;&#x4F1A;&#x51FA;&#x73B0;&#x4E86;&#xFF0C;&#x5F53;&#x7136;&#xFF0C;&#x5F53;&#x9A8C;&#x8BC1;&#x7801;&#x518D;&#x6B21;&#x51FA;&#x73B0;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6211;&#x4EEC;&#x53EA;&#x80FD;&#x518D;&#x66F4;&#x6362;ip&#x5730;&#x5740;&#x3002; &#x4F7F;&#x7528;cookie&#x767B;&#x9646;&#x5982;&#x679C;&#x91C7;&#x7528;cookie&#x767B;&#x9646;&#xFF0C;&#x53EF;&#x4EE5;&#x8FD9;&#x6837;&#x5B9E;&#x73B0;&#xFF1A;&#x9996;&#x5148;&#x9700;&#x8981;&#x624B;&#x52A8;&#x767B;&#x9646;&#x7F51;&#x7AD9;&#x4E00;&#x6B21;&#xFF0C;&#x83B7;&#x53D6;&#x670D;&#x52A1;&#x5668;&#x8FD4;&#x56DE;&#x7684;cookie&#xFF0C;&#x8FD9;&#x91CC;&#x5C31;&#x5E26;&#x6709;&#x4E86;&#x7528;&#x6237;&#x7684;&#x767B;&#x9646;&#x4FE1;&#x606F;&#xFF0C;&#x5F53;&#x7136;&#x4E5F;&#x53EF;&#x4EE5;&#x91C7;&#x7528;&#x83B7;&#x53D6;&#x7684;cookie&#x767B;&#x9646;&#x8BE5;&#x7F51;&#x7AD9;&#x7684;&#x5176;&#x4ED6;&#x9875;&#x9762;&#xFF0C;&#x800C;&#x4E0D;&#x7528;&#x518D;&#x6B21;&#x767B;&#x9646;&#x3002;&#x5177;&#x4F53;&#x4EE3;&#x7801;&#x5DF2;&#x7ECF;&#x5B9E;&#x73B0;&#xFF0C;&#x8BE6;&#x89C1;ZhihuSpider&#x3002;&#x6211;&#x4EEC;&#x53EA;&#x9700;&#x8981;&#x5728;&#x914D;&#x7F6E;&#x6587;&#x4EF6;&#x4E2D;&#x63D0;&#x4F9B;&#x7528;&#x6237;&#x540D;&#x5BC6;&#x7801;&#xFF0C;&#x53CA;&#x76F8;&#x5E94;&#x7684;cookie&#x5373;&#x53EF;&#x3002;&#x5BF9;&#x4E8E;&#x4E0D;&#x51FA;&#x73B0;&#x9A8C;&#x8BC1;&#x7801;&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x722C;&#x866B;&#x4F1A;&#x63D0;&#x4EA4;&#x7528;&#x6237;&#x540D;&#x5BC6;&#x7801;&#x5B9E;&#x73B0;post&#x8BF7;&#x6C42;&#x767B;&#x9646;&#xFF0C;&#x5982;&#x679C;&#x5931;&#x8D25;&#xFF0C;&#x624D;&#x4F1A;&#x4F7F;&#x7528;&#x4E8B;&#x5148;&#x63D0;&#x4F9B;&#x7684;cookie&#x4FE1;&#x606F;&#x3002; &#x9700;&#x8981;&#x8BF4;&#x660E;&#x7684;&#x662F;&#xFF0C;&#x5224;&#x65AD;&#x722C;&#x866B;&#x767B;&#x9646;&#x4E0E;&#x5426;&#xFF0C;&#x6211;&#x4EEC;&#x53EA;&#x9700;&#x8981;&#x770B;&#x4E00;&#x4E0B;&#x722C;&#x53D6;&#x7684;&#x4FE1;&#x606F;&#x91CC;&#x9762;&#x662F;&#x5426;&#x5E26;&#x6709;&#x7528;&#x6237;&#x4FE1;&#x606F;&#x5373;&#x53EF;&#x3002;&#x5728;&#x4F7F;&#x7528;cookie&#x767B;&#x9646;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x8FD8;&#x9700;&#x8981;&#x4E0D;&#x5B9A;&#x671F;&#x66F4;&#x65B0;cookie&#xFF0C;&#x4EE5;&#x4FDD;&#x8BC1;&#x722C;&#x53D6;&#x987A;&#x5229;&#x8FDB;&#x884C;&#x3002; &#x9A8C;&#x8BC1;&#x7801;&#x8BC6;&#x522B;&#x624B;&#x6BB5;&#x4F7F;&#x7528;cookie&#x767B;&#x9646;&#x6BD4;&#x8F83;&#x7B80;&#x5355;&#xFF0C;&#x4F46;&#x662F;&#x6709;&#x65F6;&#x6548;&#x6027;&#x95EE;&#x9898;&#x3002;&#x9A8C;&#x8BC1;&#x7801;&#x8BC6;&#x522B;&#x662F;&#x4E2A;&#x5F88;&#x597D;&#x7684;&#x601D;&#x8DEF;&#xFF0C;&#x7136;&#x800C;&#x8BC6;&#x522B;&#x7684;&#x7CBE;&#x5EA6;&#x53C8;&#x9650;&#x5236;&#x4E86;&#x6293;&#x53D6;&#x7684;&#x6548;&#x7387;&#x3002; &#x722C;&#x53D6;js&#x4EA4;&#x4E92;&#x5F0F;&#x8868;&#x683C;&#x6570;&#x636E;&#x8FD9;&#x91CC;&#xFF0C;&#x82E5;&#x4F7F;&#x7528;Google Chrome&#x5206;&#x6790;&#x201D;&#x8BF7;&#x6C42;&#x201C;&#x5BF9;&#x5E94;&#x7684;&#x94FE;&#x63A5;(&#x65B9;&#x6CD5;&#xFF1A;&#x53F3;&#x952E;&#x2192;&#x5BA1;&#x67E5;&#x5143;&#x7D20;&#x2192;Network&#x2192;&#x6E05;&#x7A7A;&#xFF0C;&#x70B9;&#x51FB;&#x201D;&#x52A0;&#x8F7D;&#x66F4;&#x591A;&#x201C;&#xFF0C;&#x51FA;&#x73B0;&#x5BF9;&#x5E94;&#x7684;GET&#x94FE;&#x63A5;&#x5BFB;&#x627E;Type&#x4E3A;text/html&#x7684;&#xFF0C;&#x70B9;&#x51FB;&#xFF0C;&#x67E5;&#x770B;get&#x53C2;&#x6570;&#x6216;&#x8005;&#x590D;&#x5236;Request URL)&#xFF0C;&#x5FAA;&#x73AF;&#x8FC7;&#x7A0B;&#x3002; &#x542F;&#x52A8; splash &#x5BB9;&#x5668; $ boot2docker start $ boot2docker ssh $ docker run -p 8050:8050 scrapinghub/splash &#x914D;&#x7F6E; scrapy-splash&#x5728;&#x4F60;&#x7684; scrapy &#x5DE5;&#x7A0B;&#x7684;&#x914D;&#x7F6E;&#x6587;&#x4EF6;settings.py&#x4E2D;&#x6DFB;&#x52A0; SPLASH_URL = &apos;http://192.168.59.103:8050&apos; # &#x6DFB;&#x52A0;Splash&#x4E2D;&#x95F4;&#x4EF6;&#xFF0C;&#x8FD8;&#x662F;&#x5728;settings.py&#x4E2D;&#x901A;&#x8FC7;DOWNLOADER_MIDDLEWARES&#x6307;&#x5B9A;&#xFF0C;&#x5E76;&#x4E14;&#x4FEE;&#x6539;HttpCompressionMiddleware&#x7684;&#x4F18;&#x5148;&#x7EA7; DOWNLOADER_MIDDLEWARES = { &apos;scrapy_splash.SplashCookiesMiddleware&apos;: 723, &apos;scrapy_splash.SplashMiddleware&apos;: 725, &apos;scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware&apos;: 810, } # &#x9ED8;&#x8BA4;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;HttpProxyMiddleware&#x7684;&#x4F18;&#x5148;&#x7EA7;&#x662F;750&#xFF0C;&#x8981;&#x628A;&#x5B83;&#x653E;&#x5728;Splash&#x4E2D;&#x95F4;&#x4EF6;&#x540E;&#x9762; # &#x8BBE;&#x7F6E;Splash&#x81EA;&#x5DF1;&#x7684;&#x53BB;&#x91CD;&#x8FC7;&#x6EE4;&#x5668; DUPEFILTER_CLASS = &apos;scrapy_splash.SplashAwareDupeFilter&apos; # &#x5982;&#x679C;&#x4F60;&#x4F7F;&#x7528;Splash&#x7684;Http&#x7F13;&#x5B58;&#xFF0C;&#x90A3;&#x4E48;&#x8FD8;&#x8981;&#x6307;&#x5B9A;&#x4E00;&#x4E2A;&#x81EA;&#x5B9A;&#x4E49;&#x7684;&#x7F13;&#x5B58;&#x540E;&#x53F0;&#x5B58;&#x50A8;&#x4ECB;&#x8D28;&#xFF0C;scrapy-splash&#x63D0;&#x4F9B;&#x4E86;&#x4E00;&#x4E2A;scrapy.contrib.httpcache.FilesystemCacheStorage&#x7684;&#x5B50;&#x7C7B; HTTPCACHE_STORAGE = &apos;scrapy_splash.SplashAwareFSCacheStorage&apos; # &#x5982;&#x679C;&#x4F60;&#x8981;&#x4F7F;&#x7528;&#x5176;&#x4ED6;&#x7684;&#x7F13;&#x5B58;&#x5B58;&#x50A8;&#xFF0C;&#x90A3;&#x4E48;&#x9700;&#x8981;&#x7EE7;&#x627F;&#x8FD9;&#x4E2A;&#x7C7B;&#x5E76;&#x4E14;&#x5C06;&#x6240;&#x6709;&#x7684;scrapy.util.request.request_fingerprint&#x8C03;&#x7528;&#x66FF;&#x6362;&#x6210;scrapy_splash.splash_request_fingerprint &#x4F7F;&#x7528; scrapy-splashSplashRequest&#x6700;&#x7B80;&#x5355;&#x7684;&#x6E32;&#x67D3;&#x8BF7;&#x6C42;&#x7684;&#x65B9;&#x5F0F;&#x662F;&#x4F7F;&#x7528;scrapy_splash.SplashRequest&#xFF0C;&#x901A;&#x5E38;&#x4F60;&#x5E94;&#x8BE5;&#x9009;&#x62E9;&#x4F7F;&#x7528;&#x8FD9;&#x4E2A;12345678910111213yield SplashRequest(url, self.parse_result, args={ # optional; parameters passed to Splash HTTP API &apos;wait&apos;: 0.5, # &apos;url&apos; is prefilled from request url # &apos;http_method&apos; is set to &apos;POST&apos; for POST requests # &apos;body&apos; is set to request body for POST requests }, endpoint=&apos;render.json&apos;, # optional; default is render.html splash_url=&apos;&lt;url&gt;&apos;, # optional; overrides SPLASH_URL slot_policy=scrapy_splash.SlotPolicy.PER_DOMAIN, # optional) &#x53E6;&#x5916;&#xFF0C;&#x4F60;&#x8FD8;&#x53EF;&#x4EE5;&#x5728;&#x666E;&#x901A;&#x7684;scrapy&#x8BF7;&#x6C42;&#x4E2D;&#x4F20;&#x9012;splash&#x8BF7;&#x6C42;meta&#x5173;&#x952E;&#x5B57;&#x8FBE;&#x5230;&#x540C;&#x6837;&#x7684;&#x6548;&#x679C;12345678910111213141516171819202122yield scrapy.Request(url, self.parse_result, meta={ &apos;splash&apos;: { &apos;args&apos;: { # set rendering arguments here &apos;html&apos;: 1, &apos;png&apos;: 1, # &apos;url&apos; is prefilled from request url # &apos;http_method&apos; is set to &apos;POST&apos; for POST requests # &apos;body&apos; is set to request body for POST requests }, # optional parameters &apos;endpoint&apos;: &apos;render.json&apos;, # optional; default is render.json &apos;splash_url&apos;: &apos;&lt;url&gt;&apos;, # optional; overrides SPLASH_URL &apos;slot_policy&apos;: scrapy_splash.SlotPolicy.PER_DOMAIN, &apos;splash_headers&apos;: {}, # optional; a dict with headers sent to Splash &apos;dont_process_response&apos;: True, # optional, default is False &apos;dont_send_headers&apos;: True, # optional, default is False &apos;magic_response&apos;: False, # optional, default is True }}) Splash API&#x8BF4;&#x660E;&#xFF0C;&#x4F7F;&#x7528;SplashRequest&#x662F;&#x4E00;&#x4E2A;&#x975E;&#x5E38;&#x4FBF;&#x5229;&#x7684;&#x5DE5;&#x5177;&#x6765;&#x586B;&#x5145;request.meta[&#x2018;splash&#x2019;]&#x91CC;&#x7684;&#x6570;&#x636E; meta[&#x2018;splash&#x2019;][&#x2018;args&#x2019;] &#x5305;&#x542B;&#x4E86;&#x53D1;&#x5F80;Splash&#x7684;&#x53C2;&#x6570;&#x3002; meta[&#x2018;splash&#x2019;][&#x2018;endpoint&#x2019;] &#x6307;&#x5B9A;&#x4E86;Splash&#x6240;&#x4F7F;&#x7528;&#x7684;endpoint&#xFF0C;&#x9ED8;&#x8BA4;&#x662F;render.html meta[&#x2018;splash&#x2019;][&#x2018;splash_url&#x2019;] &#x8986;&#x76D6;&#x4E86;settings.py&#x6587;&#x4EF6;&#x4E2D;&#x914D;&#x7F6E;&#x7684;Splash URL meta[&#x2018;splash&#x2019;][&#x2018;splash_headers&#x2019;] &#x8FD0;&#x884C;&#x4F60;&#x589E;&#x52A0;&#x6216;&#x4FEE;&#x6539;&#x53D1;&#x5F80;Splash&#x670D;&#x52A1;&#x5668;&#x7684;HTTP&#x5934;&#x90E8;&#x4FE1;&#x606F;&#xFF0C;&#x6CE8;&#x610F;&#x8FD9;&#x4E2A;&#x4E0D;&#x662F;&#x4FEE;&#x6539;&#x53D1;&#x5F80;&#x8FDC;&#x7A0B;web&#x7AD9;&#x70B9;&#x7684;HTTP&#x5934;&#x90E8; meta[&#x2018;splash&#x2019;][&#x2018;dont_send_headers&#x2019;] &#x5982;&#x679C;&#x4F60;&#x4E0D;&#x60F3;&#x4F20;&#x9012;headers&#x7ED9;Splash&#xFF0C;&#x5C06;&#x5B83;&#x8BBE;&#x7F6E;&#x6210;True meta[&#x2018;splash&#x2019;][&#x2018;slot_policy&#x2019;] &#x8BA9;&#x4F60;&#x81EA;&#x5B9A;&#x4E49;Splash&#x8BF7;&#x6C42;&#x7684;&#x540C;&#x6B65;&#x8BBE;&#x7F6E; meta[&#x2018;splash&#x2019;][&#x2018;dont_process_response&#x2019;] &#x5F53;&#x4F60;&#x8BBE;&#x7F6E;&#x6210;True&#x540E;&#xFF0C;SplashMiddleware&#x4E0D;&#x4F1A;&#x4FEE;&#x6539;&#x9ED8;&#x8BA4;&#x7684;scrapy.Response&#x8BF7;&#x6C42;&#x3002;&#x9ED8;&#x8BA4;&#x662F;&#x4F1A;&#x8FD4;&#x56DE;SplashResponse&#x5B50;&#x7C7B;&#x54CD;&#x5E94;&#x6BD4;&#x5982;SplashTextResponse meta[&#x2018;splash&#x2019;][&#x2018;magic_response&#x2019;] &#x9ED8;&#x8BA4;&#x4E3A;True&#xFF0C;Splash&#x4F1A;&#x81EA;&#x52A8;&#x8BBE;&#x7F6E;Response&#x7684;&#x4E00;&#x4E9B;&#x5C5E;&#x6027;&#xFF0C;&#x6BD4;&#x5982;response.headers,response.body&#x7B49;&#x5982;&#x679C;&#x4F60;&#x60F3;&#x901A;&#x8FC7;Splash&#x6765;&#x63D0;&#x4EA4;Form&#x8BF7;&#x6C42;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;scrapy_splash.SplashFormRequest&#xFF0C;&#x5B83;&#x8DDF;SplashRequest&#x4F7F;&#x7528;&#x662F;&#x4E00;&#x6837;&#x7684;&#x3002; Responses&#x5BF9;&#x4E8E;&#x4E0D;&#x540C;&#x7684;Splash&#x8BF7;&#x6C42;&#xFF0C;scrapy-splash&#x8FD4;&#x56DE;&#x4E0D;&#x540C;&#x7684;Response&#x5B50;&#x7C7B; SplashResponse &#x4E8C;&#x8FDB;&#x5236;&#x54CD;&#x5E94;&#xFF0C;&#x6BD4;&#x5982;&#x5BF9;/render.png&#x7684;&#x54CD;&#x5E94; SplashTextResponse &#x6587;&#x672C;&#x54CD;&#x5E94;&#xFF0C;&#x6BD4;&#x5982;&#x5BF9;/render.html&#x7684;&#x54CD;&#x5E94; SplashJsonResponse JSON&#x54CD;&#x5E94;&#xFF0C;&#x6BD4;&#x5982;&#x5BF9;/render.json&#x6216;&#x4F7F;&#x7528;Lua&#x811A;&#x672C;&#x7684;/execute&#x7684;&#x54CD;&#x5E94; &#x5982;&#x679C;&#x4F60;&#x53EA;&#x60F3;&#x4F7F;&#x7528;&#x6807;&#x51C6;&#x7684;Response&#x5BF9;&#x8C61;&#xFF0C;&#x5C31;&#x8BBE;&#x7F6E;meta[&#x2018;splash&#x2019;][&#x2018;dont_process_response&#x2019;]=True &#x6240;&#x6709;&#x8FD9;&#x4E9B;Response&#x4F1A;&#x628A;response.url&#x8BBE;&#x7F6E;&#x6210;&#x539F;&#x59CB;&#x8BF7;&#x6C42;URL(&#x4E5F;&#x5C31;&#x662F;&#x4F60;&#x8981;&#x6E32;&#x67D3;&#x7684;&#x9875;&#x9762;URL)&#xFF0C;&#x800C;&#x4E0D;&#x662F;Splash endpoint&#x7684;URL&#x5730;&#x5740;&#x3002;&#x5B9E;&#x9645;&#x5730;&#x5740;&#x901A;&#x8FC7;response.real_url&#x5F97;&#x5230; &#x5B9E;&#x4F8B;&#x722C;&#x53D6;&#x534E;&#x4E3A;&#x5E94;&#x7528;&#x5E02;&#x573A;( http://appstore.huawei.com/more/all )&#x7684;&#x201C;&#x4E0B;&#x4E00;&#x9875;&#x201D; url &#x94FE;&#x63A5;&#x3002; &#x67E5;&#x770B;&#x7F51;&#x9875;&#x6E90;&#x4EE3;&#x7801;123456789101112131415161718&lt;script type=&quot;text/javascript&quot; src=&quot;http://app.vmall.com/js/core/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt; var jsResource = new Array(); jsResource[&apos;cloud.page.count&apos;] = &quot;&#x5171;&quot;; jsResource[&apos;cloud.page.numbers&apos;] = &quot;&#x6761;&#x8BB0;&#x5F55;&quot;; jsResource[&apos;cloud.page.last_page&apos;] = &quot;&#x4E0A;&#x4E00;&#x9875;&quot;; jsResource[&apos;cloud.page.next_page&apos;] = &quot;&#x4E0B;&#x4E00;&#x9875;&quot;; jsResource[&apos;cloud.page.pages&apos;] = &quot;&#x9875;&quot;; jsResource[&apos;cloud.page.first&apos;] = &quot;&#x9996;&#x9875;&quot;; jsResource[&apos;cloud.page.last&apos;] = &quot;&#x5C3E;&#x9875;&quot;; jsResource[&apos;cloud.downAppError&apos;]=&quot;&#x60A8;&#x7684;&#x8BF7;&#x6C42;&#x6B63;&#x5728;&#x5904;&#x7406;&#x4E2D;&#xFF0C;&#x8BF7;&#x4E0D;&#x8981;&#x91CD;&#x590D;&#x63D0;&#x4EA4;&#x3002;&quot; jsResource[&apos;cloud.msg.ok&apos;]=&quot;&#x786E;&#x5B9A;&quot; jsResource[&apos;cloud.msg.message&apos;]=&quot;&#x63D0;&#x793A;&quot; jsResource[&apos;cloud.detail.close&apos;]=&quot;&#x5173;&#x95ED;&quot;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;http://app.vmall.com/js/all/more.js?version=2.9.5.20150418&quot;&gt;&lt;/script&gt; &#x67E5;&#x770B;&#x6E32;&#x67D3;&#x540E;&#x7684;&#x4EE3;&#x7801;&#x542F;&#x52A8; splash &#x5BB9;&#x5668;&#xFF0C;&#x5728;&#x6D4F;&#x89C8;&#x5668;&#x6253;&#x5F00; http://192.168.59.103:8050/ &#xFF0C; &#x8F93;&#x5165;&#x7F51;&#x5740;&#x8FDB;&#x884C; render&#xFF0C;&#x67E5;&#x770B;&#x6E32;&#x67D3;&#x540E;&#x7684;&#x4EE3;&#x7801;&#x3002;1&lt;div class=&quot;page-ctrl ctrl-app&quot; id=&quot;recommendListPage&quot;&gt;&lt;a href=&quot;http://appstore.huawei.com:80/more/all/1&quot;&gt;&#x9996;&#x9875;&lt;/a&gt; &lt;a href=&quot;http://appstore.huawei.com:80/more/all/1&quot;&gt;&lt;em class=&quot;arrow-grey-lt&quot;&gt;&amp;nbsp;&lt;/em&gt;&#x4E0A;&#x4E00;&#x9875;&lt;/a&gt; &lt;a href=&quot;http://appstore.huawei.com:80/more/all/1&quot;&gt;1&lt;/a&gt;&lt;span&gt;2&lt;/span&gt; &lt;a href=&quot;http://appstore.huawei.com:80/more/all/3&quot;&gt;3&lt;/a&gt; &lt;a href=&quot;http://appstore.huawei.com:80/more/all/4&quot;&gt;4&lt;/a&gt; &lt;a href=&quot;http://appstore.huawei.com:80/more/all/5&quot;&gt;5&lt;/a&gt; &lt;a href=&quot;http://appstore.huawei.com:80/more/all/3&quot;&gt;&#x4E0B;&#x4E00;&#x9875;&lt;em class=&quot;arrow-grey-rt&quot;&gt;&amp;nbsp;&lt;/em&gt;&lt;/a&gt; &lt;a href=&quot;http://appstore.huawei.com:80/more/all/41&quot;&gt;&#x5C3E;&#x9875;&lt;/a&gt; spider &#x90E8;&#x5206;&#x4EE3;&#x7801; def parse(self, response): page = Selector(response) hrefs = page.xpath(&apos;//h4[@class=&quot;title&quot;]/a/@href&apos;) if not hrefs: return for href in hrefs: url = href.extract() yield scrapy.Request(url, callback=self.parse_item) # find next page nextpage = page.xpath(&apos;//div[@class=&quot;page-ctrl ctrl-app&quot;]/a/em[@class=&quot;arrow-grey-rt&quot;]/../@href&apos;).extract_first() print nextpage yield scrapy.Request(nextpage,callback=self.parse,meta={ &apos;splash&apos;: { &apos;endpoint&apos;: &apos;render.html&apos;, &apos;args&apos;: {&apos;wait&apos;: 0.5} } }) &#x5B8C;&#x6574;&#x4EE3;&#x7801; &#x5206;&#x6790;&#x4E0D;&#x89C4;&#x5219;&#x7684; html&#x4E4B;&#x524D;&#x7684;&#x51E0;&#x4E2A;&#x90E8;&#x5206;&#x89E3;&#x51B3;&#x7684;&#x90FD;&#x662F; &#x4E0B;&#x8F7D; Web &#x9875;&#x9762; &#x7684;&#x95EE;&#x9898;&#xFF0C;&#x8FD9;&#x91CC;&#x8865;&#x5145;&#x4E0B;&#x83B7;&#x53D6;&#x7F51;&#x9875;&#x540E;&#x5206;&#x6790;&#x8FC7;&#x7A0B;&#x7684;&#x4E00;&#x4E9B;&#x6280;&#x5DE7;&#x3002;&#x4EE5;&#x82CF;&#x5B81;&#x6613;&#x8D2D; help &#x9875;&#x9762;&#x4E3A;&#x4F8B;&#x3002;start_url &#x662F; http://help.suning.com/faq/list.htm &#xFF0C; &#x722C;&#x53D6;&#x7684;&#x662F;&#x5DE6;&#x8FB9;&#x4FA7;&#x680F;&#x6BCF;&#x4E2A;&#x5927;&#x7C7B;&#x7684;&#x6BCF;&#x4E2A;&#x5C0F;&#x7C7B;&#x4E0B;&#x53F3;&#x8FB9;&#x7684;&#x95EE;&#x9898;&#x9875;&#x9762;&#xFF0C;&#x5982;&#x201C;&#x6743;&#x76CA;&#x4ECB;&#x7ECD;&#x201D;&#x3001;&#x201C;&#x7B49;&#x7EA7;&#x6743;&#x76CA;&#x4ECB;&#x7ECD;&#x201D;&#x8FD9;&#x4E9B; FAQ &#x9875;&#x9762;&#xFF0C;&#x5982;&#x4F55;&#x5230;&#x8FBE;&#x8FD9;&#x4E9B;&#x9875;&#x9762;&#x5C31;&#x4E0D;&#x518D;&#x591A;&#x8BF4;&#xFF0C;&#x5173;&#x952E;&#x662F;&#x5230;&#x8FBE;&#x8FD9;&#x4E9B;&#x9875;&#x9762;&#x540E;&#x600E;&#x4E48;&#x83B7;&#x5F97;&#x4FE1;&#x606F;&#x3002; &#x770B;&#x4E00;&#x90E8;&#x5206;&#x7684;&#x7F51;&#x9875;&#x6E90;&#x4EE3;&#x7801;1234567891011121314151617181920212223242526272829&lt;div id=&quot;contentShow&quot;&gt; &lt;p class=&quot;MsoNormal&quot; style=&quot;background:white;text-align:left;&quot; align=&quot;left&quot;&gt; &lt;span style=&quot;font-size:9pt;font-family:&#x5B8B;&#x4F53;;color:black;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;MsoNormal&quot; style=&quot;background:white;&quot; align=&quot;left&quot;&gt; &lt;br /&gt;&lt;/p&gt;&lt;p class=&quot;MsoNormal&quot; style=&quot;background:white;&quot; align=&quot;left&quot;&gt; &lt;b&gt;&#x4E00;&#x3001;&#x6743;&#x76CA;&#x7C7B;&#x578B;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;MsoNormal&quot; style=&quot;background:white;&quot; align=&quot;left&quot;&gt; &#x672C;&#x6B21;&#x6539;&#x7248;&#x5C06;&#x4E0A;&#x7EBF;&lt;span&gt;7&lt;/span&gt;&#x4E2A;&#x4F1A;&#x5458;&#x6743;&#x76CA;&#xFF0C;&#x6DB5;&#x76D6;&#x4EF7;&#x683C;&#x4F18;&#x60E0;&#x3001;&#x8D44;&#x683C;&#x62A2;&#x5148;&#x3001;&#x670D;&#x52A1;&#x4F18;&#x5148;&#x7B49;&#x591A;&#x4E2A;&#x65B9;&#x9762;&#xFF0C;&#x4F1A;&#x5458;&#x7B49;&#x7EA7;&#x8D8A;&#x9AD8;&#xFF0C;&#x53EF;&#x4EAB;&#x53D7;&#x5230;&#x7684;&#x4F1A;&#x5458;&#x6743;&#x76CA;&#x8D8A;&#x591A;&#x3002;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;MsoNormal&quot; style=&quot;background:white;&quot; align=&quot;left&quot;&gt; &lt;b&gt;&#x4E8C;&#x3001;&#x5177;&#x4F53;&#x8BE6;&#x60C5;&#xFF1A;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;MsoNormal&quot; style=&quot;background:white;&quot; align=&quot;left&quot;&gt; &lt;b&gt;1&lt;/b&gt;&lt;b&gt;&#x3001;&#x751F;&#x65E5;&#x7EA2;&#x5305;&lt;/b&gt;&lt;br /&gt;&#x7279;&#x6743;&#x5185;&#x5BB9;&#xFF1A;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&#x5DF2;&#x9A8C;&#x8BC1;&#x624B;&#x673A;&#x53F7;&#x7684;&lt;span&gt;V2&lt;/span&gt;&#x53CA;&#x4EE5;&#x4E0A;&#x7B49;&#x7EA7;&#x7684;&#x4F1A;&#x5458;&#xFF0C;&#x5728;&#x5B9E;&#x540D;&#x8BA4;&#x8BC1;&#x6216;&#x5B8C;&#x5584;&#x751F;&#x65E5;&#x8D44;&#x6599;&#x540E;&#xFF0C;&#x53EF;&#x5728;&#x751F;&#x65E5;&#x5468;&#x671F;&#x95F4;&#x83B7;&#x5F97;&#x751F;&#x65E5;&#x7EA2;&#x5305;&#x3002;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;V2&lt;/span&gt;&#x7B49;&#x7EA7;&#x751F;&#x65E5;&#x7EA2;&#x5305;&#x4E3A;&lt;span&gt;6&lt;/span&gt;&#x5143;&#x4E91;&#x5238;&#xFF0C;&lt;span&gt;V3&lt;/span&gt;&#x7B49;&#x7EA7;&#x751F;&#x65E5;&#x7EA2;&#x5305;&#x4E3A;&lt;span&gt;8&lt;/span&gt;&#x5143;&#x4E91;&#x5238;&#x3002;&#xFF08;&lt;span&gt;2016&lt;/span&gt;&#x5E74;6&#x6708;12&#x65E5;&#x5F00;&#x59CB;&#x5B9E;&#x65BD;&#xFF09;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&#x6CE8;&#x610F;&#x4E8B;&#x9879;&#xFF1A;&lt;span&gt;&lt;br /&gt;1&lt;/span&gt;&#xFF09;&#x751F;&#x65E5;&#x7EA2;&#x5305;&#x5238;&#x4E3A;&#x9650;&#x54C1;&#x7C7B;&#x4E91;&#x5238;&#xFF0C;&#x5728;&#x751F;&#x65E5;&#x5468;&#x65F6;&#x81EA;&#x52A8;&#x53D1;&#x5230;&#x4F1A;&#x5458;&#x8D26;&#x6237;&#xFF0C;&#x4F1A;&#x5458;&#x5728;&#x6210;&#x529F;&#x6536;&#x5230;&#x751F;&#x65E5;&#x7EA2;&#x5305;&#x5238;&#x540E;&#x4F1A;&#x6709;&#x77ED;&#x4FE1;&#x63D0;&#x9192;&#xFF0C;&#x5E76;&#x53EF;&#x767B;&#x5F55;&#x201C;&#x6211;&#x7684;&#x6613;&#x8D2D;&lt;span&gt;-&lt;/span&gt;&#x6211;&#x7684;&#x4F18;&#x60E0;&#x5238;&#x201D;&#x3010;&lt;span&gt;&lt;a href=&quot;http://member.suning.com/emall/MyGiftTicket&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;&#x70B9;&#x51FB;&#x67E5;&#x770B;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&#x3011;&#xFF0C;&#x6BCF;&#x4E2A;&#x4F1A;&#x5458;&#x540C;&#x4E00;&#x81EA;&#x7136;&#x5E74;&#x5185;&#x4EC5;&#x53EF;&#x83B7;&#x5F97;&#x4E00;&#x5F20;&#x751F;&#x65E5;&#x7EA2;&#x5305;&#x5238;&#xFF1B;&lt;span&gt;&lt;br /&gt;2&lt;/span&gt;&#xFF09;&#x5238;&#x4F7F;&#x7528;&#x89C4;&#x5219;&#xFF1A;&#x4E14;&#x9650;&#x4E00;&#x6B21;&#x6027;&#x4F7F;&#x7528;&#x3001;&#x4E0D;&#x627E;&#x96F6;&#x3001;&#x4E0D;&#x5151;&#x73B0;&#xFF0C;&#x4E0D;&#x53EF;&#x4EE5;&#x548C;&#x4E91;&#x5238;&#x53E0;&#x52A0;&#xFF0C;&#x53EF;&#x4EE5;&#x548C;&#x65E0;&#x654C;&#x5238;&#x3001;&#x6613;&#x5238;&#x53E0;&#x52A0;&#x4F7F;&#x7528;&#xFF0C;&#x4E0D;&#x53EF;&#x4F7F;&#x7528;&#x81EA;&#x63D0;&#xFF1B;&lt;span&gt;&lt;br /&gt;3&lt;/span&gt;&#xFF09;&#x5238;&#x6709;&#x6548;&#x671F;&#xFF1A;&#x81EA;&#x5238;&#x5230;&#x8D26;&#x4E4B;&#x65E5;&#x8D77;&lt;span&gt;8&lt;/span&gt;&#x65E5;&#x5185;&#x6709;&#x6548;&#xFF1B;&lt;span&gt;&lt;br /&gt;4&lt;/span&gt;&#xFF09;&#x5238;&#x9002;&#x7528;&#x5546;&#x54C1;&#x8303;&#x56F4;&#xFF1A;&#x4EC5;&#x9650;&#x8D2D;&#x4E70;&#x81EA;&#x8425;&#x5546;&#x54C1;&#x4F7F;&#x7528;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x7528;&#x4E8E;&#x5927;&#x805A;&#x60E0;&#x3001;&#x62A2;&#x56E2;&#x8D2D;&#x3001;&#x624B;&#x673A;&#x4E13;&#x4EAB;&#x4EF7;&#x3001;&#x540D;&#x54C1;&#x7279;&#x5356;&#x5546;&#x54C1;&#xFF0C;&#x4F46;&#x95EA;&#x62CD;&#x3001;&#x79D2;&#x6740;&#x3001;&#x9884;&#x552E;&#x3001;&#x6D77;&#x5916;&#x8D2D;&#x3001;&#x865A;&#x62DF;&#x5546;&#x54C1;&#x3001;&#x7279;&#x6B8A;&#x7C7B;&#x5546;&#x54C1;&#xFF08;&#x4E00;&#x6BB5;&#x5976;&#x7C89;&#x7B49;&#xFF09;&#x53CA;&#x5E73;&#x53F0;&#x5546;&#x6237;&#x5546;&#x54C1;&#x4E0D;&#x53EF;&#x4F7F;&#x7528;&#xFF1B;&lt;span&gt;&lt;br /&gt;5&lt;/span&gt;&#xFF09;&#x4F7F;&#x7528;&#x751F;&#x65E5;&#x7EA2;&#x5305;&#x5238;&#x7684;&#x8BA2;&#x5355;&#x82E5;&#x53D1;&#x751F;&#x9000;&#x8D27;&#xFF0C;&#x5728;&#x6709;&#x6548;&#x671F;&#x5185;&#x5238;&#x5C06;&#x8FD4;&#x56DE;&#x81F3;&#x987E;&#x5BA2;&#x8D26;&#x6237;&#xFF0C;&#x53EF;&#x518D;&#x6B21;&#x4F7F;&#x7528;&#xFF1B;&#x5982;&#x7528;&#x5238;&#x8BA2;&#x5355;&#x9000;&#x8D27;&#x65F6;&#x5DF2;&#x8D85;&#x8FC7;&#x5238;&#x6709;&#x6548;&#x671F;&#xFF0C;&#x5238;&#x5C06;&#x81EA;&#x52A8;&#x5931;&#x6548;&#xFF0C;&#x4E0D;&#x505A;&#x5EF6;&#x671F;&#xFF1B;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;...... &#x4E0D;&#x96BE;&#x53D1;&#x73B0;&#xFF0C;&#x6709;&#x4E9B;&#x6587;&#x5B57;&#x5206;&#x5E03;&#x5728; div[@id=&#x201D;contentShow&#x201D;]/p div[@id=&#x201D;contentShow&#x201D;]/p/span div[@id=&#x201D;contentShow&#x201D;]/p/b &#x89C2;&#x5BDF;&#x5176;&#x4ED6;&#x9875;&#x9762;&#x4F1A;&#x53D1;&#x73B0;&#x8FD8;&#x6709;&#x4E9B;&#x5206;&#x5E03;&#x5728; div[@id=&#x201D;contentShow&#x201D;]/h4 &#x4E0B;&#x6216;&#x8005; h3 &#x4E0B;&#xFF0C;&#x6709;&#x7684;&#x751A;&#x81F3;&#x76F4;&#x63A5;&#x5C31;&#x5728; div[@id=&#x201D;contentShow&#x201D;] &#x4E0B;&#x3002;&#x3002;&#x600E;&#x4E48;&#x529E;&#xFF1F;&#x5F53;&#x7136;&#x53EF;&#x4EE5;&#x7A77;&#x5C3D;&#x5404;&#x79CD;&#x89C4;&#x5219;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x5148;&#x628A;&#x4E0D;&#x9700;&#x8981;&#x7684;&#x6807;&#x7B7E;&#x7ED9;&#x53BB;&#x6389;&#x518D; extract&#xFF0C;&#x8FD9;&#x4E9B;&#x6211;&#x5F00;&#x59CB;&#x90FD;&#x50BB;&#x50BB;&#x7684;&#x5C1D;&#x8BD5;&#x8FC7;&#xFF0C;&#x7ED3;&#x679C;&#x603B;&#x4F1A;&#x5FFD;&#x7565;&#x4E00;&#x4E9B;&#x6587;&#x5B57;&#xFF0C;&#x540E;&#x6765;&#x5728;&#x6CAE;&#x4E27;&#x7684;&#x770B;&#x7740; output &#x6587;&#x4EF6;&#x65F6;&#x798F;&#x81F3;&#x5FC3;&#x7075;&#xFF0C;&#x76F4;&#x63A5;&#x53D6;&#x4E86; div[@id=&#x201D;contentShow&#x201D;] &#x518D;&#x628A;&#x6240;&#x6709;&#x7684;&#x6807;&#x7B7E;&#x53BB;&#x6389;&#x4E0D;&#x5C31;&#x884C;&#x4E86;&#xFF1F;&#xFF01; &#x4E0A;&#x4EE3;&#x7801;12345page = html.xpath(&apos;//div[@id=&quot;contentShow&quot;]&apos;).extract_first()replaceTags = re.compile(&apos;&lt;.*?&gt;&apos;)replaceLine = re.compile(&apos;\\r|\\n|\\t&apos;)page = replaceTags.sub(&quot;&quot;, page)page = re.sub(replaceLine, &quot;&quot;, page) &#x6700;&#x540E;&#x7684;&#x7ED3;&#x679C;&#x975E;&#x5E38;&#x5E72;&#x51C0;1{&quot;url&quot;: &quot;http://help.suning.com/page/id-26.htm&quot;, &quot;text&quot;: &quot; &#x4E00;&#x3001;&#x8D26;&#x53F7;&#x6CE8;&#x518C;&#x76EE;&#x524D;&#x6CE8;&#x518C;&#x4E2A;&#x4EBA;&#x7528;&#x6237;&#x4EC5;&#x652F;&#x6301;&#xFF1A;&#x624B;&#x673A;&#x53F7;&#x65B9;&#x5F0F;&#x8FDB;&#x884C;&#x6CE8;&#x518C;&#x3002;1&#x3001;&#x6253;&#x5F00;&#x82CF;&#x5B81;&#x6613;&#x8D2D;&#x7F51;&#x7AD9;&#xFF0C;&#x70B9;&#x51FB;&#x9875;&#x5934;&#x201C;&#x6CE8;&#x518C;&#x201D;&#xFF0C;&#x8FDB;&#x5165;&#x6CE8;&#x518C;&#x9875;&#x9762;&#xA0;2&#x3001;&#x8FDB;&#x5165;&#x6CE8;&#x518C;&#x9875;&#x9762;&#xFF0C;&#x5982;&#x679C;&#x60A8;&#x662F;&#x4E2A;&#x4EBA;&#x7528;&#x6237;&#xFF0C;&#x53EF;&#x4EE5;&#x7528;&#x624B;&#x673A;&#x53F7;&#x8FDB;&#x884C;&#x6CE8;&#x518C;&#xFF1B;&#x5982;&#x679C;&#x60A8;&#x662F;&#x4F01;&#x4E1A;&#x7528;&#x6237;&#xFF0C;&#x53EF;&#x4EE5;&#x70B9;&#x51FB;&#x201C;&#x4F01;&#x4E1A;&#x7528;&#x6237;&#x6CE8;&#x518C;&#x201D;&#xFF0C;&#x7528;&#x5355;&#x4F4D;&#x540D;&#x79F0;&#x8FDB;&#x884C;&#x6CE8;&#x518C;&#xFF0C;&#x5982;&#x679C;&#x60A8;&#x6709;&#x6613;&#x8D2D;&#x8D26;&#x53F7;&#xFF0C;&#x53EF;&#x4EE5;&#x70B9;&#x51FB;&#x201C;&#x9A6C;&#x4E0A;&#x767B;&#x5F55;&#x201D;3&#x3001;&#x586B;&#x5199;&#x6CE8;&#x518C;&#x4FE1;&#x606F;&#xFF0C;&#x6309;&#x7167;&#x7F51;&#x9875;&#x63D0;&#x793A;&#xFF0C;&#x586B;&#x5199;&#x624B;&#x673A;&#x53F7;&#x3001;&#x9A8C;&#x8BC1;&#x7801;&#x548C;&#x5BC6;&#x7801;&#xA0;4&#x3001;&#x606D;&#x559C;&#x60A8;&#xFF0C;&#x6CE8;&#x518C;&#x6210;&#x529F;&#xA0;&quot;, &quot;question&quot;: &quot;&#x8D26;&#x6237;&#x6CE8;&#x518C;&quot;, &quot;title&quot;: &quot;&#x6613;&#x8D2D;&#x6CE8;&#x518C;&#x767B;&#x5F55;&quot;} &#x638C;&#x63E1;&#x8FD9;&#x4E2A;&#x6280;&#x5DE7;&#xFF0C;&#x5904;&#x7406;&#x7C7B;&#x4F3C;&#x95EE;&#x9898;&#x5C31;&#x5F88;&#x7B80;&#x5355;&#x5566;&#xFF0C;&#x5982;&#x518D;&#x722C;&#x4EAC;&#x4E1C;&#x7684; help &#x7F51;&#x9875;&#xFF0C;&#x7A0D;&#x5FAE;&#x6539;&#x4E0B;&#x4EE3;&#x7801;5&#x5206;&#x949F;&#x5C31;&#x80FD;&#x641E;&#x5B9A;&#x3002; &#x4EE3;&#x7801; &#x5176;&#x4ED6;&#x56DE;&#x5934;&#x8C08;&#x70B9;&#x80CC;&#x666F;&#x77E5;&#x8BC6;,scrapy&#x4F7F;&#x7528;&#x4E86;twisted.&#x4E00;&#x4E2A;&#x5F02;&#x6B65;&#x7F51;&#x7EDC;&#x6846;&#x67B6;.&#x56E0;&#x6B64;&#x8981;&#x7559;&#x610F;&#x6F5C;&#x5728;&#x7684;&#x963B;&#x585E;&#x60C5;&#x51B5;.&#x4F46;&#x6CE8;&#x610F;&#x5230;settings&#x4E2D;&#x6709;&#x4E2A;&#x53C2;&#x6570;&#x662F;&#x8BBE;&#x7F6E;ItemPipeline&#x7684;&#x5E76;&#x884C;&#x5EA6;.&#x7531;&#x6B64;&#x63A8;&#x6D4B;pipeline&#x4E0D;&#x4F1A;&#x963B;&#x585E;,pipeline&#x53EF;&#x80FD;&#x662F;&#x5728;&#x7EBF;&#x7A0B;&#x6C60;&#x4E2D;&#x6267;&#x884C;&#x7684;(&#x672A;&#x9A8C;&#x8BC1;).Pipeline&#x4E00;&#x822C;&#x7528;&#x4E8E;&#x5C06;&#x6293;&#x53D6;&#x5230;&#x7684;&#x4FE1;&#x606F;&#x4FDD;&#x5B58;(&#x5199;&#x6570;&#x636E;&#x5E93;,&#x5199;&#x6587;&#x4EF6;),&#x56E0;&#x6B64;&#x8FD9;&#x91CC;&#x4F60;&#x5C31;&#x4E0D;&#x7528;&#x62C5;&#x5FC3;&#x8017;&#x65F6;&#x64CD;&#x4F5C;&#x4F1A;&#x963B;&#x585E;&#x6574;&#x4E2A;&#x6846;&#x67B6;&#x4E86;,&#x4E5F;&#x5C31;&#x4E0D;&#x7528;&#x5728;Pipeline&#x4E2D;&#x5C06;&#x8FD9;&#x4E2A;&#x5199;&#x64CD;&#x4F5C;&#x5B9E;&#x73B0;&#x4E3A;&#x5F02;&#x6B65;.&#x9664;&#x6B64;&#x4E4B;&#x5916;&#x6846;&#x67B6;&#x7684;&#x5176;&#x4ED6;&#x90E8;&#x5206;.&#x90FD;&#x662F;&#x5F02;&#x6B65;&#x7684;,&#x7B80;&#x5355;&#x8BF4;&#x6765;&#x5C31;&#x662F;,&#x722C;&#x866B;&#x751F;&#x6210;&#x7684;&#x8BF7;&#x6C42;&#x4EA4;&#x7531;&#x8C03;&#x5EA6;&#x5668;&#x53BB;&#x4E0B;&#x8F7D;,&#x7136;&#x540E;&#x722C;&#x866B;&#x7EE7;&#x7EED;&#x6267;&#x884C;.&#x8C03;&#x5EA6;&#x5668;&#x5B8C;&#x6210;&#x4E0B;&#x8F7D;&#x540E;&#x4F1A;&#x5C06;&#x54CD;&#x5E94;&#x4EA4;&#x7531;&#x722C;&#x866B;&#x89E3;&#x6790;.&#x7F51;&#x4E0A;&#x627E;&#x5230;&#x7684;&#x53C2;&#x8003;&#x4F8B;&#x5B50;,&#x90E8;&#x5206;&#x5C06;js&#x652F;&#x6301;&#x5199;&#x5230;&#x4E86;DownloaderMiddleware&#x4E2D;,scrapy&#x5B98;&#x7F51;&#x7684;code snippet&#x4E5F;&#x662F;&#x8FD9;&#x6837; .&#x82E5;&#x8FD9;&#x6837;&#x5B9E;&#x73B0;,&#x5C31;&#x963B;&#x585E;&#x4E86;&#x6574;&#x4E2A;&#x6846;&#x67B6;,&#x722C;&#x866B;&#x7684;&#x5DE5;&#x4F5C;&#x6A21;&#x5F0F;&#x53D8;&#x6210;&#x4E86;,&#x4E0B;&#x8F7D;-&#x89E3;&#x6790;-&#x4E0B;&#x8F7D;-&#x89E3;&#x6790;,&#x800C;&#x4E0D;&#x5728;&#x662F;&#x5E76;&#x884C;&#x7684;&#x4E0B;&#x8F7D;.&#x5728;&#x5BF9;&#x6548;&#x7387;&#x8981;&#x6C42;&#x4E0D;&#x9AD8;&#x7684;&#x5C0F;&#x89C4;&#x6A21;&#x722C;&#x53D6;&#x4E2D;&#x95EE;&#x9898;&#x4E0D;&#x5927;.&#x66F4;&#x597D;&#x7684;&#x505A;&#x6CD5;&#x662F;&#x5C06;js&#x652F;&#x6301;&#x5199;&#x5230;scrapy&#x7684;downloader&#x91CC;.&#x7F51;&#x4E0A;&#x6709;&#x4E00;&#x4E2A;&#x8FD9;&#x6837;&#x7684;&#x5B9E;&#x73B0;(&#x4F7F;&#x7528;selenium+phantomjs).&#x4E0D;&#x8FC7;&#x4EC5;&#x652F;&#x6301;get&#x8BF7;&#x6C42;.&#x5728;&#x9002;&#x914D;&#x4E00;&#x4E2A;webkit&#x7ED9;scrapy&#x7684;downloader&#x65F6;,&#x6709;&#x5404;&#x79CD;&#x7EC6;&#x8282;&#x9700;&#x8981;&#x5904;&#x7406;. &#x53C2;&#x8003;&#x94FE;&#x63A5;scrapy&#x5B9A;&#x5236;&#x722C;&#x866B;-&#x722C;&#x53D6;javascript&#x5185;&#x5BB9;Scrapy&#x7B14;&#x8BB0;&#xFF08;11&#xFF09;- &#x6A21;&#x62DF;&#x767B;&#x5F55;&#x7F51;&#x7EDC;&#x722C;&#x866B;-&#x9A8C;&#x8BC1;&#x7801;&#x767B;&#x9646;Scrapy&#x7B14;&#x8BB0;&#xFF08;12&#xFF09;- &#x6293;&#x53D6;&#x52A8;&#x6001;&#x7F51;&#x7AD9;","tags":"crawler"},{"title":"爬虫总结(四)-- 分布式爬虫","url":"/2016/06/17/爬虫总结-四-分布式爬虫/","text":"&#x5206;&#x5E03;&#x5F0F;&#x722C;&#x866B;&#x7684;&#x6F14;&#x4E60;&#x3002;&#x5206;&#x5E03;&#x5F0F;&#x722C;&#x866B;&#x95EE;&#x9898;&#x5176;&#x5B9E;&#x4E5F;&#x5C31;&#x662F;&#x591A;&#x53F0;&#x673A;&#x5668;&#x591A;&#x4E2A; spider &#x5BF9; &#x591A;&#x4E2A; url &#x7684;&#x540C;&#x65F6;&#x5904;&#x7406;&#x95EE;&#x9898;&#xFF0C;&#x600E;&#x6837; schedule &#x8FD9;&#x4E9B; url&#xFF0C;&#x600E;&#x6837;&#x6C47;&#x603B; spider &#x6293;&#x53D6;&#x7684;&#x6570;&#x636E;&#x3002;&#x6700;&#x7B80;&#x5355;&#x7C97;&#x66B4;&#x7684;&#x65B9;&#x6CD5;&#x5C31;&#x662F;&#x5C06; url &#x8FDB;&#x884C;&#x5206;&#x7247;&#xFF0C;&#x4EA4;&#x7ED9;&#x4E0D;&#x540C;&#x673A;&#x5668;&#xFF0C;&#x6700;&#x540E;&#x5BF9;&#x4E0D;&#x540C;&#x673A;&#x5668;&#x6293;&#x53D6;&#x7684;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x6C47;&#x603B;&#x3002;&#x7136;&#x800C;&#x8FD9;&#x6837;&#x6BCF;&#x4E2A; spider &#x53EA;&#x80FD;&#x5BF9;&#x81EA;&#x5DF1;&#x5904;&#x7406;&#x7684; url &#x53BB;&#x91CD;&#xFF0C;&#x6CA1;&#x529E;&#x6CD5;&#x5168;&#x5C40;&#x7684;&#x53BB;&#x91CD;&#xFF0C;&#x53E6;&#x5916;&#x6027;&#x80FD;&#x4E5F;&#x5F88;&#x96BE;&#x63A7;&#x5236;&#xFF0C;&#x53EF;&#x80FD;&#x6709;&#x67D0;&#x53F0;&#x673A;&#x5668;&#x5F88;&#x65E9;&#x5C31;&#x8DD1;&#x5B8C;&#x4E86;&#xFF0C;&#x800C;&#x522B;&#x7684;&#x673A;&#x5668;&#x8FD8;&#x8981;&#x8DD1;&#x5F88;&#x4E45;&#x3002;&#x53E6;&#x4E00;&#x79CD;&#x601D;&#x8DEF;&#x5C31;&#x662F;&#x628A; url &#x5B58;&#x5728;&#x67D0;&#x4E2A;&#x5730;&#x65B9;&#xFF0C;&#x5171;&#x4EAB;&#x7ED9;&#x6240;&#x6709;&#x7684;&#x673A;&#x5668;&#xFF0C;&#x603B;&#x7684;&#x8C03;&#x5EA6;&#x5668;&#x6765;&#x5206;&#x914D;&#x8BF7;&#x6C42;&#xFF0C;&#x5224;&#x65AD; spider &#x6709;&#x6CA1;&#x6709;&#x95F2;&#x7F6E;&#xFF0C;&#x95F2;&#x7F6E;&#x4E86;&#x5C31;&#x7EE7;&#x7EED;&#x7ED9;&#x5B83;&#x4EFB;&#x52A1;&#xFF0C;&#x76F4;&#x5230;&#x6240;&#x6709;&#x7684; url &#x90FD;&#x722C;&#x5B8C;&#xFF0C;&#x8FD9;&#x79CD;&#x65B9;&#x6CD5;&#x89E3;&#x51B3;&#x4E86;&#x53BB;&#x91CD;&#x95EE;&#x9898;&#xFF08;&#x4E0B;&#x9762;&#x4F1A;&#x5177;&#x4F53;&#x8BB2;&#x5230;&#xFF09;&#xFF0C;&#x4E5F;&#x80FD;&#x63D0;&#x9AD8;&#x6027;&#x80FD;&#xFF0C;scrapy-redis &#x5C31;&#x5B9E;&#x73B0;&#x4E86;&#x8FD9;&#x6837;&#x4E00;&#x4E2A;&#x5B8C;&#x6574;&#x6846;&#x67B6;&#xFF0C;&#x603B;&#x7684;&#x6765;&#x8BF4;&#xFF0C;&#x8FD9;&#x66F4;&#x9002;&#x5408;&#x5E7F;&#x5EA6;&#x4F18;&#x5148;&#x7684;&#x722C;&#x53D6;&#x3002; ScrapydScrapy &#x5E76;&#x6CA1;&#x6709;&#x63D0;&#x4F9B;&#x5185;&#x7F6E;&#x7684;&#x5206;&#x5E03;&#x5F0F;&#x6293;&#x53D6;&#x529F;&#x80FD;&#xFF0C;&#x4E0D;&#x8FC7;&#x6709;&#x5F88;&#x591A;&#x65B9;&#x6CD5;&#x53EF;&#x4EE5;&#x5E2E;&#x4F60;&#x5B9E;&#x73B0;&#x3002; &#x5982;&#x679C;&#x4F60;&#x6709;&#x5F88;&#x591A;&#x4E2A;spider&#xFF0C;&#x6700;&#x7B80;&#x5355;&#x7684;&#x65B9;&#x5F0F;&#x5C31;&#x662F;&#x542F;&#x52A8;&#x591A;&#x4E2A; Scrapyd &#x5B9E;&#x4F8B;&#xFF0C;&#x7136;&#x540E;&#x5C06;spider&#x5206;&#x5E03;&#x5230;&#x5404;&#x4E2A;&#x673A;&#x5668;&#x4E0A;&#x9762;&#x3002; &#x5982;&#x679C;&#x4F60;&#x60F3;&#x591A;&#x4E2A;&#x673A;&#x5668;&#x8FD0;&#x884C;&#x540C;&#x4E00;&#x4E2A;spider&#xFF0C;&#x53EF;&#x4EE5;&#x5C06;url&#x5206;&#x7247;&#x540E;&#x4EA4;&#x7ED9;&#x6BCF;&#x4E2A;&#x673A;&#x5668;&#x4E0A;&#x9762;&#x7684;spider&#x3002;&#x6BD4;&#x5982;&#x4F60;&#x628A;URL&#x5206;&#x6210;3&#x4EFD; http://somedomain.com/urls-to-crawl/spider1/part1.list http://somedomain.com/urls-to-crawl/spider1/part2.list http://somedomain.com/urls-to-crawl/spider1/part3.list &#x7136;&#x540E;&#x8FD0;&#x884C;3&#x4E2A; Scrapyd &#x5B9E;&#x4F8B;&#xFF0C;&#x5206;&#x522B;&#x542F;&#x52A8;&#x5B83;&#x4EEC;&#xFF0C;&#x5E76;&#x4F20;&#x9012;part&#x53C2;&#x6570; curl http://scrapy1.mycompany.com:6800/schedule.json -d project=myproject -d spider=spider1 -d part=1 curl http://scrapy2.mycompany.com:6800/schedule.json -d project=myproject -d spider=spider1 -d part=2 curl http://scrapy3.mycompany.com:6800/schedule.json -d project=myproject -d spider=spider1 Crawlera&#x8FD9;&#x4E2A;&#xFF0C;&#x82B1;&#x94B1;&#x5C31;&#x53EF;&#x4EE5;&#x8F7B;&#x6613;&#x89E3;&#x51B3;&#xFF5E; &#x76F4;&#x8FBE; Scrapy-redisRedis &#x662F;&#x9AD8;&#x6027;&#x80FD;&#x7684; key-value &#x6570;&#x636E;&#x5E93;&#x3002;&#x6211;&#x4EEC;&#x77E5;&#x9053; MongoDB &#x5C06;&#x6570;&#x636E;&#x4FDD;&#x5B58;&#x5728;&#x4E86;&#x786C;&#x76D8;&#x91CC;&#xFF0C;&#x800C; Redis &#x7684;&#x795E;&#x5947;&#x4E4B;&#x5904;&#x5728;&#x4E8E;&#x5B83;&#x5C06;&#x6570;&#x636E;&#x4FDD;&#x5B58;&#x5728;&#x4E86;&#x5185;&#x5B58;&#x4E2D;&#xFF0C;&#x56E0;&#x6B64;&#x5E26;&#x6765;&#x4E86;&#x66F4;&#x9AD8;&#x7684;&#x6027;&#x80FD;&#x3002; &#x5206;&#x5E03;&#x5F0F;&#x539F;&#x7406;scrapy-redis&#x5B9E;&#x73B0;&#x5206;&#x5E03;&#x5F0F;&#xFF0C;&#x5176;&#x5B9E;&#x4ECE;&#x539F;&#x7406;&#x4E0A;&#x6765;&#x8BF4;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x8FD9;&#x91CC;&#x4E3A;&#x63CF;&#x8FF0;&#x65B9;&#x4FBF;&#xFF0C;&#x6211;&#x4EEC;&#x628A;&#x81EA;&#x5DF1;&#x7684;&#x6838;&#x5FC3;&#x670D;&#x52A1;&#x5668;&#x79F0;&#x4E3A; master&#xFF0C;&#x800C;&#x628A;&#x7528;&#x4E8E;&#x8DD1;&#x722C;&#x866B;&#x7A0B;&#x5E8F;&#x7684;&#x673A;&#x5668;&#x79F0;&#x4E3A; slave&#x3002; &#x56DE;&#x987E; scrapy &#x6846;&#x67B6;&#xFF0C;&#x6211;&#x4EEC;&#x9996;&#x5148;&#x7ED9;&#x5B9A;&#x4E00;&#x4E9B;start_urls&#xFF0C;spider &#x6700;&#x5148;&#x8BBF;&#x95EE; start_urls &#x91CC;&#x9762;&#x7684; url&#xFF0C;&#x518D;&#x6839;&#x636E;&#x6211;&#x4EEC;&#x7684; parse &#x51FD;&#x6570;&#xFF0C;&#x5BF9;&#x91CC;&#x9762;&#x7684;&#x5143;&#x7D20;&#x3001;&#x6216;&#x8005;&#x662F;&#x5176;&#x4ED6;&#x7684;&#x4E8C;&#x7EA7;&#x3001;&#x4E09;&#x7EA7;&#x9875;&#x9762;&#x8FDB;&#x884C;&#x6293;&#x53D6;&#x3002;&#x800C;&#x8981;&#x5B9E;&#x73B0;&#x5206;&#x5E03;&#x5F0F;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x5728;&#x8FD9;&#x4E2A;starts_urls&#x91CC;&#x9762;&#x505A;&#x6587;&#x7AE0;&#x5C31;&#x884C;&#x4E86;&#x3002;&#x8FDB;&#x4E00;&#x6B65;&#x63CF;&#x8FF0;&#x5982;&#x4E0B;&#xFF1A; master &#x4EA7;&#x751F; starts_urls&#xFF0C;url &#x4F1A;&#x88AB;&#x5C01;&#x88C5;&#x6210; request &#x653E;&#x5230; redis &#x4E2D;&#x7684; spider:requests&#xFF0C;&#x603B;&#x7684; scheduler &#x4F1A;&#x4ECE;&#x8FD9;&#x91CC;&#x5206;&#x914D; request&#xFF0C;&#x5F53;&#x8FD9;&#x91CC;&#x7684; request &#x5206;&#x914D;&#x5B8C;&#x540E;&#xFF0C;&#x4F1A;&#x7EE7;&#x7EED;&#x5206;&#x914D; start_urls &#x91CC;&#x7684; url&#x3002; slave &#x4ECE; master &#x7684; redis &#x4E2D;&#x53D6;&#x51FA;&#x5F85;&#x6293;&#x53D6;&#x7684; request&#xFF0C;&#x4E0B;&#x8F7D;&#x5B8C;&#x7F51;&#x9875;&#x4E4B;&#x540E;&#x5C31;&#x628A;&#x7F51;&#x9875;&#x7684;&#x5185;&#x5BB9;&#x53D1;&#x9001;&#x56DE; master &#x7684; redis&#xFF0C;key &#x662F; spider:items&#x3002;scrapy &#x53EF;&#x4EE5;&#x901A;&#x8FC7; settings &#x6765;&#x8BA9; spider &#x722C;&#x53D6;&#x7ED3;&#x675F;&#x4E4B;&#x540E;&#x4E0D;&#x81EA;&#x52A8;&#x5173;&#x95ED;&#xFF0C;&#x800C;&#x662F;&#x4E0D;&#x65AD;&#x7684;&#x53BB;&#x8BE2;&#x95EE;&#x961F;&#x5217;&#x91CC;&#x6709;&#x6CA1;&#x6709;&#x65B0;&#x7684; url&#xFF0C;&#x5982;&#x679C;&#x6709;&#x65B0;&#x7684; url&#xFF0C;&#x90A3;&#x4E48;&#x7EE7;&#x7EED;&#x83B7;&#x53D6; url &#x5E76;&#x8FDB;&#x884C;&#x722C;&#x53D6;&#xFF0C;&#x6240;&#x4EE5;&#x8FD9;&#x4E00;&#x8FC7;&#x7A0B;&#x5C06;&#x4E0D;&#x65AD;&#x5FAA;&#x73AF;&#x3002; master &#x91CC;&#x7684; reids &#x8FD8;&#x6709;&#x4E00;&#x4E2A; key &#x662F; &#x201C;spider:dupefilter&#x201D; &#x7528;&#x6765;&#x5B58;&#x50A8;&#x6293;&#x53D6;&#x8FC7;&#x7684; url &#x7684; fingerprint&#xFF08;&#x4F7F;&#x7528;&#x54C8;&#x5E0C;&#x51FD;&#x6570;&#x5C06;url&#x8FD0;&#x7B97;&#x540E;&#x7684;&#x7ED3;&#x679C;&#xFF09;&#xFF0C;&#x9632;&#x6B62;&#x91CD;&#x590D;&#x6293;&#x53D6;&#xFF0C;&#x53EA;&#x8981; redis &#x4E0D;&#x6E05;&#x7A7A;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x8FDB;&#x884C;&#x65AD;&#x70B9;&#x7EED;&#x722C;&#x3002; &#x5BF9;&#x4E8E;&#x5DF2;&#x6709;&#x7684; scrapy &#x7A0B;&#x5E8F;&#xFF0C;&#x5BF9;&#x5176;&#x6269;&#x5C55;&#x6210;&#x5206;&#x5E03;&#x5F0F;&#x7A0B;&#x5E8F;&#x8FD8;&#x662F;&#x6BD4;&#x8F83;&#x5BB9;&#x6613;&#x7684;&#x3002;&#x603B;&#x7684;&#x6765;&#x8BF4;&#x5C31;&#x662F;&#x4EE5;&#x4E0B;&#x51E0;&#x6B65;&#xFF1A; &#x627E;&#x4E00;&#x53F0;&#x9AD8;&#x6027;&#x80FD;&#x670D;&#x52A1;&#x5668;&#xFF0C;&#x7528;&#x4E8E; redis &#x961F;&#x5217;&#x7684;&#x7EF4;&#x62A4;&#x4EE5;&#x53CA;&#x6570;&#x636E;&#x7684;&#x5B58;&#x50A8;&#x3002; &#x6269;&#x5C55; scrapy &#x7A0B;&#x5E8F;&#xFF0C;&#x8BA9;&#x5176;&#x901A;&#x8FC7;&#x670D;&#x52A1;&#x5668;&#x7684; redis &#x6765;&#x83B7;&#x53D6; start_urls&#xFF0C;&#x5E76;&#x6539;&#x5199; pipeline &#x91CC;&#x6570;&#x636E;&#x5B58;&#x50A8;&#x90E8;&#x5206;&#xFF0C;&#x628A;&#x5B58;&#x50A8;&#x5730;&#x5740;&#x6539;&#x4E3A;&#x670D;&#x52A1;&#x5668;&#x5730;&#x5740;&#x3002; &#x5728;&#x670D;&#x52A1;&#x5668;&#x4E0A;&#x5199;&#x4E00;&#x4E9B;&#x751F;&#x6210;url&#x7684;&#x811A;&#x672C;&#xFF0C;&#x5E76;&#x5B9A;&#x671F;&#x6267;&#x884C;&#x3002; &#x5173;&#x4E8E; scheduler &#x5230;&#x5E95;&#x662F;&#x600E;&#x4E48;&#x8FDB;&#x884C;&#x8C03;&#x5EA6;&#x7684;&#xFF0C;&#x9700;&#x8981;&#x770B;&#x6E90;&#x7801;&#x8FDB;&#x884C;&#x5206;&#x6790;&#x3002; &#x6E90;&#x7801;&#x5206;&#x6790;&#x53EF;&#x80FD;&#x4E0A;&#x9762;&#x7684;&#x63CF;&#x8FF0;&#x8FD8;&#x662F;&#x4E0D;&#x591F;&#x6E05;&#x695A;&#xFF0C;&#x5E72;&#x8106;&#x770B;&#x4E00;&#x4E0B;&#x6E90;&#x7801;&#x5427;&#xFF0C;scrapy-redis &#x4E3B;&#x8981;&#x8981;&#x4E00;&#x4E0B;&#x51E0;&#x4E2A;&#x6587;&#x4EF6;&#x3002; &#x96F6;&#x4EF6;&#x5206;&#x6790; connection.py&#x6839;&#x636E; settings &#x91CC;&#x7684;&#x914D;&#x7F6E;&#x5B9E;&#x4F8B;&#x5316; redis &#x8FDE;&#x63A5;&#xFF0C;&#x88AB; dupefilter &#x548C; scheduler &#x8C03;&#x7528;&#x3002; dupefilter.py&#x5BF9; request &#x8FDB;&#x884C;&#x53BB;&#x91CD;&#xFF0C;&#x4F7F;&#x7528;&#x4E86; redis &#x7684; set&#x3002; queue.py&#x4E09;&#x79CD; queue, SpiderQueue&#xFF08;FIFO), SpiderPriorityQueue&#xFF0C;&#x4EE5;&#x53CA; SpiderStack(LIFI)&#x3002;&#x9ED8;&#x8BA4;&#x4F7F;&#x7528;&#x7684;&#x662F;&#x7B2C;&#x4E8C;&#x79CD;&#x3002; pipelines.py&#x5206;&#x5E03;&#x5F0F;&#x5904;&#x7406;&#xFF0C;&#x5C06; item &#x5B58;&#x50A8;&#x5728; redis &#x4E2D;&#x3002; scheduler.py&#x53D6;&#x4EE3; scrapy &#x81EA;&#x5E26;&#x7684; scheduler,&#x5B9E;&#x73B0;&#x5206;&#x5E03;&#x5F0F;&#x8C03;&#x5EA6;&#xFF0C;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x6765;&#x81EA; queue&#x3002; spider.py&#x5B9A;&#x4E49; RedisSpider.py, &#x7EE7;&#x627F;&#x4E86; RedisMixin &#x548C; CrawlSpider&#x3002; &#x7531;&#x4E0A;&#x53EF;&#x77E5;&#xFF0C;scrapy-redis &#x5B9E;&#x73B0;&#x7684; &#x722C;&#x866B;&#x5206;&#x5E03;&#x5F0F; &#x548C; item&#x5904;&#x7406;&#x5206;&#x5E03;&#x5F0F; &#x5C31;&#x662F;&#x7531;&#x6A21;&#x5757; scheduler &#x548C;&#x6A21;&#x5757; pipelines &#x5B9E;&#x73B0;&#x3002;&#x4E0A;&#x8FF0;&#x5176;&#x5B83;&#x6A21;&#x5757;&#x4F5C;&#x4E3A;&#x4E3A;&#x4E8C;&#x8005;&#x8F85;&#x52A9;&#x7684;&#x529F;&#x80FD;&#x6A21;&#x5757;&#x3002; &#x8C03;&#x5EA6;&#x8FC7;&#x7A0B;&#x521D;&#x59CB;&#x5316;spider &#x88AB;&#x521D;&#x59CB;&#x5316;&#x65F6;&#xFF0C;&#x540C;&#x65F6;&#x4F1A;&#x521D;&#x59CB;&#x5316;&#x4E00;&#x4E2A;&#x5BF9;&#x5E94;&#x7684; scheduler &#x5BF9;&#x8C61;&#xFF0C;&#x8FD9;&#x4E2A;&#x8C03;&#x5EA6;&#x5668;&#x5BF9;&#x8C61;&#x901A;&#x8FC7;&#x8BFB;&#x53D6; settings&#xFF0C;&#x914D;&#x7F6E;&#x597D;&#x81EA;&#x5DF1;&#x7684;&#x8C03;&#x5EA6;&#x5BB9;&#x5668; queue &#x548C;&#x5224;&#x91CD;&#x5DE5;&#x5177;dupefilter&#x3002; &#x5224;&#x91CD; &amp; &#x8FDB;&#x5165;&#x8C03;&#x5EA6;&#x6C60;&#x6BCF;&#x5F53;&#x4E00;&#x4E2A; spider &#x4EA7;&#x51FA;&#x4E00;&#x4E2A; request &#x7684;&#x65F6;&#x5019;&#xFF0C;scrapy &#x5185;&#x6838;&#x4F1A;&#x628A;&#x8FD9;&#x4E2A; request &#x9012;&#x4EA4;&#x7ED9;&#x8FD9;&#x4E2A; spider &#x5BF9;&#x5E94;&#x7684; scheduler &#x5BF9;&#x8C61;&#x8FDB;&#x884C;&#x8C03;&#x5EA6;&#xFF0C;scheduler &#x5BF9;&#x8C61;&#x901A;&#x8FC7;&#x8BBF;&#x95EE; redis &#x5BF9; request &#x8FDB;&#x884C;&#x5224;&#x91CD;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x91CD;&#x590D;&#x5C31;&#x628A;&#x4ED6;&#x6DFB;&#x52A0;&#x8FDB; redis &#x4E2D;&#x7684;&#x8C03;&#x5EA6;&#x6C60;&#x3002; &#x8C03;&#x5EA6;&#x5F53;&#x8C03;&#x5EA6;&#x6761;&#x4EF6;&#x6EE1;&#x8DB3;&#x65F6;&#xFF0C;scheduler &#x5BF9;&#x8C61;&#x5C31;&#x4ECE; redis &#x7684;&#x8C03;&#x5EA6;&#x6C60;&#x4E2D;&#x53D6;&#x51FA;&#x4E00;&#x4E2A; request &#x53D1;&#x9001;&#x7ED9;spider&#xFF0C;&#x8BA9; spider &#x722C;&#x53D6;&#xFF0C;&#x82E5;&#x722C;&#x53D6;&#x8FC7;&#x7A0B;&#x4E2D;&#x8FD4;&#x56DE;&#x66F4;&#x591A;&#x7684;url&#xFF0C;&#x90A3;&#x4E48;&#x7EE7;&#x7EED;&#x8FDB;&#x884C;&#x76F4;&#x81F3;&#x6240;&#x6709;&#x7684; request &#x5B8C;&#x6210;&#x3002;&#x5728;&#x8FD9;&#x4E2A;&#x8FC7;&#x7A0B;&#x4E2D;&#x901A;&#x8FC7; connect signals.spider_idle &#x4FE1;&#x53F7;&#x5BF9; crawler &#x72B6;&#x6001;&#x7684;&#x76D1;&#x89C6;&#xFF0C;scheduler &#x5BF9;&#x8C61;&#x53D1;&#x73B0; &#x8FD9;&#x4E2A; spider &#x722C;&#x53D6;&#x4E86;&#x6240;&#x6709;&#x6682;&#x65F6;&#x53EF;&#x7528; url&#xFF0C;&#x5BF9;&#x5E94;&#x7684; redis &#x7684;&#x8C03;&#x5EA6;&#x6C60;&#x7A7A;&#x4E86;&#xFF0C;&#x4E8E;&#x662F;&#x89E6;&#x53D1;&#x4FE1;&#x53F7; spider_idle&#xFF0C;spider&#x6536;&#x5230;&#x8FD9;&#x4E2A;&#x4FE1;&#x53F7;&#x4E4B;&#x540E;&#xFF0C;&#x76F4;&#x63A5;&#x8FDE;&#x63A5; redis &#x8BFB;&#x53D6; strart_url&#x6C60;&#xFF0C;&#x62FF;&#x53BB;&#x65B0;&#x7684;&#x4E00;&#x6279; url&#xFF0C;&#x8FD4;&#x56DE;&#x65B0;&#x7684; make_requests_from_url(url) &#x7ED9;&#x5F15;&#x64CE;&#xFF0C;&#x8FDB;&#x800C;&#x4EA4;&#x7ED9;&#x8C03;&#x5EA6;&#x5668;&#x8C03;&#x5EA6;&#x3002; &#x719F;&#x6089;&#x4E86;&#x539F;&#x7406;&#x5176;&#x5B9E;&#x53EF;&#x4EE5;&#x81EA;&#x5DF1;&#x6765;&#x5199; scheduler&#xFF0C;&#x81EA;&#x5DF1;&#x5B9A;&#x4E49;&#x8C03;&#x5EA6;&#x4F18;&#x5148;&#x7EA7;&#x548C;&#x987A;&#x5E8F;&#xFF0C;&#x1F447; Redis &#x914D;&#x7F6E;&#x4E0B;&#x8F7D; Rediswget http://download.redis.io/releases/redis-3.2.1.tar.gz &#x4E0B;&#x8F7D; scrapy-redispip install scrapy-redis &#x5B89;&#x88C5; Redismake make test &#x4FEE;&#x6539;&#x914D;&#x7F6E;&#x6587;&#x4EF6;&#x5B89;&#x88C5;&#x5B8C;&#x6210;&#x540E;&#xFF0C;redis &#x9ED8;&#x8BA4;&#x662F;&#x4E0D;&#x80FD;&#x88AB;&#x8FDC;&#x7A0B;&#x8FDE;&#x63A5;&#x7684;&#xFF0C;&#x6B64;&#x65F6;&#x8981;&#x4FEE;&#x6539;&#x914D;&#x7F6E;&#x6587;&#x4EF6; redis.conf&#xFF0C;&#x4FEE;&#x6539;&#x540E;&#xFF0C;&#x91CD;&#x542F; redis &#x670D;&#x52A1;&#x5668; #bind 127.0.0.1 bind 0.0.0.0 &#x4EFB;&#x610F;&#x76EE;&#x5F55;&#x4E0B;&#x8FD0;&#x884C;sudo cp redis.conf /etc/ &#x53EF;&#x80FD;&#x9519;&#x8BEF;&#x5982;&#x679C;&#x56E0;&#x4E3A; gcc &#x800C;&#x4E0D;&#x80FD; make sudo apt-get build-dep gcc &#x5982;&#x679C;&#x9047;&#x5230;&#x8FD9;&#x4E2A;&#xFF0C; make[1]: Entering directory `/opt/redis-2.6.14/src&apos; CC adlist.o In file included from adlist.c:34: zmalloc.h:50:31: error: jemalloc/jemalloc.h: No such file or directory zmalloc.h:55:2: error: #error &quot;Newer version of jemalloc required&quot; make[1]: *** [adlist.o] Error 1 make[1]: Leaving directory `/opt/redis-2.6.14/src&apos; make: *** [all] Error 2 &#x53EF;&#x4EE5;&#x770B;&#x8FD9;&#x91CC; &#x7528;&#x8FD9;&#x4E2A;&#x547D;&#x4EE4; make MALLOC=libc &#x5982;&#x679C;&#x9047;&#x5230;&#x8FD9;&#x4E2A; You need tcl 8.5 or newer in order to run the Redis test &#x5B89;&#x88C5; tcl sudo apt-get install tcl (redis &#x66F4;&#x591A;&#x5B89;&#x88C5;&#x914D;&#x7F6E;)[https://testerhome.com/topics/3887] Redis &#x5E38;&#x7528;&#x547D;&#x4EE4;&#x8FD0;&#x884C; Redisredis-server redis.conf &#x8FDB;&#x5165;&#x547D;&#x4EE4;&#x884C;&#x6A21;&#x5F0F;redis-cli &#x6E05;&#x7A7A;&#x7F13;&#x5B58;flushdb &#x67E5;&#x770B;&#x6240;&#x6709; key 127.0.0.1:6379&gt; keys * 1) &quot;dmoz:items&quot; 2) &quot;dmoz:requests&quot; 3) &quot;dmoz:dupefilter&quot; &#x67E5;&#x770B; list (item) 127.0.0.1:6379&gt; LRANGE dmoz:items 0 3 1) &quot;{\\&quot;spider\\&quot;: \\&quot;dmoz\\&quot;, \\&quot;crawled\\&quot;: \\&quot;2016-07-12 11:18:35\\&quot;, \\&quot;link\\&quot;: \\&quot;http://feeds.abcnews.com/abcnews/topstories\\&quot;, \\&quot;name\\&quot;: \\&quot;ABC News: Top Stories \\&quot;, \\&quot;description\\&quot;: \\&quot;Collection of news headlines.\\&quot;}&quot; 2) &quot;{\\&quot;spider\\&quot;: \\&quot;dmoz\\&quot;, \\&quot;crawled\\&quot;: \\&quot;2016-07-12 11:18:35\\&quot;, \\&quot;link\\&quot;: \\&quot;http://abcnews.go.com/\\&quot;, \\&quot;name\\&quot;: \\&quot;ABCNews.com \\&quot;, \\&quot;description\\&quot;: \\&quot;Includes American and world news headlines, articles, chatrooms, message boards, news alerts, video and audio webcasts, shopping, and wireless news service. As well as ABC television show information and content.\\&quot;}&quot; 3) &quot;{\\&quot;spider\\&quot;: \\&quot;dmoz\\&quot;, \\&quot;crawled\\&quot;: \\&quot;2016-07-12 11:18:35\\&quot;, \\&quot;link\\&quot;: \\&quot;http://www.alarabiya.net/\\&quot;, \\&quot;name\\&quot;: \\&quot;Al Arabiya News Channel \\&quot;, \\&quot;description\\&quot;: \\&quot;Arabic-language news network. Breaking news and features along with videos, photo galleries and In-Focus sections on major news topics. (Arabic, English, Persian, Urdu)\\&quot;}&quot; 4) &quot;{\\&quot;spider\\&quot;: \\&quot;dmoz\\&quot;, \\&quot;crawled\\&quot;: \\&quot;2016-07-12 11:18:35\\&quot;, \\&quot;link\\&quot;: \\&quot;http://www.aljazeera.com/\\&quot;, \\&quot;name\\&quot;: \\&quot;Aljazeera \\&quot;, \\&quot;description\\&quot;: \\&quot;English version of the Arabic-language news network. Breaking news and features plus background material including profiles and global reactions.\\&quot;}&quot; &#x67E5;&#x770B; set (dupefilter) 127.0.0.1:6379&gt; SMEMBERS dmoz:dupefilter 1) &quot;28bf6cfa1409d6d2ad2852663a3751ae077a0b01&quot; 2) &quot;6af16713d5d423a2e91c87085f277a810c690cfa&quot; 3) &quot;c0ccfd767892b2bbb533a52c7cde55543aa4605b&quot; 4) &quot;0ca88e614179c791f258d89a820449c91940c4d4&quot; 5) &quot;546577e3457c55057c56985b71e6a142fe5a64e9&quot; 6) &quot;d2af0f8cf72e394dc46a720ee620fd7cdb0b6ad6&quot; 7) &quot;e0c1ab903b2a95f05bc8f5a5036b2f6f0b3fcbd0&quot; 8) &quot;bf1290602aa0fd2deb7f8b582f855535ca151990&quot; 9) &quot;c59f100b08e424352e6e368ff94d797c35fc5a4b&quot; 10) &quot;5acf897c445b3dbba5b371f811b74e26c52cd5c6&quot; &#x67E5;&#x770B; sorted set (requests) 127.0.0.1:6379&gt; ZRANGE dmoz:requests 0 3 1) &quot;\\x80\\x02}q\\x01(U\\x04bodyq\\x02U\\x00U\\t_encodingq\\x03U\\x05utf-8q\\x04U\\acookiesq\\x05}q\\x06U\\x04metaq\\a}q\\b(U\\x05depthq\\tK\\x01U\\tlink_textq\\nclxml.etree\\n_ElementStringResult\\nq\\x0bU\\tInvestingq\\x0c\\x85\\x81q\\r}q\\x0e(U\\a_parentq\\x0fNU\\x0cis_attributeq\\x10\\x89U\\battrnameq\\x11NU\\ais_textq\\x12\\x89U\\ais_tailq\\x13\\x89ubU\\x04ruleq\\x14K\\x00uU\\aheadersq\\x15}q\\x16U\\aRefererq\\x17]q\\x18U\\x14http://www.dmoz.org/q\\x19asU\\x03urlq\\x1aX&apos;\\x00\\x00\\x00http://www.dmoz.org/Business/Investing/U\\x0bdont_filterq\\x1b\\x89U\\bpriorityq\\x1cK\\x00U\\bcallbackq\\x1dU\\x14_response_downloadedq\\x1eU\\x06methodq\\x1fU\\x03GETq U\\aerrbackq!Nu.&quot; 2) &quot;\\x80\\x02}q\\x01(U\\x04bodyq\\x02U\\x00U\\t_encodingq\\x03U\\x05utf-8q\\x04U\\acookiesq\\x05}q\\x06U\\x04metaq\\a}q\\b(U\\x05depthq\\tK\\x01U\\tlink_textq\\nclxml.etree\\n_ElementStringResult\\nq\\x0bU\\tLibrariesq\\x0c\\x85\\x81q\\r}q\\x0e(U\\a_parentq\\x0fNU\\x0cis_attributeq\\x10\\x89U\\battrnameq\\x11NU\\ais_textq\\x12\\x89U\\ais_tailq\\x13\\x89ubU\\x04ruleq\\x14K\\x00uU\\aheadersq\\x15}q\\x16U\\aRefererq\\x17]q\\x18U\\x14http://www.dmoz.org/q\\x19asU\\x03urlq\\x1aX(\\x00\\x00\\x00http://www.dmoz.org/Reference/Libraries/U\\x0bdont_filterq\\x1b\\x89U\\bpriorityq\\x1cK\\x00U\\bcallbackq\\x1dU\\x14_response_downloadedq\\x1eU\\x06methodq\\x1fU\\x03GETq U\\aerrbackq!Nu.&quot; 3) &quot;\\x80\\x02}q\\x01(U\\x04bodyq\\x02U\\x00U\\t_encodingq\\x03U\\x05utf-8q\\x04U\\acookiesq\\x05}q\\x06U\\x04metaq\\a}q\\b(U\\x05depthq\\tK\\x01U\\tlink_textq\\nclxml.etree\\n_ElementStringResult\\nq\\x0bU\\tTeen Lifeq\\x0c\\x85\\x81q\\r}q\\x0e(U\\a_parentq\\x0fNU\\x0cis_attributeq\\x10\\x89U\\battrnameq\\x11NU\\ais_textq\\x12\\x89U\\ais_tailq\\x13\\x89ubU\\x04ruleq\\x14K\\x00uU\\aheadersq\\x15}q\\x16U\\aRefererq\\x17]q\\x18U\\x14http://www.dmoz.org/q\\x19asU\\x03urlq\\x1aX-\\x00\\x00\\x00http://www.dmoz.org/Kids_and_Teens/Teen_Life/U\\x0bdont_filterq\\x1b\\x89U\\bpriorityq\\x1cK\\x00U\\bcallbackq\\x1dU\\x14_response_downloadedq\\x1eU\\x06methodq\\x1fU\\x03GETq U\\aerrbackq!Nu.&quot; 4) &quot;\\x80\\x02}q\\x01(U\\x04bodyq\\x02U\\x00U\\t_encodingq\\x03U\\x05utf-8q\\x04U\\acookiesq\\x05}q\\x06U\\x04metaq\\a}q\\b(U\\x05depthq\\tK\\x01U\\tlink_textq\\nclxml.etree\\n_ElementStringResult\\nq\\x0bU\\nBasketballq\\x0c\\x85\\x81q\\r}q\\x0e(U\\a_parentq\\x0fNU\\x0cis_attributeq\\x10\\x89U\\battrnameq\\x11NU\\ais_textq\\x12\\x89U\\ais_tailq\\x13\\x89ubU\\x04ruleq\\x14K\\x00uU\\aheadersq\\x15}q\\x16U\\aRefererq\\x17]q\\x18U\\x14http://www.dmoz.org/q\\x19asU\\x03urlq\\x1aX&amp;\\x00\\x00\\x00http://www.dmoz.org/Sports/Basketball/U\\x0bdont_filterq\\x1b\\x89U\\bpriorityq\\x1cK\\x00U\\bcallbackq\\x1dU\\x14_response_downloadedq\\x1eU\\x06methodq\\x1fU\\x03GETq U\\aerrbackq!Nu.&quot; &#x67E5;&#x770B; list (items) &#x957F;&#x5EA6;127.0.0.1:6379&gt; LLEN Search:items(integer) 376 &#x67E5;&#x770B; sorted set (requests) &#x957F;&#x5EA6;127.0.0.1:6379&gt; ZCARD Search:requests(integer) 1 &#x67E5;&#x770B; set (dupefilter) &#x957F;&#x5EA6;127.0.0.1:6379&gt; SCARD Search:dupefilter(integer) 1 Redis &#x6559;&#x7A0B; scrapy_redis &#x914D;&#x7F6E;&#x4ECE; github &#x4E0A; &#x4E0B;&#x8F7D; example&#xFF0C;&#x4FEE;&#x6539;&#x76F8;&#x5E94;&#x6587;&#x4EF6;&#xFF0C;items.py, settings.py, process_items.py &#x7B49;&#x3002;&#x6700;&#x91CD;&#x8981;&#x7684;&#x662F;&#x6539; settings.py &#x901A;&#x7528;&#x914D;&#x7F6E; SCHEDULER = &quot;scrapy_redis.scheduler.Scheduler&quot; DUPEFILTER_CLASS = &quot;scrapy_redis.dupefilter.RFPDupeFilter&quot; SCHEDULER_QUEUE_CLASS = &quot;scrapy_redis.queue.SpiderPriorityQueue&quot; SCHEDULER_PERSIST = True # ITEM_PIPELINES ITEM_PIPELINES = { &apos;scrapy_redis.pipelines.RedisPipeline&apos;: 400, } master &#x914D;&#x7F6E;settings.py &#x4E2D;&#x6DFB;&#x52A0; # redis REDIS_HOST = &apos;127.0.0.1&apos; REDIS_PORT = 6379 slave &#x914D;&#x7F6E;settings.py &#x4E2D;&#x6DFB;&#x52A0; # redis REDIS_URL = &apos;redis://host_ip:6379&apos; spider &#x6539;&#x5199;&#x5BFC;&#x5165;&#x6A21;&#x5757; from scrapy_redis.spiders import RedisSpider &#x7EE7;&#x627F; RedisSpider&#xFF0C;&#x5E76;&#x4ECE; Redis &#x8BFB;&#x53D6; url class Search(RedisCrawlSpider): name = &quot;Search&quot; redis_key = &apos;Search:start_urls&apos; &#x8FD0;&#x884C;&#x722C;&#x866B;&#x5728; master &#x4E0A;&#x542F;&#x52A8; Redis redis-server &#x542F;&#x52A8; spider&#xFF0C;&#x4EFB;&#x610F;&#x987A;&#x5E8F; scrapy crawl Search &#x53EF;&#x4EE5;&#x770B;&#x5230; schedule &#x4E86;&#x591A;&#x5C11; request $ scrapy crawl Search ... [Search] DEBUG: Resuming crawl (8712 requests scheduled) &#x5BFC;&#x51FA;&#x6570;&#x636E;&#x5199;&#x5230;&#x6570;&#x636E;&#x5E93;&#x91CC;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x5728; process_items.py &#x91CC;&#x6DFB;&#x52A0;&#x4EE3;&#x7801;&#xFF0C;&#x6307;&#x5B9A;&#x6570;&#x636E;&#x5E93; ip&#xFF0C;&#x63D2;&#x5165;&#x540C;&#x4E00;&#x4E2A;&#x6570;&#x636E;&#x5E93;&#x3002;&#x8FD9;&#x91CC;&#x6211;&#x4EEC;&#x7684;&#x6570;&#x636E;&#x4E0D;&#x7528;&#x5BFC;&#x51FA;&#x5230; mongodb &#x7B49;&#x6570;&#x636E;&#x5E93;&#xFF0C;&#x53EA;&#x7528;&#x628A;&#x5B83;&#x8F6C;&#x5316;&#x4E3A;&#x6587;&#x672C;&#x6587;&#x4EF6;&#x5373;&#x53EF;&#x3002; redis-dump&#x5B89;&#x88C5; redis-dump gem install redis-dump &#x5BFC;&#x51FA; redis-dump -u 127.0.0.1:6379 &gt; db.json &#x6CE8;&#x610F;&#x7684;&#x662F;&#xFF0C;&#x5B83;&#x5BFC;&#x51FA;&#x7684;&#x662F;&#x6570;&#x636E;&#x5E93;&#x91CC;&#x6240;&#x6709;&#x7684; key-value&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x4E4B;&#x540E;&#x5904;&#x7406; items &#x7684;&#x65F6;&#x5019;&#x53EF;&#x80FD;&#x4F1A;&#x6709;&#x95EE;&#x9898;&#xFF0C;item list &#x592A;&#x5927;&#x8BFB;&#x53D6;&#x9020;&#x6210; memory error&#x3002; python &#x8FDE;&#x63A5; redis&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x5BFC;&#x5165;&#x6A21;&#x5757;&#xFF0C;&#x8FDE;&#x63A5;&#x6570;&#x636E;&#x5E93;&#xFF0C;&#x5176;&#x4ED6;&#x57FA;&#x672C;&#x6309;&#x7167; redis &#x547D;&#x4EE4;&#x6765;&#x3002; import redis r = redis.Redis(host=&apos;106.75.136.128&apos;, port=6379) &#x5982; for i in range(0, r.llen(&apos;Search:items&apos;), 100): items = r.lrange(&apos;Search:items&apos;, start=0, end=100) &#x7136;&#x540E;&#x628A;&#x6587;&#x4EF6;&#x5199;&#x5230;&#x6587;&#x4EF6;&#x91CC;&#x3002; &#x76D1;&#x63A7;&#x5206;&#x5E03;&#x5F0F;&#x7CFB;&#x7EDF;&#x8FD8;&#x6709;&#x4E00;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x600E;&#x4E48;&#x76D1;&#x63A7; slave&#xFF0C;&#x77E5;&#x9053;&#x54EA;&#x53F0;&#x673A;&#x5668;&#x574F;&#x4E86;&#xFF0C;&#x53EF;&#x4EE5;&#x5199;&#x4E2A; socket &#x5411; master &#x62A5;&#x544A;&#xFF0C;&#x6216;&#x8005;&#x7528; email &#x544A;&#x8B66;&#x3002; &#x5176;&#x4ED6;&#x6BCF;&#x6B21;&#x6267;&#x884C;&#x91CD;&#x65B0;&#x722C;&#x53D6;&#xFF0C;&#x5E94;&#x8BE5;&#x5C06;redis&#x4E2D;&#x5B58;&#x50A8;&#x7684;&#x6570;&#x636E;&#x6E05;&#x7A7A;&#xFF0C;&#x5426;&#x5219;&#x5F71;&#x54CD;&#x722C;&#x53D6;&#x73B0;&#x8C61;&#x3002; &#x53E6;&#x5916;&#xFF0C;request &#x548C; url &#x662F;&#x4E0D;&#x540C;&#x7684;&#xFF0C;&#x524D;&#x8005;&#x662F;&#x7531;&#x540E;&#x8005;&#x7ECF;&#x7531;&#x51FD;&#x6570;make_request_from_url&#x5B9E;&#x73B0;&#xFF0C;&#x5E76;&#x4E14;&#x8FD9;&#x4E2A;&#x8FC7;&#x7A0B;&#x7531;spider&#x5B8C;&#x6210;&#x3002;spider&#x4F1A;&#x8FD4;&#x56DE;&#xFF08;return&#x3001;yield&#xFF09;request&#x7ED9;scrapy&#x5F15;&#x64CE;&#x8FDB;&#x800C;&#x4EA4;&#x5272;&#x8C03;&#x5EA6;&#x5668;&#x3002;url&#x4E5F;&#x662F;&#x5728;spider&#x4E2D;&#x5B9A;&#x4E49;&#x6216;&#x7531;spider&#x83B7;&#x53D6;&#x7684;&#x3002; &#x53C2;&#x8003;&#x94FE;&#x63A5;:&#x4F7F;&#x7528;scrapy,redis,mongodb&#x5B9E;&#x73B0;&#x7684;&#x4E00;&#x4E2A;&#x5206;&#x5E03;&#x5F0F;&#x7F51;&#x7EDC;&#x722C;&#x866B;scrapy-redis&#x5B9E;&#x73B0;&#x722C;&#x866B;&#x5206;&#x5E03;&#x5F0F;&#x722C;&#x53D6;&#x5206;&#x6790;&#x4E0E;&#x5B9E;&#x73B0;&#x5B9A;&#x5411;&#x722C;&#x866B;&#xFF1A;Scrapy &#x4E0E; Redis &#x5165;&#x95E8;Scrapy&#x7B14;&#x8BB0;&#xFF08;7&#xFF09;- &#x5185;&#x7F6E;&#x670D;&#x52A1;&#x57FA;&#x4E8E;Redis&#x7684;&#x4E09;&#x79CD;&#x5206;&#x5E03;&#x5F0F;&#x722C;&#x866B;&#x7B56;&#x7565;&#x57FA;&#x4E8E;Python,scrapy,redis&#x7684;&#x5206;&#x5E03;&#x5F0F;&#x722C;&#x866B;&#x5B9E;&#x73B0;&#x6846;&#x67B6;scrapy-redis&#x6E90;&#x7801;&#x5206;&#x6790;Scrapy Redis&#x6E90;&#x7801; spider&#x5206;&#x6790;","tags":"crawler"},{"title":"讲座笔记 -- 腾讯应用宝","url":"/2016/06/15/讲座笔记 -- 腾讯应用宝/","text":"&#x5353;&#x5C45;&#x8D85;&#xFF0C;2013&#x5E74;&#x52A0;&#x5165;&#x817E;&#x8BAF;&#x5185;&#x90E8;&#x641C;&#x7D22;&#x90E8;&#x95E8;&#xFF0C;&#x73B0;&#x8D1F;&#x8D23;&#x817E;&#x8BAF;&#x5E94;&#x7528;&#x5B9D;&#x641C;&#x7D22;&#x9879;&#x76EE;&#x3002;&#x8FD1;&#x5E74;&#x6765;&#x4ECE;&#x4E8B;&#x7684;&#x79D1;&#x7814;&#x5DE5;&#x4F5C;&#x96C6;&#x4E2D;&#x5728;&#x5782;&#x76F4;&#x9886;&#x57DF;&#x7684;&#x641C;&#x7D22;&#x3001;&#x63A8;&#x8350;&#x6280;&#x672F;&#x7814;&#x7A76;&#x3002;2015&#x5E74;&#x4EE3;&#x8868;&#x817E;&#x8BAF;&#x516C;&#x53F8;&#x5728; WSDM &#x4F1A;&#x8BAE;&#x4E0A;&#x505A;&#x9898;&#x4E3A; &#x201C;Semantic Matching in APP Search&#x201D; &#x7684;&#x4E3B;&#x9898;&#x62A5;&#x544A;&#xFF0C;&#x4ECB;&#x7ECD;&#x817E;&#x8BAF;&#x5E94;&#x7528;&#x5B9D;&#x8BED;&#x4E49;&#x641C;&#x7D22;&#x7684;&#x6280;&#x672F;&#x5B9E;&#x73B0;&#x3002;&#x4ECA;&#x5929;&#x4ED6;&#x5728;&#x516C;&#x53F8;&#x505A;&#x4E86;&#x4E00;&#x573A;&#x5173;&#x4E8E;&#x817E;&#x8BAF;&#x5E94;&#x7528;&#x5B9D;&#x7684;&#x5206;&#x4EAB;&#xFF0C;&#x8FD9;&#x662F;&#x4E00;&#x7BC7;&#x8BB2;&#x5EA7;&#x7B14;&#x8BB0;&#x3002; &#x5E94;&#x7528;&#x5B9D; &#x2013; &#x817E;&#x8BAF;&#x7684;&#x5B89;&#x5353;&#x5E94;&#x7528;&#x5E02;&#x573A; &#x641C;&#x7D22;&#x662F;&#x91CD;&#x8981;&#x5165;&#x53E3;&#xFF08;&#x65B0;&#x5E94;&#x7528;&#x7684;&#x5206;&#x53D1;&#xFF09; app &#x5FEB;&#x901F;&#x7684;&#x589E;&#x957F; &#x4E00;&#x5E74;&#x589E;&#x957F;&#x51E0;&#x767E;&#x4E07; &#x4E8C;&#x516B;&#x539F;&#x5219; &#x957F;&#x5C3E;&#x5927; 0.1%&#x7684;&#x5E94;&#x7528; 80%&#x7684;&#x5206;&#x53D1; &#x6307;&#x6807; Downloads QV UV CTR (Click-Through-Rate) ROP (Rate-Of-Penetration) CTR(Click-Through-Rate): &#x7F51;&#x7EDC;&#x5E7F;&#x544A;&#xFF08;&#x56FE;&#x7247;&#x5E7F;&#x544A;/&#x6587;&#x5B57;&#x5E7F;&#x544A;/&#x5173;&#x952E;&#x8BCD;&#x5E7F;&#x544A;/&#x6392;&#x540D;&#x5E7F;&#x544A;/&#x89C6;&#x9891;&#x5E7F;&#x544A;&#x7B49;&#xFF09;&#x7684;&#x70B9;&#x51FB;&#x5230;&#x8FBE;&#x7387;&#xFF0C;&#x5373;&#x8BE5;&#x5E7F;&#x544A;&#x7684;&#x70B9;&#x51FB;&#x91CF;&#xFF08;&#x4E25;&#x683C;&#x7684;&#x6765;&#x8BF4;&#xFF0C;&#x53EF;&#x4EE5;&#x662F;&#x5230;&#x8FBE;&#x76EE;&#x6807;&#x9875;&#x9762;&#x7684;&#x6570;&#x91CF;&#xFF09;&#x9664;&#x4EE5;&#x5E7F;&#x544A;&#x7684;&#x6D4F;&#x89C8;&#x91CF;&#xFF08;PV- Page View&#xFF09;&#x3002; &#x8BED;&#x4E49;&#x8BA1;&#x7B97;&#x7B56;&#x7565;&#x6570;&#x636E;&#x7279;&#x5F81; &#x6570;&#x636E;&#x91CF;&#x5C11; &#x5BA1;&#x6838;&#x901A;&#x8FC7;&#x7684;&#x5E94;&#x7528;&#x6570;&#x91CF;&#x53EA;&#x6709;&#x6570;&#x5341;&#x4E07; &#x6587;&#x672C;&#x4FE1;&#x606F;&#x5C11; &#x9644;&#x5E26;&#x6587;&#x672C;&#x4FE1;&#x606F;&#x5C11; &#x8FD9;&#x5C31;&#x610F;&#x5473;&#x7740;&#x80FD;&#x5EFA;&#x7D22;&#x5F15;&#x7684;&#x91CF;&#x5C11; &#x2013;&gt; &#x6240;&#x4EE5;&#x8981;&#x5C06;&#x4FE1;&#x606F;&#x6CDB;&#x5316; &#x5E94;&#x5BF9;&#x7B56;&#x7565;&#x641C;&#x7D22;&#xFF0B;&#x63A8;&#x8350;&#x7528; &#x8BCD;&#x3001;&#x4E3B;&#x9898;&#x3001;&#x6807;&#x7B7E; &#x6765;&#x63CF;&#x8FF0;&#x8BED;&#x4E49; (query &#x2013;&gt; term + topic + tag &#x2013;&gt; app) &#x6570;&#x636E;&#x8865;&#x5145;&#x722C;&#x53D6;&#x5168;&#x7F51;&#x8D44;&#x6E90; &#x6E38;&#x620F;&#x7AD9;&#x70B9;&#x3001;&#x7528;&#x6237;&#x8BC4;&#x4EF7; &#x77E5;&#x8BC6;&#x5E93;&#xFF1A;&#x767E;&#x5EA6;&#x767E;&#x79D1;&#x3001;&#x767E;&#x5EA6;&#x77E5;&#x9053; &#x5176;&#x4ED6;&#x5E94;&#x7528;&#x5546;&#x5E97; &#x641C;&#x7D22;&#x5F15;&#x64CE; &#x89E3;&#x6790; &#x5E94;&#x7528;&#x5B9D;&#x7528;&#x6237;&#x884C;&#x4E3A; &#x5BB9;&#x6613;&#x51FA;&#x73B0;&#x7684;&#x95EE;&#x9898;&#x662F;&#x566A;&#x97F3;&#x4F1A;&#x5F88;&#x5927;&#xFF0C;&#x6240;&#x4EE5;&#x9700;&#x8981;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x7684;&#x65B9;&#x6CD5;&#x8FDB;&#x4E00;&#x6B65;&#x7684;&#x8FC7;&#x6EE4; &#x8FC7;&#x7A0B;&#x5C31;&#x662F; &#x9875;&#x9762;&#x6293;&#x53D6; &#x2013;&gt; &#x5185;&#x5BB9;&#x6293;&#x53D6; &#x2013;&gt; &#x77E5;&#x8BC6;&#x6316;&#x6398; &#x2013;&gt; &#x6807;&#x7B7E; + &#x53E5;&#x6CD5;&#x6A21;&#x677F; + &#x6807;&#x7B7E;&#x96C6;&#x5408; + &#x6807;&#x7B7E;&#x5173;&#x8054; &#x2013;&gt; &#x6807;&#x7B7E;&#x5173;&#x8054;&#x51C0;&#x5316; &#x2013;&gt; &#x6807;&#x7B7E;&#x7D22;&#x5F15; &#x6570;&#x636E;&#x6316;&#x6398;&#x5229;&#x7528;&#x7528;&#x6237;&#x884C;&#x4E3A;&#x6765;&#x6307;&#x5BFC;&#x6392;&#x5E8F; &#x70B9;&#x51FB;&#x4E0B;&#x8F7D;&#x56E0;&#x5B50;&#x3002;&#x8D4B;&#x4E88;&#x5927;&#x7684;&#x6743;&#x91CD;&#xFF08;&#x589E;&#x5F3A;&#x9C81;&#x68D2;&#x6027;&#xFF09; entropy&#x56E0;&#x5B50;&#x3002;entropy&#x53EF;&#x4EE5;&#x8868;&#x793A;&#x7528;&#x6237;query&#x7684;&#x96C6;&#x4E2D;&#x7A0B;&#x5EA6;&#xFF0C;&#xFF0C;&#x70B9;&#x51FB;&#x6563;&#xFF0C;entropy&#x9AD8;&#xFF0C;&#x533A;&#x5206;&#x7CBE;&#x51C6;query&#x548C;&#x6A21;&#x7CCA;query &#x4E3B;&#x9898;&#x6A21;&#x578B;LDA &#x805A;&#x7C7B;&#xFF0C;&#x5BF9; topic &#x8FDB;&#x884C;&#x4EBA;&#x5DE5;&#x6807;&#x6CE8;&#xFF0C;&#x628A; app &#x6620;&#x5C04;&#x5230; topicLDA &#x5728;&#x4E1A;&#x754C;&#x7528;&#x6CD5;&#x6BD4;&#x8F83;&#x591A;&#x3002;&#x7136;&#x800C;&#x5B83;&#x6700;&#x5927;&#x7684;&#x7279;&#x70B9;&#x662F;&#x9700;&#x8981;&#x5927;&#x91CF;&#x7684;&#x8BED;&#x6599;&#xFF0C;&#x8BED;&#x6599;&#x5C11;&#x6548;&#x679C;&#x5C31;&#x4E0D;&#x597D;&#x3002;&#x6240;&#x4EE5;&#x9700;&#x8981;&#x8865;&#x5145;&#x5927;&#x91CF;&#x6587;&#x672C;&#x6570;&#x636E;&#x3002; &#x6807;&#x7B7E;&#x6316;&#x6398; &#x5143;&#x641C;&#x65B9;&#x5F0F;&#x6316;&#x6398; tag &#xFF08;&#x901A;&#x8FC7;&#x641C;app&#xFF09; &#x6839;&#x636E;&#x7528;&#x6237;&#x884C;&#x4E3A;&#x3001;&#x753B;&#x50CF;&#x6316;&#x6398; tag&#x5BF9;&#x7528;&#x6237;&#x8FDB;&#x884C;&#x5206;&#x7FA4; &#x5730;&#x533A;&#xFF0F;&#x5E74;&#x9F84;&#xFF0F;&#x804C;&#x4E1A;&#xFF0F;&#x6027;&#x522B;&#x7B49; &#x751F;&#x6210;&#x4EE3;&#x8868;&#x7528;&#x6237;&#x5C5E;&#x6027;&#x7684;&#x6807;&#x7B7E;&#x7ED9;app &#x5143;&#x641C;&#xFF0C;&#x4E0A;&#x5927;&#x5B66;&#x7684;&#x65F6;&#x5019;&#x8FD8;&#x5B66;&#x8FC7;&#x6765;&#x7740;&#xFF0C;&#x5C45;&#x7136;&#x542C;&#x8BB2;&#x5EA7;&#x7684;&#x65F6;&#x5019;&#x6CA1;&#x60F3;&#x8D77;&#x6765;&#x1F633; &#x5143;&#x641C;&#x7D22;&#x5F15;&#x64CE;&#x53C8;&#x79F0;&#x591A;&#x641C;&#x7D22;&#x5F15;&#x64CE;&#xFF0C;&#x901A;&#x8FC7;&#x4E00;&#x4E2A;&#x7EDF;&#x4E00;&#x7684;&#x7528;&#x6237;&#x754C;&#x9762;&#x5E2E;&#x52A9;&#x7528;&#x6237;&#x5728;&#x591A;&#x4E2A;&#x641C;&#x7D22;&#x5F15;&#x64CE;&#x4E2D;&#x9009;&#x62E9;&#x548C;&#x5229;&#x7528;&#x5408;&#x9002;&#x7684;&#xFF08;&#x751A;&#x81F3;&#x662F;&#x540C;&#x65F6;&#x5229;&#x7528;&#x82E5;&#x5E72;&#x4E2A;&#xFF09;&#x641C;&#x7D22;&#x5F15;&#x64CE;&#x6765;&#x5B9E;&#x73B0;&#x68C0;&#x7D22;&#x64CD;&#x4F5C;&#xFF0C;&#x662F;&#x5BF9;&#x5206;&#x5E03;&#x4E8E;&#x7F51;&#x7EDC;&#x7684;&#x591A;&#x79CD;&#x68C0;&#x7D22;&#x5DE5;&#x5177;&#x7684;&#x5168;&#x5C40;&#x63A7;&#x5236;&#x673A;&#x5236;&#x3002;&#xFF08;&#x641C;&#x7D22;&#x5F15;&#x64CE;&#x5206;&#x7C7B;&#xFF1A;&#x5168;&#x6587;&#x641C;&#x7D22;&#x5F15;&#x64CE;&#x3001;&#x76EE;&#x5F55;&#x7D22;&#x5F15;&#x3001;&#x5143;&#x641C;&#x7D22;&#x5F15;&#x64CE;&#xFF09; &#x6570;&#x636E;&#x6E05;&#x6D17;&#x65B9;&#x6CD5;&#xFF1A;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x6A21;&#x578B;&#x8BA1;&#x7B97; confidence levelhuman editor + web data + qa (lda) user group tags &#x2013;&gt; GBDT mode GBDT(Gradient Boosting Decision Tree) &#x53C8;&#x53EB; MART&#xFF08;Multiple Additive Regression Tree)&#xFF0C;&#x662F;&#x4E00;&#x79CD;&#x8FED;&#x4EE3;&#x7684;&#x51B3;&#x7B56;&#x6811;&#x7B97;&#x6CD5;&#xFF0C;&#x8BE5;&#x7B97;&#x6CD5;&#x7531;&#x591A;&#x68F5;&#x51B3;&#x7B56;&#x6811;&#x7EC4;&#x6210;&#xFF0C;&#x6240;&#x6709;&#x6811;&#x7684;&#x7ED3;&#x8BBA;&#x7D2F;&#x52A0;&#x8D77;&#x6765;&#x505A;&#x6700;&#x7EC8;&#x7B54;&#x6848;&#x3002;&#x5B83;&#x5728;&#x88AB;&#x63D0;&#x51FA;&#x4E4B;&#x521D;&#x5C31;&#x548C;SVM&#x4E00;&#x8D77;&#x88AB;&#x8BA4;&#x4E3A;&#x662F;&#x6CDB;&#x5316;&#x80FD;&#x529B;&#xFF08;generalization)&#x8F83;&#x5F3A;&#x7684;&#x7B97;&#x6CD5;&#x3002;&#x8FD1;&#x4E9B;&#x5E74;&#x66F4;&#x56E0;&#x4E3A;&#x88AB;&#x7528;&#x4E8E;&#x641C;&#x7D22;&#x6392;&#x5E8F;&#x7684;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x6A21;&#x578B;&#x800C;&#x5F15;&#x8D77;&#x5927;&#x5BB6;&#x5173;&#x6CE8;&#x3002; app &#x8BED;&#x4E49;&#x753B;&#x50CF;&#x8BED;&#x4E49;&#x63CF;&#x8FF0;&#x4F53;&#x7CFB;&#x5206;&#x591A;&#x4E2A;&#x7EF4;&#x5EA6; &#x673A;&#x5668;&#x5B66;&#x4E60;&#xFF08;LTR&#xFF09;&#x6311;&#x6218;&#xFF1A;&#x591A;&#x6765;&#x6E90;&#x68C0;&#x7D22;&#x7ED3;&#x679C;&#x4E0D;&#x53EF;&#x6BD4;&#xFF08;&#x7C7B;&#x522B;&#xFF0F;tag&#xFF09;&#x5229;&#x5668;&#xFF1A;lambdaMART &#x6392;&#x5E8F;&#x6A21;&#x578B;&#xFF08;GBRT&#x7684;&#x53D8;&#x79CD;&#xFF09; LTR - Learning to rank&#xFF1A;&#x5B66;&#x4E60;&#x6392;&#x5E8F;&#x7528;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x7684;&#x65B9;&#x6CD5;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;&#x53EF;&#x7528;&#x4E8E;&#x76F8;&#x5173;&#x6027;&#x6392;&#x5E8F;&#x3001;&#x63A8;&#x8350;&#x5F15;&#x64CE;&#x7B49;&#x7CFB;&#x7EDF;&#x4E2D;&#x3002;Learning to rank or machine-learned ranking (MLR) is a type of supervised or semi-supervised machine learning problem in which the goal is to automatically construct a ranking model from training data. &#x5E94;&#x7528;&#x5B9D;&#x641C;&#x7D22;&#x5546;&#x4E1A;&#x5316;&#x5206;&#x53D1;&#x5347;&#x7EA7;&#x5E94;&#x7528;+&#x5E94;&#x7528;&#x5206;&#x53D1; &#x2013;&gt; &#x5185;&#x5BB9;&#x670D;&#x52A1;&#x5206;&#x53D1; &#x610F;&#x56FE;&#x8BC6;&#x522B;&#x4F18;&#x5316;&#xFF1A;&#x4EC0;&#x4E48;&#x65F6;&#x5019;&#x51FA;&#x5E94;&#x7528;&#xFF0C;&#x4EC0;&#x4E48;&#x65F6;&#x5019;&#x51FA;&#x97F3;&#x4E50;&#xFF0C;&#x70ED;&#x5EA6; &#x591A;&#x6765;&#x6E90;&#x6DF7;&#x6392;&#xFF1A;&#x673A;&#x5668;&#x5B66;&#x4E60;&#xFF0B;&#x8FD0;&#x8425;&#x7CFB;&#x7EDF;&#x4F18;&#x5316;&#x5F02;&#x6784;&#x6392;&#x5E8F;&#xFF0C;&#x4FC3;&#x8FDB;&#x5206;&#x53D1;&#x6548;&#x7387;&#xFF08;&#x5E94;&#x7528;&#x3001;&#x97F3;&#x4E50;&#x7B49;&#x600E;&#x4E48;&#x6DF7;&#x6392;&#xFF09; &#x591A;&#x573A;&#x666F;&#x5F15;&#x5BFC;&#xFF1A;&#x5728;&#x70ED;&#x8BCD;&#x3001;&#x76F4;&#x8FBE;&#x533A;&#xFF08;&#x641C;&#x7D22;&#x8865;&#x5145;&#x5448;&#x73B0;&#xFF09;&#x3001;&#x8054;&#x60F3;&#x8BCD;&#x7B49;&#x573A;&#x666F;&#x5F15;&#x5BFC;&#x7528;&#x6237;&#xFF0C;&#x57F9;&#x517B;&#x5185;&#x5BB9;&#x641C;&#x7D22;&#x4E60;&#x60EF; &#x5E94;&#x7528;&#x641C;&#x7D22;&#x5E7F;&#x544A;&#x6280;&#x672F;&#x6838;&#x5FC3; app &#x753B;&#x50CF;&#x57FA;&#x4E8E;&#x6807;&#x7B7E;&#x3001;&#x4E3B;&#x9898;&#x3001;&#x7C7B;&#x522B;&#x7684; app &#x7EC6;&#x7C92;&#x5EA6;&#x5546;&#x4E1A;&#x8BCD; &#x52A8;&#x6001;&#x6DF7;&#x6392;&#x6839;&#x636E; query &#x52A8;&#x6001;&#x9009;&#x62E9;&#x5E7F;&#x544A;&#x69FD;&#x4F4D; &#x5229;&#x7528;&#x76F8;&#x4F3C;&#x5E94;&#x7528;&#x6253;tag&#xFF08;confidence level &#x2013;&gt; filter&#xFF09; &#x673A;&#x5668;&#x5B66;&#x4E60;&#x7684;&#x672C;&#x8D28;&#x5DF2;&#x77E5;&#x6570;&#x636E; &#x5148;&#x9A8C;&#x77E5;&#x8BC6;&#xFF08;&#x4E13;&#x5BB6;&#x7CFB;&#x7EDF;&#xFF09; &#x672A;&#x77E5;&#x6570;&#x636E;&#x7684;&#x7279;&#x5F81; &#x2013;&gt; &#x6C42;&#x672A;&#x77E5;&#x6570;&#x636E;&#x7684;&#x4F18;&#x5316;&#x5206;&#x5E03;&#x901A;&#x7528;&#x6280;&#x672F;&#x96BE;&#x70B9;&#xFF1A;&#x7A7A;&#x95F4;&#x641C;&#x7D22; &#x51FD;&#x6570;&#x6CDB;&#x5316; &#x5B9E;&#x9645;&#x5DE5;&#x4F5C;&#xFF1A; &#x6A21;&#x578B;10% &#x5176;&#x4ED6;90% &#x6570;&#x636E;&#x4ECE;&#x54EA;&#x6765; &#x7279;&#x5F81;&#x5982;&#x4F55;&#x62BD;&#x53D6; &#x9886;&#x57DF;&#x5148;&#x9A8C;&#x77E5;&#x8BC6; &#x5927;&#x91CF;&#x566A;&#x97F3;&#xFF1F;&#x7EF4;&#x6570;&#x707E;&#x96BE;&#xFF1F;L0,L1,L2&#x6B63;&#x5219;&#x5316; &#x526A;&#x679D;&#x7410;&#x788E;&#x7684;&#x51C6;&#x5907;&#x5DE5;&#x4F5C;&#x5F88;&#x91CD;&#x8981; L0&#x6B63;&#x5219;&#x5316;&#x7684;&#x503C;&#x662F;&#x6A21;&#x578B;&#x53C2;&#x6570;&#x4E2D;&#x975E;&#x96F6;&#x53C2;&#x6570;&#x7684;&#x4E2A;&#x6570;&#x3002;L1&#x6B63;&#x5219;&#x5316;&#x8868;&#x793A;&#x5404;&#x4E2A;&#x53C2;&#x6570;&#x7EDD;&#x5BF9;&#x503C;&#x4E4B;&#x548C;&#x3002;L2&#x6B63;&#x5219;&#x5316;&#x6807;&#x8BC6;&#x5404;&#x4E2A;&#x53C2;&#x6570;&#x7684;&#x5E73;&#x65B9;&#x7684;&#x548C;&#x7684;&#x5F00;&#x65B9;&#x503C;&#x3002; &#x5927;&#x516C;&#x53F8; vs &#x5C0F;&#x516C;&#x53F8;&#x5927;&#x516C;&#x53F8;&#x641C;&#x7D22; &#x63A8;&#x8350; &#x5E7F;&#x544A; &#x90FD;&#x80FD;&#x63A5;&#x89E6;&#x5230;&#xFF0C;&#x53EF;&#x4EE5;&#x548C;&#x725B;&#x4EBA;&#x63A5;&#x89E6;&#x6D41;&#x7A0B;&#x5316; &#x5197;&#x4F59; &#x5F88;&#x591A;&#x56E2;&#x961F;&#x60F3;&#x505A;&#x4E00;&#x4EF6;&#x4E8B; &#x5C0F;&#x516C;&#x53F8; &#x65B9;&#x5411;&#x66F4;&#x5BF9;&#x4E0D;&#x88AB;&#x5546;&#x4E1A;&#x4EF7;&#x503C;&#x675F;&#x7F1A; &#x4E0D;&#x88AB;&#x540C;&#x4F34;&#x5229;&#x76CA;&#x675F;&#x7F1A; &#x4E0D;&#x88AB;&#x81EA;&#x5DF1;&#x7ECF;&#x9A8C;&#x675F;&#x7F1A; &#x8DD1;&#x7684;&#x66F4;&#x5FEB;&#x4E0D;&#x88AB;&#x7528;&#x6237;&#x675F;&#x7F1A; &#x4E0D;&#x88AB;&#x6D41;&#x7A0B;&#x675F;&#x7F1A; &#x4E0D;&#x88AB;&#x4E00;&#x822C;&#x9053;&#x5FB7;&#x675F;&#x7F1A; &#x590D;&#x5229;&#x6548;&#x5E94;&#x5E94;&#x7528;&#x5B9D;&#x5149;&#x662F;&#x53BB;&#x566A;&#x5C31;&#x505A;&#x4E86;&#x4E00;&#x5E74;&#x3002;&#x6BCF;&#x5929;&#x79EF;&#x7D2F;&#x4E00;&#x70B9; &#x2013;&gt; &#x590D;&#x5229;&#x6548;&#x5E94; &#x2013;&gt; &#x65E0;&#x6CD5;&#x8D85;&#x8D8A;&#x817E;&#x8BAF;&#x53BB;&#x505A;&#x641C;&#x7D22;&#xFF0C;&#x505A;&#x4E0D;&#x8FC7;&#x767E;&#x5EA6;&#xFF0C;&#x4E3A;&#x4EC0;&#x4E48;&#xFF1F;&#x6280;&#x672F;&#x56E2;&#x961F;&#x4E0D;&#x5F3A;&#xFF1F;no&#xFF01;&#x56E0;&#x4E3A;&#x767E;&#x5EA6;&#x505A;&#x4E86;&#x51E0;&#x5341;&#x5E74;&#x7684;&#x641C;&#x7D22;&#xFF0C;&#x6BCF;&#x5929;&#x8FDB;&#x6B65;&#x4E00;&#x70B9;&#xFF0C;&#x590D;&#x5229;&#x6548;&#x5E94;&#x65E0;&#x6CD5;&#x8D85;&#x8D8A;&#x3002;&#x6211;&#x4EEC;&#x8981;&#x627E;&#x5230;&#x53EF;&#x4EE5;&#x4EA7;&#x751F;&#x590D;&#x5229;&#x6548;&#x5E94;&#x7684;&#x70B9;&#x3002;&#x7B97;&#x6CD5;&#x662F;&#x6570;&#x5B66;&#x4E13;&#x5BB6;&#x7684;&#x4E8B;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x505A;&#x7684;&#x662F;&#x5E94;&#x7528;&#x65B9;&#x9762;&#x7684;&#x590D;&#x5229;&#x6548;&#x5E94;&#xFF0C;&#x6BD4;&#x5982;&#x8BF4;&#x804A;&#x5929;&#x673A;&#x5668;&#x4EBA;&#x3002;","tags":"腾讯"},{"title":"爬虫总结(三)-- cloud scrapy","url":"/2016/06/15/爬虫总结-三-scrapinghub/","text":"&#x53D1;&#x73B0;&#x4E86;&#x4E00;&#x4E2A;&#x6BD4;&#x8F83;&#x597D;&#x73A9;&#x7684;&#x4E1C;&#x897F;&#xFF0C;scrapinghub&#xFF0C;&#x8BD5;&#x7740;&#x73A9;&#x4E86;&#x4E00;&#x4E0B; cloud scrapy&#xFF0C;&#x56E0;&#x4E3A;&#x5C31;&#x5B83;&#x662F;&#x514D;&#x8D39;&#x7684;&#x3002;&#x3002;&#x6700;&#x5927;&#x4F18;&#x70B9;&#x662F;&#x53EF;&#x4EE5;&#x5C06;&#x722C;&#x866B;&#x53EF;&#x89C6;&#x5316;&#x3002;&#x8FD9;&#x91CC;&#x5C31;&#x7B80;&#x5355;&#x8BB0;&#x5F55;&#x4E00;&#x4E0B;&#x5B83;&#x600E;&#x4E48;&#x7528;&#x3002; &#x6CE8;&#x518C;&#x8D26;&#x53F7; &amp; &#x65B0;&#x5EFA; scrapy cloud project&#x5728;scrapyinghub &#x5B98;&#x7F51; &#x6CE8;&#x518C;&#x8D26;&#x53F7;&#x767B;&#x5F55;&#x540E; create project&#xFF0C;&#x5728;&#x65B0;&#x5EFA;&#x7684;&#x9879;&#x76EE;&#x4E0B;&#xFF0C;&#x67E5;&#x770B; Code &amp; Deploys&#xFF0C;&#x627E;&#x5230; API key &#x548C; Project ID Deploy your project$ pip install shub login &#x5E76;&#x8F93;&#x5165; API key $ shub login Enter your API key from https://dash.scrapinghub.com/account/apikey API key: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx Validating API key... API key is OK, you are logged in now. deploy &#x5E76;&#x8F93;&#x5165; Project ID $ shub deploy ProjectID Packing version ed6b3b8-master Deploying to Scrapy Cloud project &quot;76180&quot; {&quot;status&quot;: &quot;ok&quot;, &quot;project&quot;: 76180, &quot;version&quot;: &quot;ed6b3b8-master&quot;, &quot;spiders&quot;: 1} Run your spiders at: https://dash.scrapinghub.com/p/76180/ Schedule your spider&#x5728;&#x81EA;&#x5DF1;&#x7684;&#x9879;&#x76EE;&#x9762;&#x677F;&#x4E0B;&#x9009;&#x62E9; run spider &#x5F00;&#x542F;&#x722C;&#x866B;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x547D;&#x4EE4;&#x884C;&#x5F00;&#x542F;&#x3002; shub schedule Zhidao Spider Zhidao scheduled, job ID: 76153/2/2 Watch the log on the command line: shub log -f 2/2 or print items as they are being scraped: shub items -f 2/2 or watch it running in Scrapinghub&apos;s web interface: https://dash.scrapinghub.com/p/76153/job/2/3 &#x770B;&#x6700;&#x65B0;&#x7684; log &#x548C; itemsJOBID&#x683C;&#x5F0F;&#xFF1A;2/2&#xFF0C; 2/1 &#x2026; shub log JOBID shub items JOBID &#x6216;&#x8005; Dashboard &#x67E5;&#x770B;&#x7ED3;&#x679C; &#x901A;&#x8FC7; Dashbord &#x8FD8;&#x53EF;&#x4EE5;&#x5B9E;&#x65F6;&#x76D1;&#x63A7; crawler job &#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x53D1;&#x51FA;&#x7684;&#x8BF7;&#x6C42;&#x6570;&#xFF0C;&#x6293;&#x53D6;&#x7684; item &#x6570;&#xFF0C;log &#x548C; error &#x4FE1;&#x606F;&#xFF0C;&#x6267;&#x884C;&#x7684;&#x65F6;&#x95F4;&#x7B49;&#xFF0C;&#x90FD;&#x4E00;&#x76EE;&#x4E86;&#x7136;&#x3002; Save itemscurl -u APIkey: http://storage.scrapinghub.com/items/76153/2/2 &gt; items.json &#x5206;&#x5E03;&#x5F0F;&#x722C;&#x866B;cloud scrapy &#x4E5F;&#x63D0;&#x4F9B;&#x4E86;&#x5206;&#x5E03;&#x5F0F;&#x722C;&#x866B;&#x7684;&#x9009;&#x62E9;&#xFF0C;&#x5F53;&#x7136;&#x662F;&#x4ED8;&#x8D39;&#x7684;&#x3002; Crawlera&#x5F3A;&#x608D;&#x7684; Crawlera &#x63D0;&#x4F9B;&#x4E86;&#x9632;&#x6B62; ban &#x7684;&#x673A;&#x5236;&#xFF0C;&#x901A;&#x8FC7; ip&#x3001;user-agent&#x3001;cookie &#x7B49;&#x8BBE;&#x7F6E;&#xFF0C;&#x9632;&#x6B62;&#x722C;&#x866B;&#x88AB;&#x7981;&#xFF0C;&#x8BE6;&#x89C1; billing &#x5B8C;&#x6574;&#x4EE3;&#x7801; &#x53C2;&#x8003;&#x94FE;&#x63A5;:http://doc.scrapinghub.com/scrapy-cloud.html#deploying-a-scrapy-spider","tags":"crawler"},{"title":"爬虫总结(二)-- scrapy","url":"/2016/06/12/爬虫总结-二-scrapy/","text":"&#x7528;&#x73B0;&#x6210;&#x7684;&#x6846;&#x67B6;&#x7684;&#x597D;&#x5904;&#x5C31;&#x662F;&#x4E0D;&#x7528;&#x62C5;&#x5FC3; cookie&#x3001;retry&#x3001;&#x9891;&#x7387;&#x9650;&#x5236;&#x3001;&#x591A;&#x7EBF;&#x7A0B;&#x7684;&#x4E8B;&#x3002;&#x8FD9;&#x4E00;&#x7BC7;&#x628A;&#x4E0A;&#x4E00;&#x7BC7;&#x7684;&#x5B9E;&#x4F8B;&#x7528; scrapy &#x6846;&#x67B6;&#x91CD;&#x65B0;&#x5B9E;&#x73B0;&#x4E00;&#x904D;&#x3002;&#x4E3B;&#x8981;&#x6B65;&#x9AA4;&#x5C31;&#x662F;&#x65B0;&#x5EFA;&#x9879;&#x76EE; (Project) &#x2013;&gt; &#x5B9A;&#x4E49;&#x76EE;&#x6807;&#xFF08;Items&#xFF09;&#x2013;&gt; &#x5236;&#x4F5C;&#x722C;&#x866B;&#xFF08;Spider&#xFF09;&#x2013;&gt; &#x5B58;&#x50A8;&#x7ED3;&#x679C;&#xFF08;Pipeline&#xFF09; Scrapy &#x6982;&#x8FF0; Scrapy&#x662F;&#x4E00;&#x4E2A;&#x4E3A;&#x4E86;&#x722C;&#x53D6;&#x7F51;&#x7AD9;&#x6570;&#x636E;&#xFF0C;&#x63D0;&#x53D6;&#x7ED3;&#x6784;&#x6027;&#x6570;&#x636E;&#x800C;&#x7F16;&#x5199;&#x7684;&#x5E94;&#x7528;&#x6846;&#x67B6;&#x3002; &#x53EF;&#x4EE5;&#x5E94;&#x7528;&#x5728;&#x5305;&#x62EC;&#x6570;&#x636E;&#x6316;&#x6398;&#xFF0C;&#x4FE1;&#x606F;&#x5904;&#x7406;&#x6216;&#x5B58;&#x50A8;&#x5386;&#x53F2;&#x6570;&#x636E;&#x7B49;&#x4E00;&#x7CFB;&#x5217;&#x7684;&#x7A0B;&#x5E8F;&#x4E2D;&#x3002;&#x5176;&#x6700;&#x521D;&#x662F;&#x4E3A;&#x4E86;&#x9875;&#x9762;&#x6293;&#x53D6; (&#x66F4;&#x786E;&#x5207;&#x6765;&#x8BF4;, &#x7F51;&#x7EDC;&#x6293;&#x53D6; )&#x6240;&#x8BBE;&#x8BA1;&#x7684;&#xFF0C; &#x4E5F;&#x53EF;&#x4EE5;&#x5E94;&#x7528;&#x5728;&#x83B7;&#x53D6;API&#x6240;&#x8FD4;&#x56DE;&#x7684;&#x6570;&#x636E;(&#x4F8B;&#x5982; Amazon Associates Web Services ) &#x6216;&#x8005;&#x901A;&#x7528;&#x7684;&#x7F51;&#x7EDC;&#x722C;&#x866B;&#x3002;Scrapy&#x7528;&#x9014;&#x5E7F;&#x6CDB;&#xFF0C;&#x53EF;&#x4EE5;&#x7528;&#x4E8E;&#x6570;&#x636E;&#x6316;&#x6398;&#x3001;&#x76D1;&#x6D4B;&#x548C;&#x81EA;&#x52A8;&#x5316;&#x6D4B;&#x8BD5; Scrapy &#x67B6;&#x6784;Scrapy &#x4F7F;&#x7528;&#x4E86; Twisted&#x5F02;&#x6B65;&#x7F51;&#x7EDC;&#x5E93;&#x6765;&#x5904;&#x7406;&#x7F51;&#x7EDC;&#x901A;&#x8BAF;&#x3002;&#x6574;&#x4F53;&#x67B6;&#x6784;&#x5927;&#x81F4;&#x5982;&#x4E0B; &#x7EFF;&#x7EBF;&#x662F;&#x6570;&#x636E;&#x6D41;&#x5411;&#xFF0C;&#x9996;&#x5148;&#x4ECE;&#x521D;&#x59CB; URL &#x5F00;&#x59CB;&#xFF0C;Scheduler &#x4F1A;&#x5C06;&#x5176;&#x4EA4;&#x7ED9; Downloader &#x8FDB;&#x884C;&#x4E0B;&#x8F7D;&#xFF0C;&#x4E0B;&#x8F7D;&#x4E4B;&#x540E;&#x4F1A;&#x4EA4;&#x7ED9; Spider &#x8FDB;&#x884C;&#x5206;&#x6790;&#xFF0C;Spider &#x5206;&#x6790;&#x51FA;&#x6765;&#x7684;&#x7ED3;&#x679C;&#x6709;&#x4E24;&#x79CD;&#xFF1A;&#x4E00;&#x79CD;&#x662F;&#x9700;&#x8981;&#x8FDB;&#x4E00;&#x6B65;&#x6293;&#x53D6;&#x7684;&#x94FE;&#x63A5;&#xFF0C;&#x4F8B;&#x5982;&#x4E4B;&#x524D;&#x5206;&#x6790;&#x7684;&#x201C;&#x4E0B;&#x4E00;&#x9875;&#x201D;&#x7684;&#x94FE;&#x63A5;&#xFF0C;&#x8FD9;&#x4E9B;&#x4E1C;&#x897F;&#x4F1A;&#x88AB;&#x4F20;&#x56DE; Scheduler &#xFF1B;&#x53E6;&#x4E00;&#x79CD;&#x662F;&#x9700;&#x8981;&#x4FDD;&#x5B58;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x5B83;&#x4EEC;&#x5219;&#x88AB;&#x9001;&#x5230; Item Pipeline &#x90A3;&#x91CC;&#xFF0C;&#x90A3;&#x662F;&#x5BF9;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x540E;&#x671F;&#x5904;&#x7406;&#xFF08;&#x8BE6;&#x7EC6;&#x5206;&#x6790;&#x3001;&#x8FC7;&#x6EE4;&#x3001;&#x5B58;&#x50A8;&#x7B49;&#xFF09;&#x7684;&#x5730;&#x65B9;&#x3002;&#x53E6;&#x5916;&#xFF0C;&#x5728;&#x6570;&#x636E;&#x6D41;&#x52A8;&#x7684;&#x901A;&#x9053;&#x91CC;&#x8FD8;&#x53EF;&#x4EE5;&#x5B89;&#x88C5;&#x5404;&#x79CD;&#x4E2D;&#x95F4;&#x4EF6;&#xFF0C;&#x8FDB;&#x884C;&#x5FC5;&#x8981;&#x7684;&#x5904;&#x7406;&#x3002; Scrapy &#x7EC4;&#x4EF6; &#x5F15;&#x64CE;(Scrapy): &#x7528;&#x6765;&#x5904;&#x7406;&#x6574;&#x4E2A;&#x7CFB;&#x7EDF;&#x7684;&#x6570;&#x636E;&#x6D41;&#x5904;&#x7406;, &#x89E6;&#x53D1;&#x4E8B;&#x52A1;(&#x6846;&#x67B6;&#x6838;&#x5FC3;) &#x8C03;&#x5EA6;&#x5668;(Scheduler): &#x7528;&#x6765;&#x63A5;&#x53D7;&#x5F15;&#x64CE;&#x53D1;&#x8FC7;&#x6765;&#x7684;&#x8BF7;&#x6C42;, &#x538B;&#x5165;&#x961F;&#x5217;&#x4E2D;, &#x5E76;&#x5728;&#x5F15;&#x64CE;&#x518D;&#x6B21;&#x8BF7;&#x6C42;&#x7684;&#x65F6;&#x5019;&#x8FD4;&#x56DE;. &#x53EF;&#x4EE5;&#x60F3;&#x50CF;&#x6210;&#x4E00;&#x4E2A;URL&#xFF08;&#x6293;&#x53D6;&#x7F51;&#x9875;&#x7684;&#x7F51;&#x5740;&#x6216;&#x8005;&#x8BF4;&#x662F;&#x94FE;&#x63A5;&#xFF09;&#x7684;&#x4F18;&#x5148;&#x961F;&#x5217;, &#x7531;&#x5B83;&#x6765;&#x51B3;&#x5B9A;&#x4E0B;&#x4E00;&#x4E2A;&#x8981;&#x6293;&#x53D6;&#x7684;&#x7F51;&#x5740;&#x662F;&#x4EC0;&#x4E48;, &#x540C;&#x65F6;&#x53BB;&#x9664;&#x91CD;&#x590D;&#x7684;&#x7F51;&#x5740; &#x4E0B;&#x8F7D;&#x5668;(Downloader): &#x7528;&#x4E8E;&#x4E0B;&#x8F7D;&#x7F51;&#x9875;&#x5185;&#x5BB9;, &#x5E76;&#x5C06;&#x7F51;&#x9875;&#x5185;&#x5BB9;&#x8FD4;&#x56DE;&#x7ED9;&#x8718;&#x86DB;(Scrapy&#x4E0B;&#x8F7D;&#x5668;&#x662F;&#x5EFA;&#x7ACB;&#x5728;twisted&#x8FD9;&#x4E2A;&#x9AD8;&#x6548;&#x7684;&#x5F02;&#x6B65;&#x6A21;&#x578B;&#x4E0A;&#x7684;) &#x722C;&#x866B;(Spiders): &#x722C;&#x866B;&#x662F;&#x4E3B;&#x8981;&#x5E72;&#x6D3B;&#x7684;, &#x7528;&#x4E8E;&#x4ECE;&#x7279;&#x5B9A;&#x7684;&#x7F51;&#x9875;&#x4E2D;&#x63D0;&#x53D6;&#x81EA;&#x5DF1;&#x9700;&#x8981;&#x7684;&#x4FE1;&#x606F;, &#x5373;&#x6240;&#x8C13;&#x7684;&#x5B9E;&#x4F53;(Item)&#x3002;&#x7528;&#x6237;&#x4E5F;&#x53EF;&#x4EE5;&#x4ECE;&#x4E2D;&#x63D0;&#x53D6;&#x51FA;&#x94FE;&#x63A5;,&#x8BA9;Scrapy&#x7EE7;&#x7EED;&#x6293;&#x53D6;&#x4E0B;&#x4E00;&#x4E2A;&#x9875;&#x9762; &#x9879;&#x76EE;&#x7BA1;&#x9053;(Pipeline): &#x8D1F;&#x8D23;&#x5904;&#x7406;&#x722C;&#x866B;&#x4ECE;&#x7F51;&#x9875;&#x4E2D;&#x62BD;&#x53D6;&#x7684;&#x5B9E;&#x4F53;&#xFF0C;&#x4E3B;&#x8981;&#x7684;&#x529F;&#x80FD;&#x662F;&#x6301;&#x4E45;&#x5316;&#x5B9E;&#x4F53;&#x3001;&#x9A8C;&#x8BC1;&#x5B9E;&#x4F53;&#x7684;&#x6709;&#x6548;&#x6027;&#x3001;&#x6E05;&#x9664;&#x4E0D;&#x9700;&#x8981;&#x7684;&#x4FE1;&#x606F;&#x3002;&#x5F53;&#x9875;&#x9762;&#x88AB;&#x722C;&#x866B;&#x89E3;&#x6790;&#x540E;&#xFF0C;&#x5C06;&#x88AB;&#x53D1;&#x9001;&#x5230;&#x9879;&#x76EE;&#x7BA1;&#x9053;&#xFF0C;&#x5E76;&#x7ECF;&#x8FC7;&#x51E0;&#x4E2A;&#x7279;&#x5B9A;&#x7684;&#x6B21;&#x5E8F;&#x5904;&#x7406;&#x6570;&#x636E;&#x3002; &#x4E0B;&#x8F7D;&#x5668;&#x4E2D;&#x95F4;&#x4EF6;(Downloader Middlewares): &#x4F4D;&#x4E8E;Scrapy&#x5F15;&#x64CE;&#x548C;&#x4E0B;&#x8F7D;&#x5668;&#x4E4B;&#x95F4;&#x7684;&#x6846;&#x67B6;&#xFF0C;&#x4E3B;&#x8981;&#x662F;&#x5904;&#x7406;Scrapy&#x5F15;&#x64CE;&#x4E0E;&#x4E0B;&#x8F7D;&#x5668;&#x4E4B;&#x95F4;&#x7684;&#x8BF7;&#x6C42;&#x53CA;&#x54CD;&#x5E94;&#x3002; &#x722C;&#x866B;&#x4E2D;&#x95F4;&#x4EF6;(Spider Middlewares): &#x4ECB;&#x4E8E;Scrapy&#x5F15;&#x64CE;&#x548C;&#x722C;&#x866B;&#x4E4B;&#x95F4;&#x7684;&#x6846;&#x67B6;&#xFF0C;&#x4E3B;&#x8981;&#x5DE5;&#x4F5C;&#x662F;&#x5904;&#x7406;&#x8718;&#x86DB;&#x7684;&#x54CD;&#x5E94;&#x8F93;&#x5165;&#x548C;&#x8BF7;&#x6C42;&#x8F93;&#x51FA;&#x3002; &#x8C03;&#x5EA6;&#x4E2D;&#x95F4;&#x4EF6;(Scheduler Middewares): &#x4ECB;&#x4E8E;Scrapy&#x5F15;&#x64CE;&#x548C;&#x8C03;&#x5EA6;&#x4E4B;&#x95F4;&#x7684;&#x4E2D;&#x95F4;&#x4EF6;&#xFF0C;&#x4ECE;Scrapy&#x5F15;&#x64CE;&#x53D1;&#x9001;&#x5230;&#x8C03;&#x5EA6;&#x7684;&#x8BF7;&#x6C42;&#x548C;&#x54CD;&#x5E94;&#x3002; Scrapy &#x8FD0;&#x884C;&#x6D41;&#x7A0B; &#x5F15;&#x64CE;&#x4ECE;&#x8C03;&#x5EA6;&#x5668;&#x4E2D;&#x53D6;&#x51FA;&#x4E00;&#x4E2A;&#x94FE;&#x63A5;(URL)&#x7528;&#x4E8E;&#x63A5;&#x4E0B;&#x6765;&#x7684;&#x6293;&#x53D6; &#x5F15;&#x64CE;&#x628A;URL&#x5C01;&#x88C5;&#x6210;&#x4E00;&#x4E2A;&#x8BF7;&#x6C42;(Request)&#x4F20;&#x7ED9;&#x4E0B;&#x8F7D;&#x5668;&#xFF0C;&#x4E0B;&#x8F7D;&#x5668;&#x628A;&#x8D44;&#x6E90;&#x4E0B;&#x8F7D;&#x4E0B;&#x6765;&#xFF0C;&#x5E76;&#x5C01;&#x88C5;&#x6210;&#x5E94;&#x7B54;&#x5305;(Response) &#x722C;&#x866B;&#x89E3;&#x6790;Response &#x82E5;&#x662F;&#x89E3;&#x6790;&#x51FA;&#x5B9E;&#x4F53;&#xFF08;Item&#xFF09;,&#x5219;&#x4EA4;&#x7ED9;&#x5B9E;&#x4F53;&#x7BA1;&#x9053;&#x8FDB;&#x884C;&#x8FDB;&#x4E00;&#x6B65;&#x7684;&#x5904;&#x7406;;&#x82E5;&#x662F;&#x89E3;&#x6790;&#x51FA;&#x7684;&#x662F;&#x94FE;&#x63A5;&#xFF08;URL&#xFF09;,&#x5219;&#x628A;URL&#x4EA4;&#x7ED9;Scheduler&#x7B49;&#x5F85;&#x6293;&#x53D6; &#x9ED8;&#x8BA4;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;Scrapy&#x4F7F;&#x7528; LIFO &#x961F;&#x5217;&#x6765;&#x5B58;&#x50A8;&#x7B49;&#x5F85;&#x7684;&#x8BF7;&#x6C42;&#x3002;&#x7B80;&#x5355;&#x7684;&#x8BF4;&#xFF0C;&#x5C31;&#x662F; &#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x987A;&#x5E8F; &#x3002;&#x5982;&#x679C;&#x60F3;&#x8981; &#x5E7F;&#x5EA6;&#x4F18;&#x5148;&#x987A;&#x5E8F; &#x8FDB;&#x884C;&#x722C;&#x53D6;&#xFF0C;&#x9700;&#x8981;&#x8FDB;&#x884C;&#x8BBE;&#x5B9A;&#x3002; Scrapy &#x5B58;&#x5728;&#x7684;&#x95EE;&#x9898;&#x722C;&#x866B;&#x662F;&#x4E00;&#x4E2A;&#x5F88;&#x4F9D;&#x8D56;&#x4E8E;&#x7F51;&#x7EDC;io&#x7684;&#x5E94;&#x7528;&#xFF0C;&#x5355;&#x673A;&#x7684;&#x5904;&#x7406;&#x80FD;&#x529B;&#x6709;&#x9650;&#xFF0C;&#x5F88;&#x5FEB;&#x5C31;&#x53D8;&#x6210;&#x74F6;&#x9888;&#x3002;&#x800C;scrapy&#x5E76;&#x4E0D;&#x662F;&#x4E00;&#x4E2A;&#x5206;&#x5E03;&#x5F0F;&#x7684;&#x8BBE;&#x8BA1;&#xFF0C;&#x5728;&#x9700;&#x8981;&#x5927;&#x89C4;&#x6A21;&#x722C;&#x53D6;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x5C31;&#x5F88;&#x6210;&#x95EE;&#x9898;&#x3002;&#x5F53;&#x7136;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x4FEE;&#x6539;Request&#x961F;&#x5217;&#x6765;&#x5B9E;&#x73B0;&#x5206;&#x5E03;&#x5F0F;&#x722C;&#x53D6;&#xFF0C;&#x800C;&#x4E14;&#x5DE5;&#x4F5C;&#x91CF;&#x4E5F;&#x4E0D;&#x7B97;&#x7279;&#x522B;&#x5927;&#x3002; scrapy&#x7684;&#x5E76;&#x884C;&#x5EA6;&#x4E0D;&#x9AD8;&#x3002;&#x529B;&#x56FE;&#x5728;&#x722C;&#x866B;&#x91CC;&#x505A;&#x4E00;&#x4E9B;&#x8BA1;&#x7B97;&#x6027;&#x7684;&#x64CD;&#x4F5C;&#x5C31;&#x4F1A;&#x5F71;&#x54CD;&#x6293;&#x53D6;&#x7684;&#x901F;&#x7387;&#x3002;&#x8FD9;&#x4E3B;&#x8981;&#x662F;python&#x91CC;&#x7684;&#x7EBF;&#x7A0B;&#x673A;&#x5236;&#x9020;&#x6210;&#x7684;&#xFF0C;&#x56E0;&#x4E3A;Python&#x4F7F;&#x7528;&#x4E86;GIL(&#x548C;Ruby&#x4E00;&#x6837;)&#xFF0C;&#x591A;&#x7EBF;&#x7A0B;&#x5E76;&#x4E0D;&#x4F1A;&#x5E26;&#x6765;&#x592A;&#x591A;&#x901F;&#x5EA6;&#x4E0A;&#x7684;&#x63D0;&#x5347;(&#x9664;&#x975E;&#x7528;Python&#x7684;C&#x6269;&#x5C55;&#x5B9E;&#x73B0;&#x81EA;&#x5DF1;&#x7684;&#x6A21;&#x5757;&#xFF0C;&#x8FD9;&#x6837;&#x7ED5;&#x8FC7;&#x4E86;GIL)&#x3002;Summary:Use Python threads if you need to run IO operations in parallel. Do not if you need to run computations in parallel. scrapy&#x7684;&#x5185;&#x5B58;&#x6D88;&#x8017;&#x5F88;&#x5FEB;&#x3002;&#x53EF;&#x80FD;&#x662F;&#x51FA;&#x4E8E;&#x6027;&#x80FD;&#x65B9;&#x9762;&#x7684;&#x8003;&#x8651;&#xFF0C;pending requests&#x5E76;&#x4E0D;&#x662F;&#x5E8F;&#x5217;&#x5316;&#x5B58;&#x50A8;&#x5728;&#x786C;&#x76D8;&#x4E2D;&#xFF0C;&#x800C;&#x662F;&#x653E;&#x5728;&#x5185;&#x5B58;&#x4E2D;&#x7684;(&#x6BD5;&#x7ADF;IO&#x5F88;&#x8D39;&#x65F6;)&#xFF0C;&#x800C;&#x4E14;&#x6240;&#x6709;Request&#x90FD;&#x653E;&#x5728;&#x5185;&#x5B58;&#x4E2D;&#x3002;&#x4F60;&#x6293;&#x53D6;&#x5230; &#x767E;&#x4E07;&#x7F51;&#x9875;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x8003;&#x8651;&#x5230;&#x5355;&#x4E2A;&#x7F51;&#x9875;&#x65F6;&#x4EA7;&#x751F;&#x5F88;&#x591A;&#x94FE;&#x63A5;&#x7684;&#xFF0C;pending request&#x5F88;&#x53EF;&#x80FD;&#x5C31;&#x8FD1;&#x5343;&#x4E07;&#x4E86;&#xFF0C;&#x52A0;&#x4E0A;&#x811A;&#x672C;&#x8BED;&#x8A00;&#x91CC;&#x7684;&#x5BF9;&#x8C61;&#x672C;&#x6765;&#x5C31;&#x6709;&#x989D;&#x5916;&#x6210;&#x672C;&#xFF0C;&#x518D;&#x8003;&#x8651;&#x5230;GC&#x4E0D;&#x4F1A;&#x7ACB;&#x5373;&#x91CA;&#x653E;&#x5185;&#x5B58;&#xFF0C;&#x5185;&#x5B58;&#x5360;&#x7528;&#x5C31;&#x76F8;&#x5F53;&#x53EF;&#x89C2;&#x4E86;&#x3002;&#x5F52;&#x6839;&#x5230;&#x5E95;&#xFF0C;&#x8FD9;&#x4E24;&#x4E2A;&#x95EE;&#x9898;&#x662F;&#x6839;&#x690D;&#x4E8E;&#x8BED;&#x8A00;&#x4E4B;&#x4E2D;&#x7684;&#x3002; Scrapy &#x5B9E;&#x4F8B;&#x65B0;&#x5EFA;&#x9879;&#x76EE; (Project) scrapy startproject news_scrapy &#x8F93;&#x5165;&#x4EE5;&#x4E0A;&#x547D;&#x4EE4;&#x4E4B;&#x540E;&#xFF0C;&#x5C31;&#x4F1A;&#x770B;&#x89C1;&#x547D;&#x4EE4;&#x884C;&#x8FD0;&#x884C;&#x7684;&#x76EE;&#x5F55;&#x4E0B;&#x591A;&#x4E86;&#x4E00;&#x4E2A;&#x540D;&#x4E3A; news_scrapy &#x7684;&#x76EE;&#x5F55;&#xFF0C;&#x76EE;&#x5F55;&#x7684;&#x7ED3;&#x6784;&#x5982;&#x4E0B;&#xFF1A; |---- news_scrapy | |---- news_scrapy | |---- __init__.py | |---- items.py #&#x7528;&#x6765;&#x5B58;&#x50A8;&#x722C;&#x4E0B;&#x6765;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF08;&#x5B57;&#x5178;&#x5F62;&#x5F0F;&#xFF09; | |---- pipelines.py #&#x7528;&#x6765;&#x5BF9;&#x722C;&#x51FA;&#x6765;&#x7684;item&#x8FDB;&#x884C;&#x540E;&#x7EED;&#x5904;&#x7406;&#xFF0C;&#x5982;&#x5B58;&#x5165;&#x6570;&#x636E;&#x5E93;&#x7B49; | |---- settings.py #&#x722C;&#x866B;&#x914D;&#x7F6E;&#x6587;&#x4EF6; | |---- spiders #&#x6B64;&#x76EE;&#x5F55;&#x7528;&#x6765;&#x5B58;&#x653E;&#x521B;&#x5EFA;&#x7684;&#x65B0;&#x722C;&#x866B;&#x6587;&#x4EF6;&#xFF08;&#x722C;&#x866B;&#x4E3B;&#x4F53;&#xFF09; | |---- __init__.py | |---- scrapy.cfg #&#x9879;&#x76EE;&#x914D;&#x7F6E;&#x6587;&#x4EF6; &#x5B9A;&#x4E49;&#x76EE;&#x6807;&#xFF08;Items&#xFF09;Items&#x662F;&#x88C5;&#x8F7D;&#x6293;&#x53D6;&#x7684;&#x6570;&#x636E;&#x7684;&#x5BB9;&#x5668;&#xFF0C;&#x5DE5;&#x4F5C;&#x65B9;&#x5F0F;&#x50CF; python &#x91CC;&#x9762;&#x7684;&#x5B57;&#x5178;&#xFF0C;&#x4F46;&#x5B83;&#x63D0;&#x4F9B;&#x66F4;&#x591A;&#x7684;&#x4FDD;&#x62A4;&#xFF0C;&#x6BD4;&#x5982;&#x5BF9;&#x672A;&#x5B9A;&#x4E49;&#x7684;&#x5B57;&#x6BB5;&#x586B;&#x5145;&#x4EE5;&#x9632;&#x6B62;&#x62FC;&#x5199;&#x9519;&#x8BEF;&#x901A;&#x8FC7;&#x521B;&#x5EFA;scrapy.Item&#x7C7B;, &#x5E76;&#x4E14;&#x5B9A;&#x4E49;&#x7C7B;&#x578B;&#x4E3A; scrapy.Field &#x7684;&#x7C7B;&#x5C5E;&#x6027;&#x6765;&#x58F0;&#x660E;&#x4E00;&#x4E2A;Item&#xFF0C;&#x901A;&#x8FC7;&#x5C06;&#x9700;&#x8981;&#x7684;item&#x6A21;&#x578B;&#x5316;&#xFF0C;&#x6765;&#x63A7;&#x5236;&#x7AD9;&#x70B9;&#x6570;&#x636E;&#x3002;&#x7F16;&#x8F91; items.py # -*- coding: utf-8 -*- import scrapy class NewsScrapyItem(scrapy.Item): # define the fields for your item here like: category = scrapy.Field() url = scrapy.Field() secondary_title = scrapy.Field() secondary_url = scrapy.Field() #text = Field() &#x5236;&#x4F5C;&#x722C;&#x866B;&#xFF08;Spider&#xFF09;Spider &#x5B9A;&#x4E49;&#x4E86;&#x7528;&#x4E8E;&#x4E0B;&#x8F7D;&#x7684;URL&#x5217;&#x8868;&#x3001;&#x8DDF;&#x8E2A;&#x94FE;&#x63A5;&#x7684;&#x65B9;&#x6848;&#x3001;&#x89E3;&#x6790;&#x7F51;&#x9875;&#x5185;&#x5BB9;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;&#x4EE5;&#x6B64;&#x6765;&#x63D0;&#x53D6;items&#x3002;&#x8981;&#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;Spider&#xFF0C;&#x4F60;&#x5FC5;&#x987B;&#x7528;scrapy.spider.BaseSpider&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x5B50;&#x7C7B;&#xFF0C;&#x5E76;&#x786E;&#x5B9A;&#x4E09;&#x4E2A;&#x5F3A;&#x5236;&#x7684;&#x5C5E;&#x6027;&#xFF1A; name&#xFF1A;&#x722C;&#x866B;&#x7684;&#x8BC6;&#x522B;&#x540D;&#x79F0;&#xFF0C;&#x5FC5;&#x987B;&#x662F;&#x552F;&#x4E00;&#x7684;&#xFF0C;&#x5728;&#x4E0D;&#x540C;&#x7684;&#x722C;&#x866B;&#x4E2D;&#x4F60;&#x5FC5;&#x987B;&#x5B9A;&#x4E49;&#x4E0D;&#x540C;&#x7684;&#x540D;&#x5B57;&#x3002; start_urls&#xFF1A;&#x722C;&#x53D6;&#x7684;URL&#x5217;&#x8868;&#x3002;&#x722C;&#x866B;&#x4ECE;&#x8FD9;&#x91CC;&#x5F00;&#x59CB;&#x6293;&#x53D6;&#x6570;&#x636E;&#xFF0C;&#x6240;&#x4EE5;&#xFF0C;&#x7B2C;&#x4E00;&#x6B21;&#x4E0B;&#x8F7D;&#x7684;&#x6570;&#x636E;&#x5C06;&#x4F1A;&#x4ECE;&#x8FD9;&#x4E9B;urls&#x5F00;&#x59CB;&#x3002;&#x5176;&#x4ED6;&#x5B50;URL&#x5C06;&#x4F1A;&#x4ECE;&#x8FD9;&#x4E9B;&#x8D77;&#x59CB;URL&#x4E2D;&#x7EE7;&#x627F;&#x6027;&#x751F;&#x6210;&#x3002; parse()&#xFF1A;&#x89E3;&#x6790;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x8C03;&#x7528;&#x7684;&#x65F6;&#x5019;&#x4F20;&#x5165;&#x4ECE;&#x6BCF;&#x4E00;&#x4E2A;URL&#x4F20;&#x56DE;&#x7684;Response&#x5BF9;&#x8C61;&#x4F5C;&#x4E3A;&#x552F;&#x4E00;&#x53C2;&#x6570;&#xFF0C;&#x8D1F;&#x8D23;&#x89E3;&#x6790;&#x5E76;&#x5339;&#x914D;&#x6293;&#x53D6;&#x7684;&#x6570;&#x636E;(&#x89E3;&#x6790;&#x4E3A;item)&#xFF0C;&#x8DDF;&#x8E2A;&#x66F4;&#x591A;&#x7684;URL&#x3002; &#x5728; spiders &#x76EE;&#x5F55;&#x4E0B;&#x65B0;&#x5EFA; Wynews.py&#xFF0C;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#x3002;&#x5229;&#x7528; yield Request(url=item[&#x2018;url&#x2019;],meta={&#x2018;item_1&#x2019;: item},callback=self.second_parse) &#x6765;&#x8FDB;&#x884C;&#x7B2C;&#x4E8C;&#x5C42;&#x722C;&#x53D6;&#x3002; class WynewsSpider(BaseSpider): name = &quot;Wynews&quot; start_urls = [&apos;http://news.163.com/rank/&apos;] def parse(self,response): html = HtmlXPathSelector(response) page = html.xpath(&apos;//div[@class=&quot;subNav&quot;]/a&apos;) for i in page: item = dict() item[&apos;category&apos;] = i.xpath(&apos;text()&apos;).extract_first() item[&apos;url&apos;] = i.xpath(&apos;@href&apos;).extract_first() print item[&apos;category&apos;],item[&apos;url&apos;] yield Request(url=item[&apos;url&apos;],meta={&apos;item_1&apos;: item},callback=self.second_parse) def second_parse(self,response): item_1= response.meta[&apos;item_1&apos;] html = HtmlXPathSelector(response) #print &apos;response &apos;,response page = html.xpath(&apos;//tr/td/a&apos;) #print &apos;page &apos;,page items = [] for i in page: item = DidiScrapyItem() item[&apos;category&apos;] = item_1[&apos;category&apos;].encode(&apos;utf8&apos;) item[&apos;url&apos;] = item_1[&apos;url&apos;].encode(&apos;utf8&apos;) item[&apos;secondary_title&apos;] = i.xpath(&apos;text()&apos;).extract_first().encode(&apos;utf8&apos;) item[&apos;secondary_url&apos;] = i.xpath(&apos;@href&apos;).extract_first().encode(&apos;utf8&apos;) #print i.xpath(&apos;text()&apos;).extract(),i.xpath(&apos;@href&apos;).extract() items.append(item) return items &#x5B58;&#x50A8;&#x7ED3;&#x679C;&#xFF08;Pipeline&#xFF09;Item pipeline &#x7684;&#x4E3B;&#x8981;&#x8D23;&#x4EFB;&#x662F;&#x8D1F;&#x8D23;&#x5904;&#x7406; spider &#x62BD;&#x53D6;&#x7684; Item&#xFF0C;&#x4E3B;&#x8981;&#x4EFB;&#x52A1;&#x662F;&#x6E05;&#x7406;&#x3001;&#x9A8C;&#x8BC1;&#x548C;&#x5B58;&#x50A8;&#x6570;&#x636E;&#x3002;&#x5F53;&#x9875;&#x9762;&#x88AB; spider &#x89E3;&#x6790;&#x540E;&#xFF0C;&#x5C06;&#x88AB;&#x53D1;&#x9001;&#x5230; pipeline&#xFF0C;&#x6BCF;&#x4E2A; pipeline &#x7684;&#x7EC4;&#x4EF6;&#x90FD;&#x662F;&#x7531;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x65B9;&#x6CD5;&#x7EC4;&#x6210;&#x7684;Python&#x7C7B;&#x3002;pipeline &#x83B7;&#x53D6;Item&#xFF0C;&#x6267;&#x884C;&#x76F8;&#x5E94;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x5E76;&#x786E;&#x5B9A;&#x662F;&#x5426;&#x9700;&#x8981;&#x5728; pipeline&#x4E2D;&#x7EE7;&#x7EED;&#x6267;&#x884C;&#x4E0B;&#x4E00;&#x6B65;&#x6216;&#x662F;&#x76F4;&#x63A5;&#x4E22;&#x5F03;&#x6389;&#x4E0D;&#x5904;&#x7406;&#x3002; &#x6267;&#x884C;&#x8FC7;&#x7A0B; &#x6E05;&#x7406;HTML&#x6570;&#x636E; &#x9A8C;&#x8BC1;&#x89E3;&#x6790;&#x5230;&#x7684;&#x6570;&#x636E;&#xFF08;&#x68C0;&#x67E5;Item&#x662F;&#x5426;&#x5305;&#x542B;&#x5FC5;&#x8981;&#x7684;&#x5B57;&#x6BB5;&#xFF09; &#x68C0;&#x67E5;&#x662F;&#x5426;&#x662F;&#x91CD;&#x590D;&#x6570;&#x636E;&#xFF08;&#x5982;&#x679C;&#x91CD;&#x590D;&#x5C31;&#x5220;&#x9664;&#xFF09; &#x5C06;&#x89E3;&#x6790;&#x5230;&#x7684;&#x6570;&#x636E;&#x5B58;&#x50A8;&#x5230; &#x6570;&#x636E;&#x5E93;/&#x6587;&#x4EF6; &#x4E2D; &#x4E3B;&#x8981;&#x65B9;&#x6CD5; process_item(item, spider)&#x6BCF;&#x4E00;&#x4E2A;item&#x7BA1;&#x9053;&#x7EC4;&#x4EF6;&#x90FD;&#x4F1A;&#x8C03;&#x7528;&#x8BE5;&#x65B9;&#x6CD5;&#xFF0C;&#x5E76;&#x4E14;&#x5FC5;&#x987B;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A;item&#x5BF9;&#x8C61;&#x5B9E;&#x4F8B;&#x6216;raise DropItem&#x5F02;&#x5E38;&#x3002;&#x88AB;&#x4E22;&#x6389;&#x7684;item&#x5C06;&#x4E0D;&#x4F1A;&#x5728;&#x7BA1;&#x9053;&#x7EC4;&#x4EF6;&#x8FDB;&#x884C;&#x6267;&#x884C; open_spider(spider)&#x5F53;spider&#x6267;&#x884C;&#x7684;&#x65F6;&#x5019;&#x5C06;&#x8C03;&#x7528;&#x8BE5;&#x65B9;&#x6CD5; close_spider(spider)&#x5F53;spider&#x5173;&#x95ED;&#x7684;&#x65F6;&#x5019;&#x5C06;&#x8C03;&#x7528;&#x8BE5;&#x65B9;&#x6CD5; &#x7F16;&#x5199;&#x81EA;&#x5DF1;&#x7684; Pipeline&#x7F16;&#x8F91; pipelines.py&#x3002;&#x628A;&#x6293;&#x53D6;&#x7684; items &#x4FDD;&#x5B58;&#x5230; json &#x6587;&#x4EF6;&#x4E2D;&#x3002; import json class NewsScrapyPipeline(object): def __init__(self): self.file = open(&apos;items.json&apos;, &apos;w&apos;) def process_item(self, item, spider): line = json.dumps(dict(item),ensure_ascii=False) + &quot;\\n&quot; self.file.write(line) return item &#x53E6;&#x5916;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x8003;&#x8651;&#x7F16;&#x7801;&#xFF08;&#x6CA1;&#x6709;&#x4E2D;&#x6587;&#xFF09;&#xFF0C;&#x53EF;&#x4EE5;&#x5728;&#x8FD0;&#x884C;&#x722C;&#x866B;&#x7684;&#x65F6;&#x5019;&#x76F4;&#x63A5;&#x901A;&#x8FC7;&#x4E0B;&#x9762;&#x7684;&#x547D;&#x4EE4;&#x5BFC;&#x51FA;&#x7ED3;&#x679C;&#x3002; dump&#x5230;JSON&#x6587;&#x4EF6;: scrapy crawl myspider -o items.json dump&#x5230;CSV&#x6587;&#x4EF6;: scrapy crawl myspider -o items.csv dump&#x5230;XML&#x6587;&#x4EF6;: scrapy crawl myspider -o items.xml &#x6FC0;&#x6D3B;Item Pipeline&#x7EC4;&#x4EF6;&#x5728;settings.py&#x6587;&#x4EF6;&#x4E2D;&#xFF0C;&#x5F80;ITEM_PIPELINES&#x4E2D;&#x6DFB;&#x52A0;&#x9879;&#x76EE;&#x7BA1;&#x9053;&#x7684;&#x7C7B;&#x540D;&#xFF0C;&#x6FC0;&#x6D3B;&#x9879;&#x76EE;&#x7BA1;&#x9053;&#x7EC4;&#x4EF6; ITEM_PIPELINES = { &apos;news_scrapy.pipelines.NewsScrapyPipeline&apos;: 300, } &#x5F00;&#x542F;&#x722C;&#x866B; (Crawl)scrapy crawl Wynews &#x5B8C;&#x6574;&#x4EE3;&#x7801; &#x53EF;&#x80FD;&#x51FA;&#x73B0;&#x7684;&#x95EE;&#x9898; (Problem)&#x6253;&#x5F00; items.json &#x6587;&#x4EF6;&#xFF0C;&#x4E2D;&#x6587;&#x53EF;&#x80FD;&#x4F1A;&#x51FA;&#x73B0;&#x6587;&#x4EF6;&#x4E71;&#x7801;&#x95EE;&#x9898; [{&quot;category&quot;: &quot;\\u93c2\\u4f34\\u6908&quot;, &quot;url&quot;: &quot;http://news.163.com/special/0001386F/rank_news.html&quot;, &quot;secondary_title&quot;: &quot;\\u934b\\u950b\\u9422\\u5cf0\\u30b3\\u95c3\\u8e6d\\u7b09\\u9473\\u6ec8\\u69fb\\u951b\\u5c7e\\u5d0f\\u6fc2\\u7a3f\\u5dfb\\u9359\\u53c9\\u7c2e\\u6769\\u6ec4\\u7966\\u95c0&quot;, &quot;secondary_url&quot;: &quot;http://caozhi.news.163.com/16/0615/09/BPJG6SB60001544E.html&quot;}, &#x8FD9;&#x4E00;&#x884C;&#x4EE3;&#x7801;&#x5C31;&#x80FD;&#x89E3;&#x51B3;&#x3002; line = json.dumps(dict(item),ensure_ascii=False) + &quot;\\n&quot; &#x7ED3;&#x679C; {&quot;category&quot;: &quot;&#x8D22;&#x7ECF;&quot;, &quot;url&quot;: &quot;http://money.163.com/special/002526BH/rank.html&quot;, &quot;secondary_title&quot;: &quot;A&#x80A1;&#x95EF;&#x5173;MSCI&#x518D;&#x5EA6;&#x5931;&#x8D25; &#x7D22;&#x7F57;&#x65AF;&#x4EEC;&#x62BC;&#x6CE8;&#x5BF9;&#x51B2;&#x80DC;&#x51FA;&quot;, &quot;secondary_url&quot;: &quot;http://money.163.com/16/0615/06/BPJ4T69300253B0H.html&quot;} {&quot;category&quot;: &quot;&#x8D22;&#x7ECF;&quot;, &quot;url&quot;: &quot;http://money.163.com/special/002526BH/rank.html&quot;, &quot;secondary_title&quot;: &quot;&#x6E56;&#x5317;&#x526F;&#x7701;&#x957F;&#x62C5;&#x5FC3;&#x623F;&#x4EF7;&#x4E0B;&#x8DCC;&#xFF1A;&#x6CE1;&#x6CAB;&#x82E5;&#x7834;&#x88C2;&#x540E;&#x679C;&#x5F88;&#x4E25;&#x91CD;&quot;, &quot;secondary_url&quot;: &quot;http://money.163.com/16/0615/08/BPJBM36U00252G50.html&quot;} {&quot;category&quot;: &quot;&#x8D22;&#x7ECF;&quot;, &quot;url&quot;: &quot;http://money.163.com/special/002526BH/rank.html&quot;, &quot;secondary_title&quot;: &quot;&#x9A6C;&#x4E91;:&#x5047;&#x8D27;&#x8D28;&#x91CF;&#x8D85;&#x8FC7;&#x6B63;&#x54C1; &#x6253;&#x5047;&#x5F88;&#x590D;&#x6742;&quot;, &quot;secondary_url&quot;: &quot;http://money.163.com/16/0615/08/BPJAIOVI00253G87.html&quot;} {&quot;category&quot;: &quot;&#x8D22;&#x7ECF;&quot;, &quot;url&quot;: &quot;http://money.163.com/special/002526BH/rank.html&quot;, &quot;secondary_title&quot;: &quot;A&#x80A1;&#x95EF;&#x5173;&#x672A;&#x6210;&#x529F; &#x7EB3;&#x5165;MSCI&#x65B0;&#x5174;&#x5E02;&#x573A;&#x6307;&#x6570;&#x88AB;&#x5EF6;&#x8FDF;&quot;, &quot;secondary_url&quot;: &quot;http://money.163.com/16/0615/07/BPJ7260D00252G50.html&quot;} {&quot;category&quot;: &quot;&#x8D22;&#x7ECF;&quot;, &quot;url&quot;: &quot;http://money.163.com/special/002526BH/rank.html&quot;, &quot;secondary_title&quot;: &quot;&#x9A6C;&#x4E91;&#x79F0;&#x8BB8;&#x591A;&#x5047;&#x8D27;&#x6BD4;&#x771F;&#x54C1;&#x597D; &#x7F51;&#x53CB;:&#x602A;&#x4E0D;&#x5F97;&#x6DD8;&#x5B9D;&#x5047;&#x8D27;&#x591A;&quot;, &quot;secondary_url&quot;: &quot;http://money.163.com/16/0615/08/BPJC437N002526O3.html&quot;} {&quot;category&quot;: &quot;&#x8D22;&#x7ECF;&quot;, &quot;url&quot;: &quot;http://money.163.com/special/002526BH/rank.html&quot;, &quot;secondary_title&quot;: &quot;&#x8D2A;&#x5B98;&#x793A;&#x610F;&#x5BB6;&#x4EBA;&#x4F4E;&#x4EF7;&#x4E70;&#x5730; &#x62C6;&#x8FC1;&#x540E;&#x83B7;&#x8D54;&#x8FD1;&#x4EBF;&#x5143;&quot;, &quot;secondary_url&quot;: &quot;http://money.163.com/16/0615/08/BPJAT58400252G50.html&quot;} {&quot;category&quot;: &quot;&#x8D22;&#x7ECF;&quot;, &quot;url&quot;: &quot;http://money.163.com/special/002526BH/rank.html&quot;, &quot;secondary_title&quot;: &quot;&#x53C8;&#x662F;&#x6BD2;&#x80F6;&#x56CA;:&#x6D59;&#x6C5F;&#x67E5;&#x83B7;1&#x4EBF;&#x591A;&#x7C92;&#x6BD2;&#x80F6;&#x56CA; 6&#x4EBA;&#x88AB;&#x6355;&quot;, &quot;secondary_url&quot;: &quot;http://money.163.com/16/0615/07/BPJ8NMRG00253B0H.html&quot;} {&quot;category&quot;: &quot;&#x8D22;&#x7ECF;&quot;, &quot;url&quot;: &quot;http://money.163.com/special/002526BH/rank.html&quot;, &quot;secondary_title&quot;: &quot;&#x8FD8;&#x4E0D;&#x8D77;&#x4E86;&#xFF1F;&#x59D4;&#x5185;&#x745E;&#x62C9;&#x5BFB;&#x6C42;&#x5BBD;&#x9650;1&#x5E74;&#x507F;&#x8FD8;&#x4E2D;&#x56FD;&#x8D37;&#x6B3E;&quot;, &quot;secondary_url&quot;: &quot;http://money.163.com/16/0615/07/BPJ9IH3400252C1E.html&quot;} {&quot;category&quot;: &quot;&#x8D22;&#x7ECF;&quot;, &quot;url&quot;: &quot;http://money.163.com/special/002526BH/rank.html&quot;, &quot;secondary_title&quot;: &quot;A&#x80A1;&#x9891;&#x73B0;&#x6E05;&#x4ED3;&#x5F0F;&#x51CF;&#x6301; &#x4E0A;&#x534A;&#x5E74;&#x5341;&#x5927;&#x51CF;&#x6301;&#x738B;&#x66DD;&#x5149;&quot;, &quot;secondary_url&quot;: &quot;http://money.163.com/16/0615/07/BPJ7Q9BC00254IU4.html&quot;} {&quot;category&quot;: &quot;&#x6C7D;&#x8F66;&quot;, &quot;url&quot;: &quot;http://news.163.com/special/0001386F/rank_auto.html&quot;, &quot;secondary_title&quot;: &quot;&#x300A;&#x88C5;X&#x8D2D;&#x8F66;&#x6307;&#x5357;&#x300B; 30-50&#x4E07;&#x90FD;&#x80FD;&#x4E70;&#x5230;&#x5565;&#x8F66;&#xFF1F;&quot;, &quot;secondary_url&quot;: &quot;http://auto.163.com/16/0615/07/BPJ6U1J900084TUP.html&quot;} {&quot;category&quot;: &quot;&#x6C7D;&#x8F66;&quot;, &quot;url&quot;: &quot;http://news.163.com/special/0001386F/rank_auto.html&quot;, &quot;secondary_title&quot;: &quot;&#x770B;&#x6321;&#x6746;&#x8FD8;&#x4EE5;&#x4E3A;&#x662F;A8L &#x65B0;&#x6B3E;&#x54C8;&#x5F17;H9&#x5185;&#x9970;&#x66DD;&#x5149;&quot;, &quot;secondary_url&quot;: &quot;http://auto.163.com/16/0615/00/BPIGTP4B00084TUO.html&quot;} {&quot;category&quot;: &quot;&#x6C7D;&#x8F66;&quot;, &quot;url&quot;: &quot;http://news.163.com/special/0001386F/rank_auto.html&quot;, &quot;secondary_title&quot;: &quot;&#x524D;&#x8138;/&#x5C3E;&#x706F;&#x6709;&#x53D8; &#x65B0;&#x6B3E;&#x6377;&#x8FBE;&#x642D;1.5L&#x6CB9;&#x8017;&#x66F4;&#x4F4E;&quot;, &quot;secondary_url&quot;: &quot;http://auto.163.com/16/0615/00/BPIGMEHE00084TUO.html&quot;} {&quot;category&quot;: &quot;&#x6C7D;&#x8F66;&quot;, &quot;url&quot;: &quot;http://news.163.com/special/0001386F/rank_auto.html&quot;, &quot;secondary_title&quot;: &quot;&#x4E3B;&#x6253;&#x8F66;&#x578B;&#x4E0D;&#x8D85;10&#x4E07;&#x826F;&#x5FC3;&#x4EF7; &#x8FDC;&#x666F;SUV&#x5C06;8&#x6708;&#x4E0A;&#x5E02;&quot;, &quot;secondary_url&quot;: &quot;http://auto.163.com/16/0615/00/BPIHR2A500084TUO.html&quot;} {&quot;category&quot;: &quot;&#x6C7D;&#x8F66;&quot;, &quot;url&quot;: &quot;http://news.163.com/special/0001386F/rank_auto.html&quot;, &quot;secondary_title&quot;: &quot;Macan&#x5E76;&#x4E0D;&#x662F;&#x6211;&#x771F;&#x59D3; &#x4F17;&#x6CF0;SR8&#x642D;2.0T/D&quot;, &quot;secondary_url&quot;: &quot;http://auto.163.com/16/0613/00/BPDBPB0J00084TUO.html&quot;} {&quot;category&quot;: &quot;&#x6C7D;&#x8F66;&quot;, &quot;url&quot;: &quot;http://news.163.com/special/0001386F/rank_auto.html&quot;, &quot;secondary_title&quot;: &quot;&#x4E0A;&#x6D77;&#x798F;&#x7279;&#x7FFC;&#x640F;&#x4F18;&#x60E0;1.5&#x4E07;&#x5143;&quot;, &quot;secondary_url&quot;: &quot;http://auto.163.com/16/0615/00/BPIHH8FF000857M6.html&quot;} &#x6DFB;&#x52A0;&#x547D;&#x4EE4;&#x884C;&#x53C2;&#x6570;&#x7B2C;&#x4E00;&#x79CD;&#x65B9;&#x6CD5;&#xFF0C;&#x5728;&#x547D;&#x4EE4;&#x884C;&#x7528;crawl&#x63A7;&#x5236;spider&#x722C;&#x53D6;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x52A0;&#x4E0A;-a&#x9009;&#x9879;&#xFF0C;&#x5982; scrapy crawl WangyiSpider -a category=&#x6253;&#x8F66; &#x7136;&#x540E;&#x5728; spider &#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;&#x91CC;&#x52A0;&#x4E0A;&#x5E26;&#x5165;&#x7684;&#x53C2;&#x6570;12345678910import scrapyclass WangyiSpider(BaseSpider): name = &quot;Wangyi&quot; def __init__(self, category=None, *args, **kwargs): super(WangyiSpider, self).__init__(*args, **kwargs) self.base_url = &apos;http://news.yodao.com/&apos; self.start_urls = [&apos;http://news.yodao.com/search?q=&apos; + category] &#x4EE3;&#x7801;&#x901A;&#x8FC7;&#x5173;&#x952E;&#x8BCD;&#x722C;&#x53D6;&#x7F51;&#x6613;&#x65B0;&#x95FB;&#xFF0D;&#x4EE3;&#x7801; &#x8FD0;&#x884C;&#x591A;&#x4E2A;&#x722C;&#x866B;&#x9ED8;&#x8BA4;&#x60C5;&#x51B5;&#x5F53;&#x4F60;&#x6BCF;&#x6B21;&#x6267;&#x884C;scrapy crawl&#x547D;&#x4EE4;&#x65F6;&#x4F1A;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x8FDB;&#x7A0B;&#x3002;&#x4F46;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x6838;&#x5FC3;API&#x5728;&#x540C;&#x4E00;&#x4E2A;&#x8FDB;&#x7A0B;&#x4E2D;&#x540C;&#x65F6;&#x8FD0;&#x884C;&#x591A;&#x4E2A;spider&#xFF0C;&#x5982;&#x4E0B;&#xFF0C;&#x5728; settings.py &#x7684;&#x540C;&#x7EA7;&#x76EE;&#x5F55;&#x4E0B;&#x7F16;&#x8F91; run.py&#xFF0C;&#x5BFC;&#x5165;&#x7F16;&#x5199;&#x7684; spider &#x7C7B;&#x5982; JingdongSpider, SuningSpider&#x3002;12345678910111213141516171819202122232425262728import scrapyfrom twisted.internet import reactorfrom scrapy.crawler import CrawlerRunnerfrom scrapy.utils.log import configure_loggingfrom scrapy.spiders import Spiderfrom scrapy.selector import HtmlXPathSelectorfrom items import FaqscrapyItemfrom scrapy.http import Requestfrom scrapy.selector import Selectorfrom scrapy.utils.project import get_project_settingsfrom spiders.FAQ_jingdong import JingdongSpiderfrom spiders.FAQ_suning import SuningSpiderimport reif __name__ == &apos;__main__&apos;: settings = get_project_settings() configure_logging(settings) runner = CrawlerRunner(settings) runner.crawl(JingdongSpider) runner.crawl(SuningSpider) d = runner.join() d.addBoth(lambda _: reactor.stop()) # blocks process so always keep as the last statement reactor.run() &#x7136;&#x800C;&#x4E0D;&#x5E78;&#x7684;&#x662F;&#x540C;&#x4E00;&#x8FDB;&#x7A0B;&#x5185;&#x8FD0;&#x884C;&#x591A;&#x4E2A; spider &#x53EF;&#x80FD;&#x4F1A;&#x51FA;&#x73B0;&#x6570;&#x636E;&#x4E22;&#x5931;&#x95EE;&#x9898;&#xFF0C;&#x5F71;&#x54CD;&#x8FDB;&#x4E00;&#x6B65;&#x7684;&#x6570;&#x636E;&#x4F7F;&#x7528;&#x3002;&#x5982;&#x4E0B;&#xFF1A;123{&quot;url&quot;: &quot;http://help.jd.com/user/issue/231-213.html&quot;, &quot;text&quot;: &quot;&#x8BA2;&#x5355;&#x5DF2;&#x63D0;&#x4EA4;&#x6210;&#x529F;&#xFF0C;&#x5982;&#x4F55;&#x4ED8;&#x6B3E;&#xFF1F;&#x4ED8;&#x6B3E;&#x65B9;&#x5F0F;&#x5206;&#x4E3A;&#x4EE5;&#x4E0B;&#x51E0;&#x79CD;&#xFF1A;&#xFF08;&#x6CE8;&#xFF1A;&#x5148;&#x6B3E;&#x8BA2;&#x5355;&#x8BF7;&#x60A8;&#x5728;&#x8BA2;&#x5355;&#x63D0;&#x4EA4;&#x540E;24&#x5C0F;&#x65F6;&#x5185;&#x5B8C;&#x6210;&#x652F;&#x4ED8;&#xFF0C;&#x5426;&#x5219;&#x8BA2;&#x5355;&#x4F1A;&#x81EA;&#x52A8;&#x53D6;&#x6D88;&#xFF09;1.&#x8D27;&#x5230;&#x4ED8;&#x6B3E;&#xFF1A;&#x9009;&#x62E9;&#x8D27;&#x5230;&#x4ED8;&#x6B3E;&#xFF0C;&#x5728;&#x8BA2;&#x5355;&#x9001;&#x8FBE;&#x65F6;&#x60A8;&#x53EF;&#x9009;&#x62E9;&#x73B0;&#x91D1;&#x3001;POS&#x673A;&#x5237;&#x5361;&#x3001;&#x652F;&#x7968;&#x65B9;&#x5F0F;&#x652F;&#x4ED8;&#x8D27;&#x6B3E;&#x6216;&#x901A;&#x8FC7;&#x4EAC;&#x4E1C;APP&#x624B;&#x673A;&#x5BA2;&#x6237;&#x7AEF;&#x3010;&#x626B;&#x4E00;&#x626B;&#x3011;&#x529F;&#x80FD;&#x626B;&#x63CF;&#x5305;&#x88F9;&#x5355;&#x4E0A;&#x7684;&#x8BA2;&#x5355;&#x6761;&#x5F62;&#x7801;&#x65B9;&#x5F0F;&#x7528;&#x624B;&#x673A;&#x6765;&#x5B8C;&#x6210;&#x8BA2;&#x5355;&#x7684;&#x652F;&#x4ED8;&#xFF08;&#x626B;&#x7801;&#x652F;&#x4ED8;&#xFF09;&#xFF1B;&#x5728;&#x8BA2;&#x5355;&#x672A;&#x59A5;&#x6295;&#x4E4B;&#x524D;&#x60A8;&#x8FD8;&#x53EF;&#x4EE5;&#x8FDB;&#x5165;&#x201C;&#x6211;&#x7684;&#x8BA2;&#x5355;&#x201D;&#x5728;&#x7EBF;&#x652F;&#x4ED8;&#x8D27;&#x6B3E;&#x3002;&#x6CE8;&#x610F;&#xFF1A;&#x8D27;&#x5230;&#x4ED8;&#x6B3E;&#x7684;&#x8BA2;&#x5355;&#xFF0C;&#x5982;&#x679C;&#x4E00;&#x4E2A;ID&#x5E10;&#x53F7;&#x5728;&#x4E00;&#x4E2A;&#x6708;&#x5185;&#x6709;&#x8FC7;1&#x6B21;&#x4EE5;&#x4E0A;&#x6216;&#x4E00;&#x5E74;&#x5185;&#x6709;&#x8FC7;3&#x6B21;&#x4EE5;&#x4E0A;&#xFF0C;&#x65E0;&#x7406;&#x7531;&#x4E0D;&#x63A5;&#x6536;&#x6211;&#x53F8;&#x914D;&#x9001;&#x7684;&#x5546;&#x54C1;&#xFF0C;&#x6211;&#x53F8;&#x5C06;&#x5728;&#x76F8;&#x5E94;&#x7684;ID&#x5E10;&#x6237;&#x91CC;&#x6309;&#x6BCF;&#x5355;&#x6263;&#x9664;500&#x4E2A;&#x4EAC;&#x8C46;&#x505A;&#x4E3A;&#x8FD0;&#x8D39;&#xFF1B;&#x65F6;&#x95F4;&#x8BA1;&#x7B97;&#x65B9;&#x6CD5;&#x4E3A;&#xFF1A;&#x6210;&#x529F;&#x63D0;&#x4EA4;&#x8BA2;&#x5355;&#x540E;&#x5411;&#x524D;&#x63A8;&#x7B97;30&#x5929;&#x4E3A;&#x4E00;&#x4E2A;&#x6708;&#xFF0C;&#x6210;&#x529F;&#x63D0;&#x4EA4;&#x8BA2;&#x5355;&#x540E;&#x5411;&#x524D;&#x63A8;&#x7B97;365&#x5929;&#x4E3A;&#x4E00;&#x5E74;&#xFF0C;&#x4E0D;&#x4EE5;&#x81EA;&#x7136;&#x6708;&#x548C;&#x81EA;&#x7136;&#x5E74;&#x8BA1;&#x7B97;&#x3002;2.&#x5728;&#x7EBF;&#x652F;&#x4ED8;&#xFF1A;&#x9009;&#x62E9;&#x5728;&#x7EBF;&#x652F;&#x4ED8;&#xFF0C;&#x8BF7;&#x60A8;&#x8FDB;&#x5165;&#x201C;&#x6211;&#x7684;&#x8BA2;&#x5355;&#x201D;&#xFF0C;&#x70B9;&#x51FB;&#x201C;&#x4ED8;&#x6B3E;&#x201D;&#xFF0C;&#x6309;&#x63D0;&#x793A;&#x8FDB;&#x884C;&#x64CD;&#x4F5C;&#xFF1B;&#x76EE;&#x524D;&#x5728;&#x7EBF;&#x652F;&#x4ED8;&#x652F;&#x6301;&#x4EAC;&#x4E1C;&#x767D;&#x6761;&#x3001;&#x4F59;&#x989D;&#x3001;&#x94F6;&#x884C;&#x5361;&#x3001;&#x7F51;&#x94F6;+&#x3001;&#x5FAE;&#x4FE1;&#x3001;&#x94F6;&#x8054;&#x5728;&#x7EBF;&#x3001;&#x7F51;&#x94F6;&#x94B1;&#x5305;&#x3001;&#x4FE1;&#x7528;&#x5361;&#x7B49;&#x65B9;&#x5F0F;&#x8FDB;&#x884C;&#x652F;&#x4ED8;&#xFF0C;&#x53EF;&#x6839;&#x636E;&#x60A8;&#x7684;&#x4F7F;&#x7528;&#x559C;&#x597D;&#x8FDB;&#x884C;&#x9009;&#x62E9;&#x3002;3.&#x5206;&#x671F;&#x4ED8;&#x6B3E;&#xFF1A;&#x76EE;&#x524D;&#x4E0D;&#x652F;&#x6301;&#x4FE1;&#x7528;&#x5361;&#x5206;&#x671F;&#x4ED8;&#x6B3E;&#x3002;4.&#x516C;&#x53F8;&#x8F6C;&#x8D26;&#xFF1A;&#x63D0;&#x4EA4;&#x8BA2;&#x5355;&#x540E;&#x9009;&#x62E9;&#x7EBF;&#x4E0B;&#x516C;&#x53F8;&#x8F6C;&#x8D26;&#x4F1A;&#x751F;&#x6210;15&#x4F4D;&#x6C47;&#x6B3E;&#x8BC6;&#x522B;&#x7801;&#xFF0C;&#x8BF7;&#x60A8;&#x6309;&#x7167;&#x63D0;&#x793A;&#x5230;&#x94F6;&#x884C;&#x64CD;&#x4F5C;&#x8F6C;&#x8D26;&#xFF0C;&#x7136;&#x540E;&#x8FDB;&#x5165;&#x201C;&#x6211;&#x7684;&#x8BA2;&#x5355;&#x201D;&#x586B;&#x5199;&#x4ED8;&#x6B3E;&#x786E;&#x8BA4;&#xFF1B;5.&#x90AE;&#x5C40;&#x6C47;&#x6B3E;&#xFF1A;&#x8BA2;&#x5355;&#x63D0;&#x4EA4;&#x6210;&#x529F;&#x540E;&#xFF0C;&#x8BF7;&#x60A8;&#x6309;&#x7167;&#x63D0;&#x793A;&#x5230;&#x90AE;&#x5C40;&#x64CD;&#x4F5C;&#x6C47;&#x6B3E;&#xFF0C;&#x7136;&#x540E;&#x8FDB;&#x5165;&#x201C;&#x6211;&#x7684;&#x8BA2;&#x5355;&#x201D;&#x586B;&#x5199;&#x4ED8;&#x6B3E;&#x786E;&#x8BA4;&#x3002;&quot;, &quot;question&quot;: &quot;&#x8BA2;&#x5355;&#x5DF2;&#x63D0;&#x4EA4;&#x6210;&#x529F;&#xFF0C;&#x5982;&#x4F55;&#x4ED8;&#x6B3E;&#xFF1F;&quot;, &quot;title&quot;: &quot;&#x652F;&#x4ED8;&#x6D41;&#x7A0B;&quot;}&#xFFFD;&#x7CFB;&#x7EDF;&#x505C;&#x673A;&#x7EF4;&#x62A4;&#x671F;&#x95F4;&#x3002;&#xFF08;&#x4E8C;&#xFF09; &#x7535;&#x4FE1;&#x8BBE;&#x5907;&#x51FA;&#x73B0;&#x6545;&#x969C;&#x4E0D;&#x80FD;&#x8FDB;&#x884C;&#x6570;&#x636E;&#x4F20;&#x8F93;&#x7684;&#x3002;&#xFF08;&#x4E09;&#xFF09; &#x7531;&#x4E8E;&#x9ED1;&#x5BA2;&#x653B;&#x51FB;&#x3001;&#x7F51;&#x7EDC;&#x4F9B;&#x5E94;&#x5546;&#x6280;&#x672F;&#x8C03;&#x6574;&#x6216;&#x6545;&#x969C;&#x3001;&#x7F51;&#x7AD9;&#x5347;&#x7EA7;&#x3001;&#x94F6;&#x884C;&#x65B9;&#x9762;&#x7684;&#x95EE;&#x9898;&#x7B49;&#x539F;&#x56E0;&#x800C;&#x9020;&#x6210;&#x7684;&#x6613;&#x4ED8;&#x5B9D;&#x670D;&#x52A1;&#x4E2D;&#x65AD;&#x6216;&#x5EF6;&#x8FDF;&#x3002;&#xFF08;&#x56DB;&#xFF09; &#x56E0;&#x53F0;&#x98CE;&#x3001;&#x5730;&#x9707;&#x3001;&#x6D77;&#x5578;&#x3001;&#x6D2A;&#x6C34;&#x3001;&#x505C;&#x7535;&#x3001;&#x6218;&#x4E89;&#x3001;&#x6050;&#x6016;&#x88AD;&#x51FB;&#x7B49;&#x4E0D;&#x53EF;&#x6297;&#x529B;&#x4E4B;&#x56E0;&#x7D20;&#xFF0C;&#x9020;&#x6210;&#x6613;&#x4ED8;&#x5B9D;&#x7CFB;&#x7EDF;&#x969C;&#x788D;&#x4E0D;&#x80FD;&#x6267;&#x884C;&#x4E1A;&#x52A1;&#x7684;&#x3002; &#x7B2C;&#x5341;&#x4E09;&#x6761;&#xA0; &#x5173;&#x4E8E;&#x672C;&#x534F;&#x8BAE;&#x6761;&#x6B3E;&#x548C;&#x5176;&#x4ED6;&#x534F;&#x8BAE;&#x3001;&#x544A;&#x793A;&#x6216;&#x5176;&#x4ED6;&#x6709;&#x5173;&#x60A8;&#x4F7F;&#x7528;&#x672C;&#x670D;&#x52A1;&#x7684;&#x901A;&#x77E5;&#xFF0C;&#x6613;&#x4ED8;&#x5B9D;&#x5C06;&#x4EE5;&#x7535;&#x5B50;&#x5F62;&#x5F0F;&#x6216;&#x7EB8;&#x5F20;&#x5F62;&#x5F0F;&#x901A;&#x77E5;&#x60A8;&#xFF0C;&#x5305;&#x62EC;&#x4F46;&#x4E0D;&#x9650;&#x4E8E;&#x4F9D;&#x636E;&#x60A8;&#x5411;&#x6613;&#x4ED8;&#x5B9D;&#x63D0;&#x4F9B;&#x7684;&#x7535;&#x5B50;&#x90AE;&#x4EF6;&#x5730;&#x5740;&#x53D1;&#x9001;&#x7535;&#x5B50;&#x90AE;&#x4EF6;&#x7684;&#x65B9;&#x5F0F;&#x3001;&#x4F9D;&#x636E;&#x6295;&#x8D44;&#x8005;&#x63D0;&#x4F9B;&#x7684;&#x8054;&#x7CFB;&#x5730;&#x5740;&#x5BC4;&#x9001;&#x6302;&#x53F7;&#x4FE1;&#x7684;&#x65B9;&#x5F0F;&#x3001;&#x6613;&#x4ED8;&#x5B9D;&#x6216;&#x5408;&#x4F5C;&#x4F19;&#x4F34;&#x7F51;&#x7AD9;&#x516C;&#x544A;&#x3001;&#x6216;&#x53D1;&#x9001;&#x624B;&#x673A;&#x77ED;&#x4FE1;&#x3001;&#x7CFB;&#x7EDF;&#x5185;&#x901A;&#x77E5;&#x548C;&#x7535;&#x8BDD;&#x901A;&#x77E5;&#x7B49;&#x65B9;&#x5F0F;&#x3002; &#x7B2C;&#x5341;&#x56DB;&#x6761;&#xA0; &#x6613;&#x4ED8;&#x5B9D;&#x6709;&#x6743;&#x6839;&#x636E;&#x9700;&#x8981;&#x4E0D;&#x65F6;&#x5730;&#x4FEE;&#x6539;&#x672C;&#x534F;&#x8BAE;&#x6216;&#x5236;&#x5B9A;&#x3001;&#x4FEE;&#x6539;&#x5404;&#x7C7B;&#x89C4;&#x5219;&#xFF0C;&#x4F46;&#x662F;&#xFF0C;&#x5BF9;&#x4E8E;&#x51CF;&#x5C11;&#x60A8;&#x6743;&#x76CA;&#x6216;&#x52A0;&#x91CD;&#x60A8;&#x4E49;&#x52A1;&#x7684;&#x65B0;&#x589E;&#x3001;&#x53D8;&#x66F4;&#x6216;&#x4FEE;&#x6539;&#xFF0C;&#x6613;&#x4ED8;&#x5B9D;&#x5C06;&#x5728;&#x751F;&#x6548;&#x65E5;&#x524D;&#x63D0;&#x524D;&#x81F3;&#x5C11;7&#x4E2A;&#x65E5;&#x5386;&#x65E5;&#x8FDB;&#x884C;&#x516C;&#x793A;&#xFF0C;&#x5982;&#x60A8;&#x4E0D;&#x540C;&#x610F;&#x76F8;&#x5173;&#x65B0;&#x589E;&#x3001;&#x53D8;&#x66F4;&#x6216;&#x4FEE;&#x6539;&#xFF0C;&#x60A8;&#x53EF;&#x4EE5;&#x9009;&#x62E9;&#x5728;&#x516C;&#x793A;&#x671F;&#x5185;&#x7EC8;&#x6B62;&#x672C;&#x534F;&#x8BAE;&#x5E76;&#x505C;&#x6B62;&#x4F7F;&#x7528;&#x672C;&#x670D;&#x52A1;&#x3002;&#x5982;&#x679C;&#x76F8;&#x5173;&#x65B0;&#x589E;&#x3001;&#x53D8;&#x66F4;&#x6216;&#x4FEE;&#x6539;&#x751F;&#x6548;&#x540E;&#xFF0C;&#x60A8;&#x7EE7;&#x7EED;&#x4F7F;&#x7528;&#x672C;&#x670D;&#x52A1;&#x5219;&#x8868;&#x793A;&#x60A8;&#x63A5;&#x53D7;&#x4FEE;&#x8BA2;&#x540E;&#x7684;&#x6743;&#x5229;&#x4E49;&#x52A1;&#x6761;&#x6B3E;&#x3002; &#x7B2C;&#x5341;&#x4E94;&#x6761; &#x56E0;&#x672C;&#x534F;&#x8BAE;&#x5F15;&#x8D77;&#x7684;&#x6216;&#x4E0E;&#x672C;&#x534F;&#x8BAE;&#x6709;&#x5173;&#x7684;&#x4E89;&#x8BAE;&#xFF0C;&#x5747;&#x9002;&#x7528;&#x4E2D;&#x534E;&#x4EBA;&#x6C11;&#x5171;&#x548C;&#x56FD;&#x6CD5;&#x5F8B;&#x3002; &#x7B2C;&#x5341;&#x516D;&#x6761; &#xA0;&#x56E0;&#x672C;&#x534F;&#x8BAE;&#x5F15;&#x8D77;&#x7684;&#x6216;&#x4E0E;&#x672C;&#x534F;&#x8BAE;&#x6709;&#x5173;&#x7684;&#x4E89;&#x8BAE;&#xFF0C;&#x6613;&#x4ED8;&#x5B9D;&#x4E0E;&#x7528;&#x6237;&#x534F;&#x5546;&#x89E3;&#x51B3;&#x3002;&#x534F;&#x5546;&#x4E0D;&#x6210;&#x7684;&#xFF0C;&#x4EFB;&#x4F55;&#x4E00;&#x65B9;&#x5747;&#x6709;&#x6743;&#x5411;&#x88AB;&#x544A;&#x4F4F;&#x6240;&#x5730;&#x4EBA;&#x6C11;&#x6CD5;&#x9662;&#x63D0;&#x8D77;&#x8BC9;&#x8BBC;&#x3002; &#x7B2C;&#x5341;&#x4E03;&#x6761;&#xA0; &#xA0;&#x672C;&#x534F;&#x8BAE;&#x4F5C;&#x4E3A;&#x300A;&#x6613;&#x4ED8;&#x5B9D;&#x4F59;&#x989D;&#x7406;&#x8D22;&#x670D;&#x52A1;&#x534F;&#x8BAE;&#x300B;&#x7684;&#x6709;&#x6548;&#x8865;&#x5145;&#xFF0C;&#x672C;&#x534F;&#x8BAE;&#x672A;&#x7EA6;&#x5B9A;&#x7684;&#x5185;&#x5BB9;&#xFF0C;&#x53CC;&#x65B9;&#x9700;&#x6309;&#x7167;&#x300A;&#x6613;&#x4ED8;&#x5B9D;&#x4F59;&#x989D;&#x7406;&#x8D22;&#x670D;&#x52A1;&#x534F;&#x8BAE;&#x300B;&#x76F8;&#x5173;&#x7EA6;&#x5B9A;&#x3002; &quot;, &quot;question&quot;: &quot;&#x96F6;&#x94B1;&#x5B9D;&#x5B9A;&#x671F;&#x8F6C;&#x51FA;&#x670D;&#x52A1;&#x534F;&#x8BAE;&quot;, &quot;title&quot;: &quot;&#x82CF;&#x5B81;&#x7406;&#x8D22;&quot;}l&quot;: &quot;http://help.suning.com/page/id-536.htm&quot;, &quot;text&quot;: &quot; &#x4EE3;&#x7801; Scrapy &#x8C03;&#x4F18;&#x63D0;&#x9AD8;&#x5E76;&#x53D1;&#x80FD;&#x529B;&#x589E;&#x52A0;&#x5E76;&#x53D1;&#x5E76;&#x53D1;&#x662F;&#x6307;&#x540C;&#x65F6;&#x5904;&#x7406;&#x7684;request&#x7684;&#x6570;&#x91CF;&#x3002;&#x5176;&#x6709;&#x5168;&#x5C40;&#x9650;&#x5236;&#x548C;&#x5C40;&#x90E8;(&#x6BCF;&#x4E2A;&#x7F51;&#x7AD9;)&#x7684;&#x9650;&#x5236;&#x3002;Scrapy &#x9ED8;&#x8BA4;&#x7684;&#x5168;&#x5C40;&#x5E76;&#x53D1;&#x9650;&#x5236;(16)&#x5BF9;&#x540C;&#x65F6;&#x722C;&#x53D6;&#x5927;&#x91CF;&#x7F51;&#x7AD9;&#x7684;&#x60C5;&#x51B5;&#x5E76;&#x4E0D;&#x9002;&#x7528;&#xFF0C;&#x56E0;&#x6B64;&#x9700;&#x8981;&#x589E;&#x52A0;&#x8FD9;&#x4E2A;&#x503C;&#x3002; &#x589E;&#x52A0;&#x591A;&#x5C11;&#x53D6;&#x51B3;&#x4E8E;&#x722C;&#x866B;&#x80FD;&#x5360;&#x7528;&#x591A;&#x5C11;CPU&#x3002; &#x4E00;&#x822C;&#x5F00;&#x59CB;&#x53EF;&#x4EE5;&#x8BBE;&#x7F6E;&#x4E3A; 100 &#x3002;&#x4E0D;&#x8FC7;&#x6700;&#x597D;&#x7684;&#x65B9;&#x5F0F;&#x662F;&#x505A;&#x4E00;&#x4E9B;&#x6D4B;&#x8BD5;&#xFF0C;&#x83B7;&#x5F97; Scrapy &#x8FDB;&#x7A0B;&#x5360;&#x53D6;CPU&#x4E0E;&#x5E76;&#x53D1;&#x6570;&#x7684;&#x5173;&#x7CFB;&#x3002;&#x9009;&#x62E9;&#x4E00;&#x4E2A;&#x80FD;&#x4F7F;CPU&#x5360;&#x7528;&#x7387;&#x5728;80%-90%&#x7684;&#x5E76;&#x53D1;&#x6570;&#x6BD4;&#x8F83;&#x6070;&#x5F53;&#x3002; # &#x589E;&#x52A0;&#x5168;&#x5C40;&#x5E76;&#x53D1;&#x6570; CONCURRENT_REQUESTS = 100 mac &#x4E0B;&#x8C03;&#x8BD5;&#xFF0C;&#x8FD0;&#x884C;&#x7A0B;&#x5E8F;&#x540E;&#x901A;&#x8FC7; top &#x76D1;&#x63A7;&#xFF0C;p &#x6309; cpu &#x6392;&#x5E8F;&#x3002;&#x89C2;&#x5BDF;&#x53D1;&#x73B0;&#xFF0C;&#x5728; CONCURRENT_REQUESTS = 32 &#x65F6;&#xFF0C;cpu &#x5360;&#x7528;&#x6700;&#x591A;&#x5230; 50% &#x5DE6;&#x53F3;&#xFF0C;&#x8C03;&#x6574;&#x5230; CONCURRENT_REQUESTS = 100&#xFF0C;cpu &#x5360;&#x7528; 90% &#x4E0A;&#x4E0B;&#x3002; &#x67E5;&#x770B;&#x672C;&#x673A; cpu &#x4FE1;&#x606F;&#xFF0C;&#x7528; sysctl machdep.cpu &#x547D;&#x4EE4;&#xFF0C;&#x5982;&#x4E0B;&#xFF0C;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#x6211;&#x7684;&#x673A;&#x5B50;&#x662F;&#x53CC;&#x6838;&#x3001;4&#x7EBF;&#x7A0B;&#x7684;&#x3002; # cpu &#x4FE1;&#x606F; $ sysctl machdep.cpu .......... machdep.cpu.core_count: 2 machdep.cpu.thread_count: 4 machdep.cpu.tsc_ccc.numerator: 0 machdep.cpu.tsc_ccc.denominator: 0 &#x964D;&#x4F4E;log&#x7EA7;&#x522B;&#x4E3A;&#x4E86;&#x51CF;&#x5C11;CPU&#x4F7F;&#x7528;&#x7387;(&#x53CA;&#x8BB0;&#x5F55;log&#x5B58;&#x50A8;&#x7684;&#x8981;&#x6C42;), &#x5F53;&#x8C03;&#x8BD5;&#x7A0B;&#x5E8F;&#x5B8C;&#x6BD5;&#x540E;&#xFF0C;&#x53EF;&#x4EE5;&#x4E0D;&#x4F7F;&#x7528; DEBUG log&#x7EA7;&#x522B;&#x3002; # &#x8BBE;&#x7F6E;Log&#x7EA7;&#x522B;: LOG_LEVEL = &apos;INFO&apos; &#x7981;&#x6B62;cookies&#x7981;&#x6B62;cookies&#x80FD;&#x51CF;&#x5C11;CPU&#x4F7F;&#x7528;&#x7387;&#x53CA;Scrapy&#x722C;&#x866B;&#x5728;&#x5185;&#x5B58;&#x4E2D;&#x8BB0;&#x5F55;&#x7684;&#x8E2A;&#x8FF9;&#xFF0C;&#x63D0;&#x9AD8;&#x6027;&#x80FD;&#x3002; # &#x7981;&#x6B62;cookies: COOKIES_ENABLED = False &#x7981;&#x6B62;&#x91CD;&#x8BD5;&#x5BF9;&#x5931;&#x8D25;&#x7684;HTTP&#x8BF7;&#x6C42;&#x8FDB;&#x884C;&#x91CD;&#x8BD5;&#x4F1A;&#x51CF;&#x6162;&#x722C;&#x53D6;&#x7684;&#x6548;&#x7387;&#xFF0C;&#x5C24;&#x5176;&#x662F;&#x5F53;&#x7AD9;&#x70B9;&#x54CD;&#x5E94;&#x5F88;&#x6162;(&#x751A;&#x81F3;&#x5931;&#x8D25;)&#x65F6;&#xFF0C; &#x8BBF;&#x95EE;&#x8FD9;&#x6837;&#x7684;&#x7AD9;&#x70B9;&#x4F1A;&#x9020;&#x6210;&#x8D85;&#x65F6;&#x5E76;&#x91CD;&#x8BD5;&#x591A;&#x6B21;&#x3002;&#x8FD9;&#x662F;&#x4E0D;&#x5FC5;&#x8981;&#x7684;&#xFF0C;&#x540C;&#x65F6;&#x4E5F;&#x5360;&#x7528;&#x4E86;&#x722C;&#x866B;&#x722C;&#x53D6;&#x5176;&#x4ED6;&#x7AD9;&#x70B9;&#x7684;&#x80FD;&#x529B;&#x3002; # &#x7981;&#x6B62;&#x91CD;&#x8BD5;: RETRY_ENABLED = False &#x51CF;&#x5C0F;&#x4E0B;&#x8F7D;&#x8D85;&#x65F6;&#x5BF9;&#x4E00;&#x4E2A;&#x975E;&#x5E38;&#x6162;&#x7684;&#x8FDE;&#x63A5;&#x8FDB;&#x884C;&#x722C;&#x53D6;(&#x4E00;&#x822C;&#x5BF9;&#x901A;&#x7528;&#x722C;&#x866B;&#x6765;&#x8BF4;&#x5E76;&#x4E0D;&#x91CD;&#x8981;)&#xFF0C; &#x51CF;&#x5C0F;&#x4E0B;&#x8F7D;&#x8D85;&#x65F6;&#x80FD;&#x8BA9;&#x5361;&#x4F4F;&#x7684;&#x8FDE;&#x63A5;&#x80FD;&#x88AB;&#x5FEB;&#x901F;&#x7684;&#x653E;&#x5F03;&#x5E76;&#x89E3;&#x653E;&#x5904;&#x7406;&#x5176;&#x4ED6;&#x7AD9;&#x70B9;&#x7684;&#x80FD;&#x529B;&#x3002; # &#x51CF;&#x5C0F;&#x4E0B;&#x8F7D;&#x8D85;&#x65F6;: DOWNLOAD_TIMEOUT = 15 # &#x53EF;&#x80FD;&#x4F1A;&#x5F15;&#x53D1;&#x7684;&#x9519;&#x8BEF; TimeoutError: User timeout caused connection failure: Getting http://homea.people.com.cn/n1/2016/0628/c69176-28504657.html took longer than 15.0 seconds.. &#x901A;&#x8FC7;&#x5982;&#x4E0A;&#x914D;&#x7F6E;&#xFF0C;&#x6211;&#x7684;&#x722C;&#x866B;&#x6BCF;&#x5206;&#x949F;&#x54CD;&#x5E94;&#x7684;request&#x662F;&#x4E4B;&#x524D;&#x7684;4&#x500D;&#xFF0C;&#x7136;&#x800C;&#x503C;&#x5F97;&#x6CE8;&#x610F;&#x7684;&#x662F;&#xFF0C;&#x8FD9;&#x4E9B;&#x8BBE;&#x7F6E;&#x5E76;&#x4E0D;&#x662F;&#x5728;&#x6240;&#x6709;&#x573A;&#x666F;&#x90FD;&#x9002;&#x7528;&#xFF0C;&#x9700;&#x8981;&#x901A;&#x8FC7;&#x5177;&#x4F53;&#x573A;&#x666F;&#x8BD5;&#x9A8C;&#xFF0C;&#x5177;&#x4F53;&#x95EE;&#x9898;&#x5177;&#x4F53;&#x5206;&#x6790;&#x3002; &#x907F;&#x514D;&#x88AB;&#x7981;&#x6B62;(ban)&#x6709;&#x4E9B;&#x7F51;&#x7AD9;&#x5B9E;&#x73B0;&#x4E86;&#x7279;&#x5B9A;&#x7684;&#x673A;&#x5236;&#xFF0C;&#x4EE5;&#x4E00;&#x5B9A;&#x89C4;&#x5219;&#x6765;&#x907F;&#x514D;&#x88AB;&#x722C;&#x866B;&#x722C;&#x53D6;&#x3002;&#x4E0B;&#x9762;&#x662F;&#x4E9B;&#x5904;&#x7406;&#x8FD9;&#x4E9B;&#x7AD9;&#x70B9;&#x7684;&#x5EFA;&#x8BAE;(tips): &#x4F7F;&#x7528;user agent&#x6C60;&#xFF0C;&#x8F6E;&#x6D41;&#x9009;&#x62E9;&#x4E4B;&#x4E00;&#x6765;&#x4F5C;&#x4E3A;user agent&#x3002;&#x6C60;&#x4E2D;&#x5305;&#x542B;&#x5E38;&#x89C1;&#x7684;&#x6D4F;&#x89C8;&#x5668;&#x7684;user agent(google&#x4E00;&#x4E0B;&#x4E00;&#x5927;&#x5806;) &#x7981;&#x6B62;cookies(&#x53C2;&#x8003; COOKIES_ENABLED)&#xFF0C;&#x6709;&#x4E9B;&#x7AD9;&#x70B9;&#x4F1A;&#x4F7F;&#x7528;cookies&#x6765;&#x53D1;&#x73B0;&#x722C;&#x866B;&#x7684;&#x8F68;&#x8FF9;&#x3002; &#x8BBE;&#x7F6E;&#x4E0B;&#x8F7D;&#x5EF6;&#x8FDF;(2&#x6216;&#x66F4;&#x9AD8;)&#x3002;&#x53C2;&#x8003; DOWNLOAD_DELAY &#x8BBE;&#x7F6E;&#x3002; &#x5982;&#x679C;&#x53EF;&#x884C;&#xFF0C;&#x4F7F;&#x7528; Google cache &#x6765;&#x722C;&#x53D6;&#x6570;&#x636E;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x76F4;&#x63A5;&#x8BBF;&#x95EE;&#x7AD9;&#x70B9;&#x3002; &#x4F7F;&#x7528;IP&#x6C60;&#x3002;&#x4F8B;&#x5982;&#x514D;&#x8D39;&#x7684; Tor&#x9879;&#x76EE; &#x6216;&#x4ED8;&#x8D39;&#x670D;&#x52A1;(ProxyMesh)&#x3002; &#x4F7F;&#x7528;&#x9AD8;&#x5EA6;&#x5206;&#x5E03;&#x5F0F;&#x7684;&#x4E0B;&#x8F7D;&#x5668;(downloader)&#x6765;&#x7ED5;&#x8FC7;&#x7981;&#x6B62;(ban)&#xFF0C;&#x5C31;&#x53EA;&#x9700;&#x8981;&#x4E13;&#x6CE8;&#x5206;&#x6790;&#x5904;&#x7406;&#x9875;&#x9762;&#x3002;&#x8FD9;&#x6837;&#x7684;&#x4F8B;&#x5B50;&#x6709;: Crawlera &#x5982;&#x679C;&#x4ECD;&#x7136;&#x65E0;&#x6CD5;&#x907F;&#x514D;&#x88AB;ban&#xFF0C;&#x8003;&#x8651;&#x5546;&#x4E1A;&#x652F;&#x6301;. &#x5B9E;&#x4F8B; &#x9996;&#x5148;&#x8981;&#x6709;&#x7684;&#x662F; user agent&#x6C60; &#x548C; IP&#x6C60;&#x3002;user agent&#x6C60;&#x5982;&#x4E0B;&#xFF0C;&#x6DFB;&#x52A0;&#x5728; settings.py &#x4E2D;&#x3002; USER_AGENTS = [ &quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)&quot;, &quot;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)&quot;, &quot;Mozilla/4.0 (compatible; MSIE 7.0; AOL 9.5; AOLBuild 4337.35; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)&quot;, &quot;Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)&quot;, &quot;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)&quot;, &quot;Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 1.0.3705; .NET CLR 1.1.4322)&quot;, &quot;Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)&quot;, &quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/523.15 (KHTML, like Gecko, Safari/419.3) Arora/0.3 (Change: 287 c9dfb30)&quot;, &quot;Mozilla/5.0 (X11; U; Linux; en-US) AppleWebKit/527+ (KHTML, like Gecko, Safari/419.3) Arora/0.6&quot;, &quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2pre) Gecko/20070215 K-Ninja/2.1.1&quot;, &quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko/20080705 Firefox/3.0 Kapiko/3.0&quot;, &quot;Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5&quot;, &quot;Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6&quot;, &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11&quot;, &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20&quot;, &quot;Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.52&quot;, ] IP&#x6C60; &#x83B7;&#x53D6;&#x65B9;&#x5F0F;&#x6709;&#x591A;&#x79CD;&#xFF0C;&#x8FD9;&#x91CC;&#x6293;&#x53D6;&#x7684;&#x662F;&#x897F;&#x523A;&#x514D;&#x8D39;&#x4EE3;&#x7406;IP&#x7684; IP&#xFF0C;&#x6CE8;&#x610F;&#x5B9E;&#x65F6;&#x66F4;&#x65B0;&#x95EE;&#x9898;&#xFF0C;&#x5426;&#x5219;&#x5F88;&#x5BB9;&#x6613;&#x5931;&#x8D25;&#x3002;&#x5C06;&#x6293;&#x53D6;&#x7684; IP &#x4EE5; http://host1:port &#x7684;&#x683C;&#x5F0F;&#x5B58;&#x50A8;&#x4E8E; list.txt &#x6587;&#x672C;&#x4E2D;&#x3002;&#x5728; settings.py &#x91CC;&#x6DFB;&#x52A0; PROXY_LIST = &#x2018;/path/to/proxy/list.txt&#x2019;&#x3002; &#x6709;&#x4E86; user agent&#x6C60; &#x548C; IP&#x6C60;&#xFF0C;&#x63A5;&#x4E0B;&#x6765;&#x9700;&#x8981;&#x7F16;&#x5199;&#x4E2D;&#x95F4;&#x4EF6;&#xFF0C;&#x5982;&#x4E0B;&#x3002; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667import reimport randomimport base64from scrapy import logclass RandomProxy(object): def __init__(self, settings): self.proxy_list = settings.get(&apos;PROXY_LIST&apos;) fin = open(self.proxy_list) self.proxies = {} for line in fin.readlines(): parts = re.match(&apos;(\\w+://)(\\w+:\\w+@)?(.+)&apos;, line) if not parts: continue # Cut trailing @ if parts.group(2): user_pass = parts.group(2)[:-1] else: user_pass = &apos;&apos; self.proxies[parts.group(1) + parts.group(3)] = user_pass fin.close() @classmethod def from_crawler(cls, crawler): return cls(crawler.settings) def process_request(self, request, spider): # Don&apos;t overwrite with a random one (server-side state for IP) if &apos;proxy&apos; in request.meta: return proxy_address = random.choice(self.proxies.keys()) proxy_user_pass = self.proxies[proxy_address] request.meta[&apos;proxy&apos;] = proxy_address if proxy_user_pass: basic_auth = &apos;Basic &apos; + base64.encodestring(proxy_user_pass) request.headers[&apos;Proxy-Authorization&apos;] = basic_auth print &quot;**************ProxyMiddleware have pass************&quot; + proxy[&apos;ip_port&apos;] def process_exception(self, request, exception, spider): proxy = request.meta[&apos;proxy&apos;] log.msg(&apos;Removing failed proxy &lt;%s&gt;, %d proxies left&apos; % ( proxy, len(self.proxies))) try: del self.proxies[proxy] except ValueError: passclass RandomUserAgent(object): &quot;&quot;&quot;Randomly rotate user agents based on a list of predefined ones&quot;&quot;&quot; def __init__(self, agents): self.agents = agents @classmethod def from_crawler(cls, crawler): return cls(crawler.settings.getlist(&apos;USER_AGENTS&apos;)) def process_request(self, request, spider): print &quot;**************************&quot; + random.choice(self.agents) request.headers.setdefault(&apos;User-Agent&apos;, random.choice(self.agents)) &#x6539;&#x5199; spider&#xFF0C;check &#x67D0;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x786E;&#x4FDD; proxy &#x80FD;&#x591F;&#x8FD4;&#x56DE; target page&#x3002; if not pageUrls: yield Request(url=response.url, dont_filter=True) &#x914D;&#x7F6E; settings.py # Retry many times since proxies often fail RETRY_TIMES = 10 # Retry on most error codes since proxies fail for different reasons RETRY_HTTP_CODES = [500, 503, 504, 400, 403, 404, 408] # Configure a delay for requests for the same website (default: 0) DOWNLOAD_DELAY=3 # Disable cookies (enabled by default) COOKIES_ENABLED=False # Enable downloader middlewares DOWNLOADER_MIDDLEWARES = { &apos;scrapy.contrib.downloadermiddleware.retry.RetryMiddleware&apos;: 90, # Fix path to this module &apos;blogCrawler.middlewares.RandomProxy&apos;: 100, &apos;blogCrawler.middlewares.RandomUserAgent&apos;: 1, &apos;scrapy.contrib.downloadermiddleware.httpproxy.HttpProxyMiddleware&apos;: 110, } &#x8FD9;&#x662F;&#x4E00;&#x4EFD;&#x7B80;&#x5355;&#x7684;&#x6D4B;&#x8BD5;&#x4EE3;&#x7801; &#x5176;&#x4ED6;&#x8C03;&#x4F18;&#x6765;&#x81EA; &#x4F7F;&#x7528;scrapy&#x8FDB;&#x884C;&#x5927;&#x89C4;&#x6A21;&#x6293;&#x53D6; &#x5982;&#x679C;&#x60F3;&#x8981;&#x722C;&#x53D6;&#x7684;&#x8D28;&#x91CF;&#x66F4;&#x9AD8;&#xFF0C;&#x5C3D;&#x91CF;&#x4F7F;&#x7528;&#x5BBD;&#x5EA6;&#x4F18;&#x5148;&#x7684;&#x7B56;&#x7565;&#xFF0C;&#x5728;&#x914D;&#x7F6E;&#x91CC;&#x8BBE;&#x7F6E; SCHEDULER_ORDER = &#x2018;BFO&#x2019; &#x4FEE;&#x6539;&#x5355;&#x722C;&#x866B;&#x7684;&#x6700;&#x5927;&#x5E76;&#x884C;&#x8BF7;&#x6C42;&#x6570; CONCURRENT_REQUESTS_PER_SPIDER &#x4FEE;&#x6539;twisted&#x7684;&#x7EBF;&#x7A0B;&#x6C60;&#x5927;&#x5C0F;&#xFF0C;&#x9ED8;&#x8BA4;&#x503C;&#x662F;10&#x3002;&#x53C2;&#x8003;Using Threads in Twisted&#xFF0C;&#x5728;scrapy/core/manage.py&#x722C;&#x866B;&#x542F;&#x52A8;&#x524D;&#x52A0;&#x4E0A; reactor.suggestThreadPoolSize(poolsize) &#x53EF;&#x4EE5;&#x5F00;&#x542F;dns cache&#x6765;&#x63D0;&#x9AD8;&#x6027;&#x80FD;&#x3002;&#x5728;&#x914D;&#x7F6E;&#x91CC;&#x9762;&#x52A0;&#x4E0A; EXTENSIONS={&#x2019;scrapy.contrib.resolver.CachingResolver&#x2019;: 0,} &#x5982;&#x679C;&#x81EA;&#x5DF1;&#x5B9E;&#x73B0;duplicate filter&#x7684;&#x8BDD;&#x6CE8;&#x610F;&#x8981;&#x4FDD;&#x8BC1;&#x5B83;&#x662F;&#x4E00;&#x76F4;&#x53EF;&#x7528;&#x7684;&#xFF0C;dupfilter&#x91CC;&#x7684;&#x5F02;&#x5E38;&#x662F;&#x4E0D;&#x4F1A;&#x51FA;&#x73B0;&#x5728;&#x65E5;&#x5FD7;&#x6587;&#x4EF6;&#x4E2D;&#x7684;&#xFF0C;&#x597D;&#x50CF;&#x5916;&#x9762;&#x505A;&#x4E86;try-expect&#x5904;&#x7406; &#x53BB;&#x91CD;&#x4E0E;&#x589E;&#x91CF;&#x6293;&#x53D6;&#x53BB;&#x91CD;Scrapy&#x652F;&#x6301;&#x901A;&#x8FC7;RFPDupeFilter&#x6765;&#x5B8C;&#x6210;&#x9875;&#x9762;&#x7684;&#x53BB;&#x91CD;&#xFF08;&#x9632;&#x6B62;&#x91CD;&#x590D;&#x6293;&#x53D6;&#xFF09;&#x3002;RFPDupeFilter&#x5B9E;&#x9645;&#x662F;&#x6839;&#x636E;request_fingerprint&#x5B9E;&#x73B0;&#x8FC7;&#x6EE4;&#x7684;&#xFF0C;&#x5B9E;&#x73B0;&#x5982;&#x4E0B;&#xFF1A;1234567891011121314151617def request_fingerprint(request, include_headers=None):if include_headers: include_headers = tuple([h.lower() for h in sorted(include_headers)])cache = _fingerprint_cache.setdefault(request, {})if include_headers not in cache: fp = hashlib.sha1() fp.update(request.method) fp.update(canonicalize_url(request.url)) fp.update(request.body or &apos;&apos;) if include_headers: for hdr in include_headers: if hdr in request.headers: fp.update(hdr) for v in request.headers.getlist(hdr): fp.update(v) cache[include_headers] = fp.hexdigest()return cache[include_headers] &#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#xFF0C;&#x53BB;&#x91CD;&#x6307;&#x7EB9;&#x662F;sha1(method + url + body + header)&#xFF0C;&#x6240;&#x4EE5;&#xFF0C;&#x5B9E;&#x9645;&#x80FD;&#x591F;&#x53BB;&#x6389;&#x91CD;&#x590D;&#x7684;&#x6BD4;&#x4F8B;&#x5E76;&#x4E0D;&#x5927;&#x3002; &#x5982;&#x679C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x81EA;&#x5DF1;&#x63D0;&#x53D6;&#x53BB;&#x91CD;&#x7684;finger&#xFF0C;&#x9700;&#x8981;&#x81EA;&#x5DF1;&#x5B9E;&#x73B0;Filter&#xFF0C;&#x5E76;&#x914D;&#x7F6E;&#x4E0A;&#x5B83;&#x3002; &#x4F8B;&#x5982;&#x4E0B;&#x9762;&#x8FD9;&#x4E2A;Filter&#x53EA;&#x6839;&#x636E;url&#x53BB;&#x91CD;&#xFF1A;1234567891011from scrapy.dupefilter import RFPDupeFilterclass SeenURLFilter(RFPDupeFilter): &quot;&quot;&quot;A dupe filter that considers the URL&quot;&quot;&quot; def __init__(self, path=None): self.urls_seen = set() RFPDupeFilter.__init__(self, path) def request_seen(self, request): if request.url in self.urls_seen: return True else: self.urls_seen.add(request.url) &#x8981;&#x5728; settings &#x6DFB;&#x52A0;&#x914D;&#x7F6E;&#x3002;DUPEFILTER_CLASS =&#x2019;scraper.custom_filters.SeenURLFilter&#x2019; &#x589E;&#x91CF;&#x722C;&#x53D6;&#x53EF;&#x4EE5;&#x770B;&#x8FD9;&#x7BC7;&#x6C47;&#x603B;&#x8D34; &#x5176;&#x5B9E;&#x5982;&#x679C;&#x6839;&#x636E; url &#x5224;&#x65AD;&#x7684;&#x8BDD;&#x6709;&#x5F88;&#x591A;&#x79CD;&#x65B9;&#x6848;&#xFF0C;&#x5982;&#x4E0B;&#x9762;&#x8FD9;&#x79CD;&#xFF08;&#x6BD4;&#x8D77;&#x4E0A;&#x9762;&#x6C47;&#x603B;&#x8D34;&#x7684;&#x5176;&#x4ED6;&#x65B9;&#x6848;&#x6765;&#x8BF4;&#x7B97;&#x662F;&#x590D;&#x6742;&#x7684;&#xFF09;&#x3002; &#x589E;&#x91CF;&#x6293;&#x53D6;&#x3002;&#x4E00;&#x4E2A;&#x9488;&#x5BF9;&#x591A;&#x4E2A;&#x7F51;&#x7AD9;&#x7684;&#x722C;&#x866B;&#x5F88;&#x96BE;&#x4E00;&#x6B21;&#x6027;&#x628A;&#x6240;&#x6709;&#x7F51;&#x9875;&#x722C;&#x53D6;&#x4E0B;&#x6765;&#xFF0C;&#x5E76;&#x4E14;&#x7F51;&#x9875;&#x4E5F;&#x5904;&#x4E8E;&#x4E0D;&#x65AD;&#x66F4;&#x65B0;&#x7684;&#x72B6;&#x6001;&#x4E2D;&#xFF0C;&#x722C;&#x53D6;&#x662F;&#x4E00;&#x4E2A;&#x52A8;&#x6001;&#x7684;&#x8FC7;&#x7A0B;&#xFF0C;&#x722C;&#x866B;&#x652F;&#x6301;&#x589E;&#x91CF;&#x7684;&#x6293;&#x53D6;&#x662F;&#x5F88;&#x5FC5;&#x8981;&#x7684;&#x3002;&#x5927;&#x6982;&#x7684;&#x6D41;&#x7A0B;&#x5C31;&#x662F;&#x5173;&#x95ED;&#x722C;&#x866B;&#x65F6;&#x4FDD;&#x5B58;duplicate filter&#x7684;&#x6570;&#x636E;&#xFF0C;&#x4FDD;&#x5B58;&#x5F53;&#x524D;&#x7684;request&#x961F;&#x5217;&#xFF0C;&#x722C;&#x866B;&#x542F;&#x52A8;&#x65F6;&#x5BFC;&#x5165;duplicate filter&#xFF0C;&#x5E76;&#x4E14;&#x7528;&#x4E0A;&#x6B21;request&#x961F;&#x5217;&#x7684;&#x6570;&#x636E;&#x4F5C;&#x4E3A;start url&#x3002;&#x8FD9;&#x91CC;&#x8FD8;&#x6D89;&#x53CA;scrapy&#x4E00;&#x4E2A;&#x79F0;&#x5F97;&#x4E0A;bug&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x4E00;&#x65E6;&#x6293;&#x53D6;&#x961F;&#x5217;&#x91CC;url&#x8FC7;&#x591A;&#xFF0C;&#x5173;&#x95ED;scrapy&#x9700;&#x8981;&#x5F88;&#x4E45;&#xFF0C;&#x6709;&#x65F6;&#x5019;&#x8981;&#x82B1;&#x8D39;&#x51E0;&#x5929;&#x7684;&#x65F6;&#x95F4;&#x3002;&#x6211;&#x4EEC;hack&#x4E86;scrapy&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x5728;&#x63A5;&#x6536;&#x5230;&#x5173;&#x95ED;&#x547D;&#x4EE4;&#x540E;&#xFF0C;&#x4FDD;&#x5B58;duplicate filter&#x6570;&#x636E;&#x548C;&#x5F53;&#x524D;&#x7684;request&#x961F;&#x5217;&#x548C;&#x5DF2;&#x6293;&#x53D6;&#x7684;url&#x5217;&#x8868;&#xFF0C;&#x7136;&#x540E;&#x8C03;&#x7528;twisted&#x7684;reactor.stop()&#x5F3A;&#x5236;&#x9000;&#x51FA;&#x3002;&#x5F53;&#x524D;&#x7684;request&#x961F;&#x5217;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;scrapy.core.scheduler&#x7684;pending_requests&#x6210;&#x5458;&#x5F97;&#x5230;&#x3002; &#x7136;&#x800C;&#xFF0C;&#x5982;&#x679C;&#x4F7F;&#x6240;&#x6709;&#x7F51;&#x7AD9;&#x7684;&#x52A8;&#x6001;&#x8FC7;&#x6EE4;&#xFF0C;&#x6BD4;&#x5982;&#x662F;&#x4E0D;&#x662F;&#x591A;&#x4E86;&#x4E00;&#x4E2A;&#x65B0;&#x56DE;&#x590D;&#xFF0C;&#x5728;url&#x4E0A;&#x7684;&#x53D8;&#x5316;&#x5E76;&#x4E0D;&#x80FD;&#x4F53;&#x73B0;&#x51FA;&#x6765;&#xFF0C;&#x641C;&#x7D22;&#x5F15;&#x64CE;&#x91C7;&#x7528;&#x7684;&#x662F;&#x4E00;&#x7CFB;&#x5217;&#x7684;&#x7B97;&#x6CD5;&#xFF0C;&#x5224;&#x65AD;&#x67D0;&#x4E00;&#x4E2A;&#x9875;&#x9762;&#x7684;&#x66F4;&#x65B0;&#x65F6;&#x673A;&#x3002;&#x8FD9;&#x4E2A;&#x65F6;&#x5019;&#x53EA;&#x80FD;&#x5C1D;&#x8BD5;&#x7528;&#x7F51;&#x9875;&#x5728;&#x8FDB;&#x5165;&#x4E0B;&#x4E00;&#x7EA7;&#x9875;&#x9762;&#x7684;&#x65F6;&#x5019;&#x90FD;&#x7C7B;&#x4F3C;&#x4E8E;&#x6700;&#x540E;&#x66F4;&#x65B0;&#x65F6;&#x95F4;&#x3001;&#x6700;&#x540E;&#x6D3B;&#x52A8;&#x65F6;&#x95F4;&#x7684;&#x53C2;&#x6570;&#x8FDB;&#x884C;&#x5224;&#x65AD;&#x4E86;&#x3002; &#x6709;&#x673A;&#x4F1A;&#x4F1A;&#x53BB;&#x5C1D;&#x8BD5;&#x3002; &#x53C2;&#x8003;&#x8D44;&#x6599;scrapy &#x6587;&#x6863;&#x5411;scrapy&#x4E2D;&#x7684;spider&#x4F20;&#x9012;&#x53C2;&#x6570;&#x7684;&#x51E0;&#x79CD;&#x65B9;&#x6CD5;&#x4F7F;&#x7528;scrapy&#x8FDB;&#x884C;&#x5927;&#x89C4;&#x6A21;&#x6293;&#x53D6;Scrapy&#x7B14;&#x8BB0;&#xFF08;10&#xFF09;- &#x52A8;&#x6001;&#x914D;&#x7F6E;&#x722C;&#x866B;","tags":"crawler"},{"title":"爬虫总结(一)-- 爬虫基础 & python实现","url":"/2016/06/11/爬虫总结（一）/","text":"&#x722C;&#x866B;&#x5728;&#x5E73;&#x65F6;&#x4E5F;&#x7ECF;&#x5E38;&#x7528;&#xFF0C;&#x4F46;&#x4E00;&#x76F4;&#x6CA1;&#x6709;&#x7CFB;&#x7EDF;&#x7684;&#x603B;&#x7ED3;&#x8FC7;&#xFF0C;&#x5176;&#x5B9E;&#x5B83;&#x6D89;&#x53CA;&#x4E86;&#x8BB8;&#x591A;&#x7684;&#x77E5;&#x8BC6;&#x70B9;&#x3002;&#x8FD9;&#x4E00;&#x7CFB;&#x5217;&#x4F1A;&#x7406;&#x4E00;&#x904D;&#x8FD9;&#x4E9B;&#x77E5;&#x8BC6;&#x70B9;&#xFF0C;&#x4E0D;&#x6C42;&#x8BE6;&#x5C3D;&#xFF0C;&#x53EA;&#x5E0C;&#x671B;&#x4EE5;&#x70B9;&#x5E26;&#x9762;&#x6784;&#x5EFA;&#x4E00;&#x4E2A;&#x722C;&#x866B;&#x7684;&#x77E5;&#x8BC6;&#x6846;&#x67B6;&#x3002;&#x8FD9;&#x4E00;&#x7BC7;&#x662F;&#x6982;&#x5FF5;&#x6027;&#x89E3;&#x91CA;&#x4EE5;&#x53CA;&#x5165;&#x95E8;&#x7EA7;&#x722C;&#x866B;&#x4ECB;&#x7ECD;&#xFF08;&#x4EE5;&#x722C;&#x53D6;&#x7F51;&#x6613;&#x65B0;&#x95FB;&#x4E3A;&#x4F8B;&#xFF09;&#x3002; &#x722C;&#x866B;&#x57FA;&#x7840;&#x4EC0;&#x4E48;&#x662F;&#x722C;&#x866B;&#x722C;&#x866B;&#x8BF4;&#x767D;&#x4E86;&#x5176;&#x5B9E;&#x5C31;&#x662F;&#x83B7;&#x53D6;&#x8D44;&#x6E90;&#x7684;&#x7A0B;&#x5E8F;&#x3002;&#x5236;&#x4F5C;&#x722C;&#x866B;&#x7684;&#x603B;&#x4F53;&#x5206;&#x4E09;&#x6B65;&#xFF1A;&#x722C;&#xFF0D;&#x53D6;&#xFF0D;&#x5B58;&#x3002;&#x9996;&#x5148;&#x8981;&#x83B7;&#x53D6;&#x6574;&#x4E2A;&#x7F51;&#x9875;&#x7684;&#x6240;&#x6709;&#x5185;&#x5BB9;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x53D6;&#x51FA;&#x5176;&#x4E2D;&#x5BF9;&#x4F60;&#x6709;&#x7528;&#x7684;&#x90E8;&#x5206;&#xFF0C;&#x6700;&#x540E;&#x518D;&#x4FDD;&#x5B58;&#x6709;&#x7528;&#x7684;&#x90E8;&#x5206;&#x3002; &#x722C;&#x866B;&#x7C7B;&#x578B; &#x7F51;&#x7EDC;&#x722C;&#x866B;&#x7F51;&#x7EDC;&#x722C;&#x866B;&#xFF0C;&#x662F;&#x4E00;&#x79CD;&#x6309;&#x7167;&#x4E00;&#x5B9A;&#x7684;&#x89C4;&#x5219;&#xFF0C;&#x81EA;&#x52A8;&#x7684; &#x6293;&#x53D6;&#x4E07;&#x7EF4;&#x7F51;&#x4FE1;&#x606F;&#x7684;&#x7A0B;&#x5E8F;&#x6216;&#x8005;&#x811A;&#x672C;&#x3002;&#x7F51;&#x7EDC;&#x722C;&#x866B;&#x662F;&#x641C;&#x7D22;&#x5F15;&#x64CE;&#x7CFB;&#x7EDF;&#x4E2D;&#x5341;&#x5206;&#x91CD;&#x8981;&#x7684;&#x7EC4;&#x6210;&#x90E8;&#x5206;&#xFF0C;&#x722C;&#x53D6;&#x7684;&#x7F51;&#x9875;&#x4FE1;&#x606F;&#x7528;&#x4E8E;&#x5EFA;&#x7ACB;&#x7D22;&#x5F15;&#x4ECE;&#x800C;&#x4E3A;&#x641C;&#x7D22;&#x5F15;&#x64CE;&#x63D0;&#x4F9B;&#x652F;&#x6301;&#xFF0C;&#x5B83;&#x51B3;&#x5B9A;&#x7740;&#x6574;&#x4E2A;&#x5F15;&#x64CE;&#x7CFB;&#x7EDF;&#x7684;&#x5185;&#x5BB9;&#x662F;&#x5426;&#x4E30;&#x5BCC;&#xFF0C;&#x4FE1;&#x606F;&#x662F;&#x5426;&#x5373;&#x65F6;&#xFF0C;&#x5176;&#x6027;&#x80FD;&#x7684;&#x4F18;&#x52A3;&#x76F4;&#x63A5;&#x5F71;&#x54CD;&#x7740;&#x641C;&#x7D22;&#x5F15;&#x64CE;&#x7684;&#x6548;&#x679C;&#x3002; &#x4F20;&#x7EDF;&#x722C;&#x866B;&#x4ECE;&#x4E00;&#x4E2A;&#x6216;&#x82E5;&#x5E72;&#x521D;&#x59CB;&#x7F51;&#x9875;&#x7684;URL&#x5F00;&#x59CB;&#xFF0C;&#x83B7;&#x5F97;&#x521D;&#x59CB;&#x7F51;&#x9875;&#x7684;URL&#xFF0C;&#x5728;&#x6293;&#x53D6;&#x7F51;&#x9875;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x4E0D;&#x65AD;&#x4ECE;&#x5F53;&#x524D;&#x9875;&#x9762;&#x4E0A;&#x62BD;&#x53D6;&#x65B0;&#x7684;URL&#x653E;&#x5165;&#x961F;&#x5217;&#xFF0C;&#x76F4;&#x5230;&#x6EE1;&#x8DB3;&#x7CFB;&#x7EDF;&#x7684;&#x4E00;&#x5B9A;&#x505C;&#x6B62;&#x6761;&#x4EF6;&#x3002; &#x5DE5;&#x4F5C;&#x539F;&#x7406; &#x6839;&#x636E;&#x4E00;&#x5B9A;&#x7684;&#x7F51;&#x9875;&#x5206;&#x6790;&#x7B97;&#x6CD5;&#x8FC7;&#x6EE4;&#x4E0E;&#x4E3B;&#x9898;&#x65E0;&#x5173;&#x7684;&#x94FE;&#x63A5;&#xFF0C;&#x4FDD;&#x7559;&#x6709;&#x7528;&#x94FE;&#x63A5;&#x5E76;&#x5C06;&#x5176;&#x653E;&#x5165;&#x7B49;&#x5F85;&#x6293;&#x53D6;&#x7684;URL&#x961F;&#x5217; &#x6839;&#x636E;&#x4E00;&#x5B9A;&#x7684;&#x641C;&#x7D22;&#x7B56;&#x7565;&#x4ECE;&#x961F;&#x5217;&#x4E2D;&#x9009;&#x62E9;&#x4E0B;&#x4E00;&#x6B65;&#x8981;&#x6293;&#x53D6;&#x7684;&#x7F51;&#x9875;URL&#xFF0C;&#x91CD;&#x590D;&#x4E0A;&#x8FF0;&#x8FC7;&#x7A0B;&#xFF0C;&#x76F4;&#x5230;&#x8FBE;&#x5230;&#x6307;&#x5B9A;&#x6761;&#x4EF6;&#x624D;&#x7ED3;&#x675F;&#x722C;&#x53D6; &#x5BF9;&#x6240;&#x6709;&#x6293;&#x53D6;&#x7684;&#x7F51;&#x9875;&#x8FDB;&#x884C;&#x4E00;&#x5B9A;&#x7684;&#x5206;&#x6790;&#x3001;&#x8FC7;&#x6EE4;&#xFF0C;&#x5E76;&#x5EFA;&#x7ACB;&#x7D22;&#x5F15;&#xFF0C;&#x4EE5;&#x4FBF;&#x4E4B;&#x540E;&#x7684;&#x67E5;&#x8BE2;&#x548C;&#x68C0;&#x7D22;&#x3002; &#x722C;&#x53D6;&#x7B56;&#x7565;&#x5E7F;&#x5EA6;&#x4F18;&#x5148;&#x5B8C;&#x6210;&#x5F53;&#x524D;&#x5C42;&#x6B21;&#x7684;&#x641C;&#x7D22;&#x540E;&#x624D;&#x8FDB;&#x884C;&#x4E0B;&#x4E00;&#x5C42;&#x6B21;&#x7684;&#x641C;&#x7D22;&#x3002;&#x4E00;&#x822C;&#x7684;&#x4F7F;&#x7528;&#x7B56;&#x7565;&#xFF0C;&#x4E00;&#x822C;&#x901A;&#x8FC7;&#x961F;&#x5217;&#x6765;&#x5B9E;&#x73B0;&#x3002; &#x6700;&#x4F73;&#x4F18;&#x5148;&#x4F1A;&#x6709;&#x8BC4;&#x4F30;&#x7B97;&#x6CD5;&#xFF0C;&#x51E1;&#x662F;&#x88AB;&#x7B97;&#x6CD5;&#x8BC4;&#x4F30;&#x4E3A;&#x6709;&#x7528;&#x7684;&#x7F51;&#x9875;&#xFF0C;&#x5148;&#x6765;&#x722C;&#x53D6;&#x3002; &#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x5B9E;&#x9645;&#x5E94;&#x7528;&#x5F88;&#x5C11;&#x3002;&#x53EF;&#x80FD;&#x4F1A;&#x5BFC;&#x81F4;trapped&#x95EE;&#x9898;&#x3002;&#x901A;&#x8FC7;&#x6808;&#x6765;&#x5B9E;&#x73B0;&#x3002; URL&#xFF08; Uniform Resource Locator: &#x7EDF;&#x4E00;&#x8D44;&#x6E90;&#x5B9A;&#x4F4D;&#x7B26;&#xFF09;&#x4E92;&#x8054;&#x7F51;&#x4E0A;&#x8D44;&#x6E90;&#x5747;&#x6709;&#x5176;&#x552F;&#x4E00;&#x7684;&#x5730;&#x5740;&#xFF0C;&#x7531;&#x4E09;&#x90E8;&#x5206;&#x7EC4;&#x6210;&#x3002; &#x6A21;&#x5F0F;/&#x534F;&#x8BAE; &#x6587;&#x4EF6;&#x6240;&#x5728;IP&#x5730;&#x5740;&#x53CA;&#x7AEF;&#x53E3;&#x53F7; &#x4E3B;&#x673A;&#x4E0A;&#x7684;&#x8D44;&#x6E90;&#x4F4D;&#x7F6E; &#x4F8B;&#x5B50;&#xFF1A;http://www.example.com/index.html Web Server&#xFF0F;Socket&#x5982;&#x4F55;&#x5EFA;&#x7ACB;&#x8FDE;&#x63A5;&#x548C;&#x4F20;&#x8F93;&#x6570;&#x636E;&#x7684;web server &#x7684;&#x5DE5;&#x4F5C;&#x8FC7;&#x7A0B;&#x5176;&#x5B9E;&#x548C;&#x6253;&#x7535;&#x8BDD;&#x7684;&#x8FC7;&#x7A0B;&#x5DEE;&#x4E0D;&#x591A;&#xFF08;&#x4E70;&#x7535;&#x8BDD;&#x2013;&gt;&#x6CE8;&#x518C;&#x53F7;&#x7801;&#x2013;&gt;&#x76D1;&#x542C;&#x2013;&gt;&#x6392;&#x961F;&#x63A5;&#x542C;&#x2013;&gt;&#x8BFB;&#x5199;&#x2013;&gt;&#x5173;&#x95ED;&#xFF09;&#xFF0C;&#x7ECF;&#x5178;&#x7684;&#x4E09;&#x6B65;&#x63E1;&#x624B;&#xFF08;&#x6709;&#x4EBA;&#x5728;&#x5417;&#xFF1F;&#x6211;&#x5728;&#x5462;&#xFF0C;&#x4F60;&#x5462;&#xFF1F;&#x6211;&#x4E5F;&#x5728;&#xFF09;&#x5728;&#x6392;&#x961F;&#x63A5;&#x542C;&#x65F6;&#x8FDB;&#x884C;&#x3002;&#x4E0B;&#x9762;&#x4E00;&#x5F20;&#x56FE;&#x8DB3;&#x4EE5;&#x89E3;&#x91CA;&#x4E00;&#x5207;&#x3002; Crawler&#x7AEF;&#x9700;&#x8981;&#x4E00;&#x4E2A;socket&#x63A5;&#x53E3;&#xFF0C;&#x5411;&#x670D;&#x52A1;&#x5668;&#x7AEF;&#x53D1;&#x8D77;connect&#x8BF7;&#x6C42;&#xFF0C;&#x5B8C;&#x6210;&#x8FDE;&#x63A5;&#x540E;&#x5C31;&#x53EF;&#x4EE5;&#x548C;&#x670D;&#x52A1;&#x5668;&#x4EA4;&#x6D41;&#x4E86;&#xFF0C;&#x64CD;&#x4F5C;&#x5B8C;&#x6BD5;&#x4F1A;&#x5173;&#x95ED;socket&#x63A5;&#x53E3;&#x3002;&#x670D;&#x52A1;&#x5668;&#x7AEF;&#x66F4;&#x590D;&#x6742;&#x4E00;&#x70B9;&#xFF0C;&#x4E5F;&#x9700;&#x8981;&#x4E00;&#x4E2A;socket&#x63A5;&#x53E3;&#xFF0C;&#x5E76;&#x4E14;&#x8FD9;&#x4E2A;socket&#x63A5;&#x53E3;&#x9700;&#x8981;&#x7ED1;&#x5B9A;&#x4E00;&#x4E2A;&#x5730;&#x5740;&#xFF08;bind()&#xFF09;&#xFF0C;&#x8FD9;&#x5C31;&#x76F8;&#x5F53;&#x4E8E;&#x6709;&#x4E00;&#x4E2A;&#x56FA;&#x5B9A;&#x7684;&#x7535;&#x8BDD;&#x53F7;&#x7801;&#xFF0C;&#x8FD9;&#x6837;&#x5176;&#x4ED6;&#x4EBA;&#x62E8;&#x6253;&#x8FD9;&#x4E2A;&#x53F7;&#x7801;&#x5C31;&#x53EF;&#x4EE5;&#x627E;&#x5230;&#x8FD9;&#x4E2A;&#x670D;&#x52A1;&#x5668;&#x3002;&#x7ED1;&#x5B9A;&#x4E4B;&#x540E;&#x670D;&#x52A1;&#x5668;&#x7684;socket&#x5C31;&#x5F00;&#x59CB;&#x76D1;&#x542C;&#xFF08;listen()&#xFF09;&#x6709;&#x6CA1;&#x6709;&#x7528;&#x6237;&#x8BF7;&#x6C42;&#xFF0C;&#x5982;&#x679C;&#x6709;&#xFF0C;&#x5C31;&#x63A5;&#x6536;&#x8BF7;&#x6C42;&#xFF08;accept()&#xFF09;&#xFF0C;&#x548C;&#x7528;&#x6237;&#x5EFA;&#x7ACB;&#x8FDE;&#x63A5;&#xFF0C;&#x7136;&#x540E;&#x5C31;&#x53EF;&#x4EE5;&#x4EA4;&#x6D41;&#x3002; HTML DOM DOM &#x5C06; HTML &#x6587;&#x6863;&#x8868;&#x8FBE;&#x4E3A;&#x6811;&#x7ED3;&#x6784; &#x5B9A;&#x4E49;&#x4E86;&#x8BBF;&#x95EE;&#x548C;&#x64CD;&#x4F5C; HTML &#x6587;&#x6863;&#x7684;&#x6807;&#x51C6; Cookie &#x7531;&#x670D;&#x52A1;&#x5668;&#x7AEF;&#x751F;&#x6210;&#xFF0C;&#x53D1;&#x9001;&#x7ED9; User-Agent(&#x4E00;&#x822C;&#x662F;&#x6D4F;&#x89C8;&#x5668;)&#xFF0C;&#x6D4F;&#x89C8;&#x5668;&#x4F1A;&#x5C06; Cookie &#x7684; key/value &#x4FDD;&#x5B58;&#x5230;&#x67D0;&#x4E2A;&#x76EE;&#x5F55;&#x4E0B;&#x7684;&#x6587;&#x672C;&#x6587;&#x4EF6;&#x54EA;&#xFF0C;&#x4E0B;&#x6B21;&#x8BBF;&#x95EE;&#x540C;&#x4E00;&#x7F51;&#x7AD9;&#x65F6;&#x5C31;&#x53D1;&#x9001;&#x8BE5; Cookie &#x7ED9;&#x670D;&#x52A1;&#x5668;&#x3002; HTTP GET &#x76F4;&#x63A5;&#x4EE5;&#x94FE;&#x63A5;&#x5F62;&#x5F0F;&#x8BBF;&#x95EE;&#xFF0C;&#x94FE;&#x63A5;&#x4E2D;&#x5305;&#x542B;&#x4E86;&#x6240;&#x6709;&#x7684;&#x53C2;&#x6570; PUT &#x628A;&#x63D0;&#x4EA4;&#x7684;&#x6570;&#x636E;&#x653E;&#x5230; HTTP &#x5305;&#x7684;&#x5305;&#x4F53;&#x4E2D; eg. import urllib import urllib2 url=&apos;http://www.zhihu.com/#signin&apos; user_agent=&apos;MOZILLA/5.0&apos; values={&apos;username&apos;:&apos;252618408@qq.com&apos;,&apos;password&apos;:&apos;xxx&apos;} headers={&apos;User-Agent&apos;:user_agent} data=urllib.urlencode(values) # urlencode &#x662F; urllib &#x72EC;&#x6709;&#x7684;&#x65B9;&#x6CD5; request=urllib2.Request(url,data,headers) # write a letter response=urllib2.urlopen(request) # send the letter and get the reply page=response.read() # read the reply urllib &#x4EC5;&#x53EF;&#x4EE5;&#x63A5;&#x53D7; URL&#xFF0C;&#x8FD9;&#x610F;&#x5473;&#x7740;&#x4F60;&#x4E0D;&#x53EF;&#x4EE5;&#x4F2A;&#x88C5;&#x4F60;&#x7684; User Agent &#x5B57;&#x7B26;&#x4E32;&#x7B49;&#xFF0C;&#x4F46; urllib &#x63D0;&#x4F9B;&#x4E86; urlencode &#x65B9;&#x6CD5;&#x7528;&#x6765;GET&#x67E5;&#x8BE2;&#x5B57;&#x7B26;&#x4E32;&#x7B49;&#x4EA7;&#x751F;&#xFF0C;&#x800C; urllib2 &#x6CA1;&#x6709;&#x3002;&#x56E0;&#x6B64; urllib, urllib2&#x7ECF;&#x5E38;&#x4E00;&#x8D77;&#x4F7F;&#x7528;&#x3002; Headers &#x8BBE;&#x7F6E; User-Agent: &#x90E8;&#x5206;&#x670D;&#x52A1;&#x5668;&#x6216; Proxy &#x4F1A;&#x901A;&#x8FC7;&#x8BE5;&#x503C;&#x6765;&#x5224;&#x65AD;&#x662F;&#x5426;&#x662F;&#x6D4F;&#x89C8;&#x5668;&#x53D1;&#x51FA;&#x7684;&#x8BF7;&#x6C42; Content-Type: &#x4F7F;&#x7528; REST &#x63A5;&#x53E3;&#x65F6;&#xFF0C;&#x670D;&#x52A1;&#x5668;&#x4F1A;&#x68C0;&#x67E5;&#x8BE5;&#x503C;&#xFF0C;&#x7528;&#x6765;&#x786E;&#x5B9A; HTTP Body &#x4E2D;&#x7684;&#x5185;&#x5BB9;&#x8BE5;&#x600E;&#x6837;&#x89E3;&#x6790; application/xml: &#x5728; XMl RPC, &#x5982; RESTful/SOAP &#x8C03;&#x7528;&#x65F6;&#x4F7F;&#x7528; application/json: &#x5728; JSON RPC &#x8C03;&#x7528;&#x65F6;&#x4F7F;&#x7528; application/x-www-form-urlencoded: &#x6D4F;&#x89C8;&#x5668;&#x63D0;&#x4EA4; Web &#x8868;&#x5355;&#x65F6;&#x4F7F;&#x7528; &#x722C;&#x866B;&#x96BE;&#x70B9;&#x722C;&#x866B;&#x7684;&#x4E24;&#x90E8;&#x5206;&#xFF0C;&#x4E00;&#x662F;&#x4E0B;&#x8F7D; Web &#x9875;&#x9762;&#xFF0C;&#x6709;&#x8BB8;&#x591A;&#x95EE;&#x9898;&#x9700;&#x8981;&#x8003;&#x8651;&#x3002;&#x5982;&#x4F55;&#x6700;&#x5927;&#x7A0B;&#x5EA6;&#x5730;&#x5229;&#x7528;&#x672C;&#x5730;&#x5E26;&#x5BBD;,&#x5982;&#x4F55;&#x8C03;&#x5EA6;&#x9488;&#x5BF9;&#x4E0D;&#x540C;&#x7AD9;&#x70B9;&#x7684; Web &#x8BF7;&#x6C42;&#x4EE5;&#x51CF;&#x8F7B;&#x5BF9;&#x65B9;&#x670D;&#x52A1;&#x5668;&#x7684;&#x8D1F;&#x62C5;&#x7B49;&#x3002;&#x4E00;&#x4E2A;&#x9AD8;&#x6027;&#x80FD;&#x7684; Web Crawler &#x7CFB;&#x7EDF;&#x91CC;&#xFF0C;DNS &#x67E5;&#x8BE2;&#x4E5F;&#x4F1A;&#x6210;&#x4E3A;&#x6025;&#x9700;&#x4F18;&#x5316;&#x7684;&#x74F6;&#x9888;&#xFF0C;&#x53E6;&#x5916;&#xFF0C;&#x8FD8;&#x6709;&#x4E00;&#x4E9B;&#x201C;&#x884C;&#x89C4;&#x201D;&#x9700;&#x8981;&#x9075;&#x5FAA;&#xFF08;&#x4F8B;&#x5982;robots.txt&#xFF09;&#x3002;&#x800C;&#x83B7;&#x53D6;&#x4E86;&#x7F51;&#x9875;&#x4E4B;&#x540E;&#x7684;&#x5206;&#x6790;&#x8FC7;&#x7A0B;&#x4E5F;&#x662F;&#x975E;&#x5E38;&#x590D;&#x6742;&#x7684;&#xFF0C;Internet &#x4E0A;&#x7684;&#x4E1C;&#x897F;&#x5343;&#x5947;&#x767E;&#x602A;&#xFF0C;&#x5404;&#x79CD;&#x9519;&#x8BEF;&#x767E;&#x51FA;&#x7684; HTML &#x9875;&#x9762;&#x90FD;&#x6709;&#xFF0C;&#x8981;&#x60F3;&#x5168;&#x90E8;&#x5206;&#x6790;&#x6E05;&#x695A;&#x51E0;&#x4E4E;&#x662F;&#x4E0D;&#x53EF;&#x80FD;&#x7684;&#x4E8B;&#xFF1B;&#x53E6;&#x5916;&#xFF0C;&#x968F;&#x7740; AJAX &#x7684;&#x6D41;&#x884C;&#xFF0C;&#x5982;&#x4F55;&#x83B7;&#x53D6;&#x7531; Javascript &#x52A8;&#x6001;&#x751F;&#x6210;&#x7684;&#x5185;&#x5BB9;&#x6210;&#x4E86;&#x4E00;&#x5927;&#x96BE;&#x9898;&#xFF1B;&#x9664;&#x6B64;&#x4E4B;&#x5916;&#xFF0C;Internet &#x4E0A;&#x8FD8;&#x6709;&#x6709;&#x5404;&#x79CD;&#x6709;&#x610F;&#x6216;&#x65E0;&#x610F;&#x51FA;&#x73B0;&#x7684; Spider Trap &#xFF0C;&#x5982;&#x679C;&#x76F2;&#x76EE;&#x7684;&#x8DDF;&#x8E2A;&#x8D85;&#x94FE;&#x63A5;&#x7684;&#x8BDD;&#xFF0C;&#x5C31;&#x4F1A;&#x9677;&#x5165; Trap &#x4E2D;&#x4E07;&#x52AB;&#x4E0D;&#x590D;&#x4E86;&#xFF0C;&#x4F8B;&#x5982;&#x8FD9;&#x4E2A;&#x7F51;&#x7AD9;&#xFF0C;&#x636E;&#x8BF4;&#x662F;&#x4E4B;&#x524D; Google &#x5BA3;&#x79F0; Internet &#x4E0A;&#x7684; Unique URL &#x6570;&#x76EE;&#x5DF2;&#x7ECF;&#x8FBE;&#x5230;&#x4E86; 1 trillion &#x4E2A;&#xFF0C;&#x56E0;&#x6B64;&#x8FD9;&#x4E2A;&#x4EBA; is proud to announce the second trillion &#x3002; &#x6700;&#x7B80;&#x5355;&#x7684;&#x722C;&#x866B;requests &#x5E93; import requests url = &quot;http://shuang0420.github.io/&quot; r = requests.get(url) urllib2 &#x5E93;1234567891011import urllib2# request source fileurl = &quot;http://shuang0420.github.io/&quot;request = urllib2.Request(url) # write a letterresponse = urllib2.urlopen(request) # send the letter and get the replypage = response.read() # read the reply# save source filewebFile = open(&apos;webPage.html&apos;, &apos;wb&apos;)webFile.write(page)webFile.close() &#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x722C;&#x866B;&#xFF0C;&#x6253;&#x5F00; webPage.html &#x662F;&#x8FD9;&#x6837;&#x7684;&#x663E;&#x793A;&#xFF0C;&#x6CA1;&#x6709;css. &#x5B9E;&#x4F8B;&#xFF1A;&#x722C;&#x53D6;&#x7F51;&#x6613;&#x65B0;&#x95FB;&#x722C;&#x53D6;&#x7F51;&#x6613;&#x65B0;&#x95FB; [&#x4EE3;&#x7801;&#x793A;&#x4F8B;]&#x2013; &#x4F7F;&#x7528; urllib2 &#x7684; requests&#x5305;&#x6765;&#x722C;&#x53D6;&#x9875;&#x9762;&#x2013; &#x4F7F;&#x7528;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#x548C; bs4 &#x5206;&#x6790;&#x4E00;&#x7EA7;&#x9875;&#x9762;,&#x4F7F;&#x7528; Xpath &#x6765;&#x5206;&#x6790;&#x4E8C;&#x7EA7;&#x9875;&#x9762;&#x2013; &#x5C06;&#x5F97;&#x5230;&#x7684;&#x6807;&#x9898;&#x548C;&#x94FE;&#x63A5;,&#x4FDD;&#x5B58;&#x4E3A;&#x672C;&#x5730;&#x6587;&#x4EF6; &#x5206;&#x6790;&#x521D;&#x59CB;&#x9875;&#x9762;&#x6211;&#x4EEC;&#x7684;&#x521D;&#x59CB;&#x9875;&#x9762;&#x662F; http://news.163.com/rank &#x67E5;&#x770B;&#x6E90;&#x4EE3;&#x7801; &#x6211;&#x4EEC;&#x60F3;&#x8981;&#x7684;&#x662F;&#x5206;&#x7C7B;&#x6807;&#x9898;&#x548C;URL&#xFF0C;&#x9700;&#x8981;&#x89E3;&#x6790; DOM &#x6587;&#x6863;&#x6811;,&#x8FD9;&#x91CC;&#x4F7F;&#x7528;&#x4E86; BeautifulSoup &#x91CC;&#x7684;&#x65B9;&#x6CD5;&#x3002;123456789101112def Nav_Info(myPage): # &#x4E8C;&#x7EA7;&#x5BFC;&#x822A;&#x7684;&#x6807;&#x9898;&#x548C;&#x9875;&#x9762; pageInfo = re.findall(r&apos;&lt;div class=&quot;subNav&quot;&gt;.*?&lt;div class=&quot;area areabg1&quot;&gt;&apos;, myPage, re.S)[ 0].replace(&apos;&lt;div class=&quot;subNav&quot;&gt;&apos;, &apos;&apos;).replace(&apos;&lt;div class=&quot;area areabg1&quot;&gt;&apos;, &apos;&apos;) soup = BeautifulSoup(pageInfo, &quot;lxml&quot;) tags = soup(&apos;a&apos;) topics = [] for tag in tags: # &#x53EA;&#x8981; &#x79D1;&#x6280;&#x3001;&#x8D22;&#x7ECF;&#x3001;&#x4F53;&#x80B2; &#x7684;&#x65B0;&#x95FB; # if (tag.string==&apos;&#x79D1;&#x6280;&apos; or tag.string==&apos;&#x8D22;&#x7ECF;&apos; or tag.string==&apos;&#x4F53;&#x80B2;&apos;): topics.append((tag.string, tag.get(&apos;href&apos;, None))) return topics &#x7136;&#x800C;&#xFF0C;Beautiful Soup&#x5BF9;&#x6587;&#x6863;&#x7684;&#x89E3;&#x6790;&#x901F;&#x5EA6;&#x4E0D;&#x4F1A;&#x6BD4;&#x5B83;&#x6240;&#x4F9D;&#x8D56;&#x7684;&#x89E3;&#x6790;&#x5668;&#x66F4;&#x5FEB;,&#x5982;&#x679C;&#x5BF9;&#x8BA1;&#x7B97;&#x65F6;&#x95F4;&#x8981;&#x6C42;&#x5F88;&#x9AD8;&#x6216;&#x8005;&#x8BA1;&#x7B97;&#x673A;&#x7684;&#x65F6;&#x95F4;&#x6BD4;&#x7A0B;&#x5E8F;&#x5458;&#x7684;&#x65F6;&#x95F4;&#x66F4;&#x503C;&#x94B1;,&#x90A3;&#x4E48;&#x5C31;&#x5E94;&#x8BE5;&#x76F4;&#x63A5;&#x4F7F;&#x7528; lxml&#x3002;&#x6362;&#x53E5;&#x8BDD;&#x8BF4;,&#x8FD8;&#x6709;&#x63D0;&#x9AD8;Beautiful Soup&#x6548;&#x7387;&#x7684;&#x529E;&#x6CD5;,&#x4F7F;&#x7528;lxml&#x4F5C;&#x4E3A;&#x89E3;&#x6790;&#x5668;&#x3002;Beautiful Soup&#x7528;lxml&#x505A;&#x89E3;&#x6790;&#x5668;&#x6BD4;&#x7528;html5lib&#x6216;Python&#x5185;&#x7F6E;&#x89E3;&#x6790;&#x5668;&#x901F;&#x5EA6;&#x5FEB;&#x5F88;&#x591A;&#x3002;bs4 &#x7684;&#x9ED8;&#x8BA4;&#x89E3;&#x6790;&#x5668;&#x662F; html.parser&#xFF0C;&#x4F7F;&#x7528;lxml&#x7684;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xFF1A; BeautifulSoup(markup, &quot;lxml&quot;) &#x5206;&#x6790;&#x4E8C;&#x7EA7;&#x9875;&#x9762; &#x67E5;&#x770B;&#x6E90;&#x4EE3;&#x7801; &#x6211;&#x4EEC;&#x8981;&#x722C;&#x53D6;&#x7684;&#x662F;&#x4E4B;&#x95F4;&#x7684;&#x65B0;&#x95FB;&#x6807;&#x9898;&#x548C;&#x94FE;&#x63A5;&#xFF0C;&#x540C;&#x6837;&#x9700;&#x8981;&#x89E3;&#x6790;&#x6587;&#x6863;&#x6811;&#xFF0C;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x4EE5;&#x4E0B;&#x4EE3;&#x7801;&#x5B9E;&#x73B0;&#xFF0C;&#x8FD9;&#x91CC;&#x7528;&#x4E86; lxml &#x89E3;&#x6790;&#x5668;&#xFF0C;&#x6548;&#x7387;&#x66F4;&#x9AD8;&#x3002;123456def News_Info(newPage): # xpath &#x4F7F;&#x7528;&#x8DEF;&#x5F84;&#x8868;&#x8FBE;&#x5F0F;&#x6765;&#x9009;&#x53D6;&#x6587;&#x6863;&#x4E2D;&#x7684;&#x8282;&#x70B9;&#x6216;&#x8282;&#x70B9;&#x96C6; dom = etree.HTML(newPage) news_titles = dom.xpath(&apos;//tr/td/a/text()&apos;) news_urls = dom.xpath(&apos;//tr/td/a/@href&apos;) return zip(news_titles, news_urls) &#x5B8C;&#x6574;&#x4EE3;&#x7801; &#x6F5C;&#x5728;&#x95EE;&#x9898; &#x6211;&#x4EEC;&#x7684;&#x4EFB;&#x52A1;&#x662F;&#x722C;&#x53D6;1&#x4E07;&#x4E2A;&#x7F51;&#x9875;&#xFF0C;&#x6309;&#x4E0A;&#x9762;&#x8FD9;&#x4E2A;&#x7A0B;&#x5E8F;&#xFF0C;&#x8017;&#x8D39;&#x65F6;&#x95F4;&#x957F;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x8003;&#x8651;&#x5F00;&#x542F;&#x591A;&#x4E2A;&#x7EBF;&#x7A0B;(&#x6C60;)&#x53BB;&#x4E00;&#x8D77;&#x722C;&#x53D6;&#xFF0C;&#x6216;&#x8005;&#x7528;&#x5206;&#x5E03;&#x5F0F;&#x67B6;&#x6784;&#x53BB;&#x5E76;&#x53D1;&#x7684;&#x722C;&#x53D6;&#x7F51;&#x9875;&#x3002; &#x79CD;&#x5B50;URL&#x548C;&#x540E;&#x7EED;&#x89E3;&#x6790;&#x5230;&#x7684;URL&#x90FD;&#x653E;&#x5728;&#x4E00;&#x4E2A;&#x5217;&#x8868;&#x91CC;&#xFF0C;&#x6211;&#x4EEC;&#x5E94;&#x8BE5;&#x8BBE;&#x8BA1;&#x4E00;&#x4E2A;&#x66F4;&#x5408;&#x7406;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x6765;&#x5B58;&#x653E;&#x8FD9;&#x4E9B;&#x5F85;&#x722C;&#x53D6;&#x7684;URL&#x624D;&#x662F;&#xFF0C;&#x6BD4;&#x5982;&#x961F;&#x5217;&#x6216;&#x8005;&#x4F18;&#x5148;&#x961F;&#x5217;&#x3002; &#x5BF9;&#x5404;&#x4E2A;&#x7F51;&#x7AD9;&#x7684;url&#xFF0C;&#x6211;&#x4EEC;&#x4E00;&#x89C6;&#x540C;&#x4EC1;&#xFF0C;&#x4E8B;&#x5B9E;&#x4E0A;&#xFF0C;&#x6211;&#x4EEC;&#x5E94;&#x5F53;&#x533A;&#x522B;&#x5BF9;&#x5F85;&#x3002;&#x5927;&#x7AD9;&#x597D;&#x7AD9;&#x4F18;&#x5148;&#x539F;&#x5219;&#x5E94;&#x5F53;&#x4E88;&#x4EE5;&#x8003;&#x8651;&#x3002; &#x6BCF;&#x6B21;&#x53D1;&#x8D77;&#x8BF7;&#x6C42;&#xFF0C;&#x6211;&#x4EEC;&#x90FD;&#x662F;&#x6839;&#x636E;url&#x53D1;&#x8D77;&#x8BF7;&#x6C42;&#xFF0C;&#x800C;&#x8FD9;&#x4E2A;&#x8FC7;&#x7A0B;&#x4E2D;&#x4F1A;&#x7275;&#x6D89;&#x5230;DNS&#x89E3;&#x6790;&#xFF0C;&#x5C06;url&#x8F6C;&#x6362;&#x6210;ip&#x5730;&#x5740;&#x3002;&#x4E00;&#x4E2A;&#x7F51;&#x7AD9;&#x901A;&#x5E38;&#x7531;&#x6210;&#x5343;&#x4E0A;&#x4E07;&#x7684;URL&#xFF0C;&#x56E0;&#x6B64;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x8003;&#x8651;&#x5C06;&#x8FD9;&#x4E9B;&#x7F51;&#x7AD9;&#x57DF;&#x540D;&#x7684;IP&#x5730;&#x5740;&#x8FDB;&#x884C;&#x7F13;&#x5B58;&#xFF0C;&#x907F;&#x514D;&#x6BCF;&#x6B21;&#x90FD;&#x53D1;&#x8D77;DNS&#x8BF7;&#x6C42;&#xFF0C;&#x8D39;&#x65F6;&#x8D39;&#x529B;&#x3002; &#x89E3;&#x6790;&#x5230;&#x7F51;&#x9875;&#x4E2D;&#x7684;urls&#x540E;&#xFF0C;&#x6211;&#x4EEC;&#x6CA1;&#x6709;&#x505A;&#x4EFB;&#x4F55;&#x53BB;&#x91CD;&#x5904;&#x7406;&#xFF0C;&#x5168;&#x90E8;&#x653E;&#x5165;&#x5F85;&#x722C;&#x53D6;&#x7684;&#x5217;&#x8868;&#x4E2D;&#x3002;&#x4E8B;&#x5B9E;&#x4E0A;&#xFF0C;&#x53EF;&#x80FD;&#x6709;&#x5F88;&#x591A;&#x94FE;&#x63A5;&#x662F;&#x91CD;&#x590D;&#x7684;&#xFF0C;&#x6211;&#x4EEC;&#x505A;&#x4E86;&#x5F88;&#x591A;&#x91CD;&#x590D;&#x52B3;&#x52A8;&#x3002; &#x722C;&#x866B;&#x88AB;&#x5C01;&#x7981;&#x95EE;&#x9898; &#x4F18;&#x5316;&#x65B9;&#x6848; &#x5E76;&#x884C;&#x722C;&#x53D6;&#x95EE;&#x9898; &#x5173;&#x4E8E;&#x5E76;&#x884C;&#x722C;&#x53D6;&#xFF0C;&#x9996;&#x5148;&#x6211;&#x4EEC;&#x60F3;&#x5230;&#x7684;&#x662F;&#x591A;&#x7EBF;&#x7A0B;&#x6216;&#x8005;&#x7EBF;&#x7A0B;&#x6C60;&#x65B9;&#x5F0F;&#xFF0C;&#x4E00;&#x4E2A;&#x722C;&#x866B;&#x7A0B;&#x5E8F;&#x5185;&#x90E8;&#x5F00;&#x542F;&#x591A;&#x4E2A;&#x7EBF;&#x7A0B;&#x3002;&#x540C;&#x4E00;&#x53F0;&#x673A;&#x5668;&#x5F00;&#x542F;&#x591A;&#x4E2A;&#x722C;&#x866B;&#x7A0B;&#x5E8F;&#xFF0C;&#x8FD9;&#x6837;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x6709;N&#x591A;&#x722C;&#x53D6;&#x7EBF;&#x7A0B;&#x5728;&#x540C;&#x65F6;&#x5DE5;&#x4F5C;&#xFF0C;&#x5927;&#x5927;&#x63D0;&#x9AD8;&#x4E86;&#x6548;&#x7387;&#x3002; &#x5F53;&#x7136;&#xFF0C;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x8981;&#x722C;&#x53D6;&#x7684;&#x4EFB;&#x52A1;&#x7279;&#x522B;&#x591A;&#xFF0C;&#x4E00;&#x53F0;&#x673A;&#x5668;&#x3001;&#x4E00;&#x4E2A;&#x7F51;&#x70B9;&#x80AF;&#x5B9A;&#x662F;&#x4E0D;&#x591F;&#x7684;&#xFF0C;&#x6211;&#x4EEC;&#x5FC5;&#x987B;&#x8003;&#x8651;&#x5206;&#x5E03;&#x5F0F;&#x722C;&#x866B;&#x3002;&#x5206;&#x5E03;&#x5F0F;&#x67B6;&#x6784;&#xFF0C;&#x8003;&#x8651;&#x7684;&#x95EE;&#x9898;&#x6709;&#x5F88;&#x591A;&#xFF0C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x4E00;&#x4E2A;scheduler&#x6765;&#x5206;&#x914D;&#x4EFB;&#x52A1;&#x5E76;&#x6392;&#x5E8F;&#xFF0C;&#x5404;&#x4E2A;&#x722C;&#x866B;&#x4E4B;&#x95F4;&#x8FD8;&#x9700;&#x8981;&#x901A;&#x4FE1;&#x5408;&#x4F5C;&#xFF0C;&#x5171;&#x540C;&#x5B8C;&#x6210;&#x4EFB;&#x52A1;&#xFF0C;&#x4E0D;&#x8981;&#x91CD;&#x590D;&#x722C;&#x53D6;&#x76F8;&#x540C;&#x7684;&#x7F51;&#x9875;&#x3002;&#x5206;&#x914D;&#x4EFB;&#x52A1;&#x65F6;&#x6211;&#x4EEC;&#x8FD8;&#x9700;&#x8981;&#x8003;&#x8651;&#x8D1F;&#x8F7D;&#x5747;&#x8861;&#x4EE5;&#x505A;&#x5230;&#x516C;&#x5E73;&#x3002;&#xFF08;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;Hash&#xFF0C;&#x6BD4;&#x5982;&#x6839;&#x636E;&#x7F51;&#x7AD9;&#x57DF;&#x540D;&#x8FDB;&#x884C;hash&#xFF09; &#x8D1F;&#x8F7D;&#x5747;&#x8861;&#x5206;&#x6D3E;&#x5B8C;&#x4EFB;&#x52A1;&#x4E4B;&#x540E;&#xFF0C;&#x5343;&#x4E07;&#x4E0D;&#x8981;&#x4EE5;&#x4E3A;&#x4E07;&#x4E8B;&#x5927;&#x5409;&#x4E86;&#xFF0C;&#x4E07;&#x4E00;&#x54EA;&#x53F0;&#x673A;&#x5668;&#x6302;&#x4E86;&#x5462;&#xFF1F;&#x539F;&#x5148;&#x6307;&#x6D3E;&#x7ED9;&#x6302;&#x6389;&#x7684;&#x54EA;&#x53F0;&#x673A;&#x5668;&#x7684;&#x4EFB;&#x52A1;&#x6307;&#x6D3E;&#x7ED9;&#x8C01;&#xFF1F;&#x53C8;&#x6216;&#x8005;&#x54EA;&#x5929;&#x8981;&#x589E;&#x52A0;&#x51E0;&#x53F0;&#x673A;&#x5668;&#xFF0C;&#x4EFB;&#x52A1;&#x6709;&#x8BE5;&#x5982;&#x4F55;&#x8FDB;&#x884C;&#x91CD;&#x65B0;&#x5206;&#x914D;&#x5462;&#xFF1F;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x8FD8;&#x8981; task table &#x6765;&#x7EAA;&#x5F55;&#x72B6;&#x6001;&#x3002; &#x5F85;&#x722C;&#x53D6;&#x7F51;&#x9875;&#x961F;&#x5217;&#x5982;&#x4F55;&#x5BF9;&#x5F85;&#x5F85;&#x6293;&#x53D6;&#x961F;&#x5217;&#xFF0C;&#x8DDF;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x5982;&#x4F55;&#x8C03;&#x5EA6;&#x8FDB;&#x7A0B;&#x662F;&#x7C7B;&#x4F3C;&#x7684;&#x573A;&#x666F;&#x3002;&#x4E0D;&#x540C;&#x7F51;&#x7AD9;&#xFF0C;&#x91CD;&#x8981;&#x7A0B;&#x5EA6;&#x4E0D;&#x540C;&#xFF0C;&#x56E0;&#x6B64;&#xFF0C;&#x53EF;&#x4EE5;&#x8BBE;&#x8BA1;&#x4E00;&#x4E2A;&#x4F18;&#x5148;&#x7EA7;&#x961F;&#x5217;&#x6765;&#x5B58;&#x653E;&#x5F85;&#x722C;&#x8D77;&#x7684;&#x7F51;&#x9875;&#x94FE;&#x63A5;&#x3002;&#x5982;&#x6B64;&#x4E00;&#x6765;&#xFF0C;&#x6BCF;&#x6B21;&#x6293;&#x53D6;&#x65F6;&#xFF0C;&#x6211;&#x4EEC;&#x90FD;&#x4F18;&#x5148;&#x722C;&#x53D6;&#x91CD;&#x8981;&#x7684;&#x7F51;&#x9875;&#x3002;&#x5F53;&#x7136;&#xFF0C;&#x4F60;&#x4E5F;&#x53EF;&#x4EE5;&#x6548;&#x4EFF;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x7684;&#x8FDB;&#x7A0B;&#x8C03;&#x5EA6;&#x7B56;&#x7565;&#x4E4B;&#x591A;&#x7EA7;&#x53CD;&#x9988;&#x961F;&#x5217;&#x8C03;&#x5EA6;&#x7B97;&#x6CD5;&#x3002; DNS&#x7F13;&#x5B58;&#x4E3A;&#x4E86;&#x907F;&#x514D;&#x6BCF;&#x6B21;&#x90FD;&#x53D1;&#x8D77;DNS&#x67E5;&#x8BE2;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5C06;DNS&#x8FDB;&#x884C;&#x7F13;&#x5B58;&#x3002;DNS&#x7F13;&#x5B58;&#x5F53;&#x7136;&#x662F;&#x8BBE;&#x8BA1;&#x4E00;&#x4E2A;hash&#x8868;&#x6765;&#x5B58;&#x50A8;&#x5DF2;&#x6709;&#x7684;&#x57DF;&#x540D;&#x53CA;&#x5176;IP&#x3002; &#x7F51;&#x9875;&#x53BB;&#x91CD;&#x8BF4;&#x5230;&#x7F51;&#x9875;&#x53BB;&#x91CD;&#xFF0C;&#x7B2C;&#x4E00;&#x4E2A;&#x60F3;&#x5230;&#x7684;&#x662F;&#x5783;&#x573E;&#x90AE;&#x4EF6;&#x8FC7;&#x6EE4;&#x3002;&#x5783;&#x573E;&#x90AE;&#x4EF6;&#x8FC7;&#x6EE4;&#x4E00;&#x4E2A;&#x7ECF;&#x5178;&#x7684;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#x662F;Bloom Filter&#xFF08;&#x5E03;&#x9686;&#x8FC7;&#x6EE4;&#x5668;&#xFF09;&#x3002;&#x5E03;&#x9686;&#x8FC7;&#x6EE4;&#x5668;&#x539F;&#x7406;&#x7B80;&#x5355;&#x6765;&#x8BF4;&#x5C31;&#x662F;&#xFF1A;&#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;&#x5927;&#x7684;&#x4F4D;&#x6570;&#x7EC4;&#xFF0C;&#x7136;&#x540E;&#x7528;&#x591A;&#x4E2A;Hash&#x51FD;&#x6570;&#x5BF9;&#x540C;&#x4E00;&#x4E2A;url&#x8FDB;&#x884C;hash&#x5F97;&#x5230;&#x591A;&#x4E2A;&#x6570;&#x5B57;&#xFF0C;&#x7136;&#x540E;&#x5C06;&#x4F4D;&#x6570;&#x7EC4;&#x4E2D;&#x8FD9;&#x4E9B;&#x6570;&#x5B57;&#x5BF9;&#x5E94;&#x7684;&#x4F4D;&#x7F6E;&#x4E3A;1&#x3002;&#x4E0B;&#x6B21;&#x518D;&#x6765;&#x4E00;&#x4E2A;url&#x65F6;&#xFF0C;&#x540C;&#x6837;&#x662F;&#x7528;&#x591A;&#x4E2A;Hash&#x51FD;&#x6570;&#x8FDB;&#x884C;hash&#xFF0C;&#x5F97;&#x5230;&#x591A;&#x4E2A;&#x6570;&#x5B57;&#xFF0C;&#x6211;&#x4EEC;&#x53EA;&#x9700;&#x8981;&#x5224;&#x65AD;&#x4F4D;&#x6570;&#x7EC4;&#x4E2D;&#x8FD9;&#x4E9B;&#x6570;&#x5B57;&#x5BF9;&#x5E94;&#x7684;&#x4E3A;&#x662F;&#x5168;&#x4E3A;1&#xFF0C;&#x5982;&#x679C;&#x5168;&#x4E3A;1&#xFF0C;&#x90A3;&#x4E48;&#x8BF4;&#x660E;&#x8FD9;&#x4E2A;url&#x5DF2;&#x7ECF;&#x51FA;&#x73B0;&#x8FC7;&#x3002;&#x5982;&#x6B64;&#xFF0C;&#x4FBF;&#x5B8C;&#x6210;&#x4E86;url&#x53BB;&#x91CD;&#x7684;&#x95EE;&#x9898;&#x3002;&#x5F53;&#x7136;&#xFF0C;&#x8FD9;&#x79CD;&#x65B9;&#x6CD5;&#x4F1A;&#x6709;&#x8BEF;&#x5DEE;&#xFF0C;&#x53EA;&#x8981;&#x8BEF;&#x5DEE;&#x5728;&#x6211;&#x4EEC;&#x7684;&#x5BB9;&#x5FCD;&#x8303;&#x56F4;&#x4E4B;&#x7C7B;&#xFF0C;&#x6BD4;&#x5982;1&#x4E07;&#x4E2A;&#x7F51;&#x9875;&#xFF0C;&#x6211;&#x53EA;&#x722C;&#x53D6;&#x5230;&#x4E86;9999&#x4E2A;&#xFF0C;&#x5E76;&#x4E0D;&#x4F1A;&#x6709;&#x592A;&#x5927;&#x7684;&#x5B9E;&#x9645;&#x5F71;&#x54CD;&#x3002;&#x4E00;&#x79CD;&#x5F88;&#x4E0D;&#x9519;&#x7684;&#x65B9;&#x6CD5;&#x6765;&#x81EA;url&#x76F8;&#x4F3C;&#x5EA6;&#x8BA1;&#x7B97;&#xFF0C;&#x7B80;&#x5355;&#x4ECB;&#x7ECD;&#x4E0B;&#x3002;&#x8003;&#x8651;&#x5230;url&#x672C;&#x8EAB;&#x7684;&#x7ED3;&#x6784;&#xFF0C;&#x5BF9;&#x5176;&#x76F8;&#x4F3C;&#x5EA6;&#x7684;&#x8BA1;&#x7B97;&#x5C31;&#x53EF;&#x4EE5;&#x62BD;&#x8C61;&#x4E3A;&#x5BF9;&#x5176;&#x5173;&#x952E;&#x7279;&#x5F81;&#x76F8;&#x4F3C;&#x5EA6;&#x7684;&#x8BA1;&#x7B97;&#x3002;&#x6BD4;&#x5982;&#x53EF;&#x4EE5;&#x628A;&#x7AD9;&#x70B9;&#x62BD;&#x8C61;&#x4E3A;&#x4E00;&#x7EF4;&#x7279;&#x5F81;&#xFF0C;&#x76EE;&#x5F55;&#x6DF1;&#x5EA6;&#x62BD;&#x8C61;&#x4E3A;&#x4E00;&#x7EF4;&#x7279;&#x5F81;&#xFF0C;&#x4E00;&#x7EA7;&#x76EE;&#x5F55;&#x3001;&#x4E8C;&#x7EA7;&#x76EE;&#x5F55;&#x3001;&#x5C3E;&#x90E8;&#x9875;&#x9762;&#x7684;&#x540D;&#x5B57;&#x4E5F;&#x90FD;&#x53EF;&#x4EE5;&#x62BD;&#x8C61;&#x4E3A;&#x4E00;&#x7EF4;&#x7279;&#x5F81;&#x3002;&#x6BD4;&#x5982;&#x4E0B;&#x9762;&#x4E24;&#x4E2A;url:url1: http://www.spongeliu.com/go/happy/1234.htmlurl2: http://www.spongeliu.com/snoopy/tree/abcd.html &#x7279;&#x5F81;&#xFF1A; &#x7AD9;&#x70B9;&#x7279;&#x5F81;&#xFF1A;&#x5982;&#x679C;&#x4E24;&#x4E2A;url&#x7AD9;&#x70B9;&#x4E00;&#x6837;&#xFF0C;&#x5219;&#x7279;&#x5F81;&#x53D6;&#x503C;1&#xFF0C;&#x5426;&#x5219;&#x53D6;&#x503C;0&#xFF1B; &#x76EE;&#x5F55;&#x6DF1;&#x5EA6;&#x7279;&#x5F81;&#xFF1A;&#x7279;&#x5F81;&#x53D6;&#x503C;&#x5206;&#x522B;&#x662F;&#x4E24;&#x4E2A;url&#x7684;&#x76EE;&#x5F55;&#x6DF1;&#x5EA6;&#x662F;&#x5426;&#x4E00;&#x81F4;&#xFF1B; &#x4E00;&#x7EA7;&#x76EE;&#x5F55;&#x7279;&#x5F81;&#xFF1A;&#x5728;&#x8FD9;&#x7EF4;&#x7279;&#x5F81;&#x7684;&#x53D6;&#x503C;&#x4E0A;&#xFF0C;&#x53EF;&#x4EE5;&#x91C7;&#x7528;&#x591A;&#x79CD;&#x65B9;&#x6CD5;&#xFF0C;&#x6BD4;&#x5982;&#x5982;&#x679C;&#x4E00;&#x7EA7;&#x76EE;&#x5F55;&#x540D;&#x5B57;&#x76F8;&#x540C;&#x5219;&#x7279;&#x5F81;&#x53D6;1&#xFF0C;&#x5426;&#x5219;&#x53D6;0&#xFF1B;&#x6216;&#x8005;&#x6839;&#x636E;&#x76EE;&#x5F55;&#x540D;&#x5B57;&#x7684;&#x7F16;&#x8F91;&#x8DDD;&#x79BB;&#x7B97;&#x51FA;&#x4E00;&#x4E2A;&#x7279;&#x5F81;&#x503C;&#xFF1B;&#x6216;&#x8005;&#x6839;&#x636E;&#x76EE;&#x5F55;&#x540D;&#x5B57;&#x7684;pattern&#xFF0C;&#x5982;&#x662F;&#x5426;&#x6570;&#x5B57;&#x3001;&#x662F;&#x5426;&#x5B57;&#x6BCD;&#x3001;&#x662F;&#x5426;&#x5B57;&#x6BCD;&#x6570;&#x5B57;&#x7A7F;&#x63D2;&#x7B49;&#x3002;&#x8FD9;&#x53D6;&#x51B3;&#x4E8E;&#x5177;&#x4F53;&#x9700;&#x6C42;&#xFF0C;&#x8FD9;&#x91CC;&#x793A;&#x4F8B;&#x4EC5;&#x4EC5;&#x6839;&#x636E;&#x76EE;&#x5F55;&#x540D;&#x662F;&#x5426;&#x76F8;&#x540C;&#x53D6;1&#x548C;0&#xFF1B; &#x5C3E;&#x9875;&#x9762;&#x7279;&#x5F81;&#xFF1A;&#x8FD9;&#x7EF4;&#x7279;&#x5F81;&#x7684;&#x53D6;&#x503C;&#x540C;&#x4E00;&#x7EA7;&#x76EE;&#x5F55;&#xFF0C;&#x53EF;&#x4EE5;&#x5224;&#x65AD;&#x540E;&#x7F00;&#x662F;&#x5426;&#x76F8;&#x540C;&#x3001;&#x662F;&#x5426;&#x6570;&#x5B57;&#x9875;&#x3001;&#x662F;&#x5426;&#x673A;&#x5668;&#x751F;&#x6210;&#x7684;&#x968F;&#x673A;&#x5B57;&#x7B26;&#x4E32;&#x6216;&#x8005;&#x6839;&#x636E;&#x7F16;&#x8F91;&#x957F;&#x5EA6;&#x6765;&#x53D6;&#x503C;&#xFF0C;&#x5177;&#x4F53;&#x4E5F;&#x4F9D;&#x8D56;&#x4E8E;&#x9700;&#x6C42;&#x3002;&#x8FD9;&#x91CC;&#x793A;&#x4F8B;&#x4EC5;&#x4EC5;&#x5224;&#x65AD;&#x6700;&#x540E;&#x4E00;&#x7EA7;&#x76EE;&#x5F55;&#x7684;&#x7279;&#x5F81;&#x662F;&#x5426;&#x4E00;&#x81F4;&#xFF08;&#x6BD4;&#x5982;&#x662F;&#x5426;&#x90FD;&#x7531;&#x6570;&#x5B57;&#x7EC4;&#x6210;&#x3001;&#x662F;&#x5426;&#x90FD;&#x6709;&#x5B57;&#x6BCD;&#x7EC4;&#x6210;&#x7B49;&#xFF09;&#x3002; &#x8FD9;&#x6837;&#xFF0C;&#x5BF9;&#x4E8E;&#x8FD9;&#x4E24;&#x4E2A;url&#x5C31;&#x83B7;&#x5F97;&#x4E86;4&#x4E2A;&#x7EF4;&#x5EA6;&#x7684;&#x7279;&#x5F81;&#xFF0C;&#x5206;&#x522B;&#x662F;&#xFF1A;1 1 0 0 &#x3002;&#x6709;&#x4E86;&#x8FD9;&#x4E24;&#x4E2A;&#x7279;&#x5F81;&#x7EC4;&#x5408;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x6839;&#x636E;&#x5177;&#x4F53;&#x9700;&#x6C42;&#x5224;&#x65AD;&#x662F;&#x5426;&#x76F8;&#x4F3C;&#x4E86;&#x3002;&#x6211;&#x4EEC;&#x5B9A;&#x4E49;&#x4E00;&#x4E0B;&#x6BCF;&#x4E2A;&#x7279;&#x5F81;&#x7684;&#x91CD;&#x8981;&#x7A0B;&#x5EA6;&#xFF0C;&#x7ED9;&#x51FA;&#x4E00;&#x4E2A;&#x516C;&#x5F0F;&#xFF1A; similarity = feather1 * x1 + feather2*x2 + feather3*x3 + feather4*x4 &#x5176;&#x4E2D;x&#x8868;&#x793A;&#x5BF9;&#x5E94;&#x7279;&#x5F81;&#x7684;&#x91CD;&#x8981;&#x7A0B;&#x5EA6;&#xFF0C;&#x6BD4;&#x5982;&#x6211;&#x8BA4;&#x4E3A;&#x7AD9;&#x70B9;&#x548C;&#x76EE;&#x5F55;&#x90FD;&#x4E0D;&#x91CD;&#x8981;&#xFF0C;&#x6700;&#x540E;&#x5C3E;&#x9875;&#x9762;&#x7684;&#x7279;&#x5F81;&#x624D;&#x662F;&#x6700;&#x91CD;&#x8981;&#x7684;&#xFF0C;&#x90A3;&#x4E48;x1,x2,x3&#x90FD;&#x53EF;&#x4EE5;&#x53D6;&#x503C;&#x4E3A;0&#xFF0C;x4&#x53D6;&#x503C;&#x4E3A;1&#xFF0C;&#x8FD9;&#x6837;&#x6839;&#x636E;similarity&#x5C31;&#x80FD;&#x5F97;&#x51FA;&#x662F;&#x5426;&#x76F8;&#x4F3C;&#x4E86;&#x3002;&#x6216;&#x8005;&#x8BA4;&#x4E3A;&#x7AD9;&#x70B9;&#x7684;&#x91CD;&#x8981;&#x6027;&#x5360;10%&#xFF0C;&#x76EE;&#x5F55;&#x6DF1;&#x5EA6;&#x5360;50%&#xFF0C;&#x5C3E;&#x9875;&#x9762;&#x7684;&#x7279;&#x5F81;&#x5360;40%&#xFF0C;&#x90A3;&#x4E48;&#x7CFB;&#x6570;&#x5206;&#x522B;&#x53D6;&#x503C;&#x4E3A;0.1\\0.5\\0\\0.4&#x5373;&#x53EF;&#x3002; &#x5176;&#x5B9E;&#x8FD9;&#x6837;&#x627E;&#x51FA;&#x9700;&#x8981;&#x7684;&#x7279;&#x5F81;&#xFF0C;&#x53EF;&#x4EE5;&#x628A;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x7B80;&#x5316;&#x6210;&#x4E00;&#x4E2A;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x4EBA;&#x4E3A;&#x5224;&#x65AD;&#x51FA;&#x4E00;&#x6279;url&#x662F;&#x5426;&#x76F8;&#x4F3C;&#xFF0C;&#x7528;svm&#x8BAD;&#x7EC3;&#x4E00;&#x4E0B;&#x5C31;&#x53EF;&#x4EE5;&#x8FBE;&#x5230;&#x673A;&#x5668;&#x5224;&#x65AD;&#x7684;&#x76EE;&#x7684;&#x3002;&#x9664;&#x4E86;&#x4E0A;&#x9762;&#x8FD9;&#x79CD;&#x4E24;&#x4E2A;url&#x76F8;&#x4F3C;&#x5EA6;&#x7684;&#x5224;&#x65AD;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x5C06;&#x6BCF;&#x4E00;&#x6761;url&#x90FD;&#x62BD;&#x8C61;&#x6210;&#x4E00;&#x7EC4;&#x7279;&#x5F81;&#xFF0C;&#x7136;&#x540E;&#x8BA1;&#x7B97;&#x51FA;&#x4E00;&#x4E2A;url&#x7684;&#x5F97;&#x5206;&#xFF0C;&#x8BBE;&#x7F6E;&#x4E00;&#x4E2A;&#x5206;&#x6570;&#x5DEE;&#x7684;&#x9608;&#x503C;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x8FBE;&#x5230;&#x4ECE;&#x4E00;&#x5927;&#x5806;url&#x4E2D;&#x627E;&#x51FA;&#x76F8;&#x4F3C;&#x7684;url&#x7684;&#x76EE;&#x7684;&#x3002; &#x6570;&#x636E;&#x5B58;&#x50A8;&#x7684;&#x95EE;&#x9898;&#x6570;&#x636E;&#x5B58;&#x50A8;&#x540C;&#x6837;&#x662F;&#x4E2A;&#x5F88;&#x6709;&#x6280;&#x672F;&#x542B;&#x91CF;&#x7684;&#x95EE;&#x9898;&#x3002;&#x7528;&#x5173;&#x7CFB;&#x6570;&#x636E;&#x5E93;&#x5B58;&#x53D6;&#x8FD8;&#x662F;&#x7528;NoSQL&#xFF0C;&#x6291;&#x6216;&#x662F;&#x81EA;&#x5DF1;&#x8BBE;&#x8BA1;&#x7279;&#x5B9A;&#x7684;&#x6587;&#x4EF6;&#x683C;&#x5F0F;&#x8FDB;&#x884C;&#x5B58;&#x50A8;&#xFF0C;&#x90FD;&#x5927;&#x6709;&#x6587;&#x7AE0;&#x53EF;&#x505A;&#x3002; &#x8FDB;&#x7A0B;&#x95F4;&#x901A;&#x4FE1;&#x5206;&#x5E03;&#x5F0F;&#x722C;&#x866B;&#xFF0C;&#x5C31;&#x5FC5;&#x7136;&#x79BB;&#x4E0D;&#x5F00;&#x8FDB;&#x7A0B;&#x95F4;&#x7684;&#x901A;&#x4FE1;&#x3002;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4EE5;&#x89C4;&#x5B9A;&#x7684;&#x6570;&#x636E;&#x683C;&#x5F0F;&#x8FDB;&#x884C;&#x6570;&#x636E;&#x4EA4;&#x4E92;&#xFF0C;&#x5B8C;&#x6210;&#x8FDB;&#x7A0B;&#x95F4;&#x901A;&#x4FE1;&#x3002; &#x53CD;&#x722C;&#x866B;&#x673A;&#x5236;&#x95EE;&#x9898;&#x9488;&#x5BF9;&#x53CD;&#x722C;&#x866B;&#x673A;&#x5236;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x8F6E;&#x6362;IP&#x5730;&#x5740;&#x3001;&#x8F6E;&#x6362;Cookie&#x3001;&#x4FEE;&#x6539;&#x7528;&#x6237;&#x4EE3;&#x7406;(User Agent)&#x3001;&#x9650;&#x5236;&#x901F;&#x5EA6;&#x3001;&#x907F;&#x514D;&#x91CD;&#x590D;&#x6027;&#x722C;&#x884C;&#x6A21;&#x5F0F;&#x7B49;&#x65B9;&#x6CD5;&#x89E3;&#x51B3;&#x3002; &#x53C2;&#x8003;&#x94FE;&#x63A5;: &#x7F51;&#x7EDC;&#x722C;&#x866B;&#x57FA;&#x672C;&#x539F;&#x7406;(&#x4E00;)http://www.chinahadoop.cn/course/596/learn#lesson/11986https://www.bittiger.io/blog/post/5pDTFcDwkmCvvmKyshttps://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html","tags":"crawler"},{"title":"gensim-doc2vec实战","url":"/2016/06/01/gensim-doc2vec实战/","text":"gensim&#x7684;doc2vec&#x627E;&#x4E0D;&#x5230;&#x591A;&#x5C11;&#x8D44;&#x6599;&#xFF0C;&#x6839;&#x636E;&#x5B98;&#x65B9;api&#x63A2;&#x7D22;&#x6027;&#x7684;&#x505A;&#x4E86;&#x4E9B;&#x5C1D;&#x8BD5;&#x3002;&#x672C;&#x6587;&#x4ECB;&#x7ECD;&#x4E86;&#x5229;&#x7528;gensim&#x7684;doc2vec&#x6765;&#x8BAD;&#x7EC3;&#x6A21;&#x578B;&#xFF0C;infer&#x65B0;&#x6587;&#x6863;&#x5411;&#x91CF;&#xFF0C;infer&#x76F8;&#x4F3C;&#x5EA6;&#x7B49;&#x65B9;&#x6CD5;&#xFF0C;&#x6709;&#x4E00;&#x4E9B;&#x4E0D;&#x6210;&#x719F;&#x7684;&#x5730;&#x65B9;&#xFF0C;&#x540E;&#x671F;&#x4F1A;&#x7EE7;&#x7EED;&#x6539;&#x8FDB;&#x3002; &#x5BFC;&#x5165;&#x6A21;&#x5757; # -*- coding: utf-8 -*- import sys reload(sys) sys.setdefaultencoding(&apos;utf8&apos;) import gensim, logging import os import jieba # logging information logging.basicConfig(format=&apos;%(asctime)s : %(levelname)s : %(message)s&apos;, level=logging.INFO) &#x8BFB;&#x53D6;&#x6587;&#x4EF6; # get input file, text format f = open(&apos;trainingdata.txt&apos;,&apos;r&apos;) input = f.readlines() count = len(input) print count &#x6587;&#x4EF6;&#x9884;&#x5904;&#x7406;&#xFF0C;&#x5206;&#x8BCD;&#x7B49; # read file and separate words alldocs=[] # for the sake of check, can be removed count=0 # for the sake of check, can be removed for line in input: line=line.strip(&apos;\\n&apos;) seg_list = jieba.cut(line) output.write(&apos; &apos;.join(seg_list) + &apos;\\n&apos;) alldocs.append(gensim.models.doc2vec.TaggedDocument(seg_list,count)) # for the sake of check, can be removed count+=1 # for the sake of check, can be removed &#x6A21;&#x578B;&#x9009;&#x62E9;gensim Doc2Vec &#x63D0;&#x4F9B;&#x4E86; DM &#x548C; DBOW &#x4E24;&#x4E2A;&#x6A21;&#x578B;&#x3002;gensim &#x7684;&#x8BF4;&#x660E;&#x6587;&#x6863;&#x5EFA;&#x8BAE;&#x591A;&#x6B21;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x96C6;&#x5E76;&#x8C03;&#x6574;&#x5B66;&#x4E60;&#x901F;&#x7387;&#x6216;&#x5728;&#x6BCF;&#x6B21;&#x8BAD;&#x7EC3;&#x4E2D;&#x6253;&#x4E71;&#x8F93;&#x5165;&#x4FE1;&#x606F;&#x7684;&#x987A;&#x5E8F;&#x4EE5;&#x6C42;&#x83B7;&#x5F97;&#x6700;&#x4F73;&#x6548;&#x679C;&#x3002; # PV-DM w/concatenation - window=5 (both sides) approximates paper&apos;s 10-word total window size Doc2Vec(sentences,dm=1, dm_concat=1, size=100, window=2, hs=0, min_count=2, workers=cores) # PV-DBOW Doc2Vec(sentences,dm=0, size=100, hs=0, min_count=2, workers=cores) # PV-DM w/average Doc2Vec(sentences,dm=1, dm_mean=1, size=100, window=2, hs=0, min_count=2, workers=cores) &#x8BAD;&#x7EC3;&#x5E76;&#x4FDD;&#x5B58;&#x6A21;&#x578B; # train and save the model sentences= gensim.models.doc2vec.TaggedLineDocument(&apos;output.seq&apos;) model = gensim.models.Doc2Vec(sentences,size=100, window=3) model.train(sentences) model.save(&apos;all_model.txt&apos;) &#x4FDD;&#x5B58;&#x6587;&#x6863;&#x5411;&#x91CF; # save vectors out=open(&quot;all_vector.txt&quot;,&quot;wb&quot;) for num in range(0,count): docvec =model.docvecs[num] out.write(docvec) #print num #print docvec out.close() &#x68C0;&#x9A8C; &#x8BA1;&#x7B97;&#x8BAD;&#x7EC3;&#x6587;&#x6863;&#x4E2D;&#x7684;&#x6587;&#x6863;&#x76F8;&#x4F3C;&#x5EA6; # test, calculate the similarity # &#x6CE8;&#x610F; docid &#x662F;&#x4ECE;0&#x5F00;&#x59CB;&#x8BA1;&#x6570;&#x7684; # &#x8BA1;&#x7B97;&#x4E0E;&#x8BAD;&#x7EC3;&#x96C6;&#x4E2D;&#x7B2C;&#x4E00;&#x7BC7;&#x6587;&#x6863;&#x6700;&#x76F8;&#x4F3C;&#x7684;&#x6587;&#x6863; sims = model.docvecs.most_similar(0) print sims # get similarity between doc1 and doc2 in the training data sims = model.docvecs.similarity(1,2) print sims infer&#x5411;&#x91CF;&#xFF0C;&#x6BD4;&#x8F83;&#x76F8;&#x4F3C;&#x5EA6;&#x4E0B;&#x9762;&#x7684;&#x4EE3;&#x7801;&#x7528;&#x4E8E;&#x68C0;&#x9A8C;&#x6A21;&#x578B;&#x6B63;&#x786E;&#x6027;&#xFF0C;&#x968F;&#x673A;&#x6311;&#x4E00;&#x7BC7;trained dataset&#x4E2D;&#x7684;&#x6587;&#x6863;&#xFF0C;&#x7528;&#x6A21;&#x578B;&#x91CD;&#x65B0;infer&#xFF0C;&#x518D;&#x8BA1;&#x7B97;&#x4E0E;trained dataset&#x4E2D;&#x6587;&#x6863;&#x76F8;&#x4F3C;&#x5EA6;&#xFF0C;&#x5982;&#x679C;&#x6A21;&#x578B;&#x826F;&#x597D;&#xFF0C;&#x76F8;&#x4F3C;&#x5EA6;&#x7B2C;&#x4E00;&#x4F4D;&#x5E94;&#x8BE5;&#x5C31;&#x662F;&#x6311;&#x51FA;&#x7684;&#x6587;&#x6863;&#x3002; # check ############################################################################# # A good check is to re-infer a vector for a document already in the model. # # if the model is well-trained, # # the nearest doc should (usually) be the same document. # ############################################################################# print &apos;examing&apos; doc_id = np.random.randint(model.docvecs.count) # pick random doc; re-run cell for more examples print(&apos;for doc %d...&apos; % doc_id) inferred_docvec = model.infer_vector(alldocs[doc_id].words) print(&apos;%s:\\n %s&apos; % (model, model.docvecs.most_similar([inferred_docvec], topn=3))) &#x9047;&#x5230;&#x7684;&#x95EE;&#x9898;&#x1F447;&#x4E24;&#x4E2A;&#x9519;&#x8BEF;&#x8FD8;&#x5728;&#x63A2;&#x7D22;&#x4E2D;&#xFF0C;&#x6839;&#x636E;&#x5B98;&#x65B9;&#x6307;&#x5357;&#x662F;&#x53EF;&#x4EE5;&#x8FD0;&#x884C;&#x7684;&#xFF0C;&#x7136;&#x800C;&#x6211;&#x9047;&#x5230;&#x4E86;&#x9519;&#x8BEF;&#x5E76;&#x6CA1;&#x80FD;&#x89E3;&#x51B3;&#x3002;&#x7B2C;&#x4E00;&#x6BB5;&#x9519;&#x8BEF;&#x4EE3;&#x7801;&#xFF0C;&#x5173;&#x4E8E;train the model alldocs=[] count=0 for line in input: #print line line=line.strip(&apos;\\n&apos;) seg_list = jieba.cut(line) #output.write(line) output.write(&apos; &apos;.join(seg_list) + &apos;\\n&apos;) alldocs.append(gensim.models.doc2vec.TaggedDocument(seg_list,count)) count+=1 model = Doc2Vec(alldocs,size=100, window=2, min_count=5, workers=4) model.train(alldocs) &#x62A5;&#x9519;&#x4FE1;&#x606F; Traceback (most recent call last): File &quot;d2vTestv5.py&quot;, line 59, in model = Doc2Vec(alldocs[0],size=100, window=2, min_count=5, workers=4) File &quot;/usr/local/lib/python2.7/site-packages/gensim/models/doc2vec.py&quot;, line 596, in __init__ self.build_vocab(documents, trim_rule=trim_rule) File &quot;/usr/local/lib/python2.7/site-packages/gensim/models/word2vec.py&quot;, line 508, in build_vocab self.scan_vocab(sentences, trim_rule=trim_rule) # initial survey File &quot;/usr/local/lib/python2.7/site-packages/gensim/models/doc2vec.py&quot;, line 639, in scan_vocab document_length = len(document.words) AttributeError: &apos;generator&apos; object has no attribute &apos;words&apos; &#x7B2C;&#x4E8C;&#x6BB5;&#x9519;&#x8BEF;&#x4EE3;&#x7801;&#xFF0C;&#x5173;&#x4E8E;infer doc_words1=[&apos;&#x9A8C;&#x8BC1;&apos;,&apos;&#x5931;&#x8D25;&apos;,&apos;&#x9A8C;&#x8BC1;&#x7801;&apos;,&apos;&#x672A;&apos;,&apos;&#x6536;&#x5230;&apos;] doc_words2=[&apos;&#x4ECA;&#x5929;&apos;,&apos;&#x5956;&#x52B1;&apos;,&apos;&#x6709;&apos;,&apos;&#x54EA;&#x4E9B;&apos;,&apos;&#x5462;&apos;] # get infered vector invec1 = model.infer_vector(doc_words1, alpha=0.1, min_alpha=0.0001, steps=5) invec2 = model.infer_vector(doc_words2, alpha=0.1, min_alpha=0.0001, steps=5) print invec1 print invec2 # get similarity # the output docid is supposed to be 0 sims = model.docvecs.most_similar([invec1]) print sims # according to official guide, the following codes are supposed to be fine, but it fails to run sims= model.docvecs.similarity(invec1,invec2) print model.similarity([&apos;&#x4ECA;&#x5929;&apos;,&apos;&#x6709;&apos;,&apos;&#x5565;&apos;,&apos;&#x5956;&#x52B1;&apos;],[&apos;&#x4ECA;&#x5929;&apos;,&apos;&#x5956;&#x52B1;&apos;,&apos;&#x6709;&apos;,&apos;&#x54EA;&#x4E9B;&apos;,&apos;&#x5462;&apos;]) &#x6700;&#x540E;&#x4E24;&#x884C;&#x4EE3;&#x7801;&#x62A5;&#x9519;&#xFF0C;&#x9519;&#x8BEF;&#x4FE1;&#x606F; raceback (most recent call last): File &quot;d2vTestv5.py&quot;, line 110, in sims= model.docvecs.similarity(invec1,invec2) File &quot;/usr/local/lib/python2.7/site-packages/gensim/models/doc2vec.py&quot;, line 484, in similarity return dot(matutils.unitvec(self[d1]), matutils.unitvec(self[d2])) File &quot;/usr/local/lib/python2.7/site-packages/gensim/models/doc2vec.py&quot;, line 341, in __getitem__ return vstack([self[i] for i in index]) File &quot;/usr/local/lib/python2.7/site-packages/gensim/models/doc2vec.py&quot;, line 341, in __getitem__ return vstack([self[i] for i in index]) TypeError: &apos;numpy.float32&apos; object is not iterable &#x66F4;&#x591A;&#x4EE3;&#x7801; &#x56DE;&#x987E;&#x8FD9;&#x91CC;&#x6211;&#x4EEC;&#x5C1D;&#x8BD5;&#x4E86;&#x5F88;&#x591A;&#x79CD;&#x65B9;&#x6CD5;&#x4F5C;&#x6BD4;&#x8F83;&#x7814;&#x7A76;&#x3002; &#x7EAF; log &#x6A21;&#x578B; &#x7EAF; &#x767E;&#x79D1; &#x6A21;&#x578B; &#x767E;&#x79D1;&#x6A21;&#x578B; + log &#x518D;&#x8BAD;&#x7EC3;&#x6A21;&#x578B; log &#x8BCD;&#x5E93; + &#x767E;&#x79D1;&#x6A21;&#x578B; + log &#x518D;&#x8BAD;&#x7EC3;&#x6A21;&#x578B; (&#x7528;&#x5230;&#x4E86; reset_weights &#x65B9;&#x6CD5;) &#x7EFC;&#x5408;&#x6765;&#x8BB2;&#xFF0C;log &#x8BCD;&#x5E93;&#xFF0C;&#x767E;&#x79D1;&#x6570;&#x636E;&#x8BAD;&#x7EC3;&#x6A21;&#x578B;&#xFF0C;log &#x518D;&#x8BAD;&#x7EC3;&#x7684;&#x65B9;&#x6CD5;&#x6548;&#x679C;&#x4F1A;&#x66F4;&#x597D;&#x4E9B;&#xFF0C;&#x7136;&#x800C;&#x589E;&#x52A0;&#x767E;&#x79D1;&#x6570;&#x636E;&#x5E76;&#x4E0D;&#x4F1A;&#x5927;&#x5E45;&#x63D0;&#x5347;&#x6548;&#x679C;&#x3002; &#x5BF9;&#x7EAF; log &#x6A21;&#x578B;&#x800C;&#x8A00;&#xFF0C;win=5&#xFF0C;4&#x7684;&#x7ED3;&#x679C;&#x5DEE;&#x4E0D;&#x591A;&#xFF0C;&#x90FD;&#x8981;&#x6BD4; win=2 &#x597D;&#x5F88;&#x591A;&#x3002; log &#x6A21;&#x578B;&#x5BF9;&#x76F8;&#x8FD1;&#x8BCD;&#x7684;&#x628A;&#x63E1;&#x4E0D;&#x662F;&#x5F88;&#x597D;&#xFF0C;&#x524D;&#x4E24;&#x4E2A;&#x8BCD;&#x975E;&#x5E38;&#x51C6;&#x786E;&#xFF0C;&#x4F46;&#x662F;&#x4E4B;&#x540E;&#x7684;&#x8BCD;&#x5C31;&#x6CA1;&#x6709;&#x591A;&#x5C11;&#x4EE3;&#x8868;&#x6027;&#x4E86;&#xFF0C;&#x4E3B;&#x8981;&#x662F;&#x56E0;&#x4E3A;&#x8BCD;&#x5E93;&#x91CC;&#x6709;&#x5927;&#x91CF;&#x566A;&#x97F3;&#xFF0C;&#x52A0;&#x4E0A;&#x767E;&#x79D1;&#x6570;&#x636E;&#x8BAD;&#x7EC3;&#xFF0C;&#x8BCD;&#x7684;&#x6743;&#x91CD;&#x8FDB;&#x884C;&#x8C03;&#x6574;&#xFF0C;&#x4F1A;&#x66F4;&#x504F;&#x5411;&#x767E;&#x79D1;&#x91CC;&#x7684;&#x8BCD;&#xFF0C;&#x6709;&#x4EBA;&#x4F1A;&#x6709;&#x7591;&#x95EE;&#xFF0C;&#x4E3A;&#x4EC0;&#x4E48; log &#x7684;&#x8BCD;&#x5E93;&#x767E;&#x79D1;&#x8BAD;&#x7EC3;&#x4F1A;&#x51FA;&#x73B0;&#x90A3;&#x4E48;&#x591A;&#x767E;&#x79D1;&#x7684;&#x8BCD;&#xFF0C;&#x90A3;&#x662F;&#x56E0;&#x4E3A; log &#x91CC;&#x6709;&#x65B0;&#x95FB;/&#x767E;&#x79D1;&#x7684;&#x6587;&#x672C;&#xFF0C;&#x5305;&#x542B;&#x4E86;&#x8FD9;&#x4E9B;&#x8BCD;&#xFF0C;&#x662F;&#x8C01;&#x8FD9;&#x4E48;&#x65E0;&#x804A;&#x2026;&#x2026; &#x6709;&#x6548;&#x7684;&#x8BED;&#x6599;&#x5E93;&#x548C;&#x5E72;&#x51C0;&#x7684;&#x6587;&#x672C;&#x6570;&#x636E;&#x662F;&#x6A21;&#x578B;&#x5206;&#x6790;&#x7684;&#x4FDD;&#x8BC1;&#x3002;&#x6709;&#x6548;&#x7684;&#x8BED;&#x6599;&#x5E93;&#x548C;&#x5E72;&#x51C0;&#x7684;&#x6587;&#x672C;&#x6570;&#x636E;&#x662F;&#x6A21;&#x578B;&#x5206;&#x6790;&#x7684;&#x4FDD;&#x8BC1;&#x3002;&#x6709;&#x6548;&#x7684;&#x8BED;&#x6599;&#x5E93;&#x548C;&#x5E72;&#x51C0;&#x7684;&#x6587;&#x672C;&#x6570;&#x636E;&#x662F;&#x6A21;&#x578B;&#x5206;&#x6790;&#x7684;&#x4FDD;&#x8BC1;&#x3002;&#x91CD;&#x8981;&#x7684;&#x4E8B;&#x60C5;&#x8BF4;&#x4E09;&#x904D;&#xFF01; eg. &#x4E0E;&#x201C;&#x5956;&#x52B1;&#x201D;&#x6700;&#x76F8;&#x8FD1;&#x7684;&#x8BCD; # &#x7EAF; log &#x6A21;&#x578B; &#x5956; 0.866039454937 &#x5956;&#x91D1; 0.838458776474 &#x793C; 0.698936760426 &#x622A;&#x6B62; 0.662528753281 % 0.639326810837 &#x5468;&#x671F; 0.61717569828 1.8 0.609462141991 &#x62BD;&#x5956; 0.581079006195 &#x8D23; 0.580395340919 &#x6D88;&#x606F; 0.57931292057 # log &#x8BCD;&#x5E93;&#xFF0C;&#x767E;&#x79D1;&#x8BAD;&#x7EC3;&#x6A21;&#x578B; &#x5609;&#x5956; 0.607903599739 &#x5956;&#x8D4F; 0.607445776463 &#x62A5;&#x916C; 0.59623169899 &#x58F0;&#x671B; 0.580911517143 &#x9634;&#x8C0B; 0.557106971741 &#x8868;&#x626C; 0.54744797945 &#x5956;&#x54C1; 0.543839931488 &#x60E9;&#x7F5A; 0.540722668171 &#x5F31;&#x70B9; 0.535359799862 &#x4FF8;&#x7984; 0.532780826092 # log &#x8BCD;&#x5E93;&#xFF0C;&#x767E;&#x79D1;&#x8BAD;&#x7EC3;&#x6A21;&#x578B;&#xFF0C;log &#x518D;&#x8BAD;&#x7EC3; &#x5956; 0.86665225029 &#x5956;&#x91D1; 0.828586399555 &#x8865;&#x8D34; 0.731625974178 &#x8865;&#x52A9; 0.640836119652 &#x56DE;&#x4E8B; 0.638447761536 &#x8865;&#x507F; 0.63090801239 &#x8D26; 0.630112946033 &#x5E10; 0.605027675629 &#x533A;&#x522B; 0.58495759964 &#x539F;&#x56E0; 0.584367990494 &#x53C2;&#x8003;&#x94FE;&#x63A5;https://radimrehurek.com/gensim/models/doc2vec.htmlhttps://github.com/piskvorky/gensim/blob/develop/docs/notebooks/doc2vec-IMDB.ipynbhttp://blog.csdn.net/raycchou/article/details/50971599","tags":"gensim doc2vec"},{"title":"gensim: word2vec实战","url":"/2016/05/30/gensim-word2vec实战/","text":"&#x4ECB;&#x7ECD;&#x5982;&#x4F55;&#x5229;&#x7528; gensim &#x5E93;&#x5EFA;&#x7ACB;&#x7B80;&#x5355;&#x7684; word2vec &#x6A21;&#x578B;&#x3002; # -*- coding: utf-8 -*- import gensim from gensim.corpora import WikiCorpus from gensim.models import Word2Vec from gensim.models.word2vec import LineSentence import os import logging import jieba import re import multiprocessing import sys reload(sys) sys.setdefaultencoding(&apos;utf-8&apos;) # logging information logging.basicConfig(format=&apos;%(asctime)s: %(levelname)s: %(message)s&apos;) logging.root.setLevel(level=logging.INFO) # get input file, text format inp = sys.argv[1] input = open(inp, &apos;r&apos;) output = open(&apos;output.seq&apos;, &apos;w&apos;) if len(sys.argv) &lt; 2: print(globals()[&apos;__doc__&apos;] % locals()) sys.exit(1) # read file and separate words for line in input.readlines(): line=line.strip(&apos;\\n&apos;) seg_list = jieba.cut(line) output.write(&apos; &apos;.join(seg_list) + &apos;\\n&apos;) output.close() output= open(&apos;output.seq&apos;, &apos;r&apos;) # initialize the model # size = the dimensionality of the feature vectors # window = the maximum distance between the current and predicted word within a sentence # min_count = ignore all words with total frequency lower than this. model = Word2Vec(LineSentence(output), size=100, window=3, min_count=5,workers=multiprocessing.cpu_count()) # save model model.save(&apos;output.model&apos;) model.save_word2vec_format(&apos;output.vector&apos;, binary=False) # test model=gensim.models.Word2Vec.load(&apos;output.model&apos;) x = model.most_similar([u&apos;&#x5956;&#x52B1;&apos;]) for i in x: print &quot;Word: {}\\t Similarity: {}&quot;.format(i[0], i[1]) &#x66F4;&#x591A;&#x4EE3;&#x7801;","tags":"gensim word2vec"},{"title":"word2vec详解之六 -- 若干源码细节","url":"/2016/05/29/word2vec详解之六-若干源码细节/","text":"word2vec &#x662F; Google &#x4E8E; 2013 &#x5E74;&#x5F00;&#x6E90;&#x63A8;&#x51FA;&#x7684;&#x4E00;&#x4E2A;&#x7528;&#x4E8E;&#x83B7;&#x53D6; word vector &#x7684;&#x5DE5;&#x5177;&#x5305;&#xFF0C;&#x5B83;&#x7B80;&#x5355;&#x3001;&#x9AD8;&#x6548;&#xFF0C;&#x56E0;&#x6B64;&#x5F15;&#x8D77;&#x4E86;&#x5F88;&#x591A;&#x4EBA;&#x7684;&#x5173;&#x6CE8;&#x3002;&#x7531;&#x4E8E; word2vec &#x7684;&#x4F5C;&#x8005; Tomas Mikolov &#x5728;&#x4E24;&#x7BC7;&#x76F8;&#x5173;&#x7684;&#x8BBA;&#x6587; [3,4] &#x4E2D;&#x5E76;&#x6CA1;&#x6709;&#x8C08;&#x53CA;&#x592A;&#x591A;&#x7B97;&#x6CD5;&#x7EC6;&#x8282;&#xFF0C;&#x56E0;&#x800C;&#x5728;&#x4E00;&#x5B9A;&#x7A0B;&#x5EA6;&#x4E0A;&#x589E;&#x52A0;&#x4E86;&#x8FD9;&#x4E2A;&#x5DE5;&#x5177;&#x5305;&#x7684;&#x795E;&#x79D8;&#x611F;&#x3002;&#x4E00;&#x4E9B;&#x6309;&#x637A;&#x4E0D;&#x4F4F;&#x7684;&#x4EBA;&#x4E8E;&#x662F;&#x9009;&#x62E9;&#x4E86;&#x901A;&#x8FC7;&#x89E3;&#x5256;&#x6E90;&#x4EE3;&#x7801;&#x7684;&#x65B9;&#x5F0F;&#x6765;&#x4E00;&#x7AA5;&#x7A76;&#x7ADF;&#xFF0C;&#x51FA;&#x4E8E;&#x597D;&#x5947;&#xFF0C;&#x6211;&#x4E5F;&#x6210;&#x4E3A;&#x4E86;&#x4ED6;&#x4EEC;&#x4E2D;&#x7684;&#x4E00;&#x5458;&#x3002;&#x8BFB;&#x5B8C;&#x4EE3;&#x7801;&#x540E;&#xFF0C;&#x89C9;&#x5F97;&#x6536;&#x83B7;&#x9887;&#x591A;&#xFF0C;&#x6574;&#x7406;&#x6210;&#x6587;&#xFF0C;&#x7ED9;&#x6709;&#x9700;&#x8981;&#x7684;&#x670B;&#x53CB;&#x53C2;&#x8003;&#x3002; &#x4F5C;&#x8005;: peghoty&#x51FA;&#x5904;: http://blog.csdn.net/itplus/article/details/37969979&#x6B22;&#x8FCE;&#x8F6C;&#x8F7D;/&#x5206;&#x4EAB;, &#x4F46;&#x8BF7;&#x52A1;&#x5FC5;&#x58F0;&#x660E;&#x6587;&#x7AE0;&#x51FA;&#x5904;.","tags":"word2vec"},{"title":"word2vec详解之五 -- 基于 Negative Sampling 的模型","url":"/2016/05/29/word2vec详解之五-基于-Negative-Sampling-的模型/","text":"word2vec &#x662F; Google &#x4E8E; 2013 &#x5E74;&#x5F00;&#x6E90;&#x63A8;&#x51FA;&#x7684;&#x4E00;&#x4E2A;&#x7528;&#x4E8E;&#x83B7;&#x53D6; word vector &#x7684;&#x5DE5;&#x5177;&#x5305;&#xFF0C;&#x5B83;&#x7B80;&#x5355;&#x3001;&#x9AD8;&#x6548;&#xFF0C;&#x56E0;&#x6B64;&#x5F15;&#x8D77;&#x4E86;&#x5F88;&#x591A;&#x4EBA;&#x7684;&#x5173;&#x6CE8;&#x3002;&#x7531;&#x4E8E; word2vec &#x7684;&#x4F5C;&#x8005; Tomas Mikolov &#x5728;&#x4E24;&#x7BC7;&#x76F8;&#x5173;&#x7684;&#x8BBA;&#x6587; [3,4] &#x4E2D;&#x5E76;&#x6CA1;&#x6709;&#x8C08;&#x53CA;&#x592A;&#x591A;&#x7B97;&#x6CD5;&#x7EC6;&#x8282;&#xFF0C;&#x56E0;&#x800C;&#x5728;&#x4E00;&#x5B9A;&#x7A0B;&#x5EA6;&#x4E0A;&#x589E;&#x52A0;&#x4E86;&#x8FD9;&#x4E2A;&#x5DE5;&#x5177;&#x5305;&#x7684;&#x795E;&#x79D8;&#x611F;&#x3002;&#x4E00;&#x4E9B;&#x6309;&#x637A;&#x4E0D;&#x4F4F;&#x7684;&#x4EBA;&#x4E8E;&#x662F;&#x9009;&#x62E9;&#x4E86;&#x901A;&#x8FC7;&#x89E3;&#x5256;&#x6E90;&#x4EE3;&#x7801;&#x7684;&#x65B9;&#x5F0F;&#x6765;&#x4E00;&#x7AA5;&#x7A76;&#x7ADF;&#xFF0C;&#x51FA;&#x4E8E;&#x597D;&#x5947;&#xFF0C;&#x6211;&#x4E5F;&#x6210;&#x4E3A;&#x4E86;&#x4ED6;&#x4EEC;&#x4E2D;&#x7684;&#x4E00;&#x5458;&#x3002;&#x8BFB;&#x5B8C;&#x4EE3;&#x7801;&#x540E;&#xFF0C;&#x89C9;&#x5F97;&#x6536;&#x83B7;&#x9887;&#x591A;&#xFF0C;&#x6574;&#x7406;&#x6210;&#x6587;&#xFF0C;&#x7ED9;&#x6709;&#x9700;&#x8981;&#x7684;&#x670B;&#x53CB;&#x53C2;&#x8003;&#x3002; &#x4F5C;&#x8005;: peghoty&#x51FA;&#x5904;: http://blog.csdn.net/itplus/article/details/37969979&#x6B22;&#x8FCE;&#x8F6C;&#x8F7D;/&#x5206;&#x4EAB;, &#x4F46;&#x8BF7;&#x52A1;&#x5FC5;&#x58F0;&#x660E;&#x6587;&#x7AE0;&#x51FA;&#x5904;.","tags":"word2vec"},{"title":"word2vec详解之四 -- 基于Hierarchical Softmax 的模型","url":"/2016/05/29/word2vec详解之四-基于Hierarchical-Softmax-的模型/","text":"word2vec &#x662F; Google &#x4E8E; 2013 &#x5E74;&#x5F00;&#x6E90;&#x63A8;&#x51FA;&#x7684;&#x4E00;&#x4E2A;&#x7528;&#x4E8E;&#x83B7;&#x53D6; word vector &#x7684;&#x5DE5;&#x5177;&#x5305;&#xFF0C;&#x5B83;&#x7B80;&#x5355;&#x3001;&#x9AD8;&#x6548;&#xFF0C;&#x56E0;&#x6B64;&#x5F15;&#x8D77;&#x4E86;&#x5F88;&#x591A;&#x4EBA;&#x7684;&#x5173;&#x6CE8;&#x3002;&#x7531;&#x4E8E; word2vec &#x7684;&#x4F5C;&#x8005; Tomas Mikolov &#x5728;&#x4E24;&#x7BC7;&#x76F8;&#x5173;&#x7684;&#x8BBA;&#x6587; [3,4] &#x4E2D;&#x5E76;&#x6CA1;&#x6709;&#x8C08;&#x53CA;&#x592A;&#x591A;&#x7B97;&#x6CD5;&#x7EC6;&#x8282;&#xFF0C;&#x56E0;&#x800C;&#x5728;&#x4E00;&#x5B9A;&#x7A0B;&#x5EA6;&#x4E0A;&#x589E;&#x52A0;&#x4E86;&#x8FD9;&#x4E2A;&#x5DE5;&#x5177;&#x5305;&#x7684;&#x795E;&#x79D8;&#x611F;&#x3002;&#x4E00;&#x4E9B;&#x6309;&#x637A;&#x4E0D;&#x4F4F;&#x7684;&#x4EBA;&#x4E8E;&#x662F;&#x9009;&#x62E9;&#x4E86;&#x901A;&#x8FC7;&#x89E3;&#x5256;&#x6E90;&#x4EE3;&#x7801;&#x7684;&#x65B9;&#x5F0F;&#x6765;&#x4E00;&#x7AA5;&#x7A76;&#x7ADF;&#xFF0C;&#x51FA;&#x4E8E;&#x597D;&#x5947;&#xFF0C;&#x6211;&#x4E5F;&#x6210;&#x4E3A;&#x4E86;&#x4ED6;&#x4EEC;&#x4E2D;&#x7684;&#x4E00;&#x5458;&#x3002;&#x8BFB;&#x5B8C;&#x4EE3;&#x7801;&#x540E;&#xFF0C;&#x89C9;&#x5F97;&#x6536;&#x83B7;&#x9887;&#x591A;&#xFF0C;&#x6574;&#x7406;&#x6210;&#x6587;&#xFF0C;&#x7ED9;&#x6709;&#x9700;&#x8981;&#x7684;&#x670B;&#x53CB;&#x53C2;&#x8003;&#x3002; &#x4F5C;&#x8005;: peghoty&#x51FA;&#x5904;: http://blog.csdn.net/itplus/article/details/37969979&#x6B22;&#x8FCE;&#x8F6C;&#x8F7D;/&#x5206;&#x4EAB;, &#x4F46;&#x8BF7;&#x52A1;&#x5FC5;&#x58F0;&#x660E;&#x6587;&#x7AE0;&#x51FA;&#x5904;.","tags":"word2vec"},{"title":"word2vec详解之三 -- 背景知识","url":"/2016/05/29/word2vec详解之三-背景知识/","text":"word2vec &#x662F; Google &#x4E8E; 2013 &#x5E74;&#x5F00;&#x6E90;&#x63A8;&#x51FA;&#x7684;&#x4E00;&#x4E2A;&#x7528;&#x4E8E;&#x83B7;&#x53D6; word vector &#x7684;&#x5DE5;&#x5177;&#x5305;&#xFF0C;&#x5B83;&#x7B80;&#x5355;&#x3001;&#x9AD8;&#x6548;&#xFF0C;&#x56E0;&#x6B64;&#x5F15;&#x8D77;&#x4E86;&#x5F88;&#x591A;&#x4EBA;&#x7684;&#x5173;&#x6CE8;&#x3002;&#x7531;&#x4E8E; word2vec &#x7684;&#x4F5C;&#x8005; Tomas Mikolov &#x5728;&#x4E24;&#x7BC7;&#x76F8;&#x5173;&#x7684;&#x8BBA;&#x6587; [3,4] &#x4E2D;&#x5E76;&#x6CA1;&#x6709;&#x8C08;&#x53CA;&#x592A;&#x591A;&#x7B97;&#x6CD5;&#x7EC6;&#x8282;&#xFF0C;&#x56E0;&#x800C;&#x5728;&#x4E00;&#x5B9A;&#x7A0B;&#x5EA6;&#x4E0A;&#x589E;&#x52A0;&#x4E86;&#x8FD9;&#x4E2A;&#x5DE5;&#x5177;&#x5305;&#x7684;&#x795E;&#x79D8;&#x611F;&#x3002;&#x4E00;&#x4E9B;&#x6309;&#x637A;&#x4E0D;&#x4F4F;&#x7684;&#x4EBA;&#x4E8E;&#x662F;&#x9009;&#x62E9;&#x4E86;&#x901A;&#x8FC7;&#x89E3;&#x5256;&#x6E90;&#x4EE3;&#x7801;&#x7684;&#x65B9;&#x5F0F;&#x6765;&#x4E00;&#x7AA5;&#x7A76;&#x7ADF;&#xFF0C;&#x51FA;&#x4E8E;&#x597D;&#x5947;&#xFF0C;&#x6211;&#x4E5F;&#x6210;&#x4E3A;&#x4E86;&#x4ED6;&#x4EEC;&#x4E2D;&#x7684;&#x4E00;&#x5458;&#x3002;&#x8BFB;&#x5B8C;&#x4EE3;&#x7801;&#x540E;&#xFF0C;&#x89C9;&#x5F97;&#x6536;&#x83B7;&#x9887;&#x591A;&#xFF0C;&#x6574;&#x7406;&#x6210;&#x6587;&#xFF0C;&#x7ED9;&#x6709;&#x9700;&#x8981;&#x7684;&#x670B;&#x53CB;&#x53C2;&#x8003;&#x3002; &#x4F5C;&#x8005;: peghoty&#x51FA;&#x5904;: http://blog.csdn.net/itplus/article/details/37969979&#x6B22;&#x8FCE;&#x8F6C;&#x8F7D;/&#x5206;&#x4EAB;, &#x4F46;&#x8BF7;&#x52A1;&#x5FC5;&#x58F0;&#x660E;&#x6587;&#x7AE0;&#x51FA;&#x5904;.","tags":"word2vec"},{"title":"word2vec详解之二 -- 预备知识","url":"/2016/05/29/word2vec详解之二-预备知识/","text":"word2vec &#x662F; Google &#x4E8E; 2013 &#x5E74;&#x5F00;&#x6E90;&#x63A8;&#x51FA;&#x7684;&#x4E00;&#x4E2A;&#x7528;&#x4E8E;&#x83B7;&#x53D6; word vector &#x7684;&#x5DE5;&#x5177;&#x5305;&#xFF0C;&#x5B83;&#x7B80;&#x5355;&#x3001;&#x9AD8;&#x6548;&#xFF0C;&#x56E0;&#x6B64;&#x5F15;&#x8D77;&#x4E86;&#x5F88;&#x591A;&#x4EBA;&#x7684;&#x5173;&#x6CE8;&#x3002;&#x7531;&#x4E8E; word2vec &#x7684;&#x4F5C;&#x8005; Tomas Mikolov &#x5728;&#x4E24;&#x7BC7;&#x76F8;&#x5173;&#x7684;&#x8BBA;&#x6587; [3,4] &#x4E2D;&#x5E76;&#x6CA1;&#x6709;&#x8C08;&#x53CA;&#x592A;&#x591A;&#x7B97;&#x6CD5;&#x7EC6;&#x8282;&#xFF0C;&#x56E0;&#x800C;&#x5728;&#x4E00;&#x5B9A;&#x7A0B;&#x5EA6;&#x4E0A;&#x589E;&#x52A0;&#x4E86;&#x8FD9;&#x4E2A;&#x5DE5;&#x5177;&#x5305;&#x7684;&#x795E;&#x79D8;&#x611F;&#x3002;&#x4E00;&#x4E9B;&#x6309;&#x637A;&#x4E0D;&#x4F4F;&#x7684;&#x4EBA;&#x4E8E;&#x662F;&#x9009;&#x62E9;&#x4E86;&#x901A;&#x8FC7;&#x89E3;&#x5256;&#x6E90;&#x4EE3;&#x7801;&#x7684;&#x65B9;&#x5F0F;&#x6765;&#x4E00;&#x7AA5;&#x7A76;&#x7ADF;&#xFF0C;&#x51FA;&#x4E8E;&#x597D;&#x5947;&#xFF0C;&#x6211;&#x4E5F;&#x6210;&#x4E3A;&#x4E86;&#x4ED6;&#x4EEC;&#x4E2D;&#x7684;&#x4E00;&#x5458;&#x3002;&#x8BFB;&#x5B8C;&#x4EE3;&#x7801;&#x540E;&#xFF0C;&#x89C9;&#x5F97;&#x6536;&#x83B7;&#x9887;&#x591A;&#xFF0C;&#x6574;&#x7406;&#x6210;&#x6587;&#xFF0C;&#x7ED9;&#x6709;&#x9700;&#x8981;&#x7684;&#x670B;&#x53CB;&#x53C2;&#x8003;&#x3002; &#x4F5C;&#x8005;: peghoty&#x51FA;&#x5904;: http://blog.csdn.net/itplus/article/details/37969979&#x6B22;&#x8FCE;&#x8F6C;&#x8F7D;/&#x5206;&#x4EAB;, &#x4F46;&#x8BF7;&#x52A1;&#x5FC5;&#x58F0;&#x660E;&#x6587;&#x7AE0;&#x51FA;&#x5904;.","tags":"word2vec"},{"title":"word2vec详解之一 -- 目录和前言","url":"/2016/05/28/word2vec详解之一-目录和前言/","text":"word2vec &#x662F; Google &#x4E8E; 2013 &#x5E74;&#x5F00;&#x6E90;&#x63A8;&#x51FA;&#x7684;&#x4E00;&#x4E2A;&#x7528;&#x4E8E;&#x83B7;&#x53D6; word vector &#x7684;&#x5DE5;&#x5177;&#x5305;&#xFF0C;&#x5B83;&#x7B80;&#x5355;&#x3001;&#x9AD8;&#x6548;&#xFF0C;&#x56E0;&#x6B64;&#x5F15;&#x8D77;&#x4E86;&#x5F88;&#x591A;&#x4EBA;&#x7684;&#x5173;&#x6CE8;&#x3002;&#x7531;&#x4E8E; word2vec &#x7684;&#x4F5C;&#x8005; Tomas Mikolov &#x5728;&#x4E24;&#x7BC7;&#x76F8;&#x5173;&#x7684;&#x8BBA;&#x6587; [3,4] &#x4E2D;&#x5E76;&#x6CA1;&#x6709;&#x8C08;&#x53CA;&#x592A;&#x591A;&#x7B97;&#x6CD5;&#x7EC6;&#x8282;&#xFF0C;&#x56E0;&#x800C;&#x5728;&#x4E00;&#x5B9A;&#x7A0B;&#x5EA6;&#x4E0A;&#x589E;&#x52A0;&#x4E86;&#x8FD9;&#x4E2A;&#x5DE5;&#x5177;&#x5305;&#x7684;&#x795E;&#x79D8;&#x611F;&#x3002;&#x4E00;&#x4E9B;&#x6309;&#x637A;&#x4E0D;&#x4F4F;&#x7684;&#x4EBA;&#x4E8E;&#x662F;&#x9009;&#x62E9;&#x4E86;&#x901A;&#x8FC7;&#x89E3;&#x5256;&#x6E90;&#x4EE3;&#x7801;&#x7684;&#x65B9;&#x5F0F;&#x6765;&#x4E00;&#x7AA5;&#x7A76;&#x7ADF;&#xFF0C;&#x51FA;&#x4E8E;&#x597D;&#x5947;&#xFF0C;&#x6211;&#x4E5F;&#x6210;&#x4E3A;&#x4E86;&#x4ED6;&#x4EEC;&#x4E2D;&#x7684;&#x4E00;&#x5458;&#x3002;&#x8BFB;&#x5B8C;&#x4EE3;&#x7801;&#x540E;&#xFF0C;&#x89C9;&#x5F97;&#x6536;&#x83B7;&#x9887;&#x591A;&#xFF0C;&#x6574;&#x7406;&#x6210;&#x6587;&#xFF0C;&#x7ED9;&#x6709;&#x9700;&#x8981;&#x7684;&#x670B;&#x53CB;&#x53C2;&#x8003;&#x3002; &#x4F5C;&#x8005;: peghoty&#x51FA;&#x5904;: http://blog.csdn.net/itplus/article/details/37969979&#x6B22;&#x8FCE;&#x8F6C;&#x8F7D;/&#x5206;&#x4EAB;, &#x4F46;&#x8BF7;&#x52A1;&#x5FC5;&#x58F0;&#x660E;&#x6587;&#x7AE0;&#x51FA;&#x5904;.","tags":"word2vec"},{"title":"PHP连接数据库js可视化数据","url":"/2016/05/26/PHP连接数据库js可视化数据/","text":"","tags":""},{"title":"短句归一化--LSI模型","url":"/2016/05/25/短问题归一化-LSI模型/","text":"LSI &#x7406;&#x89E3;LSI(Latent Semantic Indexing)&#xFF0C;&#x4E2D;&#x6587;&#x610F;&#x8BD1;&#x662F;&#x6F5C;&#x5728;&#x8BED;&#x4E49;&#x7D22;&#x5F15;&#xFF0C;&#x5373;&#x901A;&#x8FC7;&#x6D77;&#x91CF;&#x6587;&#x732E;&#x627E;&#x51FA;&#x8BCD;&#x6C47;&#x4E4B;&#x95F4;&#x7684;&#x5173;&#x7CFB;&#x3002;&#x57FA;&#x672C;&#x7406;&#x5FF5;&#x662F;&#x5F53;&#x4E24;&#x4E2A;&#x8BCD;&#x6216;&#x4E00;&#x7EC4;&#x8BCD;&#x5927;&#x91CF;&#x51FA;&#x73B0;&#x5728;&#x4E00;&#x4E2A;&#x6587;&#x6863;&#x4E2D;&#x65F6;&#xFF0C;&#x8FD9;&#x4E9B;&#x8BCD;&#x4E4B;&#x95F4;&#x5C31;&#x662F;&#x8BED;&#x4E49;&#x76F8;&#x5173;&#x7684;&#x3002; &#x6F5C;&#x5728;&#x8BED;&#x4E49;&#x7D22;&#x5F15;&#x662F;&#x4E00;&#x79CD;&#x7528;&#x5947;&#x5F02;&#x503C;&#x5206;&#x89E3;&#x65B9;&#x6CD5;&#x83B7;&#x5F97;&#x5728;&#x6587;&#x672C;&#x4E2D;&#x672F;&#x8BED;&#x548C;&#x6982;&#x5FF5;&#x4E4B;&#x95F4;&#x5173;&#x7CFB;&#x7684;&#x7D22;&#x5F15;&#x548C;&#x83B7;&#x53D6;&#x65B9;&#x6CD5;&#x3002;&#x8BE5;&#x65B9;&#x6CD5;&#x7684;&#x4E3B;&#x8981;&#x4F9D;&#x636E;&#x662F;&#x5728;&#x76F8;&#x540C;&#x6587;&#x7AE0;&#x4E2D;&#x7684;&#x8BCD;&#x8BED;&#x4E00;&#x822C;&#x6709;&#x7C7B;&#x4F3C;&#x7684;&#x542B;&#x4E49;&#x3002;&#x8BE5;&#x65B9;&#x6CD5;&#x53EF;&#x4EE5;&#x53EF;&#x4EE5;&#x4ECE;&#x4E00;&#x7BC7;&#x6587;&#x7AE0;&#x4E2D;&#x63D0;&#x53D6;&#x672F;&#x8BED;&#x5173;&#x7CFB;&#xFF0C;&#x4ECE;&#x800C;&#x5EFA;&#x7ACB;&#x8D77;&#x4E3B;&#x8981;&#x6982;&#x5FF5;&#x5185;&#x5BB9;&#x3002; &#x964D;&#x7EF4;&#x8FC7;&#x7A0B;&#x5C06;&#x6587;&#x6863;&#x5E93;&#x8868;&#x793A;&#x6210;VSM&#x6A21;&#x578B;&#x7684;&#x8BCD;-&#x6587;&#x6863;&#x77E9;&#x9635;Am&#xD7;n(&#x8BCD;-&#x6587;&#x6863;&#x77E9;&#x9635;&#x90A3;&#x5C31;&#x662F;&#x8BCD;&#x4F5C;&#x4E3A;&#x884C;&#xFF0C;&#x6587;&#x6863;&#x4F5C;&#x4E3A;&#x5217;&#xFF0C;&#x8FD9;&#x662F;&#x77E9;&#x9635;&#x5148;&#x884C;&#x540E;&#x5217;&#x7684;&#x8868;&#x793A;&#x51B3;&#x5B9A;&#x7684;&#xFF0C;&#x5F53;&#x7136;&#x5982;&#x679C;&#x8868;&#x793A;&#x6210;&#x6587;&#x6863;-&#x8BCD;&#x77E9;&#x9635;&#x7684;&#x8BDD;&#xFF0C;&#x540E;&#x9762;&#x7684;&#x8BA1;&#x7B97;&#x5C31;&#x8981;&#x7528;&#x8BE5;&#x77E9;&#x9635;&#x7684;&#x8F6C;&#x7F6E;&#x4E86;),&#x5176;&#x4E2D;m&#x8868;&#x793A;&#x6587;&#x6863;&#x5E93;&#x4E2D;&#x5305;&#x542B;&#x7684;&#x6240;&#x6709;&#x4E0D;&#x540C;&#x7684;&#x8BCD;&#x7684;&#x4E2A;(&#x884C;&#x6570;&#x662F;&#x4E0D;&#x540C;&#x8BCD;&#x7684;&#x4E2A;&#x6570;)&#xFF0C;&#x5373;&#x884C;&#x5411;&#x91CF;&#x8868;&#x793A;&#x4E00;&#x4E2A;&#x8BCD;&#x5728;&#x4E0D;&#x540C;&#x6587;&#x6863;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;&#xFF0C;n &#x8868;&#x793A;&#x6587;&#x6863;&#x5E93;&#x4E2D;&#x7684;&#x6587;&#x6863;&#x6570;(&#x5217;&#x6570;&#x662F;&#x4E0D;&#x540C;&#x6587;&#x6863;&#x7684;&#x4E2A;&#x6570;)&#xFF0C;&#x5373;&#x5217;&#x5411;&#x91CF;&#x8868;&#x793A;&#x7684;&#x662F;&#x4E0D;&#x540C;&#x7684;&#x6587;&#x6863;.A&#x8868;&#x793A;&#x4E3A;A = [&#x3B1; ij ],&#x5728;&#x6B64;&#x77E9;&#x9635;&#x4E2D; ,&#x3B1; ij&#x4E3A;&#x975E;&#x8D1F;&#x503C; , &#x8868;&#x793A;&#x7B2C; i &#x4E2A;&#x8BCD;&#x5728;&#x7B2C;j &#x4E2A;&#x6587;&#x6863;&#x4E2D;&#x51FA;&#x73B0;&#x7684;&#x9891;&#x5EA6;&#x3002;&#x663E;&#x7136;&#xFF0C;A&#x662F;&#x7A00;&#x758F;&#x77E9;&#x9635;(&#x8FD9;&#x662F;VSM&#x548C;&#x6587;&#x6863;&#x51B3;&#x5B9A;&#x7684;)&#x3002; &#x5229;&#x7528;&#x5947;&#x5F02;&#x503C;&#x5206;&#x89E3;SVD(Singular Value Decomposition)&#x6C42;A&#x7684;&#x53EA;&#x6709;K&#x4E2A;&#x6B63;&#x4EA4;&#x56E0;&#x5B50;&#x7684;&#x964D;&#x79E9;&#x77E9;&#x9635;&#xFF0C;&#x8BE5;&#x8FC7;&#x7A0B;&#x5C31;&#x662F;&#x964D;&#x7EF4;&#x7684;&#x8FC7;&#x7A0B;&#x3002;SVD&#x7684;&#x91CD;&#x8981;&#x4F5C;&#x7528;&#x662F;&#x628A;&#x8BCD;&#x548C;&#x6587;&#x6863;&#x6620;&#x5C04;&#x5230;&#x540C;&#x4E00;&#x4E2A;&#x8BED;&#x4E49;&#x7A7A;&#x95F4;&#x4E2D;&#xFF0C;&#x5C06;&#x8BCD;&#x548C;&#x6587;&#x6863;&#x8868;&#x793A;&#x4E3A;K&#x4E2A;&#x56E0;&#x5B50;&#x7684;&#x5F62;&#x5F0F;&#x3002;&#x663E;&#x7136;&#xFF0C;&#x8FD9;&#x4F1A;&#x4E22;&#x5931;&#x4FE1;&#x606F;&#xFF0C;&#x4F46;&#x4E3B;&#x8981;&#x7684;&#x4FE1;&#x606F;&#x5374;&#x88AB;&#x4FDD;&#x7559;&#x4E86;&#x3002;&#x4E3A;&#x4EC0;&#x4E48;&#x8BE5;&#x8FC7;&#x7A0B;&#x53EF;&#x4EE5;&#x964D;&#x7EF4;&#x5462;&#xFF1F;&#x56E0;&#x4E3A;&#x8BE5;&#x8FC7;&#x7A0B;&#x89E3;&#x51B3;&#x4E86;&#x540C;&#x4E49;&#x548C;&#x591A;&#x4E49;&#x73B0;&#x8C61;&#x3002;&#x53EF;&#x4EE5;&#x770B;&#x51FA;&#xFF0C;K&#x7684;&#x53D6;&#x503C;&#x5BF9;&#x6574;&#x4E2A;&#x5206;&#x7C7B;&#x7ED3;&#x679C;&#x7684;&#x5F71;&#x54CD;&#x5F88;&#x5927;&#x3002;&#x56E0;&#x4E3A;&#xFF0C;K&#x8FC7;&#x5C0F;&#xFF0C;&#x5219;&#x4E22;&#x5931;&#x4FE1;&#x606F;&#x5C31;&#x8D8A;&#x591A;&#xFF1B;K&#x8FC7;&#x5927;&#xFF0C;&#x4FE1;&#x606F;&#x867D;&#x7136;&#x591A;&#xFF0C;&#x4F46;&#x53EF;&#x80FD;&#x6709;&#x5197;&#x4F59;&#x4E14;&#x8BA1;&#x7B97;&#x6D88;&#x8017;&#x5927;&#x3002;K&#x7684;&#x9009;&#x62E9;&#x4E5F;&#x662F;&#x503C;&#x5F97;&#x7814;&#x7A76;&#x7684;&#xFF0C;&#x4E0D;&#x8FC7;&#x4E00;&#x822C;&#x53D6;&#x503C;&#x4E3A;100-300&#xFF0C;&#x4E0D;&#x7EDD;&#x5BF9;&#x3002; &#x9002;&#x7528;&#x6027;&#x5BF9;&#x4E8E; LSI/PLSI &#x6765;&#x8BF4;&#xFF0C;&#x805A;&#x7C7B;&#x7684;&#x610F;&#x4E49;&#x4E0D;&#x5728;&#x4E8E;&#x6587;&#x6863;&#xFF0C;&#x800C;&#x5728;&#x4E8E;&#x5355;&#x8BCD;&#x3002;&#x6240;&#x4EE5;&#x5BF9;&#x4E8E;&#x805A;&#x7C7B;&#x7684;&#x4E00;&#x79CD;&#x53D8;&#x578B;&#x7528;&#x6CD5;&#x662F;&#xFF0C;&#x5F53; k &#x8BBE;&#x7684;&#x8DB3;&#x591F;&#x5927;&#x65F6;&#xFF0C;LSI/PLSI &#x80FD;&#x591F;&#x7ED9;&#x51FA;&#x843D;&#x5728;&#x4E0D;&#x540C;&#x5B50;&#x7A7A;&#x95F4;&#x7684;&#x5355;&#x8BCD;&#x5E8F;&#x5217;&#xFF0C;&#x57FA;&#x672C;&#x4E0A;&#x8FD9;&#x4E9B;&#x5355;&#x8BCD;&#x4E4B;&#x95F4;&#x62E5;&#x6709;&#x8F83;&#x4E3A;&#x7D27;&#x5BC6;&#x7684;&#x8BED;&#x4E49;&#x8054;&#x7CFB;&#x3002;&#x5176;&#x5B9E;&#x8FD9;&#x79CD;&#x7528;&#x6CD5;&#x672C;&#x8D28;&#x4E0A;&#x8FD8;&#x662F;&#x5728;&#x5229;&#x7528;&#x964D;&#x7EF4;&#x505A;&#x5355;&#x8BCD;&#x76F8;&#x5173;&#x5EA6;&#x8BA1;&#x7B97;&#x3002; &#x7279;&#x5F81;&#x964D;&#x7EF4;LSI &#x672C;&#x8D28;&#x4E0A;&#x662F;&#x628A;&#x6BCF;&#x4E2A;&#x7279;&#x5F81;&#x6620;&#x5C04;&#x5230;&#x4E86;&#x4E00;&#x4E2A;&#x66F4;&#x4F4E;&#x7EF4;&#x7684;&#x5B50;&#x7A7A;&#x95F4;&#xFF08;sub space)&#xFF0C;&#x6240;&#x4EE5;&#x7528;&#x6765;&#x505A;&#x964D;&#x7EF4;&#x53EF;&#x4EE5;&#x8BF4;&#x662F;&#x5929;&#x9020;&#x5730;&#x8BBE;&#x3002;TFIDF&#x662F;&#x53E6;&#x4E00;&#x4E2A;&#x901A;&#x7528;&#x7684;&#x964D;&#x7EF4;&#x65B9;&#x6CD5;&#xFF0C;&#x901A;&#x8FC7;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x516C;&#x5F0F;&#xFF08;&#x4E24;&#x4E2A;&#x6574;&#x6570;&#x76F8;&#x4E58;&#xFF09;&#x5F97;&#x5230;&#x4E0D;&#x540C;&#x5355;&#x8BCD;&#x7684;&#x91CD;&#x8981;&#x7A0B;&#x5EA6;&#xFF0C;&#x5E76;&#x53D6;&#x524D;k&#x4E2A;&#x6700;&#x91CD;&#x8981;&#x7684;&#x5355;&#x8BCD;&#xFF0C;&#x800C;&#x4E22;&#x5F03;&#x5176;&#x5B83;&#x5355;&#x8BCD;&#xFF0C;&#x53EA;&#x6709;&#x4FE1;&#x606F;&#x7684;&#x4E22;&#x5931;&#xFF0C;&#x5E76;&#x6CA1;&#x6709;&#x4FE1;&#x606F;&#x7684;&#x6539;&#x53D8;&#x3002;&#x4ECE;&#x6267;&#x884C;&#x6548;&#x7387;&#x4E0A; TFIDF &#x8FDC;&#x8FDC;&#x9AD8;&#x4E8E; LSI&#xFF0C;&#x4E0D;&#x8FC7;&#x4ECE;&#x6548;&#x679C;&#x4E0A;&#xFF08;&#x81F3;&#x5C11;&#x5728;&#x5B66;&#x672F;&#x754C;&#xFF09;LSI &#x8981;&#x4F18;&#x4E8E;TFIDF&#x3002;&#x4E0D;&#x8FC7;&#x5FC5;&#x987B;&#x63D0;&#x9192;&#x7684;&#x662F;&#xFF0C;&#x65E0;&#x8BBA;&#x662F;&#x4E0A;&#x8FF0;&#x54EA;&#x4E00;&#x79CD;&#x964D;&#x7EF4;&#x65B9;&#x6CD5;&#xFF0C;&#x90FD;&#x4F1A;&#x9020;&#x6210;&#x4FE1;&#x606F;&#x7684;&#x504F;&#x5DEE;&#xFF0C;&#x8FDB;&#x800C;&#x5F71;&#x54CD;&#x540E;&#x7EED;&#x5206;&#x7C7B;/&#x805A;&#x7C7B;&#x7684;&#x51C6;&#x786E;&#x7387;&#x3002; &#x964D;&#x7EF4;&#x662F;&#x5E0C;&#x671B;&#x4EE5;&#x53EF;&#x63A5;&#x53D7;&#x7684;&#x6548;&#x679C;&#x635F;&#x5931;&#x4E0B;&#xFF0C;&#x5927;&#x5927;&#x63D0;&#x9AD8;&#x8FD0;&#x884C;&#x6548;&#x7387;&#x548C;&#x8282;&#x7701;&#x5185;&#x5B58;&#x7A7A;&#x95F4;&#x3002;&#x7136;&#x800C;&#x80FD;&#x4E0D;&#x964D;&#x7EF4;&#x7684;&#x65F6;&#x5019;&#x8FD8;&#x662F;&#x4E0D;&#x8981;&#x964D;&#x7EF4;&#xFF08;&#x6BD4;&#x5982;&#x4F60;&#x53EA;&#x6709;&#x51E0;&#x5343;&#x7BC7;&#x6587;&#x6863;&#x8981;&#x5904;&#x7406;&#xFF0C;&#x90A3;&#x6837;&#x771F;&#x7684;&#x6CA1;&#x6709;&#x5FC5;&#x8981;&#x964D;&#x7EF4;&#xFF09;&#x3002; &#x5355;&#x8BCD;&#x76F8;&#x5173;&#x5EA6;&#x8BA1;&#x7B97;LSI &#x7684;&#x7ED3;&#x679C;&#x901A;&#x8FC7;&#x7B80;&#x5355;&#x53D8;&#x6362;&#x5C31;&#x80FD;&#x5F97;&#x5230;&#x4E0D;&#x540C;&#x5355;&#x8BCD;&#x4E4B;&#x95F4;&#x7684;&#x76F8;&#x5173;&#x5EA6;( 0 ~ 1 &#x4E4B;&#x95F4;&#x7684;&#x4E00;&#x4E2A;&#x5B9E;&#x6570;&#xFF09;&#xFF0C;&#x76F8;&#x5173;&#x5EA6;&#x975E;&#x5E38;&#x9AD8;&#x7684;&#x5355;&#x8BCD;&#x5F80;&#x5F80;&#x62E5;&#x6709;&#x76F8;&#x540C;&#x7684;&#x542B;&#x4E49;&#x3002;&#x4E0D;&#x8FC7;&#x4E0D;&#x8981;&#x88AB;&#x201C;&#x6F5C;&#x5728;&#x8BED;&#x4E49;&#x201D;&#x7684;&#x540D;&#x79F0;&#x6240;&#x8FF7;&#x60D1;&#xFF0C;&#x6240;&#x8C13;&#x7684;&#x6F5C;&#x5728;&#x8BED;&#x4E49;&#x53EA;&#x4E0D;&#x8FC7;&#x662F;&#x7EDF;&#x8BA1;&#x610F;&#x4E49;&#x4E0A;&#x7684;&#x76F8;&#x4F3C;&#xFF0C;&#x5982;&#x679C;&#x60F3;&#x5F97;&#x5230;&#x540C;&#x4E49;&#x8BCD;&#x8FD8;&#x662F;&#x4F7F;&#x7528;&#x540C;&#x4E49;&#x8BCD;&#x8BCD;&#x5178;&#x9760;&#x8C31;&#x3002;LSI &#x5F97;&#x5230;&#x7684;&#x8FD1;&#x4E49;&#x8BCD;&#x7684;&#x7279;&#x70B9;&#x662F;&#x5B83;&#x4EEC;&#x4E0D;&#x4E00;&#x5B9A;&#x662F;&#x540C;&#x4E49;&#x8BCD;&#xFF08;&#x751A;&#x81F3;&#x8BCD;&#x6027;&#x90FD;&#x53EF;&#x80FD;&#x4E0D;&#x540C;&#xFF09;&#xFF0C;&#x4F46;&#x5B83;&#x4EEC;&#x5F80;&#x5F80;&#x51FA;&#x73B0;&#x5728;&#x540C;&#x7C7B;&#x60C5;&#x666F;&#x4E0B;&#xFF08;&#x6BD4;&#x5982;&#x201C;&#x9B54;&#x517D;&#x201D; &#x548C; &#x201C;dota&#x201D;)&#x3002;&#x4E0D;&#x8FC7;&#x4E8B;&#x5B9E;&#x4E0A;&#x76F4;&#x63A5;&#x4F7F;&#x7528;LSI&#x505A;&#x5355;&#x8BCD;&#x76F8;&#x5173;&#x5EA6;&#x8BA1;&#x7B97;&#x7684;&#x5E76;&#x4E0D;&#x591A;&#xFF0C;&#x4E00;&#x65B9;&#x9762;&#x5728;&#x4E8E;&#x73B0;&#x5728;&#x6709;&#x4E00;&#x4E9B;&#x7070;&#x5E38;&#x597D;&#x7528;&#x7684;&#x540C;&#x4E49;&#x8BCD;&#x8BCD;&#x5178;&#xFF0C;&#x53E6;&#x5916;&#x76F8;&#x5BF9;&#x65E0;&#x76D1;&#x7763;&#x7684;&#x5B66;&#x4E60;&#x5927;&#x5BB6;&#x8FD8;&#x662F;&#x66F4;&#x4FE1;&#x4EFB;&#x6709;&#x76D1;&#x7763;&#x7684;&#x5B66;&#x4E60;&#xFF08;&#x5206;&#x7C7B;&#xFF09;&#x5F97;&#x5230;&#x7684;&#x7ED3;&#x679C;&#x3002; &#x805A;&#x7C7B;&#x76F4;&#x63A5;&#x7528; LSI &#x805A;&#x7C7B;&#x7684;&#x60C5;&#x666F;&#x8FD8;&#x6CA1;&#x6709;&#x89C1;&#x8FC7;&#xFF0C;&#x4F46;&#x4F7F;&#x7528;&#x8BE5;&#x7CFB;&#x5217;&#x7B97;&#x6CD5;&#x7684;&#x540E;&#x7EED;&#x53D8;&#x79CD; PLSI, LDA &#x8FDB;&#x884C;&#x805A;&#x7C7B;&#x7684;&#x7684;&#x786E;&#x6709;&#x4E00;&#x4E9B;&#x3002;&#x5176;&#x4E2D;LDA&#x805A;&#x7C7B;&#x8FD8;&#x6709;&#x4E9B;&#x9053;&#x7406;&#xFF08;&#x56E0;&#x4E3A;&#x5B83;&#x672C;&#x8EAB;&#x5C31;&#x5047;&#x8BBE;&#x4E86;&#x6F5C;&#x5728;topic&#x7684;&#x8054;&#x5408;&#x6982;&#x7387;&#x5206;&#x5E03;&#xFF09;&#xFF0C;&#x7528; LSI &#x8FDB;&#x884C;&#x805A;&#x7C7B;&#x5176;&#x5B9E;&#x5E76;&#x4E0D;&#x5408;&#x9002;&#x3002;&#x672C;&#x8D28;&#x4E0A; LSI &#x5728;&#x627E;&#x7279;&#x5F81;&#x5B50;&#x7A7A;&#x95F4;&#xFF0C;&#x800C;&#x805A;&#x7C7B;&#x65B9;&#x6CD5;&#x8981;&#x627E;&#x7684;&#x662F;&#x5B9E;&#x4F8B;&#x5206;&#x7EC4;&#x3002; LSI &#x867D;&#x7136;&#x80FD;&#x5F97;&#x5230;&#x770B;&#x8D77;&#x6765;&#x8C8C;&#x4F3C;&#x662F;&#x805A;&#x7C7B;&#x7684;&#x7ED3;&#x679C;&#xFF0C;&#x4F46;&#x5176;&#x610F;&#x4E49;&#x4E0D;&#x89C1;&#x5F97;&#x662F;&#x805A;&#x7C7B;&#x6240;&#x60F3;&#x5F97;&#x5230;&#x7684;&#x3002;&#x4E00;&#x4E2A;&#x660E;&#x663E;&#x7684;&#x4F8B;&#x5B50;&#x5C31;&#x662F;&#xFF0C;&#x5BF9;&#x4E8E;&#x5206;&#x5E03;&#x4E0D;&#x5E73;&#x5747;&#x7684;&#x6837;&#x672C;&#x96C6;&#xFF08;&#x6BD4;&#x5982;&#x65B0;&#x95FB;&#x7C7B;&#x7684;&#x6587;&#x7AE0;&#x6709;1000&#x7BC7;&#xFF0C;&#x800C;&#x6587;&#x5B66;&#x7C7B;&#x7684;&#x6587;&#x7AE0;&#x53EA;&#x6709;10&#x7BC7;&#xFF09;&#xFF0C; LSI/PLSI &#x5F97;&#x5230;&#x7684;&#x5F80;&#x5F80;&#x662F;&#x76F8;&#x5BF9;&#x5E73;&#x5747;&#x7684;&#x7ED3;&#x679C;(A&#x7C7B;500&#x7BC7;&#xFF0C;B&#x7C7B;600&#x7BC7;)&#xFF0C;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x4E0B;&#x6839;&#x672C;&#x65E0;&#x6CD5;&#x5F97;&#x5230;&#x597D;&#x7684;&#x805A;&#x7C7B;&#x7ED3;&#x679C;&#x3002;&#x76F8;&#x5BF9;&#x4F20;&#x7EDF;&#x805A;&#x7C7B;&#x65B9;&#x6CD5;k-means&#xFF0C; LSI &#x7CFB;&#x5217;&#x7B97;&#x6CD5;&#x4E0D;&#x4EC5;&#x5B58;&#x5728;&#x4FE1;&#x606F;&#x7684;&#x504F;&#x5DEE;&#xFF08;&#x4E22;&#x5931;&#x548C;&#x6539;&#x53D8;&#xFF09;&#xFF0C;&#x800C;&#x4E14;&#x4E0D;&#x80FD;&#x5904;&#x7406;&#x5206;&#x5E03;&#x4E0D;&#x5747;&#x7684;&#x6837;&#x672C;&#x96C6;&#x3002; &#x5B9E;&#x9A8C;&#x8BF4;&#x660E;&#x7528;&#x4E86;python&#x7684;gensim&#x5305;&#x73B0;&#x6709;&#x7684;&#x6570;&#x636E;&#x662F;438&#x6761;&#x6807;&#x51C6;&#x95EE;&#x9898;&#x4EE5;&#x53CA;3300&#x6761;&#x4EBA;&#x5DE5;&#x95EE;&#x9898;&#xFF08;&#x53EF;&#x4EE5;&#x8F6C;&#x5316;&#x4E3A;438&#x6761;&#x6807;&#x51C6;&#x95EE;&#x9898;&#xFF09;&#xFF0C;&#x73B0;&#x5728;&#x9700;&#x8981;&#x5BF9;&#x4EBA;&#x5DE5;&#x95EE;&#x9898;&#x505A;&#x4E00;&#x4E2A;&#x5F52;&#x4E00;&#x5316;&#x3002;&#x8FD9;&#x91CC;&#x91C7;&#x7528;LSI&#x6A21;&#x578B;&#x8FDB;&#x884C;&#x5EFA;&#x6A21;&#x5B9E;&#x9A8C;&#xFF0C;&#x6B65;&#x9AA4;&#x5982;&#x4E0B;&#x3002; &#x5BFC;&#x5165;&#x5305; # -*- coding: utf-8 -*- from gensim import corpora, models, similarities import logging import jieba import jieba.posseg as pseg # &#x9632;&#x6B62;&#x4E71;&#x7801; import sys reload(sys) sys.setdefaultencoding(&apos;utf-8&apos;) # &#x6253;&#x5370;log&#x4FE1;&#x606F; logging.basicConfig(format=&apos;%(asctime)s : %(levelname)s : %(message)s&apos;, level=logging.INFO) &#x6587;&#x672C;&#x9884;&#x5904;&#x7406; # &#x6807;&#x51C6;FAQ&#xFF0C;&#x4E00;&#x884C;&#x5BF9;&#x5E94;&#x4E00;&#x6761;&#x95EE;&#x53E5; f = open(&apos;FAQuniq.txt&apos;, &apos;r&apos;) # &#x5BF9;&#x95EE;&#x53E5;&#x8FDB;&#x884C;&#x5206;&#x8BCD; texts = [[word for word in jieba.cut(document, cut_all = False)] for document in f] # &#x62BD;&#x53D6;&#x4E00;&#x4E2A;bag-of-words&#xFF0C;&#x5C06;&#x6587;&#x6863;&#x7684;token&#x6620;&#x5C04;&#x4E3A;id dictionary = corpora.Dictionary(texts) # &#x4FDD;&#x5B58;&#x8BCD;&#x5178; dictionary.save(&apos;LSI.dict&apos;) # &#x4EA7;&#x751F;&#x6587;&#x6863;&#x5411;&#x91CF;&#xFF0C;&#x5C06;&#x7528;&#x5B57;&#x7B26;&#x4E32;&#x8868;&#x793A;&#x7684;&#x6587;&#x6863;&#x8F6C;&#x6362;&#x4E3A;&#x7528;id&#x548C;&#x8BCD;&#x9891;&#x8868;&#x793A;&#x7684;&#x6587;&#x6863;&#x5411;&#x91CF; corpus = [dictionary.doc2bow(text) for text in texts] # &#x57FA;&#x4E8E;&#x8FD9;&#x4E9B;&#x201C;&#x8BAD;&#x7EC3;&#x6587;&#x6863;&#x201D;&#x8BA1;&#x7B97;&#x4E00;&#x4E2A;TF-IDF&#x6A21;&#x578B; tfidf = models.TfidfModel(corpus) # &#x8F6C;&#x5316;&#x6587;&#x6863;&#x5411;&#x91CF;&#xFF0C;&#x5C06;&#x7528;&#x8BCD;&#x9891;&#x8868;&#x793A;&#x7684;&#x6587;&#x6863;&#x5411;&#x91CF;&#x8868;&#x793A;&#x4E3A;&#x4E00;&#x4E2A;&#x7528;tf-idf&#x503C;&#x8868;&#x793A;&#x7684;&#x6587;&#x6863;&#x5411;&#x91CF; corpus_tfidf = tfidf[corpus] # &#x8BAD;&#x7EC3;LSI&#x6A21;&#x578B; &#x5373;&#x5C06;&#x8BAD;&#x7EC3;&#x6587;&#x6863;&#x5411;&#x91CF;&#x7EC4;&#x6210;&#x7684;&#x77E9;&#x9635;SVD&#x5206;&#x89E3;&#xFF0C;&#x5E76;&#x505A;&#x4E00;&#x4E2A;&#x79E9;&#x4E3A;2&#x7684;&#x8FD1;&#x4F3C;SVD&#x5206;&#x89E3; lsi = models.LsiModel(corpus_tfidf, id2word=dictionary, num_topics=100) # &#x4FDD;&#x5B58;&#x6A21;&#x578B; lsi.save(&apos;LSI.pkl&apos;) lsi.print_topics(20) &#x521D;&#x59CB;&#x5316;&#x9A8C;&#x8BC1;performance&#x7684;&#x6587;&#x4EF6;checkFile&#x7684;&#x6BCF;&#x884C;&#x683C;&#x5F0F;&#x4E3A;&#xFF1A; &#x539F;&#x59CB;&#x95EE;&#x9898;&#x7684;docid&#xFF1A;&#x5BF9;&#x5E94;&#x7684;&#x6807;&#x51C6;&#x95EE;&#x9898;&#x7684;topicid &#x628A;&#x5B83;&#x5B58;&#x5230;checkDict&#x8FD9;&#x4E2A;dictionary&#x4E2D;&#xFF0C;key&#x662F;docid&#xFF0C;value&#x662F;topicid&#x3002; checkDict=dict() def getCheckId(): fcheck=open(&apos;checkFile.txt&apos;) for line in fcheck: line=line.strip(&apos;\\n&apos;) if (len(line)==0): continue docid=line.split(&quot;:&quot;)[0] topicid=line.split(&quot;:&quot;)[1] checkDict[int(docid)]=int(topicid) getCheckId() &#x5F52;&#x4E00;&#x5316;&#xFF0F;&#x8BA1;&#x7B97;&#x6587;&#x6863;&#x76F8;&#x4F3C;&#x5EA6; # &#x5EFA;&#x7D22;&#x5F15; index = similarities.MatrixSimilarity(lsi[corpus]) # &#x521D;&#x59CB;&#x5316;&#x5206;&#x6570; score1=0 score2=0 score3=0 # &#x8BFB;&#x53D6;&#x6587;&#x4EF6;&#xFF0C;&#x6587;&#x4EF6;&#x7684;&#x6BCF;&#x884C;&#x683C;&#x5F0F;&#x4E3A;&#x4E00;&#x4E2A;&#x539F;&#x59CB;&#x95EE;&#x53E5; f2=open(&apos;ORIFAQ3330.txt&apos;,&apos;r&apos;) # count&#x7684;&#x4F5C;&#x7528;&#x662F;&#x548C;checkFile&#x7684;docid&#xFF0C;&#x5373;checkDict&#x7684;key&#x5BF9;&#x5E94; count=1 for query in f2: # &#x83B7;&#x53D6;&#x8BE5;&#x539F;&#x59CB;&#x95EE;&#x53E5;&#x672C;&#x5E94;&#x5BF9;&#x5E94;&#x7684;&#x6B63;&#x786E;&#x6807;&#x51C6;&#x95EE;&#x53E5; if (not checkDict.has_key(count)): count+=1 continue checkId=checkDict[count] # &#x5C06;&#x95EE;&#x53E5;&#x5411;&#x91CF;&#x5316; query_bow = dictionary.doc2bow(jieba.cut(query, cut_all = False)) # &#x518D;&#x7528;&#x4E4B;&#x524D;&#x8BAD;&#x7EC3;&#x597D;&#x7684;LSI&#x6A21;&#x578B;&#x5C06;&#x5176;&#x6620;&#x5C04;&#x5230;&#x4E8C;&#x7EF4;&#x7684;topic&#x7A7A;&#x95F4;&#xFF1A; query_lsi = lsi[query_bow] # &#x8BA1;&#x7B97;&#x5176;&#x548C;index&#x4E2D;doc&#x7684;&#x4F59;&#x5F26;&#x76F8;&#x4F3C;&#x5EA6;&#x4E86;&#xFF1A; sims = index[query_lsi] sort_sims = sorted(enumerate(sims), key=lambda item: -item[1]) # &#x627E;&#x51FA;&#x6700;&#x76F8;&#x5173;&#x7684;&#x4E09;&#x7BC7;&#x6587;&#x6863;&#xFF0C;&#x8BA1;&#x7B97;&#x8FD9;&#x4E09;&#x7BC7;&#x6587;&#x6863;&#x662F;&#x5426;&#x5305;&#x62EC;&#x6807;&#x51C6;&#x95EE;&#x53E5;&#xFF0C;&#x5982;&#x679C;&#x6587;&#x6863;&#x5C31;&#x662F;&#x6807;&#x51C6;&#x95EE;&#x53E5;&#xFF0C;&#x5BF9;&#x5E94;&#x7684;&#x5206;&#x6570;&#x52A0;1 if (checkId==sort_sims[0][0]): score1+=1 elif (checkId==sort_sims[1][0]): score2+=1 elif (checkId==sort_sims[2][0]): score3+=1 count+=1 &#x6253;&#x5370;&#x5206;&#x6570; print &quot;Score1: &quot;.format(score1*1.0/count) print &quot;Score2: &quot;.format(score2*1.0/count) print &quot;Score3: &quot;.format(score3*1.0/count) &#x7ED3;&#x8BBA;&#x5176;&#x5B9E;&#x8FD9;&#x91CC;&#x7684;&#x7ED3;&#x679C;&#x975E;&#x5E38;&#x5DEE;&#xFF0C;&#x539F;&#x56E0;&#x662F;&#x6587;&#x6863;&#xFF08;&#x6BCF;&#x4E00;&#x6761;&#x95EE;&#x53E5;&#xFF09;&#x592A;&#x77ED;&#xFF0C;&#x53EA;&#x6709;&#x5341;&#x51E0;&#x4E2A;&#x5B57;&#xFF0C;&#x53E6;&#x5916;&#x6587;&#x6863;&#x6570;&#x592A;&#x5C11;&#xFF0C;LSI&#x964D;&#x7EF4;&#x727A;&#x7272;&#x4E86;&#x51C6;&#x786E;&#x7387;&#xFF0C;&#x4E0B;&#x4E00;&#x4E2A;&#x5B9E;&#x9A8C;LDA&#x7684;&#x51C6;&#x786E;&#x7387;&#x76F8;&#x6BD4;&#x4F1A;&#x9AD8;&#x5F88;&#x591A;&#x3002;&#x53E6;&#x5916;&#xFF0C;&#x672C;&#x6B21;&#x5B9E;&#x9A8C;&#x6240;&#x7528;&#x7684;&#x6837;&#x672C;&#x5206;&#x5E03;&#x5E76;&#x4E0D;&#x5747;&#x5300;&#xFF0C;&#x201C;&#x672A;&#x6536;&#x5230;&#x5956;&#x52B1;&#x201D;&#x7C7B;&#x4F3C;&#x95EE;&#x9898;&#x51FA;&#x73B0;&#x7684;&#x9891;&#x7387;&#x6BD4;&#x201C;&#x8F6F;&#x4EF6;&#x65E0;&#x58F0;&#x97F3;&#x201D;&#x7C7B;&#x4F3C;&#x95EE;&#x9898;&#x51FA;&#x73B0;&#x7684;&#x9891;&#x7387;&#x8981;&#x9AD8;&#x5F88;&#x591A;&#x3002;&#x91CD;&#x7533;&#xFF1A;LSI/PLSI &#x5F97;&#x5230;&#x7684;&#x5F80;&#x5F80;&#x662F;&#x76F8;&#x5BF9;&#x5E73;&#x5747;&#x7684;&#x7ED3;&#x679C;(A&#x7C7B;500&#x7BC7;&#xFF0C;B&#x7C7B;600&#x7BC7;)&#xFF0C;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x4E0B;&#x6839;&#x672C;&#x65E0;&#x6CD5;&#x5F97;&#x5230;&#x597D;&#x7684;&#x805A;&#x7C7B;&#x7ED3;&#x679C;&#x3002;&#x76F8;&#x5BF9;&#x4F20;&#x7EDF;&#x805A;&#x7C7B;&#x65B9;&#x6CD5;k-means&#xFF0C; LSI &#x7CFB;&#x5217;&#x7B97;&#x6CD5;&#x4E0D;&#x4EC5;&#x5B58;&#x5728;&#x4FE1;&#x606F;&#x7684;&#x504F;&#x5DEE;&#xFF08;&#x4E22;&#x5931;&#x548C;&#x6539;&#x53D8;&#xFF09;&#xFF0C;&#x800C;&#x4E14;&#x4E0D;&#x80FD;&#x5904;&#x7406;&#x5206;&#x5E03;&#x4E0D;&#x5747;&#x7684;&#x6837;&#x672C;&#x96C6;&#x3002; LSI &#x7F3A;&#x9677;&#x5E38;&#x7528;&#x7684;VSM&#x6587;&#x672C;&#x8868;&#x793A;&#x6A21;&#x578B;&#x4E2D;&#x6709;&#x4E24;&#x4E2A;&#x4E3B;&#x8981;&#x7684;&#x7F3A;&#x9677;&#xFF1A; &#x8BE5;&#x6A21;&#x578B;&#x5047;&#x8BBE;&#x6240;&#x6709;&#x7279;&#x5F81;&#x8BCD;&#x6761;&#x4E4B;&#x95F4;&#x662F;&#x76F8;&#x4E92;&#x72EC;&#x7ACB;&#x3001;&#x4E92;&#x4E0D;&#x5F71;&#x54CD;&#x7684;&#xFF08;&#x6734;&#x7D20;&#x8D1D;&#x53F6;&#x65AF;&#x4E5F;&#x662F;&#x8FD9;&#x4E2A;&#x601D;&#x60F3;&#xFF09;&#xFF0C;&#x5373;&#x8BE5;&#x6A21;&#x578B;&#x8FD8;&#x662F;&#x57FA;&#x4E8E;&#x201C;&#x8BCD;&#x888B;&#x201D;&#x6A21;&#x578B;&#xFF08;&#x5E94;&#x8BE5;&#x8BF4;&#x6240;&#x6709;&#x5229;&#x7528;VSM&#x6A21;&#x578B;&#x6CA1;&#x6709;&#x8FDB;&#x884C;&#x6F5C;&#x5728;&#x8BED;&#x4E49;&#x5206;&#x6790;&#x7684;&#x7B97;&#x6CD5;&#x90FD;&#x662F;&#x57FA;&#x4E8E;&#x201C;&#x8BCD;&#x888B;&#x201D;&#x5047;&#x8BBE;&#xFF09;&#x3002; &#x6CA1;&#x6709;&#x8FDB;&#x884C;&#x7279;&#x5F81;&#x964D;&#x7EF4;&#xFF0C;&#x7279;&#x5F81;&#x7EF4;&#x6570;&#x53EF;&#x80FD;&#x4F1A;&#x5F88;&#x9AD8;&#xFF0C;&#x5411;&#x91CF;&#x7A7A;&#x95F4;&#x53EF;&#x80FD;&#x5F88;&#x5927;&#xFF0C;&#x5BF9;&#x5B58;&#x50A8;&#x548C;&#x8BA1;&#x7B97;&#x8D44;&#x6E90;&#x8981;&#x6C42;&#x4F1A;&#x6BD4;&#x8F83;&#x9AD8;&#x3002; LSI&#x7684;&#x57FA;&#x672C;&#x601D;&#x60F3;&#x662F;&#x6587;&#x672C;&#x4E2D;&#x7684;&#x8BCD;&#x4E0E;&#x8BCD;&#x4E4B;&#x95F4;&#x4E0D;&#x662F;&#x5B64;&#x7ACB;&#x7684;&#xFF0C;&#x5B58;&#x5728;&#x7740;&#x67D0;&#x79CD;&#x6F5C;&#x5728;&#x7684;&#x8BED;&#x4E49;&#x5173;&#x7CFB;&#xFF0C;&#x901A;&#x8FC7;&#x5BF9;&#x6837;&#x672C;&#x6570;&#x636E;&#x7684;&#x7EDF;&#x8BA1;&#x5206;&#x6790;&#xFF0C;&#x8BA9;&#x673A;&#x5668;&#x81EA;&#x52A8;&#x6316;&#x6398;&#x51FA;&#x8FD9;&#x4E9B;&#x6F5C;&#x5728;&#x7684;&#x8BED;&#x4E49;&#x5173;&#x7CFB;&#xFF0C;&#x5E76;&#x628A;&#x8FD9;&#x4E9B;&#x5173;&#x7CFB;&#x8868;&#x793A;&#x6210;&#x8BA1;&#x7B97;&#x673A;&#x53EF;&#x4EE5;&#x201D;&#x7406;&#x89E3;&#x201D;&#x7684;&#x6A21;&#x578B;&#x3002;&#x5B83;&#x53EF;&#x4EE5;&#x6D88;&#x9664;&#x8BCD;&#x5339;&#x914D;&#x8FC7;&#x7A0B;&#x4E2D;&#x7684;&#x540C;&#x4E49;&#x548C;&#x591A;&#x4E49;&#x73B0;&#x8C61;&#x3002;&#x5B83;&#x53EF;&#x4EE5;&#x5C06;&#x4F20;&#x7EDF;&#x7684;VSM&#x964D;&#x79E9;&#x5230;&#x4E00;&#x4E2A;&#x4F4E;&#x7EF4;&#x7684;&#x8BED;&#x4E49;&#x7A7A;&#x95F4;&#x4E2D;&#xFF0C;&#x5728;&#x8BE5;&#x8BED;&#x4E49;&#x7A7A;&#x95F4;&#x4E2D;&#x8BA1;&#x7B97;&#x6587;&#x6863;&#x7684;&#x76F8;&#x4F3C;&#x5EA6;&#x7B49;&#x3002;&#x603B;&#x7684;&#x8BF4;&#x6765;&#xFF0C;LSI&#x5C31;&#x662F;&#x5229;&#x7528;&#x8BCD;&#x7684;&#x8BED;&#x4E49;&#x5173;&#x7CFB;&#x5BF9;VSM&#x6A21;&#x578B;&#x8FDB;&#x884C;&#x964D;&#x7EF4;&#xFF0C;&#x5E76;&#x63D0;&#x9AD8;&#x5206;&#x7C7B;&#x7684;&#x6548;&#x679C;&#x3002; &#x53C2;&#x8003;&#x94FE;&#x63A5;http://www.zwbk.org/MyLemmaShow.aspx?lid=257113http://www.52nlp.cn/%E5%A6%82%E4%BD%95%E8%AE%A1%E7%AE%97%E4%B8%A4%E4%B8%AA%E6%96%87%E6%A1%A3%E7%9A%84%E7%9B%B8%E4%BC%BC%E5%BA%A6%E4%BA%8C","tags":"lda machine-learning topic-modeling cluster"},{"title":"GibbsLDA++: A C/C++ 使用心得","url":"/2016/05/25/GibbsLDA-A-C-C-使用心得/","text":"","tags":""},{"title":"在c里调用python","url":"/2016/05/22/在c里调用python/","text":"&#x8FD9;&#x4E00;&#x4E2A;&#x4F8B;&#x5B50;&#x662F;c&#x8C03;&#x7528;&#x4E86;python&#x7684;&#x51FD;&#x6570;&#xFF0C;&#x51FD;&#x6570;&#x8FD4;&#x56DE;&#x503C;&#x662F;list&#xFF0C;&#x5305;&#x542B;&#x4E86;100&#x4E2A;float&#x503C;&#x3002; #include #include #include void test1(){ Py_Initialize();//&#x521D;&#x59CB;&#x5316;python char *test = &quot;&#x5956;&#x52B1;&quot;; PyObject * pModule = NULL; PyObject * pModule1 = NULL; PyObject * pFunc = NULL; PyObject * pArg = NULL; PyObject * result; pModule = PyImport_ImportModule(&quot;inferSingleDocVec&quot;);//&#x5F15;&#x5165;&#x6A21;&#x5757; pFunc = PyObject_GetAttrString(pModule, &quot;getDocVec&quot;);//&#x76F4;&#x63A5;&#x83B7;&#x53D6;&#x6A21;&#x5757;&#x4E2D;&#x7684;&#x51FD;&#x6570; pArg= Py_BuildValue(&quot;(s)&quot;, test); result = PyEval_CallObject(pFunc, pArg); //&#x8C03;&#x7528;&#x76F4;&#x63A5;&#x83B7;&#x5F97;&#x7684;&#x51FD;&#x6570;&#xFF0C;&#x5E76;&#x4F20;&#x9012;&#x53C2;&#x6570;&#xFF1B;&#x8FD9;&#x91CC;&#x5F97;&#x5230;&#x7684;&#x662F;&#x4E00;&#x4E2A;list for (int i = 0; i &lt; PyList_Size(result); i++) { printf(&quot;%f\\t&quot;, PyFloat_AsDouble(PyList_GetItem(result, (Py_ssize_t)i)));//&#x6253;&#x5370;&#x6BCF;&#x4E00;&#x4E2A;&#x5143;&#x7D20; } //&#x4E0B;&#x9762;&#x4EE3;&#x7801;&#x9002;&#x7528;&#x4E8E;&#x8FD4;&#x56DE;&#x503C;&#x4E3A;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x60C5;&#x51B5; //char* s=NULL; //PyArg_Parse(result, &quot;s&quot;, &amp;s); //for (int i=0;s[i]!=&apos;\\0&apos;;i++){ // printf(&quot;%c&quot;,s[i]); // } Py_Finalize(); //&#x91CA;&#x653E;python // return; } int main(int argc, char* argv[]) { test1(); return 0; } &#x7F16;&#x8BD1;&#x8FD0;&#x884C; $ gcc -I/usr/local/lib/python2.7.11 -o inferDocVec inferDocVec.c -lpython2.7 $ ./inferDocVec &#x8C03;&#x7528;&#x7684;inferSingleDocVec&#x6587;&#x4EF6; #!/usr/bin/python # -*- coding: utf-8 -*- ### for infer import sys reload(sys) sys.setdefaultencoding(&apos;utf8&apos;) import gensim, logging from gensim.models import Doc2Vec import os import jieba import multiprocessing import numpy as np import base64 logging.basicConfig(format=&apos;%(asctime)s : %(levelname)s : %(message)s&apos;, level=logging.INFO) def getDocVec(doc_words): docwords=[word for word in jieba.cut(doc_words, cut_all = False)] model = Doc2Vec.load(&apos;all_model_v2.txt&apos;) invec = model.infer_vector(docwords, alpha=0.1, min_alpha=0.0001, steps=5) return (list)(invec) &#x5173;&#x4E8E;&#x5982;&#x4F55;&#x5C06;python&#x6587;&#x4EF6;&#x8F6C;&#x4E3A;&#x6A21;&#x5757;&#xFF0C;&#x8BE6;&#x89C1;&#x4E4B;&#x524D;&#x7684;&#x4E00;&#x7BC7;&#x535A;&#x6587;python &#x5C06;&#x81EA;&#x5DF1;&#x5199;&#x7684;py&#x6587;&#x4EF6;&#x4F5C;&#x4E3A;&#x6A21;&#x5757;&#x5BFC;&#x5165; &#x53C2;&#x8003;&#x94FE;&#x63A5; https://www.daniweb.com/programming/software-development/threads/237529/what-does-pyarg_parse-do-in-detail http://stackoverflow.com/questions/5079570/writing-a-python-c-extension-how-to-correctly-load-a-pylistobject","tags":"python c"},{"title":"AP聚类","url":"/2016/05/19/AP聚类/","text":"AP&#x7B97;&#x6CD5;&#x7684;&#x5177;&#x4F53;&#x5DE5;&#x4F5C;&#x8FC7;&#x7A0B;&#x5982;&#x4E0B;&#xFF1A;&#x5148;&#x8BA1;&#x7B97;N&#x4E2A;&#x70B9;&#x4E4B;&#x95F4;&#x7684;&#x76F8;&#x4F3C;&#x5EA6;&#x503C;&#xFF0C;&#x5C06;&#x503C;&#x653E;&#x5728;S&#x77E9;&#x9635;&#x4E2D;&#xFF0C;&#x518D;&#x9009;&#x53D6;P&#x503C;(&#x4E00;&#x822C;&#x53D6;S&#x7684;&#x4E2D;&#x503C;)&#x3002;&#x8BBE;&#x7F6E;&#x4E00;&#x4E2A;&#x6700;&#x5927;&#x8FED;&#x4EE3;&#x6B21;&#x6570;(&#x6587;&#x4E2D;&#x8BBE;&#x9ED8;&#x8BA4;&#x503C;&#x4E3A;1000)&#xFF0C;&#x8FED;&#x4EE3;&#x8FC7;&#x7A0B;&#x5F00;&#x59CB;&#x540E;&#xFF0C;&#x8BA1;&#x7B97;&#x6BCF;&#x4E00;&#x6B21;&#x7684;R&#x503C;&#x548C;A&#x503C;&#xFF0C;&#x6839;&#x636E;R(k,k)+A(k,k)&#x503C;&#x6765;&#x5224;&#x65AD;&#x662F;&#x5426;&#x4E3A;&#x805A;&#x7C7B;&#x4E2D;&#x5FC3;(&#x6587;&#x4E2D;&#x6307;&#x5B9A;&#x5F53;(R(k,k)+A(k,k))&#xFF1E;0&#x65F6;&#x8BA4;&#x4E3A;&#x662F;&#x4E00;&#x4E2A;&#x805A;&#x7C7B;&#x4E2D;&#x5FC3;)&#xFF0C;&#x5F53;&#x8FED;&#x4EE3;&#x6B21;&#x6570;&#x8D85;&#x8FC7;&#x6700;&#x5927;&#x503C;( &#x5373;maxits&#x503C;)&#x6216;&#x8005;&#x5F53;&#x805A;&#x7C7B;&#x4E2D;&#x5FC3;&#x8FDE;&#x7EED;&#x591A;&#x5C11;&#x6B21;&#x8FED;&#x4EE3;&#x4E0D;&#x53D1;&#x751F;&#x6539;&#x53D8;( &#x5373;convits&#x503C;)&#x65F6;&#x7EC8;&#x6B62;&#x8BA1;&#x7B97;(&#x6587;&#x4E2D;&#x8BBE;&#x5B9A;&#x8FDE;&#x7EED;50&#x6B21;&#x8FED;&#x4EE3;&#x8FC7;&#x7A0B;&#x4E0D;&#x53D1;&#x751F;&#x6539;&#x53D8;&#x662F;&#x7EC8;&#x6B62;&#x8BA1;&#x7B97;)&#x3002; Affinity Propagation (AP) &#x805A;&#x7C7B;&#x662F;&#x6700;&#x8FD1;&#x5728;Science&#x6742;&#x5FD7;&#x4E0A;&#x63D0;&#x51FA;&#x7684;&#x4E00;&#x79CD;&#x65B0;&#x7684;&#x805A;&#x7C7B;&#x7B97;&#x6CD5;&#x3002;&#x5B83;&#x6839;&#x636E;N&#x4E2A;&#x6570;&#x636E;&#x70B9;&#x4E4B;&#x95F4;&#x7684;&#x76F8;&#x4F3C;&#x5EA6;&#x8FDB;&#x884C;&#x805A;&#x7C7B;,&#x8FD9;&#x4E9B;&#x76F8;&#x4F3C;&#x5EA6;&#x53EF;&#x4EE5;&#x662F;&#x5BF9;&#x79F0;&#x7684;,&#x5373;&#x4E24;&#x4E2A;&#x6570;&#x636E;&#x70B9;&#x4E92;&#x76F8;&#x4E4B;&#x95F4;&#x7684;&#x76F8;&#x4F3C;&#x5EA6;&#x4E00;&#x6837;(&#x5982;&#x6B27;&#x6C0F;&#x8DDD;&#x79BB;);&#x4E5F;&#x53EF;&#x4EE5;&#x662F;&#x4E0D;&#x5BF9;&#x79F0;&#x7684;,&#x5373;&#x4E24;&#x4E2A;&#x6570;&#x636E;&#x70B9;&#x4E92;&#x76F8;&#x4E4B;&#x95F4;&#x7684;&#x76F8;&#x4F3C;&#x5EA6;&#x4E0D;&#x7B49;&#x3002;&#x8FD9;&#x4E9B;&#x76F8;&#x4F3C;&#x5EA6;&#x7EC4;&#x6210;N&#xD7;N&#x7684;&#x76F8;&#x4F3C;&#x5EA6;&#x77E9;&#x9635;S(&#x5176;&#x4E2D;N&#x4E3A;&#x6709;N&#x4E2A;&#x6570;&#x636E;&#x70B9;)&#x3002;AP&#x7B97;&#x6CD5;&#x4E0D;&#x9700;&#x8981;&#x4E8B;&#x5148;&#x6307;&#x5B9A;&#x805A;&#x7C7B;&#x6570;&#x76EE;,&#x76F8;&#x53CD;&#x5B83;&#x5C06;&#x6240;&#x6709;&#x7684;&#x6570;&#x636E;&#x70B9;&#x90FD;&#x4F5C;&#x4E3A;&#x6F5C;&#x5728;&#x7684;&#x805A;&#x7C7B;&#x4E2D;&#x5FC3;,&#x79F0;&#x4E4B;&#x4E3A;exemplar&#x3002;&#x4EE5;S&#x77E9;&#x9635;&#x7684;&#x5BF9;&#x89D2;&#x7EBF;&#x4E0A;&#x7684;&#x6570;&#x503C;s(k, k)&#x4F5C;&#x4E3A;k&#x70B9;&#x80FD;&#x5426;&#x6210;&#x4E3A;&#x805A;&#x7C7B;&#x4E2D;&#x5FC3;&#x7684;&#x8BC4;&#x5224;&#x6807;&#x51C6;,&#x8FD9;&#x610F;&#x5473;&#x7740;&#x8BE5;&#x503C;&#x8D8A;&#x5927;,&#x8FD9;&#x4E2A;&#x70B9;&#x6210;&#x4E3A;&#x805A;&#x7C7B;&#x4E2D;&#x5FC3;&#x7684;&#x53EF;&#x80FD;&#x6027;&#x4E5F;&#x5C31;&#x8D8A;&#x5927;,&#x8FD9;&#x4E2A;&#x503C;&#x53C8;&#x79F0;&#x4F5C;&#x53C2;&#x8003;&#x5EA6;p (preference)&#x3002;&#x5728;&#x8FD9;&#x91CC;&#x4ECB;&#x7ECD;&#x51E0;&#x4E2A;&#x6587;&#x4E2D;&#x5E38;&#x51FA;&#x73B0;&#x7684;&#x540D;&#x8BCD;&#xFF1A;exemplar&#xFF1A;&#x6307;&#x7684;&#x662F;&#x805A;&#x7C7B;&#x4E2D;&#x5FC3;&#x3002;similarity&#xFF1A;&#x6570;&#x636E;&#x70B9;i&#x548C;&#x70B9;j&#x7684;&#x76F8;&#x4F3C;&#x5EA6;&#x8BB0;&#x4E3A;S(i&#xFF0C;j)&#x3002;&#x662F;&#x6307;&#x70B9;j&#x4F5C;&#x4E3A;&#x70B9;i&#x7684;&#x805A;&#x7C7B;&#x4E2D;&#x5FC3;&#x7684;&#x76F8;&#x4F3C;&#x5EA6;&#x3002;&#x4E00;&#x822C;&#x4F7F;&#x7528;&#x6B27;&#x6C0F;&#x8DDD;&#x79BB;&#x6765;&#x8BA1;&#x7B97;&#xFF0C;&#x5982;&#xFF0D;|| ||&#x3002;&#x6587;&#x4E2D;&#xFF0C;&#x6240;&#x6709;&#x70B9;&#x4E0E;&#x70B9;&#x7684;&#x76F8;&#x4F3C;&#x5EA6;&#x503C;&#x5168;&#x90E8;&#x53D6;&#x4E3A;&#x8D1F;&#x503C;&#x3002;&#x56E0;&#x4E3A;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#xFF0C;&#x76F8;&#x4F3C;&#x5EA6;&#x503C;&#x8D8A;&#x5927;&#x8BF4;&#x660E;&#x70B9;&#x4E0E;&#x70B9;&#x7684;&#x8DDD;&#x79BB;&#x8D8A;&#x8FD1;&#xFF0C;&#x4FBF;&#x4E8E;&#x540E;&#x9762;&#x7684;&#x6BD4;&#x8F83;&#x8BA1;&#x7B97;&#x3002;preference&#xFF1A;&#x6570;&#x636E;&#x70B9;i&#x7684;&#x53C2;&#x8003;&#x5EA6;&#x79F0;&#x4E3A;P(i)&#x6216;S(i,i)&#x3002;&#x662F;&#x6307;&#x70B9;i&#x4F5C;&#x4E3A;&#x805A;&#x7C7B;&#x4E2D;&#x5FC3;&#x7684;&#x53C2;&#x8003;&#x5EA6;&#x3002;&#x4E00;&#x822C;&#x53D6;S&#x76F8;&#x4F3C;&#x5EA6;&#x503C;&#x7684;&#x4E2D;&#x503C;&#x3002;Responsibility:R(i,k)&#x7528;&#x6765;&#x63CF;&#x8FF0;&#x70B9;k&#x9002;&#x5408;&#x4F5C;&#x4E3A;&#x6570;&#x636E;&#x70B9;i&#x7684;&#x805A;&#x7C7B;&#x4E2D;&#x5FC3;&#x7684;&#x7A0B;&#x5EA6;&#x3002;Availability:A(i,k)&#x7528;&#x6765;&#x63CF;&#x8FF0;&#x70B9;i&#x9009;&#x62E9;&#x70B9;k&#x4F5C;&#x4E3A;&#x5176;&#x805A;&#x7C7B;&#x4E2D;&#x5FC3;&#x7684;&#x9002;&#x5408;&#x7A0B;&#x5EA6;&#x3002; Script output:Estimated number of clusters: 3Homogeneity: 0.872Completeness: 0.872V-measure: 0.872Adjusted Rand Index: 0.912Adjusted Mutual Information: 0.871Silhouette Coefficient: 0.753 Python source code: plot_affinity_propagation.pyprint(doc) from sklearn.cluster import AffinityPropagationfrom sklearn import metricsfrom sklearn.datasets.samples_generator import make_blobs ############################################################################## Generate sample datacenters = [[1, 1], [-1, -1], [1, -1]]X, labels_true = make_blobs(n_samples=300, centers=centers, cluster_std=0.5, random_state=0) ############################################################################## Compute Affinity Propagationaf = AffinityPropagation(preference=-50).fit(X)cluster_centers_indices = af.cluster_centersindiceslabels = af.labels_ nclusters = len(cluster_centers_indices) print(&#x2018;Estimated number of clusters: %d&#x2019; % nclusters)print(&#x201C;Homogeneity: %0.3f&#x201D; % metrics.homogeneity_score(labels_true, labels))print(&#x201C;Completeness: %0.3f&#x201D; % metrics.completeness_score(labels_true, labels))print(&#x201C;V-measure: %0.3f&#x201D; % metrics.v_measure_score(labels_true, labels))print(&#x201C;Adjusted Rand Index: %0.3f&#x201D; % metrics.adjusted_rand_score(labels_true, labels))print(&#x201C;Adjusted Mutual Information: %0.3f&#x201D; % metrics.adjusted_mutual_info_score(labels_true, labels))print(&#x201C;Silhouette Coefficient: %0.3f&#x201D; % metrics.silhouette_score(X, labels, metric=&#x2019;sqeuclidean&#x2019;)) ############################################################################## Plot resultimport matplotlib.pyplot as pltfrom itertools import cycle plt.close(&#x2018;all&#x2019;)plt.figure(1)plt.clf() colors = cycle(&#x2018;bgrcmykbgrcmykbgrcmykbgrcmyk&#x2019;)for k, col in zip(range(nclusters), colors): class_members = labels == k cluster_center = X[cluster_centers_indices[k]] plt.plot(X[class_members, 0], X[class_members, 1], col + &#x2018;.&#x2019;) plt.plot(cluster_center[0], cluster_center[1], &#x2018;o&#x2019;, markerfacecolor=col, markeredgecolor=&#x2019;k&#x2019;, markersize=14) for x in X[class_members]: plt.plot([cluster_center[0], x[0]], [cluster_center[1], x[1]], col) plt.title(&#x2018;Estimated number of clusters: %d&#x2019; % nclusters)plt.show() &#x53C2;&#x8003;&#x94FE;&#x63A5;http://scikit-learn.org/stable/modules/clustering.htmlhttp://blog.csdn.net/u010695420/article/details/42239465 &#x805A;&#x7C7B;&#x7B97;&#x6CD5;Affinity Propagation(AP) Affinity Propagation&#x805A;&#x7C7B;&#x7B97;&#x6CD5;&#x7B80;&#x79F0;AP&#xFF0C;&#x662F;&#x4E00;&#x4E2A;&#x5728;07&#x5E74;&#x53D1;&#x8868;&#x5728;Science&#x4E0A;&#x9762;&#x6BD4;&#x8F83;&#x65B0;&#x7684;&#x7B97;&#x6CD5;&#x3002; AP&#x7B97;&#x6CD5;&#x7684;&#x57FA;&#x672C;&#x601D;&#x60F3;&#x662F;&#x5C06;&#x5168;&#x90E8;&#x6837;&#x672C;&#x770B;&#x4F5C;&#x7F51;&#x7EDC;&#x7684;&#x8282;&#x70B9;&#xFF0C;&#x7136;&#x540E;&#x901A;&#x8FC7;&#x7F51;&#x7EDC;&#x4E2D;&#x5404;&#x6761;&#x8FB9;&#x7684;&#x6D88;&#x606F;&#x4F20;&#x9012;&#x8BA1;&#x7B97;&#x51FA;&#x5404;&#x6837;&#x672C;&#x7684;&#x805A;&#x7C7B;&#x4E2D;&#x5FC3;&#x3002;&#x805A;&#x7C7B;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x5171;&#x6709;&#x4E24;&#x79CD;&#x6D88;&#x606F;&#x5728;&#x5404;&#x8282;&#x70B9;&#x95F4;&#x4F20;&#x9012;&#xFF0C;&#x5206;&#x522B;&#x662F;&#x5438;&#x5F15;&#x5EA6;( responsibility)&#x548C;&#x5F52;&#x5C5E;&#x5EA6;(availability) &#x3002;AP&#x7B97;&#x6CD5;&#x901A;&#x8FC7;&#x8FED;&#x4EE3;&#x8FC7;&#x7A0B;&#x4E0D;&#x65AD;&#x66F4;&#x65B0;&#x6BCF;&#x4E00;&#x4E2A;&#x70B9;&#x7684;&#x5438;&#x5F15;&#x5EA6;&#x548C;&#x5F52;&#x5C5E;&#x5EA6;&#x503C;&#xFF0C;&#x76F4;&#x5230;&#x4EA7;&#x751F;m&#x4E2A;&#x9AD8;&#x8D28;&#x91CF;&#x7684;Exemplar&#xFF08;&#x7C7B;&#x4F3C;&#x4E8E;&#x8D28;&#x5FC3;&#xFF09;&#xFF0C;&#x540C;&#x65F6;&#x5C06;&#x5176;&#x4F59;&#x7684;&#x6570;&#x636E;&#x70B9;&#x5206;&#x914D;&#x5230;&#x76F8;&#x5E94;&#x7684;&#x805A;&#x7C7B;&#x4E2D;&#x3002; &#x5728;AP&#x7B97;&#x6CD5;&#x4E2D;&#x6709;&#x4E00;&#x4E9B;&#x7279;&#x6B8A;&#x540D;&#x8BCD;&#xFF1A; Exemplar&#xFF1A;&#x6307;&#x7684;&#x662F;&#x805A;&#x7C7B;&#x4E2D;&#x5FC3;&#xFF0C;K-Means&#x4E2D;&#x7684;&#x8D28;&#x5FC3;&#x3002;Similarity&#xFF1A;&#x6570;&#x636E;&#x70B9;i&#x548C;&#x70B9;j&#x7684;&#x76F8;&#x4F3C;&#x5EA6;&#x8BB0;&#x4E3A;s(i, j)&#xFF0C;&#x662F;&#x6307;&#x70B9;j&#x4F5C;&#x4E3A;&#x70B9;i&#x7684;&#x805A;&#x7C7B;&#x4E2D;&#x5FC3;&#x7684;&#x76F8;&#x4F3C;&#x5EA6;&#x3002;&#x4E00;&#x822C;&#x4F7F;&#x7528;&#x6B27;&#x6C0F;&#x8DDD;&#x79BB;&#x6765;&#x8BA1;&#x7B97;&#xFF0C;&#x4E00;&#x822C;&#x70B9;&#x4E0E;&#x70B9;&#x7684;&#x76F8;&#x4F3C;&#x5EA6;&#x503C;&#x5168;&#x90E8;&#x53D6;&#x4E3A;&#x8D1F;&#x503C;&#xFF1B;&#x56E0;&#x6B64;&#xFF0C;&#x76F8;&#x4F3C;&#x5EA6;&#x503C;&#x8D8A;&#x5927;&#x8BF4;&#x660E;&#x70B9;&#x4E0E;&#x70B9;&#x7684;&#x8DDD;&#x79BB;&#x8D8A;&#x8FD1;&#xFF0C;&#x4FBF;&#x4E8E;&#x540E;&#x9762;&#x7684;&#x6BD4;&#x8F83;&#x8BA1;&#x7B97;&#x3002;Preference&#xFF1A;&#x6570;&#x636E;&#x70B9;i&#x7684;&#x53C2;&#x8003;&#x5EA6;&#x79F0;&#x4E3A;p(i)&#x6216;s(i,i)&#xFF0C;&#x662F;&#x6307;&#x70B9;i&#x4F5C;&#x4E3A;&#x805A;&#x7C7B;&#x4E2D;&#x5FC3;&#x7684;&#x53C2;&#x8003;&#x5EA6;&#x3002;&#x4E00;&#x822C;&#x53D6;s&#x76F8;&#x4F3C;&#x5EA6;&#x503C;&#x7684;&#x4E2D;&#x503C;&#x3002;Responsibility&#xFF1A;r(i,k)&#x7528;&#x6765;&#x63CF;&#x8FF0;&#x70B9;k&#x9002;&#x5408;&#x4F5C;&#x4E3A;&#x6570;&#x636E;&#x70B9;i&#x7684;&#x805A;&#x7C7B;&#x4E2D;&#x5FC3;&#x7684;&#x7A0B;&#x5EA6;&#x3002;Availability&#xFF1A;a(i,k)&#x7528;&#x6765;&#x63CF;&#x8FF0;&#x70B9;i&#x9009;&#x62E9;&#x70B9;k&#x4F5C;&#x4E3A;&#x5176;&#x805A;&#x7C7B;&#x4E2D;&#x5FC3;&#x7684;&#x9002;&#x5408;&#x7A0B;&#x5EA6;&#x3002;Damping factor(&#x963B;&#x5C3C;&#x7CFB;&#x6570;)&#xFF1A;&#x4E3B;&#x8981;&#x662F;&#x8D77;&#x6536;&#x655B;&#x4F5C;&#x7528;&#x7684;&#x3002;&#x5728;&#x5B9E;&#x9645;&#x8BA1;&#x7B97;&#x5E94;&#x7528;&#x4E2D;&#xFF0C;&#x6700;&#x91CD;&#x8981;&#x7684;&#x4E24;&#x4E2A;&#x53C2;&#x6570;&#xFF08;&#x4E5F;&#x662F;&#x9700;&#x8981;&#x624B;&#x52A8;&#x6307;&#x5B9A;&#xFF09;&#x662F;Preference&#x548C;Damping factor&#x3002;&#x524D;&#x8005;&#x5B9A;&#x4E86;&#x805A;&#x7C7B;&#x6570;&#x91CF;&#x7684;&#x591A;&#x5C11;&#xFF0C;&#x503C;&#x8D8A;&#x5927;&#x805A;&#x7C7B;&#x6570;&#x91CF;&#x8D8A;&#x591A;&#xFF1B;&#x540E;&#x8005;&#x63A7;&#x5236;&#x7B97;&#x6CD5;&#x6536;&#x655B;&#x6548;&#x679C;&#x3002; AP&#x805A;&#x7C7B;&#x7B97;&#x6CD5;&#x4E0E;&#x7ECF;&#x5178;&#x7684;K-Means&#x805A;&#x7C7B;&#x7B97;&#x6CD5;&#x76F8;&#x6BD4;&#xFF0C;&#x5177;&#x6709;&#x5F88;&#x591A;&#x72EC;&#x7279;&#x4E4B;&#x5904;&#xFF1A; &#x65E0;&#x9700;&#x6307;&#x5B9A;&#x805A;&#x7C7B;&#x201C;&#x6570;&#x91CF;&#x201D;&#x53C2;&#x6570;&#x3002;AP&#x805A;&#x7C7B;&#x4E0D;&#x9700;&#x8981;&#x6307;&#x5B9A;K&#xFF08;&#x7ECF;&#x5178;&#x7684;K-Means&#xFF09;&#x6216;&#x8005;&#x662F;&#x5176;&#x4ED6;&#x63CF;&#x8FF0;&#x805A;&#x7C7B;&#x4E2A;&#x6570;&#xFF08;SOM&#x4E2D;&#x7684;&#x7F51;&#x7EDC;&#x7ED3;&#x6784;&#x548C;&#x89C4;&#x6A21;&#xFF09;&#x7684;&#x53C2;&#x6570;&#xFF0C;&#x8FD9;&#x4F7F;&#x5F97;&#x5148;&#x9A8C;&#x7ECF;&#x9A8C;&#x6210;&#x4E3A;&#x5E94;&#x7528;&#x7684;&#x975E;&#x5FC5;&#x9700;&#x6761;&#x4EF6;&#xFF0C;&#x4EBA;&#x7FA4;&#x5E94;&#x7528;&#x8303;&#x56F4;&#x589E;&#x52A0;&#x3002;&#x660E;&#x786E;&#x7684;&#x8D28;&#x5FC3;&#xFF08;&#x805A;&#x7C7B;&#x4E2D;&#x5FC3;&#x70B9;&#xFF09;&#x3002;&#x6837;&#x672C;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x6570;&#x636E;&#x70B9;&#x90FD;&#x53EF;&#x80FD;&#x6210;&#x4E3A;AP&#x7B97;&#x6CD5;&#x4E2D;&#x7684;&#x8D28;&#x5FC3;&#xFF0C;&#x53EB;&#x505A;Examplar&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x7531;&#x591A;&#x4E2A;&#x6570;&#x636E;&#x70B9;&#x6C42;&#x5E73;&#x5747;&#x800C;&#x5F97;&#x5230;&#x7684;&#x805A;&#x7C7B;&#x4E2D;&#x5FC3;&#xFF08;&#x5982;K-Means&#xFF09;&#x3002;&#x5BF9;&#x8DDD;&#x79BB;&#x77E9;&#x9635;&#x7684;&#x5BF9;&#x79F0;&#x6027;&#x6CA1;&#x8981;&#x6C42;&#x3002;AP&#x901A;&#x8FC7;&#x8F93;&#x5165;&#x76F8;&#x4F3C;&#x5EA6;&#x77E9;&#x9635;&#x6765;&#x542F;&#x52A8;&#x7B97;&#x6CD5;&#xFF0C;&#x56E0;&#x6B64;&#x5141;&#x8BB8;&#x6570;&#x636E;&#x5448;&#x975E;&#x5BF9;&#x79F0;&#xFF0C;&#x6570;&#x636E;&#x9002;&#x7528;&#x8303;&#x56F4;&#x975E;&#x5E38;&#x5927;&#x3002;&#x521D;&#x59CB;&#x503C;&#x4E0D;&#x654F;&#x611F;&#x3002;&#x591A;&#x6B21;&#x6267;&#x884C;AP&#x805A;&#x7C7B;&#x7B97;&#x6CD5;&#xFF0C;&#x5F97;&#x5230;&#x7684;&#x7ED3;&#x679C;&#x662F;&#x5B8C;&#x5168;&#x4E00;&#x6837;&#x7684;&#xFF0C;&#x5373;&#x4E0D;&#x9700;&#x8981;&#x8FDB;&#x884C;&#x968F;&#x673A;&#x9009;&#x53D6;&#x521D;&#x503C;&#x6B65;&#x9AA4;&#xFF08;&#x8FD8;&#x662F;&#x5BF9;&#x6BD4;K-Means&#x7684;&#x968F;&#x673A;&#x521D;&#x59CB;&#x503C;&#xFF09;&#x3002;&#x7B97;&#x6CD5;&#x590D;&#x6742;&#x5EA6;&#x8F83;&#x9AD8;&#xFF0C;&#x4E3A;O(NNlogN)&#xFF0C;&#x800C;K-Means&#x53EA;&#x662F;O(N*K)&#x7684;&#x590D;&#x6742;&#x5EA6;&#x3002;&#x56E0;&#x6B64;&#x5F53;N&#x6BD4;&#x8F83;&#x5927;&#x65F6;(N&gt;3000)&#xFF0C;AP&#x805A;&#x7C7B;&#x7B97;&#x6CD5;&#x5F80;&#x5F80;&#x9700;&#x8981;&#x7B97;&#x5F88;&#x4E45;&#x3002;&#x82E5;&#x4EE5;&#x8BEF;&#x5DEE;&#x5E73;&#x65B9;&#x548C;&#x6765;&#x8861;&#x91CF;&#x7B97;&#x6CD5;&#x95F4;&#x7684;&#x4F18;&#x52A3;&#xFF0C;AP&#x805A;&#x7C7B;&#x6BD4;&#x5176;&#x4ED6;&#x65B9;&#x6CD5;&#x7684;&#x8BEF;&#x5DEE;&#x5E73;&#x65B9;&#x548C;&#x90FD;&#x8981;&#x4F4E;&#x3002;&#xFF08;&#x65E0;&#x8BBA;k-center clustering&#x91CD;&#x590D;&#x591A;&#x5C11;&#x6B21;&#xFF0C;&#x90FD;&#x8FBE;&#x4E0D;&#x5230;AP&#x90A3;&#x4E48;&#x4F4E;&#x7684;&#x8BEF;&#x5DEE;&#x5E73;&#x65B9;&#x548C;&#xFF09;AP&#x7B97;&#x6CD5;&#x76F8;&#x5BF9;K-Means&#x9C81;&#x68D2;&#x6027;&#x5F3A;&#x4E14;&#x51C6;&#x786E;&#x5EA6;&#x8F83;&#x9AD8;&#xFF0C;&#x4F46;&#x6CA1;&#x6709;&#x4EFB;&#x4F55;&#x4E00;&#x4E2A;&#x7B97;&#x6CD5;&#x662F;&#x5B8C;&#x7F8E;&#x7684;&#xFF0C;AP&#x805A;&#x7C7B;&#x7B97;&#x6CD5;&#x4E5F;&#x4E0D;&#x4F8B;&#x5916;&#xFF1A; AP&#x805A;&#x7C7B;&#x5E94;&#x7528;&#x4E2D;&#x9700;&#x8981;&#x624B;&#x52A8;&#x6307;&#x5B9A;Preference&#x548C;Damping factor&#xFF0C;&#x8FD9;&#x5176;&#x5B9E;&#x662F;&#x539F;&#x6709;&#x7684;&#x805A;&#x7C7B;&#x201C;&#x6570;&#x91CF;&#x201D;&#x63A7;&#x5236;&#x7684;&#x53D8;&#x4F53;&#x3002;&#x7B97;&#x6CD5;&#x8F83;&#x6162;&#x3002;&#x7531;&#x4E8E;AP&#x7B97;&#x6CD5;&#x590D;&#x6742;&#x5EA6;&#x8F83;&#x9AD8;&#xFF0C;&#x8FD0;&#x884C;&#x65F6;&#x95F4;&#x76F8;&#x5BF9;K-Means&#x957F;&#xFF0C;&#x8FD9;&#x4F1A;&#x4F7F;&#x5F97;&#x5C24;&#x5176;&#x5728;&#x6D77;&#x91CF;&#x6570;&#x636E;&#x4E0B;&#x8FD0;&#x884C;&#x65F6;&#x8017;&#x8D39;&#x7684;&#x65F6;&#x95F4;&#x5F88;&#x591A;&#x3002;&#x4EE5;&#x4E0B;&#x4F7F;&#x7528;Python&#x7684;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x5E93;SKlearn&#x5E94;&#x7528;AP&#xFF08;AffinityPropagation&#xFF09;&#x7B97;&#x6CD5;&#x8FDB;&#x884C;&#x6848;&#x4F8B;&#x6F14;&#x793A;&#x3002; &#x6848;&#x4F8B;&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x4F1A;&#x5148;&#x5BF9;AP&#x7B97;&#x6CD5;&#x548C;K-Means&#x805A;&#x7C7B;&#x7B97;&#x6CD5;&#x7684;&#x8FD0;&#x884C;&#x65F6;&#x95F4;&#x505A;&#x4E0B;&#x5BF9;&#x6BD4;&#xFF0C;&#x5206;&#x522B;&#x9009;&#x53D6;100,500,1000&#x6837;&#x672C;&#x91CF;&#x4E0B;&#x8FDB;&#x884C;&#x4E24;&#x79CD;&#x7B97;&#x6CD5;&#x7684;&#x805A;&#x7C7B;&#x65F6;&#x95F4;&#x5BF9;&#x6BD4;&#xFF1B;&#x7136;&#x540E;&#xFF0C;&#x4F7F;&#x7528;AP&#x7B97;&#x6CD5;&#x505A;&#x805A;&#x7C7B;&#x5206;&#x6790;&#x3002; AP&#x548C;K-Means&#x8FD0;&#x884C;&#x65F6;&#x95F4;&#x5BF9;&#x6BD4; #coding:utf-8 import numpy as npimport matplotlib.pyplot as pltimport timefrom sklearn.cluster import KMeans,AffinityPropagationfrom sklearn.datasets.samples_generator import make_blobs &#x751F;&#x6210;&#x6D4B;&#x8BD5;&#x6570;&#x636E;np.random.seed(0)centers = [[1, 1], [-1, -1], [1, -1]]kmeans_time = []ap_time = []for n in [100,500,1000]: X, labels_true = make_blobs(n_samples=n, centers=centers, cluster_std=0.7) # &#x8BA1;&#x7B97;K-Means&#x7B97;&#x6CD5;&#x65F6;&#x95F4; k_means = KMeans(init=&apos;k-means++&apos;, n_clusters=3, n_init=10) t0 = time.time() k_means.fit(X) kmeans_time.append([n,(time.time() - t0)]) # &#x8BA1;&#x7B97;AP&#x7B97;&#x6CD5;&#x65F6;&#x95F4; ap = AffinityPropagation() t0 = time.time() ap.fit(X) ap_time.append([n,(time.time() - t0)]) print (&#x2018;K-Means time&#x2019;,kmeans_time[:10])print (&#x2018;AP time&#x2019;,ap_time[:10]) &#x56FE;&#x5F62;&#x5C55;&#x793A;km_mat = np.array(kmeans_time)ap_mat = np.array(ap_time)plt.figure()plt.bar(np.arange(3), km_mat[:,1], width = 0.3, color = &#x2018;b&#x2019;, label = &#x2018;K-Means&#x2019;, log = &#x2018;True&#x2019;)plt.bar(np.arange(3)+0.3, ap_mat[:,1], width = 0.3, color = &#x2018;g&#x2019;, label = &#x2018;AffinityPropagation&#x2019;, log = &#x2018;True&#x2019;)plt.xlabel(&#x2018;Sample Number&#x2019;)plt.ylabel(&#x2018;Computing time&#x2019;)plt.title(&#x2018;K-Means and AffinityPropagation computing time &#x2018;)plt.legend(loc=&#x2019;upper center&#x2019;)plt.show() &#x8FD0;&#x7B97;&#x7ED3;&#x679C;&#x5982;&#x4E0B;&#xFF1A;bars11 (&#x2018;K-Means time&#x2019;, [[100, 0.029999971389770508], [500, 0.029999971389770508], [1000, 0.0410001277923584]])(&#x2018;AP time&#x2019;, [[100, 0.03000020980834961], [500, 1.8999998569488525], [1000, 16.31499981880188]]) &#x56FE;&#x4E2D;&#x4E3A;&#x4E86;&#x66F4;&#x597D;&#x7684;&#x5C55;&#x793A;&#x6570;&#x636E;&#x5BF9;&#x6BD4;&#xFF0C;&#x5DF2;&#x7ECF;&#x5BF9;&#x65F6;&#x95F4;&#x8FDB;&#x884C;log&#x5904;&#x7406;&#xFF0C;&#x4F46;&#x53EF;&#x4EE5;&#x4ECE;&#x8F93;&#x51FA;&#x7ED3;&#x679C;&#x76F4;&#x63A5;&#x8BFB;&#x53D6;&#x771F;&#x5B9E;&#x6570;&#x636E;&#x8FD0;&#x7B97;&#x65F6;&#x95F4;&#x3002;&#x7531;&#x7ED3;&#x679C;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#xFF1A;&#x5F53;&#x6837;&#x672C;&#x91CF;&#x4E3A;100&#x65F6;&#xFF0C;AP&#x7684;&#x901F;&#x5EA6;&#x8981;&#x5927;&#x4E8E;K_Means&#xFF1B;&#x5F53;&#x6570;&#x636E;&#x589E;&#x52A0;&#x5230;500&#x751A;&#x81F3;1000&#x65F6;&#xFF0C;AP&#x7B97;&#x6CD5;&#x7684;&#x8FD0;&#x7B97;&#x65F6;&#x95F4;&#x8981;&#x5927;&#x5927;&#x8D85;&#x8FC7;K-Means&#x7B97;&#x6CD5;&#xFF1B;&#x751A;&#x81F3;&#x5F53;&#x6211;&#x8BD5;&#x56FE;&#x8FD0;&#x7B97;&#x66F4;&#x5927;&#x7684;&#x6570;&#x636E;&#x91CF;&#xFF08;100000&#xFF09;&#x65F6;&#xFF0C;&#x76F4;&#x63A5;&#x5185;&#x5B58;&#x9519;&#x8BEF;&#x800C;&#x88AB;&#x8FEB;&#x4E2D;&#x6B62;&#x3002; AP&#x805A;&#x7C7B;&#x793A;&#x4F8B; #coding:utf-8 from sklearn.cluster import AffinityPropagationfrom sklearn import metricsfrom sklearn.datasets.samples_generator import make_blobsimport numpy as np &#x751F;&#x6210;&#x6D4B;&#x8BD5;&#x6570;&#x636E;centers = [[1, 1], [-1, -1], [1, -1]]X, labels_true = make_blobs(n_samples=300, centers=centers, cluster_std=0.5, random_state=0) AP&#x6A21;&#x578B;&#x62DF;&#x5408;af = AffinityPropagation(preference=-50).fit(X)cluster_centers_indices = af.cluster_centersindiceslabels = af.labels_new_X = np.column_stack((X, labels)) nclusters = len(cluster_centers_indices) print(&#x2018;Estimated number of clusters: %d&#x2019; % nclusters)print(&#x201C;Homogeneity: %0.3f&#x201D; % metrics.homogeneity_score(labels_true, labels))print(&#x201C;Completeness: %0.3f&#x201D; % metrics.completeness_score(labels_true, labels))print(&#x201C;V-measure: %0.3f&#x201D; % metrics.v_measure_score(labels_true, labels))print(&#x201C;Adjusted Rand Index: %0.3f&#x201D; % metrics.adjusted_rand_score(labels_true, labels))print(&#x201C;Adjusted Mutual Information: %0.3f&#x201D; % metrics.adjusted_mutual_info_score(labels_true, labels))print(&#x201C;Silhouette Coefficient: %0.3f&#x201D; % metrics.silhouette_score(X, labels, metric=&#x2019;sqeuclidean&#x2019;))print(&#x2018;Top 10 sapmles:&#x2019;,new_X[:10]) &#x56FE;&#x5F62;&#x5C55;&#x793A;import matplotlib.pyplot as pltfrom itertools import cycle plt.close(&#x2018;all&#x2019;)plt.figure(1)plt.clf() colors = cycle(&#x2018;bgrcmykbgrcmykbgrcmykbgrcmyk&#x2019;)for k, col in zip(range(nclusters), colors): class_members = labels == k cluster_center = X[cluster_centers_indices[k]] plt.plot(X[class_members, 0], X[class_members, 1], col + &#x2018;.&#x2019;) plt.plot(cluster_center[0], cluster_center[1], &#x2018;o&#x2019;, markerfacecolor=col, markeredgecolor=&#x2019;k&#x2019;, markersize=14) for x in X[class_members]: plt.plot([cluster_center[0], x[0]], [cluster_center[1], x[1]], col) plt.title(&#x2018;Estimated number of clusters: %d&#x2019; % nclusters)plt.show() &#x8FD0;&#x884C;&#x7ED3;&#x679C;&#xFF1A;ap_clustering1111 Estimated number of clusters: 3Homogeneity: 0.872Completeness: 0.872V-measure: 0.872Adjusted Rand Index: 0.912Adjusted Mutual Information: 0.871Silhouette Coefficient: 0.753(&#x2018;Top 10 sapmles:&#x2019;, array([[ 1.47504421, 0.9243214 , 0. ], [-0.02204385, -0.80495334, 1. ], [-1.17671587, -1.80823709, 2. ], [ 0.77223375, 1.00873958, 0. ], [ 1.23283122, 0.23187816, 0. ], [-0.92174673, -0.88390948, 2. ], [ 1.65956844, -1.44120941, 1. ], [ 0.33389417, -1.98431234, 1. ], [-1.27143074, -0.79197498, 2. ], [ 1.33614738, 1.20373092, 0. ]])) AffinityPropagation&#x53EF;&#x914D;&#x7F6E;&#x7684;&#x53C2;&#x6570;&#x5305;&#x62EC;&#xFF1A;&#xFF08;&#x91CD;&#x70B9;&#x662F;damping&#x548C;preference&#xFF09; class sklearn.cluster.AffinityPropagation(damping=0.5, max_iter=200, convergence_iter=15, copy=True, preference=None, affinity=&#x2019;euclidean&#x2019;, verbose=False) AP&#x7B97;&#x6CD5;&#x7684;&#x5E94;&#x7528;&#x573A;&#x666F;&#xFF1A; &#x56FE;&#x50CF;&#x3001;&#x6587;&#x672C;&#x3001;&#x751F;&#x7269;&#x4FE1;&#x606F;&#x5B66;&#x3001;&#x4EBA;&#x8138;&#x8BC6;&#x522B;&#x3001;&#x57FA;&#x56E0;&#x53D1;&#x73B0;&#x3001;&#x641C;&#x7D22;&#x6700;&#x4F18;&#x822A;&#x7EBF;&#x3001; &#x7801;&#x4E66;&#x8BBE;&#x8BA1;&#x4EE5;&#x53CA;&#x5B9E;&#x7269;&#x56FE;&#x50CF;&#x8BC6;&#x522B;&#x7B49;&#x9886;&#x57DF;&#x3002; &#x5C3E;&#x5DF4; &#x7EFC;&#x5408;&#x6765;&#x770B;&#xFF0C;&#x7531;&#x4E8E;AP&#x7B97;&#x6CD5;&#x4E0D;&#x9002;&#x7528;&#x5747;&#x503C;&#x505A;&#x8D28;&#x5FC3;&#x8BA1;&#x7B97;&#x89C4;&#x5219;&#xFF0C;&#x56E0;&#x6B64;&#x5BF9;&#x4E8E;&#x79BB;&#x7FA4;&#x70B9;&#x548C;&#x5F02;&#x5E38;&#x503C;&#x4E0D;&#x654F;&#x611F;&#xFF1B;&#x540C;&#x65F6;&#x5176;&#x521D;&#x59CB;&#x503C;&#x4E0D;&#x654F;&#x611F;&#x7684;&#x7279;&#x6027;&#x4E5F;&#x80FD;&#x4FDD;&#x6301;&#x6A21;&#x578B;&#x7684;&#x8F83;&#x597D;&#x9C81;&#x68D2;&#x6027;&#x3002;&#x8FD9;&#x4E24;&#x4E2A;&#x7A81;&#x51FA;&#x7279;&#x5F81;&#x4F7F;&#x5F97;&#x5B83;&#x53EF;&#x4EE5;&#x4F5C;&#x4E3A;K-Means&#x7B97;&#x6CD5;&#x7684;&#x4E00;&#x4E2A;&#x6709;&#x6548;&#x8865;&#x5145;&#xFF0C;&#x4F46;&#x5728;&#x5927;&#x6570;&#x636E;&#x91CF;&#x4E0B;&#x7684;&#x8017;&#x65F6;&#x8FC7;&#x957F;&#xFF0C;&#x8FD9;&#x5BFC;&#x81F4;&#x5B83;&#x7684;&#x9002;&#x7528;&#x8303;&#x56F4;&#x53EA;&#x80FD;&#x662F;&#x5C11;&#x91CF;&#x6570;&#x636E;&#xFF1B;&#x867D;&#x7136;&#x901A;&#x8FC7;&#x8C03;&#x6574;damping&#xFF08;&#x6536;&#x655B;&#x89C4;&#x5219;&#xFF09;&#x53EF;&#x4EE5;&#x5728;&#x4E00;&#x5B9A;&#x7A0B;&#x5EA6;&#x4E0A;&#x63D0;&#x5347;&#x8FD0;&#x884C;&#x901F;&#x5EA6;&#xFF08;damping&#x503C;&#x8C03;&#x5C0F;&#xFF09;&#xFF0C;&#x4F46;&#x7531;&#x4E8E;&#x7B97;&#x6CD5;&#x672C;&#x8EAB;&#x7684;&#x5C40;&#x9650;&#x6027;&#x51B3;&#x5B9A;&#x4E86;&#x8FD9;&#x4E5F;&#x53EA;&#x662F;&#x676F;&#x6C34;&#x8F66;&#x85AA;&#x3002;&#x805A;&#x7C7B;&#x7B97;&#x6CD5;Affinity Propagation(AP)","tags":""},{"title":"Gensim and LDA--Training and Prediction","url":"/2016/05/18/Gensim-and-LDA-Training-and-Prediction/","text":"&#x7528; Gensim &#x5B9E;&#x73B0; LDA&#xFF0C;&#x76F8;&#x6BD4; JGibbLDA &#x7684;&#x4F7F;&#x7528; Gensim &#x7565;&#x4E3A;&#x9EBB;&#x70E6;&#xFF0C;&#x7136;&#x800C;&#x611F;&#x89C9;&#x66F4;&#x6E05;&#x6670;&#x6613;&#x61C2;&#xFF0C;&#x4E5F;&#x5C31;&#x66F4;&#x7075;&#x6D3B;&#x3002; # install the related python packages &gt;&gt;&gt; pip install numpy &gt;&gt;&gt; pip install scipy &gt;&gt;&gt; pip install gensim &gt;&gt;&gt; pip install jieba from gensim import corpora, models, similarities import logging import jieba # configuration logging.basicConfig(format=&apos;%(asctime)s : %(levelname)s : %(message)s&apos;, level=logging.INFO) # load data from file f = open(&apos;newfile.txt&apos;, &apos;r&apos;) documents = f.readlines() &#xFF03; tokenize texts = [[word for word in jieba.cut(document, cut_all = False)] for document in documents] # load id-&gt;word mapping (the dictionary) dictionary = corpora.Dictionary(texts) # word must appear &gt;10 times, and no more than 40% documents dictionary.filter_extremes(no_below=40, no_above=0.1) # save dictionary dictionary.save(&apos;dict_v1.dict&apos;) # load corpus corpus = [dictionary.doc2bow(text) for text in texts] # initialize a model tfidf = models.TfidfModel(corpus) # use the model to transform vectors, apply a transformation to a whole corpus corpus_tfidf = tfidf[corpus] # extract 100 LDA topics, using 1 pass and updating once every 1 chunk (10,000 documents), using 500 iterations lda = models.LdaModel(corpus_tfidf, id2word=dictionary, num_topics=100, iterations=500) # save model to files lda.save(&apos;mylda_v1.pkl&apos;) # print topics composition, and their scores, for the first document. You will see that only few topics are represented; the others have a nil score. for index, score in sorted(lda[corpus_tfidf[0]], key=lambda tup: -1*tup[1]): print &quot;Score: {}\\t Topic: {}&quot;.format(score, lda.print_topic(index, 10)) # print the most contributing words for 100 randomly selected topics lda.print_topics(100) # load model and dictionary model = models.LdaModel.load(&apos;mylda_v1.pkl&apos;) dictionary = corpora.Dictionary.load(&apos;dict_v1.dict&apos;) # predict unseen data query = &quot;&#x672A;&#x6536;&#x5230;&#x5956;&#x52B1;&quot; query_bow = dictionary.doc2bow(jieba.cut(query, cut_all = False)) for index, score in sorted(model[query_bow], key=lambda tup: -1*tup[1]): print &quot;Score: {}\\t Topic: {}&quot;.format(score, model.print_topic(index, 20)) # if you want to predict many lines of data in a file, do the followings f = open(&apos;newfile.txt&apos;, &apos;r&apos;) documents = f.readlines() texts = [[word for word in jieba.cut(document, cut_all = False)] for document in documents] corpus = [dictionary.doc2bow(text) for text in texts] # only print the topic with the highest score for c in corpus: flag = True for index, score in sorted(model[c], key=lambda tup: -1*tup[1]): if flag: print &quot;Score: {}\\t Topic: {}&quot;.format(score, model.print_topic(index, 20)) Tips:If you occur encoding problems, you can try the following code add it at the beginning of your python file # -*- coding: utf-8 -*- # also, do the followings import sys reload(sys) sys.setdefaultencoding(&apos;utf-8&apos;) # the following code may lead to encoding problem when there&apos;re Chinese characters model.show_topics(-1, 5) # use this instead model.print_topics(-1, 5) You can see step-by-step output by the following references. References: https://radimrehurek.com/gensim/tut2.html official guide (en) http://blog.csdn.net/questionfish/article/details/46725475 official guide (ch) https://radimrehurek.com/gensim/wiki.html#latent-dirichlet-allocation","tags":"lda gensim machine-learning topic-modeling cluster"},{"title":"Gensim-用Python做主题模型","url":"/2016/05/18/Gensim-用Python做主题模型/","text":"gensim &#x4ECB;&#x7ECD;gemsim&#x662F;&#x4E00;&#x4E2A;&#x514D;&#x8D39;python&#x5E93;&#xFF0C;&#x80FD;&#x591F;&#x4ECE;&#x6587;&#x6863;&#x4E2D;&#x6709;&#x6548;&#x5730;&#x81EA;&#x52A8;&#x62BD;&#x53D6;&#x8BED;&#x4E49;&#x4E3B;&#x9898;&#x3002;gensim&#x4E2D;&#x7684;&#x7B97;&#x6CD5;&#x5305;&#x62EC;&#xFF1A;LSA(Latent Semantic Analysis), LDA(Latent Dirichlet Allocation), RP (Random Projections), &#x901A;&#x8FC7;&#x5728;&#x4E00;&#x4E2A;&#x8BAD;&#x7EC3;&#x6587;&#x6863;&#x8BED;&#x6599;&#x5E93;&#x4E2D;&#xFF0C;&#x68C0;&#x67E5;&#x8BCD;&#x6C47;&#x7EDF;&#x8BA1;&#x8054;&#x5408;&#x51FA;&#x73B0;&#x6A21;&#x5F0F;, &#x53EF;&#x4EE5;&#x7528;&#x6765;&#x53D1;&#x6398;&#x6587;&#x6863;&#x8BED;&#x4E49;&#x7ED3;&#x6784;&#xFF0C;&#x8FD9;&#x4E9B;&#x7B97;&#x6CD5;&#x5C5E;&#x4E8E;&#x975E;&#x76D1;&#x7763;&#x5B66;&#x4E60;&#xFF0C;&#x53EF;&#x4EE5;&#x5904;&#x7406;&#x539F;&#x59CB;&#x7684;&#xFF0C;&#x975E;&#x7ED3;&#x6784;&#x5316;&#x7684;&#x6587;&#x672C;&#xFF08;&#x201D;plain text&#x201D;&#xFF09;&#x3002; gensim &#x7279;&#x6027; &#x5185;&#x5B58;&#x72EC;&#x7ACB;- &#x5BF9;&#x4E8E;&#x8BAD;&#x7EC3;&#x8BED;&#x6599;&#x6765;&#x8BF4;&#xFF0C;&#x6CA1;&#x5FC5;&#x8981;&#x5728;&#x4EFB;&#x4F55;&#x65F6;&#x95F4;&#x5C06;&#x6574;&#x4E2A;&#x8BED;&#x6599;&#x90FD;&#x9A7B;&#x7559;&#x5728;RAM&#x4E2D; &#x6709;&#x6548;&#x5B9E;&#x73B0;&#x4E86;&#x8BB8;&#x591A;&#x6D41;&#x884C;&#x7684;&#x5411;&#x91CF;&#x7A7A;&#x95F4;&#x7B97;&#x6CD5;&#xFF0D;&#x5305;&#x62EC;tf-idf&#xFF0C;&#x5206;&#x5E03;&#x5F0F;LSA, &#x5206;&#x5E03;&#x5F0F;LDA &#x4EE5;&#x53CA; RP&#xFF1B;&#x5E76;&#x4E14;&#x5F88;&#x5BB9;&#x6613;&#x6DFB;&#x52A0;&#x65B0;&#x7B97;&#x6CD5; &#x5BF9;&#x6D41;&#x884C;&#x7684;&#x6570;&#x636E;&#x683C;&#x5F0F;&#x8FDB;&#x884C;&#x4E86;IO&#x5C01;&#x88C5;&#x548C;&#x8F6C;&#x6362; &#x5728;&#x5176;&#x8BED;&#x4E49;&#x8868;&#x8FBE;&#x4E2D;&#xFF0C;&#x53EF;&#x4EE5;&#x76F8;&#x4F3C;&#x67E5;&#x8BE2; gensim&#x7684;&#x521B;&#x5EFA;&#x7684;&#x76EE;&#x7684;&#x662F;&#xFF0C;&#x7531;&#x4E8E;&#x7F3A;&#x4E4F;&#x7B80;&#x5355;&#x7684;&#xFF08;java&#x5F88;&#x590D;&#x6742;&#xFF09;&#x5B9E;&#x73B0;&#x4E3B;&#x9898;&#x5EFA;&#x6A21;&#x7684;&#x53EF;&#x6269;&#x5C55;&#x8F6F;&#x4EF6;&#x6846;&#x67B6;. gensim &#x8BBE;&#x8BA1;&#x539F;&#x5219; &#x7B80;&#x5355;&#x7684;&#x63A5;&#x53E3;&#xFF0C;&#x5B66;&#x4E60;&#x66F2;&#x7EBF;&#x4F4E;&#x3002;&#x5BF9;&#x4E8E;&#x539F;&#x578B;&#x5B9E;&#x73B0;&#x5F88;&#x65B9;&#x4FBF; &#x6839;&#x636E;&#x8F93;&#x5165;&#x7684;&#x8BED;&#x6599;&#x7684;size&#x6765;&#x8BF4;&#xFF0C;&#x5185;&#x5B58;&#x5404;&#x81EA;&#x72EC;&#x7ACB;&#xFF1B;&#x57FA;&#x4E8E;&#x6D41;&#x7684;&#x7B97;&#x6CD5;&#x64CD;&#x4F5C;&#xFF0C;&#x4E00;&#x6B21;&#x8BBF;&#x95EE;&#x4E00;&#x4E2A;&#x6587;&#x6863;. gensim &#x6838;&#x5FC3;&#x6982;&#x5FF5;gensim&#x7684;&#x6574;&#x4E2A;package&#x4F1A;&#x6D89;&#x53CA;&#x4E09;&#x4E2A;&#x6982;&#x5FF5;&#xFF1A;corpus, vector, model. &#x8BED;&#x5E93;(corpus)&#x6587;&#x6863;&#x96C6;&#x5408;&#xFF0C;&#x7528;&#x4E8E;&#x81EA;&#x52A8;&#x63A8;&#x51FA;&#x6587;&#x6863;&#x7ED3;&#x6784;&#xFF0C;&#x4EE5;&#x53CA;&#x5B83;&#x4EEC;&#x7684;&#x4E3B;&#x9898;&#x7B49;&#xFF0C;&#x4E5F;&#x53EF;&#x79F0;&#x4F5C;&#x8BAD;&#x7EC3;&#x8BED;&#x6599;&#x3002; &#x5411;&#x91CF;(vector) &#x5728;&#x5411;&#x91CF;&#x7A7A;&#x95F4;&#x6A21;&#x578B;(VSM)&#x4E2D;&#xFF0C;&#x6BCF;&#x4E2A;&#x6587;&#x6863;&#x88AB;&#x8868;&#x793A;&#x6210;&#x4E00;&#x4E2A;&#x7279;&#x5F81;&#x6570;&#x7EC4;&#x3002;&#x4F8B;&#x5982;&#xFF0C;&#x4E00;&#x4E2A;&#x5355;&#x4E00;&#x7279;&#x5F81;&#x53EF;&#x4EE5;&#x88AB;&#x8868;&#x793A;&#x6210;&#x4E00;&#x4E2A;&#x95EE;&#x7B54;&#x5BF9;(question-answer pair): [1].&#x5728;&#x6587;&#x6863;&#x4E2D;&#x5355;&#x8BCD;&#x201D;splonge&#x201D;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;&#xFF1F; 0&#x4E2A;[2].&#x6587;&#x6863;&#x4E2D;&#x5305;&#x542B;&#x4E86;&#x591A;&#x5C11;&#x53E5;&#x5B50;&#xFF1F; 2&#x4E2A;[3].&#x6587;&#x6863;&#x4E2D;&#x4F7F;&#x7528;&#x4E86;&#x591A;&#x5C11;&#x5B57;&#x4F53;? 5&#x79CD;&#x8FD9;&#x91CC;&#x7684;&#x95EE;&#x9898;&#x53EF;&#x4EE5;&#x8868;&#x793A;&#x6210;&#x6574;&#x578B;id (&#x6BD4;&#x5982;&#xFF1A;1,2,3&#x7B49;), &#x56E0;&#x6B64;&#xFF0C;&#x4E0A;&#x9762;&#x7684;&#x6587;&#x6863;&#x53EF;&#x4EE5;&#x8868;&#x793A;&#x6210;&#xFF1A;(1, 0.0), (2, 2.0), (3, 5.0). &#x5982;&#x679C;&#x6211;&#x4EEC;&#x4E8B;&#x5148;&#x77E5;&#x9053;&#x6240;&#x6709;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x663E;&#x5F0F;&#x5730;&#x5199;&#x6210;&#x8FD9;&#x6837;&#xFF1A;(0.0, 2.0, 5.0). &#x8FD9;&#x4E2A;answer&#x5E8F;&#x5217;&#x53EF;&#x4EE5;&#x8BA4;&#x4E3A;&#x662F;&#x4E00;&#x4E2A;&#x591A;&#x7EF4;&#x77E9;&#x9635;&#xFF08;3&#x7EF4;&#xFF09;. &#x5BF9;&#x4E8E;&#x5B9E;&#x9645;&#x76EE;&#x7684;&#xFF0C;&#x53EA;&#x6709;question&#x5BF9;&#x5E94;&#x7684;answer&#x662F;&#x4E00;&#x4E2A;&#x5B9E;&#x6570;. &#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x6587;&#x6863;&#x6765;&#x8BF4;&#xFF0C;answer&#x662F;&#x7C7B;&#x4F3C;&#x7684;. &#x56E0;&#x800C;&#xFF0C;&#x5BF9;&#x4E8E;&#x4E24;&#x4E2A;&#x5411;&#x91CF;&#x6765;&#x8BF4;&#xFF08;&#x5206;&#x522B;&#x8868;&#x793A;&#x4E24;&#x4E2A;&#x6587;&#x6863;&#xFF09;&#xFF0C;&#x6211;&#x4EEC;&#x5E0C;&#x671B;&#x53EF;&#x4EE5;&#x4E0B;&#x7C7B;&#x4F3C;&#x7684;&#x7ED3;&#x8BBA;&#xFF1A;&#x201C;&#x5982;&#x679C;&#x4E24;&#x4E2A;&#x5411;&#x91CF;&#x4E2D;&#x7684;&#x5B9E;&#x6570;&#x662F;&#x76F8;&#x4F3C;&#x7684;&#xFF0C;&#x90A3;&#x4E48;&#xFF0C;&#x539F;&#x59CB;&#x7684;&#x6587;&#x6863;&#x4E5F;&#x53EF;&#x4EE5;&#x8BA4;&#x4E3A;&#x662F;&#x76F8;&#x4F3C;&#x7684;&#x201D;&#x3002;&#x5F53;&#x7136;&#xFF0C;&#x8FD9;&#x6837;&#x7684;&#x7ED3;&#x8BBA;&#x4F9D;&#x8D56;&#x4E8E;&#x6211;&#x4EEC;&#x5982;&#x4F55;&#x53BB;&#x9009;&#x53D6;&#x6211;&#x4EEC;&#x7684;question&#x3002; &#x7A00;&#x758F;&#x77E9;&#x9635;(Sparse vector) &#x901A;&#x5E38;&#xFF0C;&#x5927;&#x591A;&#x6570;answer&#x7684;&#x503C;&#x90FD;&#x662F;0.0. &#x4E3A;&#x4E86;&#x8282;&#x7701;&#x7A7A;&#x95F4;&#xFF0C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x4ECE;&#x6587;&#x6863;&#x8868;&#x793A;&#x4E2D;&#x5FFD;&#x7565;&#x5B83;&#x4EEC;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x5199;&#xFF1A;(2, 2.0), (3, 5.0) &#x5373;&#x53EF;(&#x6CE8;&#x610F;&#xFF1A;&#x8FD9;&#x91CC;&#x5FFD;&#x7565;&#x4E86;(1, 0.0)). &#x7531;&#x4E8E;&#x6240;&#x6709;&#x7684;&#x95EE;&#x9898;&#x96C6;&#x4E8B;&#x5148;&#x90FD;&#x77E5;&#x9053;&#xFF0C;&#x90A3;&#x4E48;&#x5728;&#x7A00;&#x758F;&#x77E9;&#x9635;&#x7684;&#x6587;&#x6863;&#x8868;&#x793A;&#x4E2D;&#x6240;&#x6709;&#x7F3A;&#x5931;&#x7684;&#x7279;&#x6027;&#x53EF;&#x4EE5;&#x8BA4;&#x4E3A;&#x90FD;&#x662F;0.0. gensim&#x7684;&#x7279;&#x522B;&#x4E4B;&#x5904;&#x5728;&#x4E8E;&#xFF0C;&#x5B83;&#x6CA1;&#x6709;&#x9650;&#x5B9A;&#x4EFB;&#x4F55;&#x7279;&#x5B9A;&#x7684;&#x8BED;&#x6599;&#x683C;&#x5F0F;&#xFF1B;&#x8BED;&#x6599;&#x53EF;&#x4EE5;&#x662F;&#x4EFB;&#x4F55;&#x683C;&#x5F0F;&#xFF0C;&#x5F53;&#x8FED;&#x4EE3;&#x65F6;&#xFF0C;&#x901A;&#x8FC7;&#x7A00;&#x758F;&#x77E9;&#x9635;&#x6765;&#x5B8C;&#x6210;&#x5373;&#x53EF;&#x3002;&#x4F8B;&#x5982;&#xFF0C;&#x96C6;&#x5408; ([(2, 2.0), (3, 5.0)], ([0, -1.0], [3, -1.0])) &#x662F;&#x4E00;&#x4E2A;&#x5305;&#x542B;&#x4E24;&#x4E2A;&#x6587;&#x6863;&#x7684;&#x8BED;&#x6599;&#xFF0C;&#x6BCF;&#x4E2A;&#x90FD;&#x6709;&#x4E24;&#x4E2A;&#x975E;&#x96F6;&#x7684; pair&#x3002; &#x6A21;&#x578B;(model) &#x5BF9;&#x4E8E;&#x6211;&#x4EEC;&#x6765;&#x8BF4;&#xFF0C;&#x4E00;&#x4E2A;&#x6A21;&#x578B;&#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x53D8;&#x6362;(transformation)&#xFF0C;&#x5C06;&#x4E00;&#x79CD;&#x6587;&#x6863;&#x8868;&#x793A;&#x8F6C;&#x6362;&#x6210;&#x53E6;&#x4E00;&#x79CD;&#x3002;&#x521D;&#x59CB;&#x548C;&#x76EE;&#x6807;&#x8868;&#x793A;&#x90FD;&#x662F;&#x5411;&#x91CF;&#xFF0D;&#xFF0D;&#x5B83;&#x4EEC;&#x53EA;&#x5728;question&#x548C;answer&#x4E4B;&#x95F4;&#x6709;&#x533A;&#x522B;&#x3002;&#x8FD9;&#x4E2A;&#x53D8;&#x6362;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x8BAD;&#x7EC3;&#x7684;&#x8BED;&#x6599;&#x8FDB;&#x884C;&#x81EA;&#x52A8;&#x5B66;&#x4E60;&#xFF0C;&#x65E0;&#x9700;&#x4EBA;&#x5DE5;&#x76D1;&#x7763;&#xFF0C;&#x6700;&#x7EC8;&#x7684;&#x6587;&#x6863;&#x8868;&#x793A;&#x5C06;&#x66F4;&#x52A0;&#x7D27;&#x51D1;&#x548C;&#x6709;&#x7528;&#xFF1B;&#x76F8;&#x4F3C;&#x7684;&#x6587;&#x6863;&#x5177;&#x6709;&#x76F8;&#x4F3C;&#x7684;&#x8868;&#x793A;&#x3002; &#x6F14;&#x793A;&#x4EE3;&#x7801;&#x6F14;&#x793A;&#x4EE3;&#x7801; &#x53C2;&#x8003;&#x94FE;&#x63A5; http://d0evi1.github.io/gensim/","tags":"lda gensim machine-learning topic-modeling cluster"},{"title":"JGibbLDA实战","url":"/2016/05/16/JGibbLDA实战/","text":"&#x5C1D;&#x8BD5;&#x4E86;&#x4E0B;JGibbLDA&#xFF0C;&#x53D1;&#x73B0;&#x6309;&#x5B98;&#x65B9;&#x6559;&#x7A0B;&#x7528;&#x4EE5;&#x4E0B;&#x547D;&#x4EE4;&#x76F4;&#x63A5;&#x8FD0;&#x884C;jar&#x5305;&#x4F1A;&#x51FA;&#x73B0;&#x9519;&#x8BEF;&#x3002; &#x9519;&#x8BEF;&#x547D;&#x4EE4;&#xFF1A; java -mx512M -cp bin:lib/args4j-2.0.6.jar jgibblda.LDA -est -alpha 0.5 -beta 0.1 -ntopics 100 -niters 1000 -savestep 100 -twords 20 -dfile models/casestudy/newdocs.dat &#x9519;&#x8BEF;&#x4FE1;&#x606F;&#xFF1A; &#x624B;&#x52A8;&#x914D;&#x7F6E;&#x4E8E;&#x662F;&#x5C1D;&#x8BD5;&#x5BFC;&#x5165;eclipse&#x8FD0;&#x884C;&#x624B;&#x52A8;&#x914D;&#x7F6E;&#xFF0C;&#x6210;&#x529F;&#xFF0C;&#x8FC7;&#x7A0B;&#x5982;&#x4E0B;&#x3002; &#x4E0B;&#x8F7D;JGibbLDA&#x7684;jar&#x5305;&#x5E76;&#x89E3;&#x538B;&#xFF1B;&#x7F51;&#x5740;&#xFF1A;http://jgibblda.sourceforge.net/#Griffiths04 &#x5BFC;&#x5165;eclipse&#xFF0C;&#x786E;&#x4FDD;jar&#x5305;&#x5728;&#x76EE;&#x5F55;&#x4E2D; &#x627E;&#x5230;LDACmdOption.java&#x6587;&#x4EF6;&#xFF0C; &#x4FEE;&#x6539;&#x90E8;&#x5206;&#x4EE3;&#x7801; @Option(name=&quot;-dir&quot;, usage=&quot;Specify directory&quot;) public String dir = &quot;models/casestudy-en&quot;; @Option(name=&quot;-dfile&quot;, usage=&quot;Specify data file&quot;) public String dfile = &quot;models/casestudy-en/newdocs.dat&quot;; &#x503C;&#x5F97;&#x6CE8;&#x610F;&#x7684;&#x662F;&#xFF0C;dfile&#x7684;&#x683C;&#x5F0F;&#x5FC5;&#x987B;&#x662F;&#x1F447;&#x8FD9;&#x4E2A;&#x6837;&#x5B50;&#xFF1A; [M] [document1] [document2] ... [documentM] &#x7B2C;&#x4E00;&#x884C;[M]&#x662F;documents&#x7684;&#x603B;&#x6570;&#xFF0C;&#x4E4B;&#x540E;&#x7684;&#x6BCF;&#x4E00;&#x884C;&#x662F;&#x4E00;&#x4E2A;document&#xFF0C;&#x6BCF;&#x4E2A;document&#x662F;&#x4E00;&#x4E2A;word list&#xFF0C;&#x6216;&#x8005;&#x8BF4;&#x662F;bag of words&#x3002; [document i] = [word i1] [word i2] ... [word iNi] &#x5404;&#x53C2;&#x6570;&#x542B;&#x4E49;&#xFF1A;-est &#x4ECE;&#x8BAD;&#x7EC3;&#x8BED;&#x6599;&#x4E2D;&#x8BC4;&#x4F30;&#x51FA;LDA&#x6A21;&#x578B;-alpha LDA&#x6A21;&#x578B;&#x4E2D;&#x7684;alpha&#x6570;&#x503C;&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;50/K(K&#x662F;&#x4E3B;&#x9898;&#x6570;&#x76EE;)-beta LDA&#x6A21;&#x578B;&#x4E2D;&#x7684;beta&#x6570;&#x503C;&#xFF0C;&#x9ED8;&#x8BA4;&#x662F;0.1-ntopics &#x4E3B;&#x9898;&#x6570;&#x76EE;&#xFF0C;&#x9ED8;&#x8BA4;&#x503C;&#x662F;100-niters GIbbs&#x91C7;&#x6837;&#x7684;&#x8FED;&#x4EE3;&#x6570;&#x76EE;&#xFF0C;&#x9ED8;&#x8BA4;&#x503C;&#x4E3A;2000-savestep &#x6307;&#x5B9A;&#x5F00;&#x59CB;&#x4FDD;&#x5B58;LDA&#x6A21;&#x578B;&#x7684;&#x8FED;&#x4EE3;&#x6B21;&#x6570;-dir &#x8BAD;&#x7EC3;&#x8BED;&#x6599;&#x76EE;&#x5F55;-dfile &#x8BAD;&#x7EC3;&#x8BED;&#x6599;&#x6587;&#x4EF6;&#x540D;&#x79F0; &#x4FEE;&#x6539;&#x9879;&#x76EE;&#x7684;Run Configurations&#xFF0C;&#x5728;Java Application&#x4E2D;&#x9009;&#x62E9;LDA&#xFF0C;&#x70B9;&#x51FB;(x)=Arguments&#xFF0C;&#x8F93;&#x5165; -est -alpha 0.2 -beta 0.1 -ntopics 100 -niters 1000 -savestep 100 -twords 100 -dir Users\\x\\MyEclipse1\\JGibbLDA-v.1.0\\models\\casestudy-en -dfile &quot;newdocs.dat&quot; &#x82E5;&#x5229;&#x7528;&#x5DF2;&#x8BAD;&#x7EC3;&#x7684;LDA&#x6A21;&#x578B;&#x9884;&#x6D4B;&#xFF0C;&#x8F93;&#x5165;&#x4EE5;&#x4E0B;&#x53C2;&#x6570;&#xFF1A; -inf -dir Users\\x\\MyEclipse1\\JGibbLDA-v.1.0\\models\\casestudy-en -dfile &quot;test.txt&quot; &#x6CE8;&#x610F;&#xFF0C;&#x8FDB;&#x884C;&#x9884;&#x6D4B;&#x65F6;&#xFF0C;&#x5F53;&#x524D;&#x76EE;&#x5F55;&#x4E0B;&#x5FC5;&#x987B;&#x5305;&#x542B;&#x5DF2;&#x6709;&#x7684;LDA&#x8BAD;&#x7EC3;&#x8F93;&#x51FA;&#x6587;&#x4EF6;&#xFF0C;&#x5305;&#x62EC;model-final.others&#x3001;model-final.phi&#x3001;model-final.tassign&#x3001;model-final.theta&#x3001;model-final.twords&#x3001;wordmap.txt&#x6587;&#x4EF6;&#xFF0C;&#x5982;&#x679C;&#x8FD0;&#x884C;&#x62A5;&#x9519;&#xFF0C;&#x5C1D;&#x8BD5;&#x4FEE;&#x6539;LDACmdOption.java&#x7684;modelName&#xFF0C;&#x786E;&#x4FDD;&#x548C;&#x6587;&#x4EF6;&#x540D;&#x7684;modelname&#x90E8;&#x5206;&#x4E00;&#x81F4;&#x3002;@Option(name=&#x201D;-model&#x201D;, usage=&#x201D;Specify the model name&#x201D;) public String modelName = &#x201C;model-final&#x201D;; &#x5982;&#x679C;&#x51FA;&#x73B0;java heap limited&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x5728;VM arguments&#x4E0B;&#x6DFB;&#x52A0; -Xms1g -Xmx1g -Xmn512m Run&#x8F93;&#x51FA;&#x6587;&#x4EF6;&#x4E3B;&#x8981;&#x6709;&#xFF1A;.others &#x6587;&#x4EF6;&#x5B58;&#x50A8;LDA&#x6A21;&#x578B;&#x53C2;&#x6570;&#xFF0C;&#x5982;alpha&#x3001;beta&#x7B49;&#x3002;.phi &#x6BCF;&#x4E2A;topic&#x5185;&#x5BF9;doc&#x7684;&#x5206;&#x5E03;&#x60C5;&#x51B5;&#x3002;&#x6587;&#x4EF6;&#x5B58;&#x50A8;&#x8BCD;&#x8BED;-&#x4E3B;&#x9898;&#x5206;&#x5E03;&#xFF0C;&#x6BCF;&#x4E00;&#x884C;&#x662F;&#x4E00;&#x4E2A;&#x4E3B;&#x9898;&#xFF0C;&#x5217;&#x5185;&#x5BB9;&#x4E3A;&#x8BCD;&#x8BED;&#x3002;.theta &#x6BCF;&#x4E2A;doc&#x5185;&#x5BF9;&#x5E94;&#x4E0A;&#x9762;&#x7684;n&#x4E2A;topic&#x7684;&#x5206;&#x5E03;&#x60C5;&#x51B5;&#x3002;&#x6587;&#x4EF6;&#x4E3B;&#x9898;&#x6587;&#x6863;&#x5206;&#x5E03;&#xFF0C;&#x6BCF;&#x4E00;&#x884C;&#x662F;&#x4E00;&#x4E2A;&#x6587;&#x6863;&#xFF0C;&#x5217;&#x5185;&#x5BB9;&#x662F;&#x4E3B;&#x9898;&#x6982;&#x7387;&#x3002;.tassign &#x6587;&#x4EF6;&#x662F;&#x8BAD;&#x7EC3;&#x9884;&#x6599;&#x4E2D;&#x5355;&#x8BCD;&#x7684;&#x4E3B;&#x9898;&#x6307;&#x5B9A;&#xFF08;&#x5F52;&#x5C5E;&#xFF09;&#xFF0C;&#x6BCF;&#x4E00;&#x884C;&#x662F;&#x4E00;&#x4E2A;&#x8BED;&#x6599;&#x6587;&#x6863;&#x3002;.twords n&#x4E2A;topic&#xFF0C;&#x4EE5;&#x53CA;&#x6BCF;&#x4E2A;topic&#x4E0B;&#x9762;&#x5305;&#x542B;&#x7684;&#x5177;&#x4F53;&#x7684;&#x5B57;&#x8BCD;wordmap.txt &#x8BCD;-id&#x6620;&#x5C04;&#x5176;&#x4E2D;&#x6839;&#x636E;&#x91C7;&#x6837;&#x8FED;&#x4EE3;&#x6B21;&#x6570;&#x6765;&#x6307;&#x5B9A;&#xFF0C;&#x5982;model-00800&#xFF0C;&#x6700;&#x540E;&#x4E00;&#x6B21;&#x91C7;&#x6837;&#x540D;&#x79F0;&#x547D;&#x540D;&#x4E3A;model-final&#x3002; &#x53C2;&#x8003;&#x94FE;&#x63A5;&#xFF1A;http://www.ithao123.cn/content-4208214.htmlhttp://jgibblda.sourceforge.net/","tags":"lda machine-learning topic-modeling cluster"},{"title":"让百度、google收录博客","url":"/2016/05/13/让百度、google收录博客/","text":"github &#x5C01;&#x4E86;&#x767E;&#x5EA6;&#x722C;&#x866B;&#xFF0C;&#x56E0;&#x6B64;&#x767E;&#x5EA6;&#x7D22;&#x5F15;&#x4E0D;&#x5230;&#x6211;&#x4EEC;&#x5728; github &#x4E0A;&#x642D;&#x7684;&#x535A;&#x5BA2;&#xFF08;&#x60F3;&#x77E5;&#x9053;&#x81EA;&#x5DF1;&#x7684;&#x535A;&#x5BA2;&#x662F;&#x5426;&#x88AB;&#x7D22;&#x5F15;&#x53EF;&#x4EE5;&#x8FD9;&#x6837;&#x67E5;&#x8BE2;&#xFF0C;&#x5728;&#x641C;&#x7D22;&#x5F15;&#x64CE;&#x4E2D;&#x8F93;&#x5165;&#xFF1A;site: &#x535A;&#x5BA2;&#x57DF;&#x540D;&#xFF09;&#x89E3;&#x51B3;github&#x5C4F;&#x853D;&#x767E;&#x5EA6;&#x722C;&#x866B;&#x7684;&#x601D;&#x8DEF;&#x5C31;&#x662F;&#x201C;&#x8FC1;&#x51FA;&#x201D;&#x6211;&#x4EEC;&#x7684;&#x535A;&#x5BA2;&#xFF0C;&#x8BA9;&#x767E;&#x5EA6;&#x722C;&#x866B;&#x4E0D;&#x76F4;&#x63A5;&#x8BBF;&#x95EE;github&#x5C31;&#x884C;&#x4E86;&#x3002;&#x5EFA;&#x8BAE;&#x770B;&#x8FD9;&#x7BC7;&#x6587;&#x7AE0;&#x5148;&#x8FDB;&#x884C;&#x5C1D;&#x8BD5;&#xFF0C;&#x82E5;&#x4E0D;&#x884C;&#xFF0C;&#x5C1D;&#x8BD5;&#x672C;&#x6587;&#x6240;&#x7528;&#x65B9;&#x6CD5;&#x3002; &#x767E;&#x5EA6;&#x6536;&#x5F55;&#x8BA9;&#x767E;&#x5EA6;&#x6536;&#x5F55;&#x7684;&#x7B2C;&#x4E00;&#x95EE;&#x9898;&#x662F;&#x89E3;&#x51B3;&#x5C01;&#x7981;&#xFF0C;&#x65B9;&#x6848;&#x662F;&#x8FC1;&#x51FA;&#x535A;&#x5BA2;&#xFF0C;&#x8BA9;&#x767E;&#x5EA6;&#x722C;&#x866B;&#x4E0D;&#x76F4;&#x63A5;&#x8BBF;&#x95EE; github. &#x6CE8;&#x518C;&#x57DF;&#x540D;&#x5728;godaddy&#x6CE8;&#x518C;&#x5E76;&#x7533;&#x8BF7;&#x4E00;&#x4E2A;&#x57DF;&#x540D;&#x3002;55&#x5143;&#xFF0F;&#x5E74;&#x3002; &#x57DF;&#x540D;&#x5907;&#x6848;&#xFF1F;no!&#x4EE5;&#x4E0B;&#x60C5;&#x51B5;&#x9700;&#x8981;&#x5907;&#x6848; &#x5728;&#x56FD;&#x5185;&#x7533;&#x8BF7;&#x7684;&#x57DF;&#x540D;&#xFF0C;&#x5982;&#x4E07;&#x7F51;&#x7B49;&#x670D;&#x52A1;&#x5546; &#x51E1;&#x662F;&#x5728;&#x4E2D;&#x56FD;&#x5927;&#x9646;&#x5883;&#x5185;&#x8D2D;&#x4E70;&#x670D;&#x52A1;&#x5668;&#x7684;&#x7528;&#x6237;&#x9700;&#x5907;&#x6848;&#xFF0C;&#x5373;&#x4F60;&#x7684;&#x7F51;&#x7AD9;&#x7A7A;&#x95F4;&#x5728;&#x56FD;&#x5185;&#x3002; &#x4F46;&#x662F;&#xFF01;&#x5982;&#x679C;&#x7533;&#x8BF7;&#x81EA;&#x56FD;&#x5916;&#x670D;&#x52A1;&#x5546;&#xFF0C;&#x5982; Godaddy &#xFF0C;&#x7F51;&#x7AD9;&#x5185;&#x5BB9;&#x6258;&#x7BA1;&#x5728;&#x56FD;&#x5916;&#x670D;&#x52A1;&#x5546;&#xFF0C;&#x5982;github&#x6216;&#x8005;&#x4E70;&#x7684;&#x56FD;&#x5916;&#x7684;&#x865A;&#x62DF;&#x4E3B;&#x673A;&#xFF0C;&#x90A3;&#x4E48;&#x4F60;&#x4E0D;&#x9700;&#x8981;&#x5907;&#x6848;&#xFF01;&#xFF01;&#x8FD9;&#x4E5F;&#x5C31;&#x610F;&#x5473;&#x7740;&#xFF0C;&#x5982;&#x679C;&#x4F60;&#x60F3;&#x642D;&#x5EFA;&#x4E2A;&#x535A;&#x5BA2;&#x7AD9;&#x70B9;&#xFF0C;&#x8FD8;&#x4E0D;&#x60F3;&#x6363;&#x9F13;&#x8FD9;&#x9EBB;&#x70E6;&#x7684;&#x5907;&#x6848;&#x6D41;&#x7A0B;&#xFF0C;&#x90A3;&#x4E48;&#x4F60;&#x552F;&#x4E00;&#x7684;&#x505A;&#x6CD5;&#x5C31;&#x662F;&#xFF0C;&#x5728;&#x56FD;&#x5916;&#x670D;&#x52A1;&#x5546;&#x7533;&#x8BF7;&#x57DF;&#x540D;+&#x8D2D;&#x4E70;&#x56FD;&#x5916;&#x7684;&#x7A7A;&#x95F4;&#xFF08;&#x6216;&#x8005;&#x4F7F;&#x7528;&#x56FD;&#x5916;&#x514D;&#x8D39;&#x7684;&#x7A7A;&#x95F4;&#x5982;github&#x6258;&#x7BA1;&#x9759;&#x6001;&#x7AD9;&#x70B9;&#xFF09; &#x5C06;&#x535A;&#x5BA2;&#x6258;&#x7BA1;&#x81F3;Coding&#x5E73;&#x53F0;&#x6CE8;&#x518C;Coding&#x8D26;&#x6237;&#x5E76;&#x5EFA;&#x7ACB;&#x9879;&#x76EE;&#x53BB;Coding &#x5B98;&#x7F51;&#x6CE8;&#x518C;&#xFF0C;&#x5E76;&#x65B0;&#x5EFA;&#x4E00;&#x4E2A;&#x548C;&#x8D26;&#x6237;&#x540D;&#x76F8;&#x540C;&#x7684;&#x8D26;&#x6237;&#x3002; &#x8BBE;&#x7F6E;ssh&#x5728;Coding&#x7684;&#x4E2A;&#x4EBA;&#x4E3B;&#x9875;&#x7684;&#x8D26;&#x6237;&#x4E2D;&#xFF0C;&#x8FDB;&#x5165;SSH&#x516C;&#x94A5;&#xFF0C;&#x6DFB;&#x52A0;&#x4F60;&#x7684;&#x516C;&#x94A5;&#x3002;&#xFF08;&#x5728;&#x672C;&#x673A; .ssh &#x76EE;&#x5F55;&#x4E0B;&#x627E;&#x5230; id_rsa.pub&#xFF0C;&#x590D;&#x5236;&#x91CC;&#x9762;&#x7684;&#x5185;&#x5BB9;&#x5728;SSH-RSA&#x516C;&#x94A5;&#x5185;&#x5BB9;&#x4E2D;&#x5373;&#x53EF;&#x3002;&#xFF09; &#x8F93;&#x5165; ssh -T git@git.coding.net &#x8FDB;&#x884C;&#x6D4B;&#x8BD5;&#xFF0C;&#x5982;&#x679C;&#x663E;&#x793A;&#x5982;&#x4E0B;&#x5219;SSH&#x914D;&#x7F6E;&#x6210;&#x529F;&#xFF1A; Hello ...! You&apos;ve conected to Coding.net by SSH successfully! &#x4FEE;&#x6539;&#x7F51;&#x7AD9;&#x914D;&#x7F6E;&#x6587;&#x4EF6;&#x5728;&#x4F60;&#x7684; blog &#x6839;&#x76EE;&#x5F55;&#x4E0B;&#x7684;&#x914D;&#x7F6E;&#x6587;&#x4EF6;_config.yml&#xFF0C;&#x627E;&#x5230;deploy&#x7684;&#x8BBE;&#x7F6E;&#x5904;&#xFF0C;&#x6539;&#x4E3A;&#x5982;&#x4E0B;&#xFF1A; deploy: type: git repo: github: git@github.com:XXXXXXXXXXXXXXXXXXXXXXXXXXXX coding: git@git.coding.net:XXXXXXXXXXXXXXXXXXXXXXXXX,master &#x6CE8;&#x610F;&#x8981;&#x6539;&#x6210;&#x4F60;&#x7684;&#x9879;&#x76EE;&#x5730;&#x5740;&#x3002; ### &#x5C06;&#x7F51;&#x7AD9;&#x6587;&#x4EF6;&#x90E8;&#x7F72;&#x81F3;Coding &#x5728;&#x4F60;&#x7684; github page &#x6839;&#x76EE;&#x5F55;&#x4E0B;&#x8FD0;&#x884C; hexo g -d &#x6210;&#x529F;&#x4E4B;&#x540E;&#xFF0C;&#x8FDB;&#x5165;&#x4F60;&#x7684;Coding&#x5BF9;&#x5E94;&#x7684;&#x9879;&#x76EE;&#x4E2D;&#x5E94;&#x8BE5;&#x80FD;&#x770B;&#x5230;&#x7F51;&#x7AD9;&#x6587;&#x4EF6;&#x3002; &#x914D;&#x7F6E;Coding&#x7684;Page&#x670D;&#x52A1;&#x8FDB;&#x5165;&#x4F60;&#x5728;Coding&#x4E0A;&#x7684;&#x9879;&#x76EE;&#xFF0C;&#x70B9;&#x51FB;&#x5DE6;&#x4FA7;&#x7684;&#x4EE3;&#x7801;&#x53EF;&#x4EE5;&#x770B;&#x5230;Coding Pages&#x670D;&#x52A1;&#x3002;&#x8F93;&#x5165;&#x5206;&#x652F;&#x4E3A;master&#xFF0C;&#x70B9;&#x51FB;&#x5F00;&#x542F;&#x670D;&#x52A1;&#x3002;&#x5728;&#x81EA;&#x5B9A;&#x4E49;&#x57DF;&#x540D;&#x5904;&#x586B;&#x4E0A;&#x4F60;&#x7684;&#x7F51;&#x7AD9;&#x57DF;&#x540D;&#x3002;&#x5982;&#x56FE;&lt;&#x2013;&gt; &#x914D;&#x7F6E;DNS&#x5728;Godaddy&#x6CE8;&#x518C;&#x5546;&#x57DF;&#x540D;&#x4FEE;&#x6539;DNS&#x5730;&#x5740;&#x3002;&#x767B;&#x5F55;godaddy &#x6309; dnspod &#x8981;&#x6C42;&#x66F4;&#x6539; nameserver&#x3002; &#x5728;dnspod&#x8FDB;&#x884C;&#x7F51;&#x7AD9;&#x7684; dns &#x8BBE;&#x7F6E;&#x3002;&#x5C06;&#x56FD;&#x5185;&#x7EBF;&#x8DEF;&#x8BBE;&#x7F6E;&#x4E3A;CNAME&#x7684; pages.coding.me&#x3002;&#x4E4B;&#x540E;&#x5C31;&#x53EF;&#x4EE5;&#x6253;&#x5F00;&#x81EA;&#x5DF1;&#x7684;&#x57DF;&#x540D;&#x5566;&#xFF5E; github &#x4E5F;&#x53EF;&#x4EE5;&#x7ED1;&#x5B9A;&#x57DF;&#x540D;&#x3002;&#x5728;&#x672C;&#x5730;&#x7F51;&#x7AD9;&#x6839;&#x76EE;&#x5F55;&#x4E0B;&#x7684;source&#x6587;&#x4EF6;&#x5939;&#x4E0B;&#xFF0C;&#x65B0;&#x5EFA;&#x4E00;&#x4E2A;&#x6587;&#x4EF6;&#x540D;&#x4E3A;CNAME&#x7684;&#x6587;&#x4EF6;&#xFF08;&#x65E0;&#x540E;&#x7F00;&#x540D;&#xFF09;&#xFF0C;&#x586B;&#x5199;&#x4F60;&#x6240;&#x7ED1;&#x5B9A;&#x7684;&#x57DF;&#x540D;&#x5730;&#x5740;&#xFF0C;&#x5982; www.shuang0420.com&#xFF0C;&#x7136;&#x540E; generate &amp; deploy&#xFF0C;&#x5C31;&#x6210;&#x529F;&#x7ED1;&#x5B9A;&#x57DF;&#x540D;&#x5566;&#x3002; &#x5982;&#x56FE; &#x8BA9;&#x767E;&#x5EA6;&#x6536;&#x5F55;&#x7528; &#x767E;&#x5EA6;&#x7AD9;&#x957F;&#x5DE5;&#x5177; &#x7684;&#x6293;&#x53D6;&#x8BCA;&#x65AD;&#x529F;&#x80FD;&#x770B;&#x662F;&#x80FD;&#x8FDB;&#x884C;&#x6293;&#x53D6;&#x3002;&#x767E;&#x5EA6;&#x8F93;&#x5165; site:www.shuang0420.com &#x68C0;&#x9A8C;&#x3002; google &#x6536;&#x5F55;google &#x6536;&#x5F55;&#x5C31;&#x6BD4;&#x8F83;&#x7B80;&#x5355;&#x3002; &#x6DFB;&#x52A0;&#x7AD9;&#x70B9;&#x5E76;&#x9A8C;&#x8BC1;&#x7528;&#x81EA;&#x5DF1;&#x7684;google&#x5E10;&#x53F7;&#x767B;&#x9646; Webmaster Central&#xFF0C;&#x6DFB;&#x52A0;&#x7AD9;&#x70B9;&#x5E76;&#x9A8C;&#x8BC1;&#x3002; &#x5C06;&#x9A8C;&#x8BC1;&#x6587;&#x4EF6;&#x653E;&#x5230; source &#x6587;&#x4EF6;&#x4E0B;&#xFF0C;&#x5728;&#x7AD9;&#x70B9;&#x914D;&#x7F6E;&#x6587;&#x4EF6;&#x4E2D;&#x52A0;&#x5165; skip_render: googled6054e120f1a1419.html &#x4EA7;&#x751F; sitemap&#x4F7F;&#x7528;&#x63D2;&#x4EF6; hexo-generator-sitemap &#x80FD;&#x751F;&#x6210;&#x7AD9;&#x70B9;&#x5730;&#x56FE;, &#x65B9;&#x6CD5;&#x5982;&#x4E0B; $ npm install hexo-generator-sitemap --save &#x7136;&#x540E;&#x5728; Hexo &#x6839;&#x76EE;&#x5F55;&#x4E0B;&#x7684; config.yml &#x91CC;&#x914D;&#x7F6E;&#x4E00;&#x4E0B; sitemap: path: sitemap.xml path &#x8868;&#x793A; Sitemap &#x7684;&#x8DEF;&#x5F84;. &#x9ED8;&#x8BA4;&#x4E3A; sitemap.xml. &#x7136;&#x540E;&#x91CD;&#x65B0;&#x751F;&#x6210; hexo g &#x6DFB;&#x52A0; sitemap&#x7528; google &#x7AD9;&#x957F;&#x5DE5;&#x5177;&#xFF0C;&#x5728; &#x6293;&#x53D6;&#x2014;&#x2014;&#x7AD9;&#x70B9;&#x5730;&#x56FE; &#x4E2D;&#x5C31;&#x80FD;&#x770B;&#x5230; &#x6DFB;&#x52A0;/&#x6D4B;&#x8BD5;&#x7AD9;&#x70B9;&#x5730;&#x56FE;&#xFF0C;&#x6DFB;&#x52A0; sitemap.xml &#x5373;&#x53EF;&#x3002; &#x53C2;&#x8003;&#x94FE;&#x63A5;&#x5982;&#x4F55;&#x5C06;&#x535A;&#x5BA2;&#x6258;&#x7BA1;&#x81F3;Coding&#x53CA;&#x76F8;&#x5E94;&#x7684;DNS&#x8BBE;&#x7F6E;","tags":"hexo"},{"title":"gollum/-github上搭建个人wiki","url":"/2016/05/13/gollum:-github上搭建个人wiki/","text":"&#x535A;&#x5BA2;&#x51F8;&#x663E;&#x521B;&#x4F5C;&#xFF0C;&#x7EF4;&#x57FA;&#x5219;&#x662F;&#x6574;&#x7406;&#x7684;&#x597D;&#x5DE5;&#x5177;&#xFF0C;&#x5F88;&#x591A;&#x5165;&#x95E8;&#x7EA7;&#x522B;&#x3001;&#x590D;&#x7528;&#x522B;&#x4EBA;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;&#x5982;&#x914D;&#x7F6E;&#x73AF;&#x5883;&#x7B49;&#xFF0C;&#x66F4;&#x9002;&#x5408;&#x53D1;&#x5E03;&#x5728;&#x4E2A;&#x4EBA;&#x7EF4;&#x57FA;&#x4E0A;&#xFF0C;&#x672C;&#x6587;&#x5C31;&#x4EE5;gollum+github&#x642D;&#x5EFA;&#x4E2A;&#x4EBA;wiki&#x505A;&#x4E2A;&#x793A;&#x8303;&#x3002; &#x5F00;&#x901A;Wiki&#x767B;&#x9646;Github&#xFF0C;&#x627E;&#x5230;&#x4F60;&#x6240;&#x5F00;&#x901A;&#x7684;Github&#x9879;&#x76EE;&#x7684;Settings&#x680F;&#x76EE;&#xFF0C;&#x5F00;&#x901A;Wikis&#xFF0C;&#x5982;&#x679C;&#x53EA;&#x5E0C;&#x671B;&#x522B;&#x4EBA;&#x53EF;&#x8BFB;&#x4E0D;&#x53EF;&#x5199;&#xFF0C;&#x52FE;&#x9009;&#xFF1A;Restrict edits to Collaborators only&#x3002;&#x5982;&#x4E0B;&#x56FE;&#x6240;&#x793A;&#xFF1A; git clone &#x76F8;&#x5E94;&#x7EF4;&#x57FA;&#x7684;git&#x5730;&#x5740; git clone git@github.com:Shuang0420/Shuang0420.github.io.wiki.git wiki &#x5982;&#x679C;&#x4F60;&#x4E4B;&#x524D;&#x6CA1;&#x6709;&#x8BBE;&#x7F6E;git&#x5BC6;&#x94A5;&#xFF0C;&#x53EF;&#x4EE5;&#x53C2;&#x7167;&#x4EE5;&#x4E0B;&#x6B65;&#x9AA4;&#x5148;&#x505A;&#x914D;&#x7F6E;&#xFF0C;&#x5982;&#x679C;&#x5DF2;&#x7ECF;&#x8BBE;&#x7F6E;&#xFF0C;&#x8BF7;&#x5FFD;&#x7565;&#x3002; &#x67E5;&#x770B;&#x662F;&#x5426;&#x5DF2;&#x7ECF;&#x6709;&#x4E86;ssh&#x5BC6;&#x94A5;&#xFF1A;cd ~/.ssh&#x5982;&#x679C;&#x6CA1;&#x6709;&#x5BC6;&#x94A5;&#x5219;&#x4E0D;&#x4F1A;&#x6709;&#x6B64;&#x6587;&#x4EF6;&#x5939;&#xFF0C;&#x6709;&#x5219;&#x5907;&#x4EFD;&#x5220;&#x9664; &#x751F;&#x6210;&#x5BC6;&#x94A5;&#xFF0C;&#x5F97;&#x5230;&#x4E24;&#x4E2A;&#x6587;&#x4EF6;&#xFF1A;id_rsa &#x548C; id_rsa.pub ssh-keygen -t rsa -C &#x201C;haiyan.xu.vip@gmail.com&#x201D; &#x6DFB;&#x52A0;&#x5BC6;&#x94A5;&#x5230;ssh&#xFF1A;ssh-add id_rsa &#x5728;github&#x4E0A;settings&#x4E2D;&#x6DFB;&#x52A0;ssh&#x5BC6;&#x94A5;&#xFF0C;&#x5373;&#x201C;id_rsa.pub&#x201D;&#x91CC;&#x7684;&#x516C;&#x94A5;&#x3002; &#x6D4B;&#x8BD5;&#xFF1A;ssh git@github.com &#x914D;&#x7F6E;&#x4E2A;&#x4EBA;wiki &#x5728;wiki&#x76EE;&#x5F55;&#x4E0B;&#xFF0C;&#x5B89;&#x88C5;bundler gem install bundler &#x5982;&#x679C;&#x5B89;&#x88C5;&#x6CA1;&#x6709;&#x95EE;&#x9898;&#xFF0C;&#x53EF;&#x4EE5;&#x8DF3;&#x8FC7;&#x4EE5;&#x4E0B;&#x9519;&#x8BEF;&#x89E3;&#x51B3;&#x3002; ERROR: Could not find a valid gem &apos;bundler&apos; (&gt;= 0), here is why: Unable to download data from https://rubygems.org/ - Errno::EPIPE: Broken pipe - SSL_connect (https://rubygems.org/latest_specs.4.8.gz) &#x89E3;&#x51B3;&#xFF1A; gem source -a http://rubygems.org/ gem install bundler &#x7136;&#x800C;&#x8FD8;&#x662F;&#x6709;&#x9519;&#x8BEF;&#xFF1A; Fetching: bundler-1.12.5.gem (100%)^[[A ERROR: While executing gem ... (Gem::FilePermissionError) You don&apos;t have write permissions for the /Library/Ruby/Gems/2.0.0 directory. &#x56E0;&#x4E3A;&#x6CA1;&#x6709;sudo&#xFF1A; sudo gem install bundler &#x65B0;&#x5EFA;Gemfile&#x6587;&#x4EF6;&#xFF0C;&#x5185;&#x5BB9;&#x5982;&#x4E0B;&#xFF1A; source &quot;http://rubygems.org&quot; gem &apos;redcarpet&apos; gem &quot;grit&quot;, &apos;~&gt; 2.5.0&apos;, git: &apos;https://github.com/gitlabhq/grit.git&apos;, ref: &apos;42297cdcee16284d2e4eff23d41377f52fc28b9d&apos; gem &apos;gollum&apos;, git: &apos;https://github.com/gollum/gollum.git&apos; &#x8FD0;&#x884C;&#xFF1A; # &#x5B89;&#x88C5;&#x9879;&#x76EE;&#x4F9D;&#x8D56;&#x7684;&#x6240;&#x6709;gem&#x5305;;&#x6B64;&#x547D;&#x4EE4;&#x4F1A;&#x5C1D;&#x8BD5;&#x66F4;&#x65B0;&#x7CFB;&#x7EDF;&#x4E2D;&#x5DF2;&#x5B58;&#x5728;&#x7684;gem&#x5305; bundle install &#x65F6;&#x95F4;&#x6709;&#x70B9;&#x4E45;&#xFF0C;&#x8010;&#x5FC3;&#x7B49;&#x5F85;&#x3002; &#x7136;&#x800C;&#x6700;&#x540E;&#x51FA;&#x73B0;error, An error occurred while installing charlock_holmes (0.7.3), and Bundler cannot continue. Make sure that `gem install charlock_holmes -v &apos;0.7.3&apos;` succeeds before bundling. &#x597D;&#x3002;&#x90A3;&#x5C31;&#x6309;&#x8981;&#x6C42;&#x5B89;&#x88C5;&#x3002; sudo gem install charlock_holmes -v &apos;0.7.3&apos; &#x597D;&#x3002;&#x7EE7;&#x7EED;&#x6309;&#x8981;&#x6C42;&#x5B89;&#x88C5;&#x3002; brew install icu4c &#x518D;&#x91CD;&#x6765; sudo gem install charlock_holmes -v &apos;0.7.3&apos; bundle install &#x56E0;&#x4E3A;&#x6CA1;&#x6709;&#x5B89;&#x88C5;bundle gem install bundle &#x5B89;&#x88C5;&#x540E;&#x518D;&#x6B21;&#x5C1D;&#x8BD5;&#x8FD0;&#x884C; bundle install error Could not reach host index.rubygems.org. Check your network connection and try again. &#x51FA;&#x73B0;&#x8FD9;&#x79CD;&#x9519;&#x8BEF;&#x53EF;&#x4EE5;&#x5C1D;&#x8BD5;&#x628A;Gemfile&#x91CC;&#x7684;https&#x6539;&#x6210;http&#xFF08;&#x4E92;&#x76F8;&#x8F6C;&#x5316;&#x8FDB;&#x884C;&#x5C1D;&#x8BD5;&#xFF09; bundle install &#x7EC8;&#x4E8E;&#x6210;&#x529F;&#xFF01; &#x5DF2;&#x5B89;&#x88C5;&#x6210;&#x529F;gollum&#x7B49;&#x3002;&#x7136;&#x540E;&#x8FD0;&#x884C;&#xFF1A; gollum &#x8D70;&#x5230;&#x8FD9;&#x4E00;&#x6B65;&#x4E86;&#x672C;&#x4EBA;&#x8FD8;&#x662F;&#x9047;&#x5230;&#x4E86;&#x4E07;&#x6076;&#x7684;&#x5931;&#x8D25;&#x3002; &#x770B;&#x7740;&#x5DF2;&#x7ECF;&#x5B89;&#x88C5;&#x597D;&#x4E86; Installing nokogiri 1.6.7.2 with native extensions Installing rack-protection 1.5.3 Installing gollum-grit_adapter 1.0.1 Installing sanitize 2.1.0 Installing sinatra 1.4.7 Installing gollum-lib 4.2.0 Using gollum 4.0.1 from https://github.com/gollum/gollum.git (at master@5a5e56a) Bundle complete! 3 Gemfile dependencies, 24 gems now installed. Use `bundle show [gemname]` to see where a bundled gem is installed. &#x7136;&#x800C;&#x5B9E;&#x9645;&#x5E76;&#x6CA1;&#x6709; $ gollum -bash: gollum: command not found &#x5927;&#x5199;&#x7684;&#x5FE7;&#x4F24;&#x3002;&#x6700;&#x540E;&#x901A;&#x8FC7;&#x76F4;&#x63A5;&#x5B89;&#x88C5;gollum&#x89E3;&#x51B3;&#x3002; sudo gem install gollum gollum &#x7EC8;&#x4E8E;&#x53EF;&#x4EE5;&#x5728;&#x672C;&#x5730;&#x542F;&#x52A8;&#x6210;&#x529F;&#x7EF4;&#x57FA;&#x3002;&#x6253;&#x5F00;&#x7F51;&#x5740;&#xFF1A;http://0.0.0.0:4567/&#xFF0C;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x5728;&#x6D4F;&#x89C8;&#x5668;&#x4E2D;&#x7F16;&#x8F91;&#x3002; &#x5982;&#x679C;&#x53D1;&#x73B0;&#x4E0D;&#x80FD;&#x5982;&#x4E0B;&#x9519;&#x8BEF;&#xFF0C;&#x8BF7;&#x5C1D;&#x8BD5;&#x66F4;&#x65B0;ruby&#x3002; &#x66F4;&#x65B0;ruby&#x6B65;&#x9AA4; &#x5B89;&#x88C5; RVM RVM:Ruby Version Manager,Ruby&#x7248;&#x672C;&#x7BA1;&#x7406;&#x5668;&#xFF0C;&#x5305;&#x62EC;Ruby&#x7684;&#x7248;&#x672C;&#x7BA1;&#x7406;&#x548C;Gem&#x5E93;&#x7BA1;&#x7406;(gemset) curl -L get.rvm.io | bash -s stable source ~/.bashrc source ~/.bash_profile &#x6D4B;&#x8BD5;&#x662F;&#x5426;&#x5B89;&#x88C5;&#x6B63;&#x5E38; rvm -v &#x7528;RVM&#x5347;&#x7EA7;Ruby #&#x67E5;&#x770B;&#x5F53;&#x524D;ruby&#x7248;&#x672C; ruby -v #&#x5217;&#x51FA;&#x5DF2;&#x77E5;&#x7684;ruby&#x7248;&#x672C; rvm list known #&#x5B89;&#x88C5;ruby 2.3.0 rvm install 2.3.0 &#x5B89;&#x88C5;&#x5B8C;&#x6210;&#x4E4B;&#x540E;ruby -v&#x67E5;&#x770B;&#x662F;&#x5426;&#x5B89;&#x88C5;&#x6210;&#x529F;&#x3002; &#x91CD;&#x65B0;&#x5B89;&#x88C5;&#x5B8C;&#x6BD5;&#x540E;&#x56DE;&#x5230;&#x7B2C;3&#x6B65;&#x3002; github&#x540C;&#x6B65;&#x5728;wiki&#x76EE;&#x5F55;&#x4E0B;&#x9762;&#xFF0C;&#x8FDB;&#x884C;git&#x5E93;&#x64CD;&#x4F5C;&#xFF0C;&#x63D0;&#x4EA4;&#x672C;&#x5730;&#x5BF9;&#x7EF4;&#x57FA;&#x5185;&#x5BB9;&#x7684;&#x4FEE;&#x6539;&#x3002;&#x4E00;&#x5207;&#x5C06;&#x81EA;&#x52A8;&#x4FDD;&#x5B58;&#x5728;&#x4F60;&#x7684;Github&#x4E0A;&#x7684;&#x4E2A;&#x4EBA;&#x535A;&#x5BA2;&#x7F51;&#x7AD9;&#x7684;wiki&#x76EE;&#x5F55;&#x4E0B;&#x9762;&#x3002; cd ~/wiki git add . git commit -am&quot;first commit&quot; git push","tags":"wiki"},{"title":"Hexo 主题配置","url":"/2016/05/12/Github-Pages-Hexo主题配置/","text":"&#x7EC8;&#x4E8E;&#x642D;&#x5EFA;&#x5B8C;&#x81EA;&#x5DF1;&#x7684;&#x535A;&#x5BA2;&#x7AD9;&#x70B9;&#x5566;&#xFF0C;&#x597D;&#x6709;&#x6210;&#x5C31;&#x611F;&#x270C;&#xFE0F;&#x5206;&#x4EAB;&#x4E00;&#x4E9B;&#x672C;&#x7AD9;&#x4F7F;&#x7528;&#x7684; NexT &#x4E3B;&#x9898;&#x914D;&#x7F6E;&#x6280;&#x5DE7;&#x3002; &#x6DFB;&#x52A0;&#x201C;&#x6807;&#x7B7E;&#x201D;&#x9875;&#x9762;&#x5728;&#x7EC8;&#x7AEF;&#x7A97;&#x53E3;&#x4E0B;&#xFF0C;&#x5B9A;&#x4F4D;&#x5230; Hexo &#x7AD9;&#x70B9;&#x76EE;&#x5F55;&#x4E0B;&#xFF0C;&#x65B0;&#x5EFA;&#x4E00;&#x4E2A;&#x9875;&#x9762;&#xFF0C;&#x547D;&#x540D;&#x4E3A; tags &#xFF1A; $ cd your-hexo-site $ hexo new page tags &#x6CE8;&#x610F;&#xFF1A;&#x5982;&#x679C;&#x6709;&#x542F;&#x7528; &#x591A;&#x8BF4; &#x6216;&#x8005; Disqus &#x8BC4;&#x8BBA;&#xFF0C;&#x9875;&#x9762;&#x4E5F;&#x4F1A;&#x5E26;&#x6709;&#x8BC4;&#x8BBA;&#x3002; &#x82E5;&#x9700;&#x8981;&#x5173;&#x95ED;&#x7684;&#x8BDD;&#xFF0C;&#x8BF7;&#x6DFB;&#x52A0;&#x5B57;&#x6BB5; comments &#x5E76;&#x5C06;&#x503C;&#x8BBE;&#x7F6E;&#x4E3A; false&#xFF0C;&#x5982;&#xFF1A; title: &#x6807;&#x7B7E; date: 2014-12-22 12:39:04 type: &quot;tags&quot; comments: false &#x5728;&#x83DC;&#x5355;&#x4E2D;&#x6DFB;&#x52A0;&#x94FE;&#x63A5;&#x3002;&#x7F16;&#x8F91; &#x4E3B;&#x9898;&#x914D;&#x7F6E;&#x6587;&#x4EF6; &#xFF0C; &#x6DFB;&#x52A0; tags &#x5230; menu &#x4E2D;&#xFF0C;&#x5982;&#x4E0B;: menu: home: / archives: /archives tags: /tags &#x6DFB;&#x52A0;&#x201C;&#x5206;&#x7C7B;&#x201D;&#x9875;&#x9762;&#x5728;&#x7EC8;&#x7AEF;&#x7A97;&#x53E3;&#x4E0B;&#xFF0C;&#x5B9A;&#x4F4D;&#x5230; Hexo &#x7AD9;&#x70B9;&#x76EE;&#x5F55;&#x4E0B;&#xFF0C;&#x65B0;&#x5EFA;&#x4E00;&#x4E2A;&#x9875;&#x9762;&#xFF0C;&#x547D;&#x540D;&#x4E3A; categories &#xFF1A; $ cd your-hexo-site $ hexo new page categories &#x6CE8;&#x610F;&#xFF1A;&#x5982;&#x679C;&#x6709;&#x542F;&#x7528; &#x591A;&#x8BF4; &#x6216;&#x8005; Disqus &#x8BC4;&#x8BBA;&#xFF0C;&#x9875;&#x9762;&#x4E5F;&#x4F1A;&#x5E26;&#x6709;&#x8BC4;&#x8BBA;&#x3002; &#x82E5;&#x9700;&#x8981;&#x5173;&#x95ED;&#x7684;&#x8BDD;&#xFF0C;&#x8BF7;&#x6DFB;&#x52A0;&#x5B57;&#x6BB5; comments &#x5E76;&#x5C06;&#x503C;&#x8BBE;&#x7F6E;&#x4E3A; false&#xFF0C;&#x5982;&#xFF1A; title: &#x5206;&#x7C7B; date: 2014-12-22 12:39:04 type: &quot;categories&quot; comments: false &#x5728;&#x83DC;&#x5355;&#x4E2D;&#x6DFB;&#x52A0;&#x94FE;&#x63A5;&#x3002;&#x7F16;&#x8F91; &#x4E3B;&#x9898;&#x914D;&#x7F6E;&#x6587;&#x4EF6; &#xFF0C; &#x6DFB;&#x52A0; categories &#x5230; menu &#x4E2D;&#xFF0C;&#x5982;&#x4E0B;: menu: home: / archives: /archives categories : /categories &#x6DFB;&#x52A0;&#x5176;&#x5B83;&#x83DC;&#x5355;&#x9875;&#x9762;&#x4E0E;&#x6DFB;&#x52A0;&#x5206;&#x7C7B;&#x3001;&#x6807;&#x7B7E;&#x9875;&#x9762;&#x6B65;&#x9AA4;&#x76F8;&#x540C;&#xFF0C;&#x4F46;&#x8FD8;&#x9700;&#x8981;&#x52A0;&#x4E00;&#x6B65;&#xFF0C;&#x5728;&#x4E3B;&#x9898;&#x6587;&#x4EF6;&#x5939;&#x4E0B;&#x7684; languages &#x6587;&#x4EF6;&#x5939;&#x4E2D;&#x627E;&#x5230;&#x4F60;&#x4F7F;&#x7528;&#x7684;&#x8BED;&#x8A00;&#x6587;&#x4EF6;&#xFF0C;&#x6253;&#x5F00;&#x540E;&#xFF0C;&#x5728; menu &#x4E0B;&#x65B0;&#x589E;&#x521A;&#x521A;&#x6DFB;&#x52A0;&#x7684;&#x9875;&#x9762;&#x3002;&#x5426;&#x5219;&#x5728;&#x4E3B;&#x9875;&#x4E2D;&#x663E;&#x793A;&#x7684;&#x65B0;&#x9875;&#x9762;&#x662F; Menu.xxx &#x5F62;&#x5F0F;&#x800C;&#x4E0D;&#x662F; xxx&#x3002; &#x8BC4;&#x8BBA;&#x7CFB;&#x7EDF;&#x611F;&#x89C9; DISUQS &#x6BD4; &#x591A;&#x8BF4; &#x7684;&#x8BBE;&#x7F6E;&#x7B80;&#x5355;&#x4E00;&#x4E9B;&#x3002;&#x5728; https://disqus.com/ &#x6309;&#x8981;&#x6C42;&#x6CE8;&#x518C;&#xFF0C;&#x5B8C;&#x6210;&#x540E;&#x5728; admin/settings/general/ &#x4E0B;&#x627E;&#x5230; Shortname&#x3002;&#x7F16;&#x8F91; &#x7AD9;&#x70B9;&#x914D;&#x7F6E;&#x6587;&#x4EF6;&#xFF0C; &#x6DFB;&#x52A0; disqus_shortname &#x5B57;&#x6BB5;&#xFF0C;&#x8BBE;&#x7F6E;&#x5982;&#x4E0B;&#xFF1A; disqus_shortname: your-disqus-shortname &#x8BBE;&#x7F6E; RSS&#x5B89;&#x88C5; hexo-generator-feed&#xFF0C;&#x5728;&#x7AD9;&#x70B9;&#x7684;&#x6839;&#x76EE;&#x5F55;&#x4E0B;&#x6267;&#x884C;&#x4EE5;&#x4E0B;&#x547D;&#x4EE4;&#xFF1A; $ npm install hexo-generator-feed --save &#x66F4;&#x6539; &#x4E3B;&#x9898;&#x914D;&#x7F6E;&#x6587;&#x4EF6;&#xFF0C;&#x8BBE;&#x5B9A; rss &#x5B57;&#x6BB5;&#x7684;&#x503C;&#xFF0C;&#x7559;&#x7A7A;&#x8868;&#x793A;&#x4F7F;&#x7528; Hexo &#x751F;&#x6210;&#x7684; Feed &#x94FE;&#x63A5;&#x3002; &#x8BBF;&#x95EE;&#x91CF;&#x7EDF;&#x8BA1;&#x7F16;&#x8F91; &#x4E3B;&#x9898;&#x914D;&#x7F6E;&#x6587;&#x4EF6; &#x4E2D;&#x7684; busuanzi_count &#x7684;&#x914D;&#x7F6E;&#x9879;&#x3002;&#x5F53;enable: true&#x65F6;&#xFF0C;&#x4EE3;&#x8868;&#x5F00;&#x542F;&#x5168;&#x5C40;&#x5F00;&#x5173;&#x3002;&#x82E5;site_uv&#x3001;site_pv&#x3001;page_pv&#x7684;&#x503C;&#x5747;&#x4E3A;false&#x65F6;&#xFF0C;&#x4E0D;&#x849C;&#x5B50;&#x4EC5;&#x4F5C;&#x8BB0;&#x5F55;&#x800C;&#x4E0D;&#x4F1A;&#x5728;&#x9875;&#x9762;&#x4E0A;&#x663E;&#x793A;&#x3002; &#x641C;&#x7D22;&#x670D;&#x52A1;&#x5E38;&#x7528;&#x7684;&#x662F; local search &#x548C; swiftype&#xFF0C;local search&#xFF0C;&#x914D;&#x7F6E;&#x7B80;&#x5355;&#xFF0C;&#x4F46;&#x662F;&#x4E2A;&#x4EBA;&#x8BD5;&#x9A8C;&#x53EF;&#x4EE5;&#x641C;&#x5185;&#x5BB9;&#xFF0C;&#x4F46;&#x65E0;&#x6CD5;&#x8DF3;&#x8F6C;&#x9875;&#x9762;&#xFF0C;swiftype &#x6CA1;&#x6709;&#x8FD9;&#x79CD;&#x95EE;&#x9898;&#x3002;Local search&#x5B89;&#x88C5; hexo-generator-search&#xFF0C;&#x5728;&#x7AD9;&#x70B9;&#x7684;&#x6839;&#x76EE;&#x5F55;&#x4E0B;&#x6267;&#x884C;&#x4EE5;&#x4E0B;&#x547D;&#x4EE4;&#xFF1A; $ npm install hexo-generator-search --save &#x7F16;&#x8F91; &#x7AD9;&#x70B9;&#x914D;&#x7F6E;&#x6587;&#x4EF6;&#xFF0C;&#x65B0;&#x589E;&#x4EE5;&#x4E0B;&#x5185;&#x5BB9;&#x5230;&#x4EFB;&#x610F;&#x4F4D;&#x7F6E;&#xFF1A; search: path: search.xml field: post Swiftype &#x524D;&#x5F80; Swiftype &#x6CE8;&#x518C;&#x9875;&#x9762;&#xFF0C;&#x6CE8;&#x518C;&#x4E00;&#x4E2A;&#x65B0;&#x8D26;&#x6237;&#x3002; &#x6CE8;&#x518C;&#x5B8C;&#x6210;&#x540E;&#xFF0C;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x641C;&#x7D22;&#x5F15;&#x64CE;(create a search engine)&#xFF0C;&#x5E76;&#x6309;&#x7167;&#x63D0;&#x793A;&#x5B8C;&#x6210;&#x521B;&#x5EFA;&#x6B65;&#x9AA4;&#x3002; &#x641C;&#x7D22;&#x5F15;&#x64CE;&#x521B;&#x5EFA;&#x5B8C;&#x6210;&#x540E;&#xFF0C;&#x5728;&#x83DC;&#x5355;&#x4E2D;&#x9009;&#x62E9; Integrate -&gt; Install Search &#x5F00;&#x542F;&#x641C;&#x7D22;&#x5B9A;&#x5236;&#xFF0C;&#x6309;&#x7167;&#x6B65;&#x9AA4;&#x5B8C;&#x6210;&#x5B9A;&#x5236;&#x3002;&#x6700;&#x540E;&#x4E00;&#x6B65;&#x8BB0;&#x5F97;&#x70B9;&#x51FB; Active &#x6309;&#x94AE;&#x3002; &#x8FD4;&#x56DE;&#x5B9A;&#x5236;&#x5F15;&#x64CE;&#x7684;&#x7B2C;&#x4E8C;&#x4E2A;&#x6B65;&#x9AA4; INSTALL CODE&#xFF0C;&#x590D;&#x5236;&#x51FA;&#x4F60;&#x7684; swiftype_key,&#x4E5F;&#x5C31;&#x662F;&#x4E0B;&#x9762;&#x7684;&#x201D;xxxxxxxxx&#x201D;&#x90E8;&#x5206;&#x3002; 12345678&lt;script type=&quot;text/javascript&quot;&gt; (function(w,d,t,u,n,s,e){w[&apos;SwiftypeObject&apos;]=n;w[n]=w[n]||function(){ (w[n].q=w[n].q||[]).push(arguments);};s=d.createElement(t); e=d.getElementsByTagName(t)[0];s.async=1;s.src=u;e.parentNode.insertBefore(s,e); })(window,document,&apos;script&apos;,&apos;//s.swiftypecdn.com/install/v2/st.js&apos;,&apos;_st&apos;); _st(&apos;install&apos;,&apos;xxxxxxxxx&apos;,&apos;2.0.0&apos;);&lt;/script&gt; &#x7F16;&#x8F91; &#x7AD9;&#x70B9;&#x914D;&#x7F6E;&#x6587;&#x4EF6;&#xFF0C; &#x65B0;&#x589E;&#x5B57;&#x6BB5; swiftype_key&#xFF0C;&#x503C;&#x8BBE;&#x7F6E;&#x6210;&#x7B2C;&#x56DB;&#x6B65;&#x4E2D;&#x8D4B;&#x503C;&#x51FA;&#x6765;&#x7684; key # Swiftype Search Key swiftype_key: xxxxxxxxx &#x5F00;&#x542F;&#x6253;&#x8D4F;&#x529F;&#x80FD;&#x53EA;&#x9700;&#x8981;&#x5728; &#x4E3B;&#x9898;&#x914D;&#x7F6E;&#x6587;&#x4EF6; &#x4E2D;&#x586B;&#x5165; &#x5FAE;&#x4FE1; &#x548C; &#x652F;&#x4ED8;&#x5B9D; &#x6536;&#x6B3E;&#x4E8C;&#x7EF4;&#x7801;&#x56FE;&#x7247;&#x5730;&#x5740; &#x5373;&#x53EF;&#x5F00;&#x542F;&#x8BE5;&#x529F;&#x80FD;&#x3002; reward_comment: &#x575A;&#x6301;&#x539F;&#x521B;&#x6280;&#x672F;&#x5206;&#x4EAB;&#xFF0C;&#x60A8;&#x7684;&#x652F;&#x6301;&#x5C06;&#x9F13;&#x52B1;&#x6211;&#x7EE7;&#x7EED;&#x521B;&#x4F5C;&#xFF01; wechatpay: /path/to/wechat-reward-image alipay: /path/to/alipay-reward-image &#x8BBE;&#x7F6E;&#x9605;&#x8BFB;&#x5168;&#x6587;&#x5728;&#x9996;&#x9875;&#x663E;&#x793A;&#x4E00;&#x7BC7;&#x6587;&#x7AE0;&#x7684;&#x90E8;&#x5206;&#x5185;&#x5BB9;&#xFF0C;&#x5E76;&#x63D0;&#x4F9B;&#x4E00;&#x4E2A;&#x94FE;&#x63A5;&#x8DF3;&#x8F6C;&#x5230;&#x5168;&#x6587;&#x9875;&#x9762;&#x662F;&#x4E00;&#x4E2A;&#x5E38;&#x89C1;&#x7684;&#x9700;&#x6C42;&#x3002; NexT &#x63D0;&#x4F9B;&#x4E09;&#x79CD;&#x65B9;&#x5F0F;&#x6765;&#x63A7;&#x5236;&#x6587;&#x7AE0;&#x5728;&#x9996;&#x9875;&#x7684;&#x663E;&#x793A;&#x65B9;&#x5F0F;&#x3002; &#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x5728;&#x9996;&#x9875;&#x663E;&#x793A;&#x6587;&#x7AE0;&#x7684;&#x6458;&#x5F55;&#x5E76;&#x663E;&#x793A; &#x9605;&#x8BFB;&#x5168;&#x6587; &#x6309;&#x94AE;&#xFF0C;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x4EE5;&#x4E0B;&#x65B9;&#x6CD5;&#xFF1A; &#x5728;&#x6587;&#x7AE0;&#x4E2D;&#x4F7F;&#x7528; &#x624B;&#x52A8;&#x8FDB;&#x884C;&#x622A;&#x65AD;&#xFF0C;&#x8FD9;&#x662F; Hexo &#x63D0;&#x4F9B;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;&#x63A8;&#x8350;&#x4F7F;&#x7528;&#x3002;&#x5728;&#x6587;&#x7AE0;&#x7684; front-matter &#x4E2D;&#x6DFB;&#x52A0; description&#xFF0C;&#x5E76;&#x63D0;&#x4F9B;&#x6587;&#x7AE0;&#x6458;&#x5F55;&#x81EA;&#x52A8;&#x5F62;&#x6210;&#x6458;&#x8981;&#xFF0C;&#x5728; &#x4E3B;&#x9898;&#x914D;&#x7F6E;&#x6587;&#x4EF6; &#x4E2D;&#x6DFB;&#x52A0;&#xFF1A; auto_excerpt: enable: true length: 150 &#x9ED8;&#x8BA4;&#x622A;&#x53D6;&#x7684;&#x957F;&#x5EA6;&#x4E3A; 150 &#x5B57;&#x7B26;&#xFF0C;&#x53EF;&#x4EE5;&#x6839;&#x636E;&#x9700;&#x8981;&#x81EA;&#x884C;&#x8BBE;&#x5B9A; MathJax&#x53EA;&#x8BB2;&#x4E00;&#x79CD;&#x7B80;&#x5355;&#x7684;&#x65B9;&#x6CD5; &#xFF0D; &#x63D2;&#x4EF6;&#x3002;&#x5B89;&#x88C5; $ npm install hexo-math --save &#x5728; Hexo &#x6587;&#x4EF6;&#x5939;&#x4E2D;&#x6267;&#x884C;&#xFF1A; $ hexo math install &#x5728; config.yml &#x6587;&#x4EF6;&#x4E2D;&#x6DFB;&#x52A0;&#xFF1A; plugins: hexo-math &#x5BF9;&#x4E8E;&#x4E0D;&#x542B;&#x7279;&#x6B8A;&#x7B26;&#x53F7;&#x7684;&#x516C;&#x5F0F;&#xFF0C;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x4F7F;&#x7528; MathJax &#x7684; inline math &#x8868;&#x8FBE;&#x5F0F;. &#x5982;&#x679C;&#x542B;&#x6709;&#x7279;&#x6B8A;&#x7B26;&#x53F7;&#xFF0C;&#x5219;&#x9700;&#x8981;&#x4EBA;&#x8089; escape&#xFF0C;&#x5982; \\ &#x4E4B;&#x7C7B;&#x7684;&#x7279;&#x6B8A;&#x7B26;&#x53F7;&#x5728; LaTex &#x8868;&#x8FBE;&#x5F0F;&#x4E2D;&#x51FA;&#x73B0;&#x9891;&#x7387;&#x5F88;&#x9AD8;&#xFF0C;&#x8FD9;&#x6837;&#x5C31;&#x5F88;&#x9EBB;&#x70E6;&#xFF0C;&#x4F7F;&#x7528; tag &#x80FD;&#x591F;&#x7701;&#x4E0D;&#x5C11;&#x4E8B;&#x3002; &#x5177;&#x4F53;&#x7528;&#x6CD5;&#x89C1; Hexo MathJax&#x63D2;&#x4EF6;.MathJax&#x7528;&#x6CD5;&#x603B;&#x7ED3; &#x63D2;&#x5165;&#x672C;&#x5730;&#x56FE;&#x7247; &#x66F4;&#x6539;&#x7AD9;&#x70B9;&#x914D;&#x7F6E;&#x6587;&#x4EF6; config.yml post_asset_folder: true &#x5728;hexo &#x76EE;&#x5F55;&#x4E2D;&#x6267;&#x884C; npm install https://github.com/CodeFalling/hexo-asset-image --save &#x65B0;&#x5EFA;&#x535A;&#x5BA2;&#xFF0C;&#x5728; post &#x4E2D;&#x4F1A;&#x751F;&#x6210;&#x4E00;&#x4E2A;&#x548C;&#x535A;&#x5BA2;&#x540D;&#x76F8;&#x540C;&#x7684;&#x6587;&#x4EF6;&#x5939;&#x548C;&#x4E00;&#x4E2A; .md &#x6587;&#x4EF6; hexo new &quot;newblog&quot; &#x628A;&#x56FE;&#x7247;&#x653E;&#x5165;&#x6587;&#x4EF6;&#x5939;&#xFF0C;&#x5728; .md &#x6587;&#x4EF6;&#x4E2D;&#x4F7F;&#x7528; &#x6574;&#x7406;&#x81EA; NexT &#x4F7F;&#x7528;&#x6587;&#x6863;","tags":"hexo"},{"title":"Github Pages+Hexo搭建个人博客","url":"/2016/05/12/Github-Pages-Hexo搭建个人博客/","text":"&#x4E00;&#x76F4;&#x60F3;&#x6709;&#x4E2A;&#x7F8E;&#x7F8E;&#x7684;&#x535A;&#x5BA2;&#xFF0C;CSDN&#x5B9E;&#x5728;&#x65E0;&#x6CD5;&#x6EE1;&#x8DB3;&#x3002;&#x770B;&#x4E86;&#x4E00;&#x4E9B;&#x5927;&#x795E;&#x7684; github &#x535A;&#x5BA2;&#xFF0C;&#x975E;&#x5E38;&#x8273;&#x7FA1;&#xFF0C;&#x81EA;&#x5DF1;&#x5B66;&#x7740;&#x642D;&#x4E86;&#x4E2A;&#xFF0C;&#x770B;&#x5728;&#x5B83;&#x8FD9;&#x4E48;&#x597D;&#x770B;&#x7684;&#x4EFD;&#x4E0A;&#xFF0C;&#x6211;&#x4E5F;&#x4F1A;&#x575A;&#x6301;&#x5199;&#x5199;&#x5199;&#xFF01; &#x4E3A;&#x4EC0;&#x4E48;&#x7528;Github Pages + HexoGithub Page&#x4F18;&#x70B9; &#x8F7B;&#x91CF;&#x7EA7;&#x7684;&#x535A;&#x5BA2;&#x7CFB;&#x7EDF;&#xFF0C;&#x6CA1;&#x6709;&#x9EBB;&#x70E6;&#x7684;&#x914D;&#x7F6E; &#x4F7F;&#x7528;&#x6807;&#x8BB0;&#x8BED;&#x8A00;&#xFF0C;&#x6BD4;&#x5982;Markdown &#x65E0;&#x9700;&#x81EA;&#x5DF1;&#x642D;&#x5EFA;&#x670D;&#x52A1;&#x5668; &#x6839;&#x636E;Github&#x7684;&#x9650;&#x5236;&#xFF0C;&#x5BF9;&#x5E94;&#x7684;&#x6BCF;&#x4E2A;&#x7AD9;&#x6709;300MB&#x7A7A;&#x95F4; &#x53EF;&#x4EE5;&#x7ED1;&#x5B9A;&#x81EA;&#x5DF1;&#x7684;&#x57DF;&#x540D; Github Page&#x6709;&#x4E24;&#x79CD;page&#x6A21;&#x5F0F;&#xFF0C;User/Organization Pages&#xFF08;&#x4E2A;&#x4EBA;&#x6216;&#x516C;&#x53F8;&#x7AD9;&#x70B9;&#xFF09;&#x548C;Project Pages&#xFF08;&#x9879;&#x76EE;&#x7AD9;&#x70B9;&#xFF09;&#x3002;&#x8FD9;&#x91CC;&#x6211;&#x4EEC;&#x7528;&#x7684;&#x662F;user/Organization Pages&#xFF0C;&#x8981;&#x6C42;&#x4F7F;&#x7528;&#x81EA;&#x5DF1;&#x7684;&#x7528;&#x6237;&#x540D;&#xFF0C;&#x6BCF;&#x4E2A;&#x7528;&#x6237;&#x540D;&#x4E0B;&#x9762;&#x53EA;&#x80FD;&#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;&#xFF0C;&#x8D44;&#x6E90;&#x547D;&#x540D;&#x5FC5;&#x987B;&#x7B26;&#x5408;&#x8FD9;&#x6837;&#x7684;&#x89C4;&#x5219;username/username.github.com&#xFF0C;&#x4E3B;&#x5E72;&#x4E0A;&#x5185;&#x5BB9;&#x88AB;&#x7528;&#x6765;&#x6784;&#x5EFA;&#x548C;&#x53D1;&#x5E03;&#x9875;&#x9762; Hexo&#x4F18;&#x70B9; &#x7528;&#x4E8E;&#x642D;&#x5EFA;&#x535A;&#x5BA2;&#x7F51;&#x7AD9;&#x6846;&#x67B6;&#xFF0C;&#x53EF;&#x4EE5;&#x7B80;&#x5355;&#x5B9E;&#x73B0;&#x4F18;&#x7F8E;&#x7684;&#x535A;&#x5BA2;&#x7F51;&#x7AD9;; &#x5728;&#x672C;&#x5730;&#x7AEF;&#x642D;&#x5EFA;&#xFF0C;&#x5C31;&#x53EF;&#x8131;&#x673A;&#x67E5;&#x9605;; &#x67B6;&#x6784;&#x4E0D;&#x4F9D;&#x6258;&#x4E8E;&#x5176;&#x4ED6;&#x95E8;&#x6237;&#x7F51;&#x7AD9;&#xFF0C;&#x4E0D;&#x518D;&#x62C5;&#x5FC3;&#x95E8;&#x6237;&#x7F51;&#x7AD9;&#x5012;&#x95ED;&#xFF0C;&#x4E0D;&#x62C5;&#x5FC3;&#x535A;&#x6587;&#x4E22;&#x5931;&#x6216;&#x96BE;&#x4EE5;&#x5BFC;&#x51FA;; &#x535A;&#x6587;&#x4E3A;markdown&#x683C;&#x5F0F;&#xFF0C;&#x901A;&#x7528;&#xFF0C;&#x5BB9;&#x6613;&#x4E0A;&#x624B;&#xFF0C;&#x4FBF;&#x4E8E;&#x5FEB;&#x901F;&#x4E66;&#x5199;; &#x53EF;&#x90E8;&#x7F72;&#x5728;github&#x4E0A;&#xFF1B; &#x521B;&#x9020;&#x8005;&#x6765;&#x81EA;&#x4E2D;&#x56FD;&#x53F0;&#x6E7E;&#xFF0C;&#x6240;&#x4EE5;&#x51E0;&#x4E4E;&#x6240;&#x6709;&#x6A21;&#x677F;&#x90FD;&#x5173;&#x6CE8;&#x5230;&#x4E86;&#x4E2D;&#x6587;&#x7684;&#x517C;&#x5BB9;&#x6027;&#xFF0C;&#x5F88;&#x9002;&#x5408;&#x4F7F;&#x7528;&#x6C49;&#x8BED;&#x7684;&#x7801;&#x519C;&#x3002; &#x642D;&#x5EFA;&#x6B65;&#x9AA4;&#x65B0;&#x5EFA;github repository&#x5728;github&#x4E0A;&#x65B0;&#x5EFA;repository&#xFF0C;name&#x4E3A;username.github.io&#x3002; Hexo&#x5B89;&#x88C5;&#x5148;&#x5B89;&#x88C5;git&#x548C;node.js brew install git brew install node &#x9A8C;&#x8BC1;&#x662F;&#x5426;&#x5B89;&#x88C5;&#x6210;&#x529F; node -v npm -v &#x5B89;&#x88C5;Hexo npm install -g hexo #-g&#x8868;&#x793A;&#x5168;&#x5C40;&#x5B89;&#x88C5;, npm&#x9ED8;&#x8BA4;&#x4E3A;&#x5F53;&#x524D;&#x9879;&#x76EE;&#x5B89;&#x88C5; Hexo&#x90E8;&#x7F72;&#x65B0;&#x5EFA;&#x6587;&#x4EF6;&#x5939;&#x5E76;&#x6253;&#x5F00;&#xFF0C;&#x5728;&#x6587;&#x4EF6;&#x5939;&#x5185;&#x64CD;&#x4F5C;&#x3002; hexo init #&#x65B0;&#x5EFA;&#x535A;&#x5BA2;&#x76EE;&#x5F55; hexo g #&#x6839;&#x636E;&#x5F53;&#x524D;&#x76EE;&#x5F55;&#x4E0B;&#x6587;&#x4EF6;&#x751F;&#x6210;&#x9759;&#x6001;&#x7F51;&#x9875; hexo s #&#x542F;&#x52A8;&#x670D;&#x52A1;&#x5668; &#x73B0;&#x5728;&#x5C31;&#x53EF;&#x4EE5;&#x5230;&#x6D4F;&#x89C8;&#x5668;&#x8F93;&#x5165;localhost:4000&#x67E5;&#x770B;&#x5566;&#x3002; &#x7B80;&#x5355;&#x4ECB;&#x7ECD;&#x4E00;&#x4E0B;&#x6587;&#x4EF6;&#x76EE;&#x5F55; public&#xFF1A;&#x6267;&#x884C;hexo generate&#x547D;&#x4EE4;&#xFF0C;&#x8F93;&#x51FA;&#x7684;&#x9759;&#x6001;&#x7F51;&#x9875;&#x5185;&#x5BB9;&#x76EE;&#x5F55; scaffolds&#xFF1A;layout&#x6A21;&#x677F;&#x6587;&#x4EF6;&#x76EE;&#x5F55;&#xFF0C;&#x5176;&#x4E2D;&#x7684;md&#x6587;&#x4EF6;&#x53EF;&#x4EE5;&#x6DFB;&#x52A0;&#x7F16;&#x8F91; scripts&#xFF1A;&#x6269;&#x5C55;&#x811A;&#x672C;&#x76EE;&#x5F55;&#xFF0C;&#x8FD9;&#x91CC;&#x53EF;&#x4EE5;&#x81EA;&#x5B9A;&#x4E49;&#x4E00;&#x4E9B;javascript&#x811A;&#x672C; source&#xFF1A;&#x6587;&#x7AE0;&#x6E90;&#x7801;&#x76EE;&#x5F55;&#xFF0C;&#x8BE5;&#x76EE;&#x5F55;&#x4E0B;&#x7684;markdown&#x548C;html&#x6587;&#x4EF6;&#x5747;&#x4F1A;&#x88AB;hexo&#x5904;&#x7406;&#x3002;&#x8BE5;&#x9875;&#x9762;&#x5BF9;&#x5E94;repo&#x7684;&#x6839;&#x76EE;&#x5F55;&#xFF0C;404&#x6587;&#x4EF6;&#x3001;favicon.ico&#x6587;&#x4EF6;&#xFF0C;CNAME&#x6587;&#x4EF6;&#x7B49;&#x90FD;&#x5E94;&#x8BE5;&#x653E;&#x8FD9;&#x91CC;&#xFF0C;&#x8BE5;&#x76EE;&#x5F55;&#x4E0B;&#x53EF;&#x65B0;&#x5EFA;&#x9875;&#x9762;&#x76EE;&#x5F55;&#x3002; drafts&#xFF1A;&#x8349;&#x7A3F;&#x6587;&#x7AE0; posts&#xFF1A;&#x53D1;&#x5E03;&#x6587;&#x7AE0;themes&#xFF1A;&#x4E3B;&#x9898;&#x6587;&#x4EF6;&#x76EE;&#x5F55; config.yml&#xFF1A;&#x5168;&#x5C40;&#x914D;&#x7F6E;&#x6587;&#x4EF6;&#xFF0C;&#x5927;&#x591A;&#x6570;&#x7684;&#x8BBE;&#x7F6E;&#x90FD;&#x5728;&#x8FD9;&#x91CC; package.json&#xFF1A;&#x5E94;&#x7528;&#x7A0B;&#x5E8F;&#x6570;&#x636E;&#xFF0C;&#x6307;&#x660E;hexo&#x7684;&#x7248;&#x672C;&#x7B49;&#x4FE1;&#x606F;&#xFF0C;&#x7C7B;&#x4F3C;&#x4E8E;&#x4E00;&#x822C;&#x8F6F;&#x4EF6;&#x4E2D;&#x7684; &#x5173;&#x4E8E; &#x6309;&#x94AE; Hexo&#x590D;&#x5236;&#x4E3B;&#x9898; hexo clean hexo g hexo s git clone https://github.com/cnfeat/cnfeat.git themes/jacman &#x542F;&#x7528;&#x4E3B;&#x9898;&#x4FEE;&#x6539;Hexo&#x76EE;&#x5F55;&#x4E0B;&#x7684;config.yml&#x914D;&#x7F6E;&#x6587;&#x4EF6;&#x4E2D;&#x7684;theme&#x5C5E;&#x6027;&#xFF0C;&#x5C06;&#x5176;&#x8BBE;&#x7F6E;&#x4E3A;jacman&#x3002; theme: jacman #&#x6216;&#x4F60;&#x7684;&#x4E3B;&#x9898;&#x540D;&#xFF0C;&#x6CE8;&#x610F;&#x5192;&#x53F7;&#x540E;&#x6709;&#x4E00;&#x4E2A;&#x7A7A;&#x683C; &#x6CE8;&#x610F;&#xFF1A;Hexo&#x6709;&#x4E24;&#x4E2A;config.yml&#x6587;&#x4EF6;&#xFF0C;&#x4E00;&#x4E2A;&#x5728;&#x6839;&#x76EE;&#x5F55;&#xFF0C;&#x4E00;&#x4E2A;&#x5728;theme&#x4E0B;&#xFF0C;&#x6B64;&#x65F6;&#x4FEE;&#x6539;&#x7684;&#x662F;&#x5728;&#x6839;&#x76EE;&#x5F55;&#x4E0B;&#x7684;&#x3002; &#x66F4;&#x65B0;&#x4E3B;&#x9898; cd themes/jacman git pull &#x6CE8;&#x610F;&#xFF1A;&#x4E3A;&#x907F;&#x514D;&#x51FA;&#x9519;&#xFF0C;&#x8BF7;&#x5148;&#x5907;&#x4EFD;&#x4F60;&#x7684;_config.yml &#x6587;&#x4EF6;&#x540E;&#x518D;&#x5347;&#x7EA7; Hexo&#x672C;&#x5730;&#x8C03;&#x8BD5; hexo g #&#x751F;&#x6210; hexo s #&#x542F;&#x52A8;&#x672C;&#x5730;&#x670D;&#x52A1;&#xFF0C;&#x8FDB;&#x884C;&#x6587;&#x7AE0;&#x9884;&#x89C8;&#x8C03;&#x8BD5; hexo d -g #&#x6216;&#x8005;&#x76F4;&#x63A5;&#x4F5C;&#x7528;&#x7EC4;&#x5408;&#x547D;&#x4EE4; &#x6D4F;&#x89C8;&#x5668;&#x8F93;&#x5165;localhost:4000&#xFF0C;&#x5373;&#x53EF;&#x67E5;&#x770B;&#x642D;&#x5EFA;&#x6548;&#x679C;&#x3002;&#x6BCF;&#x6B21;&#x53D8;&#x66F4;config.yml &#x6587;&#x4EF6;&#x6216;&#x8005;&#x4E0A;&#x4F20;&#x6587;&#x4EF6;&#x90FD;&#x53EF;&#x4EE5;&#x5148;&#x7528;&#x6B64;&#x547D;&#x4EE4;&#x8C03;&#x8BD5;&#x3002; Hexo&#x90E8;&#x7F72;&#x5230;githubnpm install hexo-deployer-git --save &#x5728; Hexo &#x6587;&#x4EF6;&#x5939;&#x4E0B;&#x627E;&#x5230; config.yml &#x6587;&#x4EF6;, &#x627E;&#x5230;&#x5176;&#x4E2D;&#x7684; deploy &#x6807;&#x7B7E;&#xFF0C;&#x6539;&#x6210;&#x4E0B;&#x56FE;&#x6240;&#x793A;&#x5F62;&#x5F0F;&#xFF0C;&#x5E76;&#x4FDD;&#x5B58;&#x3002;&#x6CE8;&#x610F;&#xFF1A;&#x5192;&#x53F7;&#x540E;&#x9762;&#x8981;&#x52A0;&#x4E0A;&#x4E00;&#x4E2A;&#x7A7A;&#x683C;&#xFF0C;&#x5426;&#x5219;&#x4F1A;&#x62A5;&#x9519; deploy: type: git repo: https://github.com/Shuang0420/Shuang0420.github.io.git &#x8FD0;&#x884C;&#x5982;&#x4E0B;&#x547D;&#x4EE4;&#xFF1A; hexo clean hexo generate hexo deploy &#x53D1;&#x535A;&#x6587; hexo new &quot;postname&quot; #&#x7136;&#x540E;&#x5728;posts&#x76EE;&#x5F55;&#x4E0B;&#x7684;postname.md&#x6587;&#x4EF6;&#x4E2D;&#x7F16;&#x8F91;&#x535A;&#x5BA2; hexo clean hexo generate # (&#x82E5;&#x8981;&#x672C;&#x5730;&#x9884;&#x89C8;&#x5C31;&#x5148;&#x6267;&#x884C; hexo server) hexo deploy &#x5FEB;&#x6377;&#x547D;&#x4EE4; hexo g == hexo generate hexo d == hexo deploy hexo s == hexo server hexo n == hexo new # &#x8FD8;&#x80FD;&#x7EC4;&#x5408;&#x4F7F;&#x7528;&#xFF0C;&#x5982;&#xFF1A; hexo d -g &#x53C2;&#x8003;&#x94FE;&#x63A5;&#xFF1A; http://mozhenhau.com/2015/03/05/%E5%9C%A8Mac%E9%80%9A%E8%BF%87Hexo%E5%9C%A8github%E4%B8%8A%E5%BB%BA%E7%AB%8B%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/ http://evakasch.github.io/2016/05/04/hexo-setup/","tags":"hexo"},{"title":"让进程在后台可靠运行的几种方法","url":"/2016/04/22/让进程在后台可靠运行的几种方法/","text":"&#x5F53;&#x7528;&#x6237;&#x6CE8;&#x9500;&#xFF08;logout&#xFF09;&#x6216;&#x8005;&#x7F51;&#x7EDC;&#x65AD;&#x5F00;&#x65F6;&#xFF0C;&#x7EC8;&#x7AEF;&#x4F1A;&#x6536;&#x5230; HUP&#xFF08;hangup&#xFF09;&#x4FE1;&#x53F7;&#x4ECE;&#x800C;&#x5173;&#x95ED;&#x5176;&#x6240;&#x6709;&#x5B50;&#x8FDB;&#x7A0B;&#x3002;&#x56E0;&#x6B64;&#xFF0C;&#x6211;&#x4EEC;&#x7684;&#x89E3;&#x51B3;&#x529E;&#x6CD5;&#x5C31;&#x6709;&#x4E24;&#x79CD;&#x9014;&#x5F84;&#xFF1A;&#x8981;&#x4E48;&#x8BA9;&#x8FDB;&#x7A0B;&#x5FFD;&#x7565; HUP &#x4FE1;&#x53F7;&#xFF0C;&#x8981;&#x4E48;&#x8BA9;&#x8FDB;&#x7A0B;&#x8FD0;&#x884C;&#x5728;&#x65B0;&#x7684;&#x4F1A;&#x8BDD;&#x91CC;&#x4ECE;&#x800C;&#x6210;&#x4E3A;&#x4E0D;&#x5C5E;&#x4E8E;&#x6B64;&#x7EC8;&#x7AEF;&#x7684;&#x5B50;&#x8FDB;&#x7A0B;&#x3002; nohup&#x53EA;&#x9700;&#x5728;&#x8981;&#x5904;&#x7406;&#x7684;&#x547D;&#x4EE4;&#x524D;&#x52A0;&#x4E0A; nohup &#x5373;&#x53EF;&#xFF0C;&#x6807;&#x51C6;&#x8F93;&#x51FA;&#x548C;&#x6807;&#x51C6;&#x9519;&#x8BEF;&#x7F3A;&#x7701;&#x4F1A;&#x88AB;&#x91CD;&#x5B9A;&#x5411;&#x5230; nohup.out &#x6587;&#x4EF6;&#x4E2D;&#x3002;&#x540C;&#x65F6;&#x53EF;&#x5728;&#x7ED3;&#x5C3E;&#x52A0;&#x4E0A;&#x201D;&amp;&#x201D;&#x6765;&#x5C06;&#x547D;&#x4EE4;&#x540C;&#x65F6;&#x653E;&#x5165;&#x540E;&#x53F0;&#x8FD0;&#x884C;&#xFF0C;&#x4E5F;&#x53EF;&#x7528;&#x201D;&gt;filename 2&gt;&amp;1&#x201D;&#x6765;&#x66F4;&#x6539;&#x7F3A;&#x7701;&#x7684;&#x91CD;&#x5B9A;&#x5411;&#x6587;&#x4EF6;&#x540D;&#x3002; $ nohup ping www.ibm.com &amp; [1] 6982 $ nohup: appending output to `nohup.out&apos; $ ps -ef |grep www.ibm.com 501 6982 5823 0 4:23&#x4E0B;&#x5348; ttys000 0:00.03 ping www.ibm.com 501 7120 5823 0 4:26&#x4E0B;&#x5348; ttys000 0:00.01 grep www.ibm.com setsidnohup &#x80FD;&#x901A;&#x8FC7;&#x5FFD;&#x7565; HUP &#x4FE1;&#x53F7;&#x6765;&#x4F7F;&#x6211;&#x4EEC;&#x7684;&#x8FDB;&#x7A0B;&#x907F;&#x514D;&#x4E2D;&#x9014;&#x88AB;&#x4E2D;&#x65AD;&#xFF0C;&#x6362;&#x4E2A;&#x89D2;&#x5EA6;&#x601D;&#x8003;&#xFF0C;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x7684;&#x8FDB;&#x7A0B;&#x4E0D;&#x5C5E;&#x4E8E;&#x63A5;&#x53D7; HUP &#x4FE1;&#x53F7;&#x7684;&#x7EC8;&#x7AEF;&#x7684;&#x5B50;&#x8FDB;&#x7A0B;&#xFF0C;&#x90A3;&#x4E48;&#x81EA;&#x7136;&#x4E5F;&#x5C31;&#x4E0D;&#x4F1A;&#x53D7;&#x5230; HUP &#x4FE1;&#x53F7;&#x7684;&#x5F71;&#x54CD;&#x4E86;&#x3002;setsid &#x5C31;&#x80FD;&#x5E2E;&#x52A9;&#x6211;&#x4EEC;&#x505A;&#x5230;&#x8FD9;&#x4E00;&#x70B9;&#x3002; $ setsid ping www.ibm.com $ ps -ef |grep www.ibm.com root 31094 1 0 07:28 ? 00:00:00 ping www.ibm.com root 31102 29217 0 07:29 pts/4 00:00:00 grep www.ibm.com &#x503C;&#x5F97;&#x6CE8;&#x610F;&#x7684;&#x662F;&#xFF0C;&#x4E0A;&#x4F8B;&#x4E2D;&#x6211;&#x4EEC;&#x7684;&#x8FDB;&#x7A0B; ID(PID)&#x4E3A;31094&#xFF0C;&#x800C;&#x5B83;&#x7684;&#x7236; ID&#xFF08;PPID&#xFF09;&#x4E3A;1&#xFF08;&#x5373;&#x4E3A; init &#x8FDB;&#x7A0B; ID&#xFF09;&#xFF0C;&#x5E76;&#x4E0D;&#x662F;&#x5F53;&#x524D;&#x7EC8;&#x7AEF;&#x7684;&#x8FDB;&#x7A0B; ID&#x3002;&#x8BF7;&#x5C06;&#x6B64;&#x4F8B;&#x4E0E;nohup &#x4F8B;&#x4E2D;&#x7684;&#x7236; ID &#x505A;&#x6BD4;&#x8F83;&#x3002; disown&#x5982;&#x679C;&#x672A;&#x52A0;&#x4EFB;&#x4F55;&#x5904;&#x7406;&#x5C31;&#x5DF2;&#x7ECF;&#x63D0;&#x4EA4;&#x4E86;&#x547D;&#x4EE4;&#xFF0C;&#x8BE5;&#x5982;&#x4F55;&#x8865;&#x6551;&#x624D;&#x80FD;&#x8BA9;&#x5B83;&#x907F;&#x514D; HUP &#x4FE1;&#x53F7;&#x7684;&#x5F71;&#x54CD;&#x5462;&#xFF1F; &#x7528;disown -h jobspec&#x6765;&#x4F7F;&#x67D0;&#x4E2A;&#x4F5C;&#x4E1A;&#x5FFD;&#x7565;HUP&#x4FE1;&#x53F7;&#x3002; &#x7528;disown -ah &#x6765;&#x4F7F;&#x6240;&#x6709;&#x7684;&#x4F5C;&#x4E1A;&#x90FD;&#x5FFD;&#x7565;HUP&#x4FE1;&#x53F7;&#x3002; &#x7528;disown -rh &#x6765;&#x4F7F;&#x6B63;&#x5728;&#x8FD0;&#x884C;&#x7684;&#x4F5C;&#x4E1A;&#x5FFD;&#x7565;HUP&#x4FE1;&#x53F7;&#x3002; &#x9700;&#x8981;&#x6CE8;&#x610F;&#x7684;&#x662F;&#xFF0C;&#x5F53;&#x4F7F;&#x7528;&#x8FC7; disown &#x4E4B;&#x540E;&#xFF0C;&#x4F1A;&#x5C06;&#x628A;&#x76EE;&#x6807;&#x4F5C;&#x4E1A;&#x4ECE;&#x4F5C;&#x4E1A;&#x5217;&#x8868;&#x4E2D;&#x79FB;&#x9664;&#xFF0C;&#x6211;&#x4EEC;&#x5C06;&#x4E0D;&#x80FD;&#x518D;&#x4F7F;&#x7528;jobs&#x6765;&#x67E5;&#x770B;&#x5B83;&#xFF0C;&#x4F46;&#x662F;&#x4F9D;&#x7136;&#x80FD;&#x591F;&#x7528;ps -ef&#x67E5;&#x627E;&#x5230;&#x5B83;&#x3002;&#x4F46;&#x662F;&#x8FD8;&#x6709;&#x4E00;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x8FD9;&#x79CD;&#x65B9;&#x6CD5;&#x7684;&#x64CD;&#x4F5C;&#x5BF9;&#x8C61;&#x662F;&#x4F5C;&#x4E1A;&#xFF0C;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x5728;&#x8FD0;&#x884C;&#x547D;&#x4EE4;&#x65F6;&#x5728;&#x7ED3;&#x5C3E;&#x52A0;&#x4E86;&#x201D;&amp;&#x201D;&#x6765;&#x4F7F;&#x5B83;&#x6210;&#x4E3A;&#x4E00;&#x4E2A;&#x4F5C;&#x4E1A;&#x5E76;&#x5728;&#x540E;&#x53F0;&#x8FD0;&#x884C;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x4E07;&#x4E8B;&#x5927;&#x5409;&#x4E86;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;jobs&#x547D;&#x4EE4;&#x6765;&#x5F97;&#x5230;&#x6240;&#x6709;&#x4F5C;&#x4E1A;&#x7684;&#x5217;&#x8868;&#x3002;&#x4F46;&#x662F;&#x5982;&#x679C;&#x5E76;&#x6CA1;&#x6709;&#x628A;&#x5F53;&#x524D;&#x547D;&#x4EE4;&#x4F5C;&#x4E3A;&#x4F5C;&#x4E1A;&#x6765;&#x8FD0;&#x884C;&#xFF0C;&#x5982;&#x4F55;&#x624D;&#x80FD;&#x5F97;&#x5230;&#x5B83;&#x7684;&#x4F5C;&#x4E1A;&#x53F7;&#x5462;&#xFF1F;&#x7B54;&#x6848;&#x5C31;&#x662F;&#x7528; CTRL-z&#xFF08;&#x6309;&#x4F4F;Ctrl&#x952E;&#x7684;&#x540C;&#x65F6;&#x6309;&#x4F4F;z&#x952E;&#xFF09;&#x4E86;&#xFF01;CTRL-z &#x7684;&#x7528;&#x9014;&#x5C31;&#x662F;&#x5C06;&#x5F53;&#x524D;&#x8FDB;&#x7A0B;&#x6302;&#x8D77;&#xFF08;Suspend&#xFF09;&#xFF0C;&#x7136;&#x540E;&#x6211;&#x4EEC;&#x5C31;&#x53EF;&#x4EE5;&#x7528;jobs&#x547D;&#x4EE4;&#x6765;&#x67E5;&#x8BE2;&#x5B83;&#x7684;&#x4F5C;&#x4E1A;&#x53F7;&#xFF0C;&#x518D;&#x7528;bg jobspec&#x6765;&#x5C06;&#x5B83;&#x653E;&#x5165;&#x540E;&#x53F0;&#x5E76;&#x7EE7;&#x7EED;&#x8FD0;&#x884C;&#x3002;&#x9700;&#x8981;&#x6CE8;&#x610F;&#x7684;&#x662F;&#xFF0C;&#x5982;&#x679C;&#x6302;&#x8D77;&#x4F1A;&#x5F71;&#x54CD;&#x5F53;&#x524D;&#x8FDB;&#x7A0B;&#x7684;&#x8FD0;&#x884C;&#x7ED3;&#x679C;&#xFF0C;&#x8BF7;&#x614E;&#x7528;&#x6B64;&#x65B9;&#x6CD5;&#x3002; disown &#x793A;&#x4F8B;1&#xFF08;&#x5982;&#x679C;&#x63D0;&#x4EA4;&#x547D;&#x4EE4;&#x65F6;&#x5DF2;&#x7ECF;&#x7528;&#x201C;&amp;&#x201D;&#x5C06;&#x547D;&#x4EE4;&#x653E;&#x5165;&#x540E;&#x53F0;&#x8FD0;&#x884C;&#xFF0C;&#x5219;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x4F7F;&#x7528;&#x201C;disown&#x201D;&#xFF09; $ cp -r testLargeFile largeFile &amp; [1] 4825 $ jobs [1]+ Running cp -i -r testLargeFile largeFile &amp; $ disown -h %1 $ ps -ef |grep largeFile root 4825 968 1 09:46 pts/4 00:00:00 cp -i -r testLargeFile largeFile root 4853 968 0 09:46 pts/4 00:00:00 grep largeFile $ logout disown &#x793A;&#x4F8B;2&#xFF08;&#x5982;&#x679C;&#x63D0;&#x4EA4;&#x547D;&#x4EE4;&#x65F6;&#x672A;&#x4F7F;&#x7528;&#x201C;&amp;&#x201D;&#x5C06;&#x547D;&#x4EE4;&#x653E;&#x5165;&#x540E;&#x53F0;&#x8FD0;&#x884C;&#xFF0C;&#x53EF;&#x4F7F;&#x7528; CTRL-z &#x548C;&#x201C;bg&#x201D;&#x5C06;&#x5176;&#x653E;&#x5165;&#x540E;&#x53F0;&#xFF0C;&#x518D;&#x4F7F;&#x7528;&#x201C;disown&#x201D;&#xFF09; $ cp -r testLargeFile largeFile2 [1]+ Stopped cp -i -r testLargeFile largeFile2 $ bg %1 [1]+ cp -i -r testLargeFile largeFile2 &amp; $ jobs [1]+ Running cp -i -r testLargeFile largeFile2 &amp; $ disown -h %1 $ ps -ef |grep largeFile2 root 5790 5577 1 10:04 pts/3 00:00:00 cp -i -r testLargeFile largeFile2 root 5824 5577 0 10:05 pts/3 00:00:00 grep largeFile2 screen&#x5982;&#x679C;&#x6709;&#x5927;&#x91CF;&#x8FD9;&#x79CD;&#x547D;&#x4EE4;&#x9700;&#x8981;&#x5728;&#x7A33;&#x5B9A;&#x7684;&#x540E;&#x53F0;&#x91CC;&#x8FD0;&#x884C;&#xFF0C;&#x5982;&#x4F55;&#x907F;&#x514D;&#x5BF9;&#x6BCF;&#x6761;&#x547D;&#x4EE4;&#x90FD;&#x505A;&#x8FD9;&#x6837;&#x7684;&#x64CD;&#x4F5C;&#x5462;&#xFF1F;&#x6B64;&#x65F6;&#x6700;&#x65B9;&#x4FBF;&#x7684;&#x65B9;&#x6CD5;&#x5C31;&#x662F; screen &#x4E86;&#x3002;&#x7B80;&#x5355;&#x7684;&#x8BF4;&#xFF0C;screen &#x63D0;&#x4F9B;&#x4E86; ANSI/VT100 &#x7684;&#x7EC8;&#x7AEF;&#x6A21;&#x62DF;&#x5668;&#xFF0C;&#x4F7F;&#x5B83;&#x80FD;&#x591F;&#x5728;&#x4E00;&#x4E2A;&#x771F;&#x5B9E;&#x7EC8;&#x7AEF;&#x4E0B;&#x8FD0;&#x884C;&#x591A;&#x4E2A;&#x5168;&#x5C4F;&#x7684;&#x4F2A;&#x7EC8;&#x7AEF;&#x3002;screen &#x7684;&#x53C2;&#x6570;&#x5F88;&#x591A;&#xFF0C;&#x5177;&#x6709;&#x5F88;&#x5F3A;&#x5927;&#x7684;&#x529F;&#x80FD;&#xFF0C;&#x6211;&#x4EEC;&#x5728;&#x6B64;&#x4EC5;&#x4ECB;&#x7ECD;&#x5176;&#x5E38;&#x7528;&#x529F;&#x80FD;&#x4EE5;&#x53CA;&#x7B80;&#x8981;&#x5206;&#x6790;&#x4E00;&#x4E0B;&#x4E3A;&#x4EC0;&#x4E48;&#x4F7F;&#x7528; screen &#x80FD;&#x591F;&#x907F;&#x514D; HUP &#x4FE1;&#x53F7;&#x7684;&#x5F71;&#x54CD;&#x3002;&#x4F7F;&#x7528; screen &#x5F88;&#x65B9;&#x4FBF;&#xFF0C;&#x6709;&#x4EE5;&#x4E0B;&#x51E0;&#x4E2A;&#x5E38;&#x7528;&#x9009;&#x9879;&#xFF1A; &#x7528;screen -dmS session name&#x6765;&#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;&#x5904;&#x4E8E;&#x65AD;&#x5F00;&#x6A21;&#x5F0F;&#x4E0B;&#x7684;&#x4F1A;&#x8BDD;&#xFF08;&#x5E76;&#x6307;&#x5B9A;&#x5176;&#x4F1A;&#x8BDD;&#x540D;&#xFF09;&#x3002; &#x7528;screen -list &#x6765;&#x5217;&#x51FA;&#x6240;&#x6709;&#x4F1A;&#x8BDD;&#x3002; &#x7528;screen -r session name&#x6765;&#x91CD;&#x65B0;&#x8FDE;&#x63A5;&#x6307;&#x5B9A;&#x4F1A;&#x8BDD;&#x3002; &#x7528;&#x5FEB;&#x6377;&#x952E;CTRL-a d &#x6765;&#x6682;&#x65F6;&#x65AD;&#x5F00;&#x5F53;&#x524D;&#x4F1A;&#x8BDD;&#x3002; screen &#x793A;&#x4F8B; $ screen -dmS Urumchi $ screen -list There is a screen on: 12842.Urumchi (Detached) 1 Socket in /tmp/screens/S-root. $ screen -r Urumchi &#x5F53;&#x6211;&#x4EEC;&#x7528;&#x201C;-r&#x201D;&#x8FDE;&#x63A5;&#x5230; screen &#x4F1A;&#x8BDD;&#x540E;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x53EF;&#x4EE5;&#x5728;&#x8FD9;&#x4E2A;&#x4F2A;&#x7EC8;&#x7AEF;&#x91CC;&#x9762;&#x4E3A;&#x6240;&#x6B32;&#x4E3A;&#xFF0C;&#x518D;&#x4E5F;&#x4E0D;&#x7528;&#x62C5;&#x5FC3; HUP &#x4FE1;&#x53F7;&#x4F1A;&#x5BF9;&#x6211;&#x4EEC;&#x7684;&#x8FDB;&#x7A0B;&#x9020;&#x6210;&#x5F71;&#x54CD;&#xFF0C;&#x4E5F;&#x4E0D;&#x7528;&#x7ED9;&#x6BCF;&#x4E2A;&#x547D;&#x4EE4;&#x524D;&#x90FD;&#x52A0;&#x4E0A;&#x201C;nohup&#x201D;&#x6216;&#x8005;&#x201C;setsid&#x201D;&#x4E86;&#x3002; &#x672A;&#x4F7F;&#x7528; screen &#x65F6;&#x65B0;&#x8FDB;&#x7A0B;&#x7684;&#x8FDB;&#x7A0B;&#x6811; $ ping www.google.com &amp; [1] 9499 $ pstree -H 9499 init&#x2500;&#x252C;&#x2500;Xvnc &#x251C;&#x2500;acpid &#x251C;&#x2500;atd &#x251C;&#x2500;2*[sendmail] &#x251C;&#x2500;sshd&#x2500;&#x252C;&#x2500;sshd&#x2500;&#x2500;&#x2500;bash&#x2500;&#x2500;&#x2500;pstree &#x2502; &#x2514;&#x2500;sshd&#x2500;&#x2500;&#x2500;bash&#x2500;&#x2500;&#x2500;ping &#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x770B;&#x51FA;&#xFF0C;&#x672A;&#x4F7F;&#x7528; screen &#x65F6;&#x6211;&#x4EEC;&#x6240;&#x5904;&#x7684; bash &#x662F; sshd &#x7684;&#x5B50;&#x8FDB;&#x7A0B;&#xFF0C;&#x5F53; ssh &#x65AD;&#x5F00;&#x8FDE;&#x63A5;&#x65F6;&#xFF0C;HUP &#x4FE1;&#x53F7;&#x81EA;&#x7136;&#x4F1A;&#x5F71;&#x54CD;&#x5230;&#x5B83;&#x4E0B;&#x9762;&#x7684;&#x6240;&#x6709;&#x5B50;&#x8FDB;&#x7A0B;&#xFF08;&#x5305;&#x62EC;&#x6211;&#x4EEC;&#x65B0;&#x5EFA;&#x7ACB;&#x7684; ping &#x8FDB;&#x7A0B;&#xFF09;&#x3002; &#x4F7F;&#x7528;&#x4E86; screen &#x540E;&#x65B0;&#x8FDB;&#x7A0B;&#x7684;&#x8FDB;&#x7A0B;&#x6811; $screen -r Urumchi $ ping www.ibm.com &amp; [1] 9488 $ pstree -H 9488 init&#x2500;&#x252C;&#x2500;Xvnc &#x251C;&#x2500;acpid &#x251C;&#x2500;atd &#x251C;&#x2500;screen&#x2500;&#x2500;&#x2500;bash&#x2500;&#x2500;&#x2500;ping &#x251C;&#x2500;2*[sendmail] &#x800C;&#x4F7F;&#x7528;&#x4E86; screen &#x540E;&#x5C31;&#x4E0D;&#x540C;&#x4E86;&#xFF0C;&#x6B64;&#x65F6; bash &#x662F; screen &#x7684;&#x5B50;&#x8FDB;&#x7A0B;&#xFF0C;&#x800C; screen &#x662F; init&#xFF08;PID&#x4E3A;1&#xFF09;&#x7684;&#x5B50;&#x8FDB;&#x7A0B;&#x3002;&#x90A3;&#x4E48;&#x5F53; ssh &#x65AD;&#x5F00;&#x8FDE;&#x63A5;&#x65F6;&#xFF0C;HUP &#x4FE1;&#x53F7;&#x81EA;&#x7136;&#x4E0D;&#x4F1A;&#x5F71;&#x54CD;&#x5230; screen &#x4E0B;&#x9762;&#x7684;&#x5B50;&#x8FDB;&#x7A0B;&#x4E86;&#x3002; &#x53C2;&#x8003;&#x94FE;&#x63A5;http://www.ibm.com/developerworks/cn/linux/l-cn-nohup/","tags":"python c"},{"title":"python-jieba-分词----官方文档截取","url":"/2016/04/01/python-jieba-分词----官方文档截取/","text":"jieba&#x201C;&#x7ED3;&#x5DF4;&#x201D;&#x4E2D;&#x6587;&#x5206;&#x8BCD;&#xFF1A;&#x505A;&#x6700;&#x597D;&#x7684; Python &#x4E2D;&#x6587;&#x5206;&#x8BCD;&#x7EC4;&#x4EF6; &#x7279;&#x70B9; &#x652F;&#x6301;&#x4E09;&#x79CD;&#x5206;&#x8BCD;&#x6A21;&#x5F0F;&#xFF1A; &#x7CBE;&#x786E;&#x6A21;&#x5F0F;&#xFF0C;&#x8BD5;&#x56FE;&#x5C06;&#x53E5;&#x5B50;&#x6700;&#x7CBE;&#x786E;&#x5730;&#x5207;&#x5F00;&#xFF0C;&#x9002;&#x5408;&#x6587;&#x672C;&#x5206;&#x6790;&#xFF1B; &#x5168;&#x6A21;&#x5F0F;&#xFF0C;&#x628A;&#x53E5;&#x5B50;&#x4E2D;&#x6240;&#x6709;&#x7684;&#x53EF;&#x4EE5;&#x6210;&#x8BCD;&#x7684;&#x8BCD;&#x8BED;&#x90FD;&#x626B;&#x63CF;&#x51FA;&#x6765;, &#x901F;&#x5EA6;&#x975E;&#x5E38;&#x5FEB;&#xFF0C;&#x4F46;&#x662F;&#x4E0D;&#x80FD;&#x89E3;&#x51B3;&#x6B67;&#x4E49;&#xFF1B; &#x641C;&#x7D22;&#x5F15;&#x64CE;&#x6A21;&#x5F0F;&#xFF0C;&#x5728;&#x7CBE;&#x786E;&#x6A21;&#x5F0F;&#x7684;&#x57FA;&#x7840;&#x4E0A;&#xFF0C;&#x5BF9;&#x957F;&#x8BCD;&#x518D;&#x6B21;&#x5207;&#x5206;&#xFF0C;&#x63D0;&#x9AD8;&#x53EC;&#x56DE;&#x7387;&#xFF0C;&#x9002;&#x5408;&#x7528;&#x4E8E;&#x641C;&#x7D22;&#x5F15;&#x64CE;&#x5206;&#x8BCD;&#x3002; &#x652F;&#x6301;&#x7E41;&#x4F53;&#x5206;&#x8BCD; &#x652F;&#x6301;&#x81EA;&#x5B9A;&#x4E49;&#x8BCD;&#x5178; &#x5B89;&#x88C5;&#x8BF4;&#x660E;&#x4EE3;&#x7801;&#x5BF9; Python 2/3 &#x5747;&#x517C;&#x5BB9; &#x5168;&#x81EA;&#x52A8;&#x5B89;&#x88C5;&#xFF1A;easy_install jieba &#x6216;&#x8005; pip install jieba / pip3 install jieba &#x534A;&#x81EA;&#x52A8;&#x5B89;&#x88C5;&#xFF1A;&#x5148;&#x4E0B;&#x8F7D; http://pypi.python.org/pypi/jieba/ &#xFF0C;&#x89E3;&#x538B;&#x540E;&#x8FD0;&#x884C; python setup.py install &#x624B;&#x52A8;&#x5B89;&#x88C5;&#xFF1A;&#x5C06; jieba &#x76EE;&#x5F55;&#x653E;&#x7F6E;&#x4E8E;&#x5F53;&#x524D;&#x76EE;&#x5F55;&#x6216;&#x8005; site-packages &#x76EE;&#x5F55; &#x901A;&#x8FC7; import jieba &#x6765;&#x5F15;&#x7528; &#x7B97;&#x6CD5; &#x57FA;&#x4E8E;&#x524D;&#x7F00;&#x8BCD;&#x5178;&#x5B9E;&#x73B0;&#x9AD8;&#x6548;&#x7684;&#x8BCD;&#x56FE;&#x626B;&#x63CF;&#xFF0C;&#x751F;&#x6210;&#x53E5;&#x5B50;&#x4E2D;&#x6C49;&#x5B57;&#x6240;&#x6709;&#x53EF;&#x80FD;&#x6210;&#x8BCD;&#x60C5;&#x51B5;&#x6240;&#x6784;&#x6210;&#x7684;&#x6709;&#x5411;&#x65E0;&#x73AF;&#x56FE; (DAG) &#x91C7;&#x7528;&#x4E86;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x67E5;&#x627E;&#x6700;&#x5927;&#x6982;&#x7387;&#x8DEF;&#x5F84;, &#x627E;&#x51FA;&#x57FA;&#x4E8E;&#x8BCD;&#x9891;&#x7684;&#x6700;&#x5927;&#x5207;&#x5206;&#x7EC4;&#x5408; &#x5BF9;&#x4E8E;&#x672A;&#x767B;&#x5F55;&#x8BCD;&#xFF0C;&#x91C7;&#x7528;&#x4E86;&#x57FA;&#x4E8E;&#x6C49;&#x5B57;&#x6210;&#x8BCD;&#x80FD;&#x529B;&#x7684; HMM &#x6A21;&#x578B;&#xFF0C;&#x4F7F;&#x7528;&#x4E86; Viterbi &#x7B97;&#x6CD5; &#x4E3B;&#x8981;&#x529F;&#x80FD;&#x5206;&#x8BCD;jieba.cut &#x65B9;&#x6CD5;&#x63A5;&#x53D7;&#x4E09;&#x4E2A;&#x8F93;&#x5165;&#x53C2;&#x6570;: &#x9700;&#x8981;&#x5206;&#x8BCD;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#xFF1B;cut_all &#x53C2;&#x6570;&#x7528;&#x6765;&#x63A7;&#x5236;&#x662F;&#x5426;&#x91C7;&#x7528;&#x5168;&#x6A21;&#x5F0F;&#xFF1B;HMM &#x53C2;&#x6570;&#x7528;&#x6765;&#x63A7;&#x5236;&#x662F;&#x5426;&#x4F7F;&#x7528; HMM &#x6A21;&#x578B;jieba.cut_for_search &#x65B9;&#x6CD5;&#x63A5;&#x53D7;&#x4E24;&#x4E2A;&#x53C2;&#x6570;&#xFF1A;&#x9700;&#x8981;&#x5206;&#x8BCD;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#xFF1B;&#x662F;&#x5426;&#x4F7F;&#x7528; HMM &#x6A21;&#x578B;&#x3002;&#x8BE5;&#x65B9;&#x6CD5;&#x9002;&#x5408;&#x7528;&#x4E8E;&#x641C;&#x7D22;&#x5F15;&#x64CE;&#x6784;&#x5EFA;&#x5012;&#x6392;&#x7D22;&#x5F15;&#x7684;&#x5206;&#x8BCD;&#xFF0C;&#x7C92;&#x5EA6;&#x6BD4;&#x8F83;&#x7EC6;&#x5F85;&#x5206;&#x8BCD;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x53EF;&#x4EE5;&#x662F; unicode &#x6216; UTF-8 &#x5B57;&#x7B26;&#x4E32;&#x3001;GBK &#x5B57;&#x7B26;&#x4E32;&#x3002;&#x6CE8;&#x610F;&#xFF1A;&#x4E0D;&#x5EFA;&#x8BAE;&#x76F4;&#x63A5;&#x8F93;&#x5165; GBK &#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x53EF;&#x80FD;&#x65E0;&#x6CD5;&#x9884;&#x6599;&#x5730;&#x9519;&#x8BEF;&#x89E3;&#x7801;&#x6210; UTF-8jieba.cut &#x4EE5;&#x53CA; jieba.cut_for_search &#x8FD4;&#x56DE;&#x7684;&#x7ED3;&#x6784;&#x90FD;&#x662F;&#x4E00;&#x4E2A;&#x53EF;&#x8FED;&#x4EE3;&#x7684; generator&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528; for &#x5FAA;&#x73AF;&#x6765;&#x83B7;&#x5F97;&#x5206;&#x8BCD;&#x540E;&#x5F97;&#x5230;&#x7684;&#x6BCF;&#x4E00;&#x4E2A;&#x8BCD;&#x8BED;(unicode)&#xFF0C;&#x6216;&#x8005;&#x7528; jieba.lcut &#x4EE5;&#x53CA; jieba.lcut_for_search &#x76F4;&#x63A5;&#x8FD4;&#x56DE; listjieba.Tokenizer(dictionary=DEFAULT_DICT) &#x65B0;&#x5EFA;&#x81EA;&#x5B9A;&#x4E49;&#x5206;&#x8BCD;&#x5668;&#xFF0C;&#x53EF;&#x7528;&#x4E8E;&#x540C;&#x65F6;&#x4F7F;&#x7528;&#x4E0D;&#x540C;&#x8BCD;&#x5178;&#x3002;jieba.dt &#x4E3A;&#x9ED8;&#x8BA4;&#x5206;&#x8BCD;&#x5668;&#xFF0C;&#x6240;&#x6709;&#x5168;&#x5C40;&#x5206;&#x8BCD;&#x76F8;&#x5173;&#x51FD;&#x6570;&#x90FD;&#x662F;&#x8BE5;&#x5206;&#x8BCD;&#x5668;&#x7684;&#x6620;&#x5C04;&#x3002; &#x4EE3;&#x7801;&#x793A;&#x4F8B; # encoding=utf-8 import jieba seg_list = jieba.cut(&quot;&#x6211;&#x6765;&#x5230;&#x5317;&#x4EAC;&#x6E05;&#x534E;&#x5927;&#x5B66;&quot;, cut_all=True) print(&quot;Full Mode: &quot; + &quot;/ &quot;.join(seg_list)) # &#x5168;&#x6A21;&#x5F0F; seg_list = jieba.cut(&quot;&#x6211;&#x6765;&#x5230;&#x5317;&#x4EAC;&#x6E05;&#x534E;&#x5927;&#x5B66;&quot;, cut_all=False) print(&quot;Default Mode: &quot; + &quot;/ &quot;.join(seg_list)) # &#x7CBE;&#x786E;&#x6A21;&#x5F0F; seg_list = jieba.cut(&quot;&#x4ED6;&#x6765;&#x5230;&#x4E86;&#x7F51;&#x6613;&#x676D;&#x7814;&#x5927;&#x53A6;&quot;) # &#x9ED8;&#x8BA4;&#x662F;&#x7CBE;&#x786E;&#x6A21;&#x5F0F; print(&quot;, &quot;.join(seg_list)) seg_list = jieba.cut_for_search(&quot;&#x5C0F;&#x660E;&#x7855;&#x58EB;&#x6BD5;&#x4E1A;&#x4E8E;&#x4E2D;&#x56FD;&#x79D1;&#x5B66;&#x9662;&#x8BA1;&#x7B97;&#x6240;&#xFF0C;&#x540E;&#x5728;&#x65E5;&#x672C;&#x4EAC;&#x90FD;&#x5927;&#x5B66;&#x6DF1;&#x9020;&quot;) # &#x641C;&#x7D22;&#x5F15;&#x64CE;&#x6A21;&#x5F0F; print(&quot;, &quot;.join(seg_list)) &#x8F93;&#x51FA;: &#x3010;&#x5168;&#x6A21;&#x5F0F;&#x3011;: &#x6211;/ &#x6765;&#x5230;/ &#x5317;&#x4EAC;/ &#x6E05;&#x534E;/ &#x6E05;&#x534E;&#x5927;&#x5B66;/ &#x534E;&#x5927;/ &#x5927;&#x5B66; &#x3010;&#x7CBE;&#x786E;&#x6A21;&#x5F0F;&#x3011;: &#x6211;/ &#x6765;&#x5230;/ &#x5317;&#x4EAC;/ &#x6E05;&#x534E;&#x5927;&#x5B66; &#x3010;&#x65B0;&#x8BCD;&#x8BC6;&#x522B;&#x3011;&#xFF1A;&#x4ED6;, &#x6765;&#x5230;, &#x4E86;, &#x7F51;&#x6613;, &#x676D;&#x7814;, &#x5927;&#x53A6; (&#x6B64;&#x5904;&#xFF0C;&#x201C;&#x676D;&#x7814;&#x201D;&#x5E76;&#x6CA1;&#x6709;&#x5728;&#x8BCD;&#x5178;&#x4E2D;&#xFF0C;&#x4F46;&#x662F;&#x4E5F;&#x88AB;Viterbi&#x7B97;&#x6CD5;&#x8BC6;&#x522B;&#x51FA;&#x6765;&#x4E86;) &#x3010;&#x641C;&#x7D22;&#x5F15;&#x64CE;&#x6A21;&#x5F0F;&#x3011;&#xFF1A; &#x5C0F;&#x660E;, &#x7855;&#x58EB;, &#x6BD5;&#x4E1A;, &#x4E8E;, &#x4E2D;&#x56FD;, &#x79D1;&#x5B66;, &#x5B66;&#x9662;, &#x79D1;&#x5B66;&#x9662;, &#x4E2D;&#x56FD;&#x79D1;&#x5B66;&#x9662;, &#x8BA1;&#x7B97;, &#x8BA1;&#x7B97;&#x6240;, &#x540E;, &#x5728;, &#x65E5;&#x672C;, &#x4EAC;&#x90FD;, &#x5927;&#x5B66;, &#x65E5;&#x672C;&#x4EAC;&#x90FD;&#x5927;&#x5B66;, &#x6DF1;&#x9020; &#x6DFB;&#x52A0;&#x81EA;&#x5B9A;&#x4E49;&#x8BCD;&#x5178;&#x8F7D;&#x5165;&#x8BCD;&#x5178; &#x5F00;&#x53D1;&#x8005;&#x53EF;&#x4EE5;&#x6307;&#x5B9A;&#x81EA;&#x5DF1;&#x81EA;&#x5B9A;&#x4E49;&#x7684;&#x8BCD;&#x5178;&#xFF0C;&#x4EE5;&#x4FBF;&#x5305;&#x542B; jieba &#x8BCD;&#x5E93;&#x91CC;&#x6CA1;&#x6709;&#x7684;&#x8BCD;&#x3002;&#x867D;&#x7136; jieba &#x6709;&#x65B0;&#x8BCD;&#x8BC6;&#x522B;&#x80FD;&#x529B;&#xFF0C;&#x4F46;&#x662F;&#x81EA;&#x884C;&#x6DFB;&#x52A0;&#x65B0;&#x8BCD;&#x53EF;&#x4EE5;&#x4FDD;&#x8BC1;&#x66F4;&#x9AD8;&#x7684;&#x6B63;&#x786E;&#x7387;&#x7528;&#x6CD5;&#xFF1A; jieba.load_userdict(file_name) # file_name &#x4E3A;&#x6587;&#x4EF6;&#x7C7B;&#x5BF9;&#x8C61;&#x6216;&#x81EA;&#x5B9A;&#x4E49;&#x8BCD;&#x5178;&#x7684;&#x8DEF;&#x5F84; &#x8BCD;&#x5178;&#x683C;&#x5F0F;&#x548C; dict.txt &#x4E00;&#x6837;&#xFF0C;&#x4E00;&#x4E2A;&#x8BCD;&#x5360;&#x4E00;&#x884C;&#xFF1B;&#x6BCF;&#x4E00;&#x884C;&#x5206;&#x4E09;&#x90E8;&#x5206;&#xFF1A;&#x8BCD;&#x8BED;&#x3001;&#x8BCD;&#x9891;&#xFF08;&#x53EF;&#x7701;&#x7565;&#xFF09;&#x3001;&#x8BCD;&#x6027;&#xFF08;&#x53EF;&#x7701;&#x7565;&#xFF09;&#xFF0C;&#x7528;&#x7A7A;&#x683C;&#x9694;&#x5F00;&#xFF0C;&#x987A;&#x5E8F;&#x4E0D;&#x53EF;&#x98A0;&#x5012;&#x3002;file_name &#x82E5;&#x4E3A;&#x8DEF;&#x5F84;&#x6216;&#x4E8C;&#x8FDB;&#x5236;&#x65B9;&#x5F0F;&#x6253;&#x5F00;&#x7684;&#x6587;&#x4EF6;&#xFF0C;&#x5219;&#x6587;&#x4EF6;&#x5FC5;&#x987B;&#x4E3A; UTF-8 &#x7F16;&#x7801;&#x3002;&#x8BCD;&#x9891;&#x7701;&#x7565;&#x65F6;&#x4F7F;&#x7528;&#x81EA;&#x52A8;&#x8BA1;&#x7B97;&#x7684;&#x80FD;&#x4FDD;&#x8BC1;&#x5206;&#x51FA;&#x8BE5;&#x8BCD;&#x7684;&#x8BCD;&#x9891;&#x3002; &#x4F8B;&#x5982;&#xFF1A; &#x521B;&#x65B0;&#x529E; 3 i&#x4E91;&#x8BA1;&#x7B97; 5&#x51F1;&#x7279;&#x7433; nz&#x53F0;&#x4E2D;&#x66F4;&#x6539;&#x5206;&#x8BCD;&#x5668;&#xFF08;&#x9ED8;&#x8BA4;&#x4E3A; jieba.dt&#xFF09;&#x7684; tmp_dir &#x548C; cache_file &#x5C5E;&#x6027;&#xFF0C;&#x53EF;&#x5206;&#x522B;&#x6307;&#x5B9A;&#x7F13;&#x5B58;&#x6587;&#x4EF6;&#x6240;&#x5728;&#x7684;&#x6587;&#x4EF6;&#x5939;&#x53CA;&#x5176;&#x6587;&#x4EF6;&#x540D;&#xFF0C;&#x7528;&#x4E8E;&#x53D7;&#x9650;&#x7684;&#x6587;&#x4EF6;&#x7CFB;&#x7EDF;&#x3002; &#x8303;&#x4F8B;&#xFF1A; &#x81EA;&#x5B9A;&#x4E49;&#x8BCD;&#x5178;&#xFF1A;https://github.com/fxsjy/jieba/blob/master/test/userdict.txt &#x7528;&#x6CD5;&#x793A;&#x4F8B;&#xFF1A;https://github.com/fxsjy/jieba/blob/master/test/test_userdict.py &#x4E4B;&#x524D;&#xFF1A; &#x674E;&#x5C0F;&#x798F; / &#x662F; / &#x521B;&#x65B0; / &#x529E; / &#x4E3B;&#x4EFB; / &#x4E5F; / &#x662F; / &#x4E91; / &#x8BA1;&#x7B97; / &#x65B9;&#x9762; / &#x7684; / &#x4E13;&#x5BB6; / &#x52A0;&#x8F7D;&#x81EA;&#x5B9A;&#x4E49;&#x8BCD;&#x5E93;&#x540E;&#xFF1A;&#x3000;&#x674E;&#x5C0F;&#x798F; / &#x662F; / &#x521B;&#x65B0;&#x529E; / &#x4E3B;&#x4EFB; / &#x4E5F; / &#x662F; / &#x4E91;&#x8BA1;&#x7B97; / &#x65B9;&#x9762; / &#x7684; / &#x4E13;&#x5BB6; / &#x8C03;&#x6574;&#x8BCD;&#x5178; &#x4F7F;&#x7528; add_word(word, freq=None, tag=None) &#x548C; del_word(word) &#x53EF;&#x5728;&#x7A0B;&#x5E8F;&#x4E2D;&#x52A8;&#x6001;&#x4FEE;&#x6539;&#x8BCD;&#x5178;&#x3002;&#x4F7F;&#x7528; suggest_freq(segment, tune=True) &#x53EF;&#x8C03;&#x8282;&#x5355;&#x4E2A;&#x8BCD;&#x8BED;&#x7684;&#x8BCD;&#x9891;&#xFF0C;&#x4F7F;&#x5176;&#x80FD;&#xFF08;&#x6216;&#x4E0D;&#x80FD;&#xFF09;&#x88AB;&#x5206;&#x51FA;&#x6765;&#x3002; &#x6CE8;&#x610F;&#xFF1A;&#x81EA;&#x52A8;&#x8BA1;&#x7B97;&#x7684;&#x8BCD;&#x9891;&#x5728;&#x4F7F;&#x7528; HMM &#x65B0;&#x8BCD;&#x53D1;&#x73B0;&#x529F;&#x80FD;&#x65F6;&#x53EF;&#x80FD;&#x65E0;&#x6548;&#x3002; &#x4EE3;&#x7801;&#x793A;&#x4F8B;&#xFF1A; &gt;&gt;&gt; print(&apos;/&apos;.join(jieba.cut(&apos;&#x5982;&#x679C;&#x653E;&#x5230;post&#x4E2D;&#x5C06;&#x51FA;&#x9519;&#x3002;&apos;, HMM=False))) &#x5982;&#x679C;/&#x653E;&#x5230;/post/&#x4E2D;&#x5C06;/&#x51FA;&#x9519;/&#x3002; &gt;&gt;&gt; jieba.suggest_freq((&apos;&#x4E2D;&apos;, &apos;&#x5C06;&apos;), True) 494 &gt;&gt;&gt; print(&apos;/&apos;.join(jieba.cut(&apos;&#x5982;&#x679C;&#x653E;&#x5230;post&#x4E2D;&#x5C06;&#x51FA;&#x9519;&#x3002;&apos;, HMM=False))) &#x5982;&#x679C;/&#x653E;&#x5230;/post/&#x4E2D;/&#x5C06;/&#x51FA;&#x9519;/&#x3002; &gt;&gt;&gt; print(&apos;/&apos;.join(jieba.cut(&apos;&#x300C;&#x53F0;&#x4E2D;&#x300D;&#x6B63;&#x786E;&#x5E94;&#x8BE5;&#x4E0D;&#x4F1A;&#x88AB;&#x5207;&#x5F00;&apos;, HMM=False))) &#x300C;/&#x53F0;/&#x4E2D;/&#x300D;/&#x6B63;&#x786E;/&#x5E94;&#x8BE5;/&#x4E0D;&#x4F1A;/&#x88AB;/&#x5207;&#x5F00; &gt;&gt;&gt; jieba.suggest_freq(&apos;&#x53F0;&#x4E2D;&apos;, True) 69 &gt;&gt;&gt; print(&apos;/&apos;.join(jieba.cut(&apos;&#x300C;&#x53F0;&#x4E2D;&#x300D;&#x6B63;&#x786E;&#x5E94;&#x8BE5;&#x4E0D;&#x4F1A;&#x88AB;&#x5207;&#x5F00;&apos;, HMM=False))) &#x300C;/&#x53F0;&#x4E2D;/&#x300D;/&#x6B63;&#x786E;/&#x5E94;&#x8BE5;/&#x4E0D;&#x4F1A;/&#x88AB;/&#x5207;&#x5F00; &quot;&#x901A;&#x8FC7;&#x7528;&#x6237;&#x81EA;&#x5B9A;&#x4E49;&#x8BCD;&#x5178;&#x6765;&#x589E;&#x5F3A;&#x6B67;&#x4E49;&#x7EA0;&#x9519;&#x80FD;&#x529B;&quot; --- https://github.com/fxsjy/jieba/issues/14 &#x5173;&#x952E;&#x8BCD;&#x63D0;&#x53D6;&#x57FA;&#x4E8E; TF-IDF &#x7B97;&#x6CD5;&#x7684;&#x5173;&#x952E;&#x8BCD;&#x62BD;&#x53D6; import jieba.analyse jieba.analyse.extract_tags(sentence, topK=20, withWeight=False, allowPOS=()) sentence &#x4E3A;&#x5F85;&#x63D0;&#x53D6;&#x7684;&#x6587;&#x672C;topK &#x4E3A;&#x8FD4;&#x56DE;&#x51E0;&#x4E2A; TF/IDF &#x6743;&#x91CD;&#x6700;&#x5927;&#x7684;&#x5173;&#x952E;&#x8BCD;&#xFF0C;&#x9ED8;&#x8BA4;&#x503C;&#x4E3A; 20withWeight &#x4E3A;&#x662F;&#x5426;&#x4E00;&#x5E76;&#x8FD4;&#x56DE;&#x5173;&#x952E;&#x8BCD;&#x6743;&#x91CD;&#x503C;&#xFF0C;&#x9ED8;&#x8BA4;&#x503C;&#x4E3A; FalseallowPOS &#x4EC5;&#x5305;&#x62EC;&#x6307;&#x5B9A;&#x8BCD;&#x6027;&#x7684;&#x8BCD;&#xFF0C;&#x9ED8;&#x8BA4;&#x503C;&#x4E3A;&#x7A7A;&#xFF0C;&#x5373;&#x4E0D;&#x7B5B;&#x9009;jieba.analyse.TFIDF(idf_path=None) &#x65B0;&#x5EFA; TFIDF &#x5B9E;&#x4F8B;&#xFF0C;idf_path &#x4E3A; IDF &#x9891;&#x7387;&#x6587;&#x4EF6; &#x4EE3;&#x7801;&#x793A;&#x4F8B; &#xFF08;&#x5173;&#x952E;&#x8BCD;&#x63D0;&#x53D6;&#xFF09; https://github.com/fxsjy/jieba/blob/master/test/extract_tags.py &#x5173;&#x952E;&#x8BCD;&#x63D0;&#x53D6;&#x6240;&#x4F7F;&#x7528;&#x9006;&#x5411;&#x6587;&#x4EF6;&#x9891;&#x7387;&#xFF08;IDF&#xFF09;&#x6587;&#x672C;&#x8BED;&#x6599;&#x5E93;&#x53EF;&#x4EE5;&#x5207;&#x6362;&#x6210;&#x81EA;&#x5B9A;&#x4E49;&#x8BED;&#x6599;&#x5E93;&#x7684;&#x8DEF;&#x5F84; &#x7528;&#x6CD5;&#xFF1A; jieba.analyse.set_idf_path(file_name) # file_name&#x4E3A;&#x81EA;&#x5B9A;&#x4E49;&#x8BED;&#x6599;&#x5E93;&#x7684;&#x8DEF;&#x5F84; &#x81EA;&#x5B9A;&#x4E49;&#x8BED;&#x6599;&#x5E93;&#x793A;&#x4F8B;&#xFF1A;https://github.com/fxsjy/jieba/blob/master/extra_dict/idf.txt.big&#x7528;&#x6CD5;&#x793A;&#x4F8B;&#xFF1A;https://github.com/fxsjy/jieba/blob/master/test/extract_tags_idfpath.py &#x5173;&#x952E;&#x8BCD;&#x63D0;&#x53D6;&#x6240;&#x4F7F;&#x7528;&#x505C;&#x6B62;&#x8BCD;&#xFF08;Stop Words&#xFF09;&#x6587;&#x672C;&#x8BED;&#x6599;&#x5E93;&#x53EF;&#x4EE5;&#x5207;&#x6362;&#x6210;&#x81EA;&#x5B9A;&#x4E49;&#x8BED;&#x6599;&#x5E93;&#x7684;&#x8DEF;&#x5F84; &#x7528;&#x6CD5;&#xFF1A; jieba.analyse.set_stop_words(file_name) # file_name&#x4E3A;&#x81EA;&#x5B9A;&#x4E49;&#x8BED;&#x6599;&#x5E93;&#x7684;&#x8DEF;&#x5F84; &#x81EA;&#x5B9A;&#x4E49;&#x8BED;&#x6599;&#x5E93;&#x793A;&#x4F8B;&#xFF1A;https://github.com/fxsjy/jieba/blob/master/extra_dict/stop_words.txt&#x7528;&#x6CD5;&#x793A;&#x4F8B;&#xFF1A;https://github.com/fxsjy/jieba/blob/master/test/extract_tags_stop_words.py &#x5173;&#x952E;&#x8BCD;&#x4E00;&#x5E76;&#x8FD4;&#x56DE;&#x5173;&#x952E;&#x8BCD;&#x6743;&#x91CD;&#x503C;&#x793A;&#x4F8B; &#x7528;&#x6CD5;&#x793A;&#x4F8B;&#xFF1A;https://github.com/fxsjy/jieba/blob/master/test/extract_tags_with_weight.py &#x57FA;&#x4E8E; TextRank &#x7B97;&#x6CD5;&#x7684;&#x5173;&#x952E;&#x8BCD;&#x62BD;&#x53D6; jieba.analyse.textrank(sentence, topK=20, withWeight=False, allowPOS=(&apos;ns&apos;, &apos;n&apos;, &apos;vn&apos;, &apos;v&apos;)) #&#x76F4;&#x63A5;&#x4F7F;&#x7528;&#xFF0C;&#x63A5;&#x53E3;&#x76F8;&#x540C;&#xFF0C;&#x6CE8;&#x610F;&#x9ED8;&#x8BA4;&#x8FC7;&#x6EE4;&#x8BCD;&#x6027;&#x3002; jieba.analyse.TextRank() #&#x65B0;&#x5EFA;&#x81EA;&#x5B9A;&#x4E49; TextRank &#x5B9E;&#x4F8B; &#x7B97;&#x6CD5;&#x8BBA;&#x6587;&#xFF1A; TextRank: Bringing Order into Texts &#x57FA;&#x672C;&#x601D;&#x60F3;: &#x5C06;&#x5F85;&#x62BD;&#x53D6;&#x5173;&#x952E;&#x8BCD;&#x7684;&#x6587;&#x672C;&#x8FDB;&#x884C;&#x5206;&#x8BCD; &#x4EE5;&#x56FA;&#x5B9A;&#x7A97;&#x53E3;&#x5927;&#x5C0F;(&#x9ED8;&#x8BA4;&#x4E3A;5&#xFF0C;&#x901A;&#x8FC7;span&#x5C5E;&#x6027;&#x8C03;&#x6574;)&#xFF0C;&#x8BCD;&#x4E4B;&#x95F4;&#x7684;&#x5171;&#x73B0;&#x5173;&#x7CFB;&#xFF0C;&#x6784;&#x5EFA;&#x56FE; &#x8BA1;&#x7B97;&#x56FE;&#x4E2D;&#x8282;&#x70B9;&#x7684;PageRank&#xFF0C;&#x6CE8;&#x610F;&#x662F;&#x65E0;&#x5411;&#x5E26;&#x6743;&#x56FE; &#x4F7F;&#x7528;&#x793A;&#x4F8B;: &#x89C1; test/demo.py &#x8BCD;&#x6027;&#x6807;&#x6CE8;jieba.posseg.POSTokenizer(tokenizer=None) &#x65B0;&#x5EFA;&#x81EA;&#x5B9A;&#x4E49;&#x5206;&#x8BCD;&#x5668;&#xFF0C;tokenizer &#x53C2;&#x6570;&#x53EF;&#x6307;&#x5B9A;&#x5185;&#x90E8;&#x4F7F;&#x7528;&#x7684; jieba.Tokenizer &#x5206;&#x8BCD;&#x5668;&#x3002;jieba.posseg.dt &#x4E3A;&#x9ED8;&#x8BA4;&#x8BCD;&#x6027;&#x6807;&#x6CE8;&#x5206;&#x8BCD;&#x5668;&#x3002;&#x6807;&#x6CE8;&#x53E5;&#x5B50;&#x5206;&#x8BCD;&#x540E;&#x6BCF;&#x4E2A;&#x8BCD;&#x7684;&#x8BCD;&#x6027;&#xFF0C;&#x91C7;&#x7528;&#x548C; ictclas &#x517C;&#x5BB9;&#x7684;&#x6807;&#x8BB0;&#x6CD5;&#x3002;&#x7528;&#x6CD5;&#x793A;&#x4F8B; &gt;&gt;&gt; import jieba.posseg as pseg &gt;&gt;&gt; words = pseg.cut(&quot;&#x6211;&#x7231;&#x5317;&#x4EAC;&#x5929;&#x5B89;&#x95E8;&quot;) &gt;&gt;&gt; for word, flag in words: ... print(&apos;%s %s&apos; % (word, flag)) ... &#x6211; r &#x7231; v &#x5317;&#x4EAC; ns &#x5929;&#x5B89;&#x95E8; ns &#x5E76;&#x884C;&#x5206;&#x8BCD;&#x539F;&#x7406;&#xFF1A;&#x5C06;&#x76EE;&#x6807;&#x6587;&#x672C;&#x6309;&#x884C;&#x5206;&#x9694;&#x540E;&#xFF0C;&#x628A;&#x5404;&#x884C;&#x6587;&#x672C;&#x5206;&#x914D;&#x5230;&#x591A;&#x4E2A; Python &#x8FDB;&#x7A0B;&#x5E76;&#x884C;&#x5206;&#x8BCD;&#xFF0C;&#x7136;&#x540E;&#x5F52;&#x5E76;&#x7ED3;&#x679C;&#xFF0C;&#x4ECE;&#x800C;&#x83B7;&#x5F97;&#x5206;&#x8BCD;&#x901F;&#x5EA6;&#x7684;&#x53EF;&#x89C2;&#x63D0;&#x5347;&#x57FA;&#x4E8E; python &#x81EA;&#x5E26;&#x7684; multiprocessing &#x6A21;&#x5757;&#xFF0C;&#x76EE;&#x524D;&#x6682;&#x4E0D;&#x652F;&#x6301; Windows&#x7528;&#x6CD5;&#xFF1A; jieba.enable_parallel(4) # &#x5F00;&#x542F;&#x5E76;&#x884C;&#x5206;&#x8BCD;&#x6A21;&#x5F0F;&#xFF0C;&#x53C2;&#x6570;&#x4E3A;&#x5E76;&#x884C;&#x8FDB;&#x7A0B;&#x6570; jieba.disable_parallel() # &#x5173;&#x95ED;&#x5E76;&#x884C;&#x5206;&#x8BCD;&#x6A21;&#x5F0F; &#x4F8B;&#x5B50;&#xFF1A;https://github.com/fxsjy/jieba/blob/master/test/parallel/test_file.py &#x5B9E;&#x9A8C;&#x7ED3;&#x679C;&#xFF1A;&#x5728; 4 &#x6838; 3.4GHz Linux &#x673A;&#x5668;&#x4E0A;&#xFF0C;&#x5BF9;&#x91D1;&#x5EB8;&#x5168;&#x96C6;&#x8FDB;&#x884C;&#x7CBE;&#x786E;&#x5206;&#x8BCD;&#xFF0C;&#x83B7;&#x5F97;&#x4E86; 1MB/s &#x7684;&#x901F;&#x5EA6;&#xFF0C;&#x662F;&#x5355;&#x8FDB;&#x7A0B;&#x7248;&#x7684; 3.3 &#x500D;&#x3002; &#x6CE8;&#x610F;&#xFF1A;&#x5E76;&#x884C;&#x5206;&#x8BCD;&#x4EC5;&#x652F;&#x6301;&#x9ED8;&#x8BA4;&#x5206;&#x8BCD;&#x5668; jieba.dt &#x548C; jieba.posseg.dt&#x3002; Tokenize&#xFF1A;&#x8FD4;&#x56DE;&#x8BCD;&#x8BED;&#x5728;&#x539F;&#x6587;&#x7684;&#x8D77;&#x6B62;&#x4F4D;&#x7F6E;&#x6CE8;&#x610F;&#xFF0C;&#x8F93;&#x5165;&#x53C2;&#x6570;&#x53EA;&#x63A5;&#x53D7; unicode # &#x9ED8;&#x8BA4;&#x6A21;&#x5F0F; result = jieba.tokenize(u&apos;&#x6C38;&#x548C;&#x670D;&#x88C5;&#x9970;&#x54C1;&#x6709;&#x9650;&#x516C;&#x53F8;&apos;) for tk in result: print(&quot;word %s\\t\\t start: %d \\t\\t end:%d&quot; % (tk[0],tk[1],tk[2])) word &#x6C38;&#x548C; start: 0 end:2 word &#x670D;&#x88C5; start: 2 end:4 word &#x9970;&#x54C1; start: 4 end:6 word &#x6709;&#x9650;&#x516C;&#x53F8; start: 6 end:10 # &#x641C;&#x7D22;&#x6A21;&#x5F0F; result = jieba.tokenize(u&apos;&#x6C38;&#x548C;&#x670D;&#x88C5;&#x9970;&#x54C1;&#x6709;&#x9650;&#x516C;&#x53F8;&apos;, mode=&apos;search&apos;) for tk in result: print(&quot;word %s\\t\\t start: %d \\t\\t end:%d&quot; % (tk[0],tk[1],tk[2])) word &#x6C38;&#x548C; start: 0 end:2 word &#x670D;&#x88C5; start: 2 end:4 word &#x9970;&#x54C1; start: 4 end:6 word &#x6709;&#x9650; start: 6 end:8 word &#x516C;&#x53F8; start: 8 end:10 word &#x6709;&#x9650;&#x516C;&#x53F8; start: 6 end:10 ChineseAnalyzer for Whoosh &#x641C;&#x7D22;&#x5F15;&#x64CE;&#x5F15;&#x7528;&#xFF1A; from jieba.analyse import ChineseAnalyzer&#x7528;&#x6CD5;&#x793A;&#x4F8B;&#xFF1A;https://github.com/fxsjy/jieba/blob/master/test/test_whoosh.py &#x547D;&#x4EE4;&#x884C;&#x5206;&#x8BCD;&#x4F7F;&#x7528;&#x793A;&#x4F8B;&#xFF1A; python -m jieba news.txt &gt; cut_result.txt &#x547D;&#x4EE4;&#x884C;&#x9009;&#x9879;&#xFF08;&#x7FFB;&#x8BD1;&#xFF09;&#xFF1A; &#x4F7F;&#x7528;: python -m jieba [options] filename &#x5982;&#x679C;&#x6CA1;&#x6709;&#x6307;&#x5B9A;&#x6587;&#x4EF6;&#x540D;&#xFF0C;&#x5219;&#x4F7F;&#x7528;&#x6807;&#x51C6;&#x8F93;&#x5165;&#x3002;&#x2013;help &#x9009;&#x9879;&#x8F93;&#x51FA;&#xFF1A; $&gt; python -m jieba --help Jieba command line interface. positional arguments: filename input file optional arguments: -h, --help show this help message and exit -d [DELIM], --delimiter [DELIM] use DELIM instead of &apos; / &apos; for word delimiter; or a space if it is used without DELIM -p [DELIM], --pos [DELIM] enable POS tagging; if DELIM is specified, use DELIM instead of &apos;\\_&apos; for POS delimiter -D DICT, --dict DICT use DICT as dictionary -u USER_DICT, --user-dict USER_DICT use USER_DICT together with the default dictionary or DICT (if specified) -a, --cut-all full pattern cutting (ignored with POS tagging) -n, --no-hmm don&apos;t use the Hidden Markov Model -q, --quiet don&apos;t print loading messages to stderr -V, --version show program&apos;s version number and exit If no filename specified, use STDIN instead. &#x5EF6;&#x8FDF;&#x52A0;&#x8F7D;&#x673A;&#x5236;jieba &#x91C7;&#x7528;&#x5EF6;&#x8FDF;&#x52A0;&#x8F7D;&#xFF0C;import jieba &#x548C; jieba.Tokenizer() &#x4E0D;&#x4F1A;&#x7ACB;&#x5373;&#x89E6;&#x53D1;&#x8BCD;&#x5178;&#x7684;&#x52A0;&#x8F7D;&#xFF0C;&#x4E00;&#x65E6;&#x6709;&#x5FC5;&#x8981;&#x624D;&#x5F00;&#x59CB;&#x52A0;&#x8F7D;&#x8BCD;&#x5178;&#x6784;&#x5EFA;&#x524D;&#x7F00;&#x5B57;&#x5178;&#x3002;&#x5982;&#x679C;&#x4F60;&#x60F3;&#x624B;&#x5DE5;&#x521D;&#x59CB; jieba&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x624B;&#x52A8;&#x521D;&#x59CB;&#x5316;&#x3002; import jiebajieba.initialize() # &#x624B;&#x52A8;&#x521D;&#x59CB;&#x5316;&#xFF08;&#x53EF;&#x9009;&#xFF09;&#x5728; 0.28 &#x4E4B;&#x524D;&#x7684;&#x7248;&#x672C;&#x662F;&#x4E0D;&#x80FD;&#x6307;&#x5B9A;&#x4E3B;&#x8BCD;&#x5178;&#x7684;&#x8DEF;&#x5F84;&#x7684;&#xFF0C;&#x6709;&#x4E86;&#x5EF6;&#x8FDF;&#x52A0;&#x8F7D;&#x673A;&#x5236;&#x540E;&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x6539;&#x53D8;&#x4E3B;&#x8BCD;&#x5178;&#x7684;&#x8DEF;&#x5F84;: jieba.set_dictionary(&#x2018;data/dict.txt.big&#x2019;)&#x4F8B;&#x5B50;&#xFF1A; https://github.com/fxsjy/jieba/blob/master/test/test_change_dictpath.py &#x5176;&#x4ED6;&#x8BCD;&#x5178;&#x5360;&#x7528;&#x5185;&#x5B58;&#x8F83;&#x5C0F;&#x7684;&#x8BCD;&#x5178;&#x6587;&#x4EF6; https://github.com/fxsjy/jieba/raw/master/extra_dict/dict.txt.small &#x652F;&#x6301;&#x7E41;&#x4F53;&#x5206;&#x8BCD;&#x66F4;&#x597D;&#x7684;&#x8BCD;&#x5178;&#x6587;&#x4EF6; https://github.com/fxsjy/jieba/raw/master/extra_dict/dict.txt.big &#x4E0B;&#x8F7D;&#x4F60;&#x6240;&#x9700;&#x8981;&#x7684;&#x8BCD;&#x5178;&#xFF0C;&#x7136;&#x540E;&#x8986;&#x76D6; jieba/dict.txt &#x5373;&#x53EF;&#xFF1B;&#x6216;&#x8005;&#x7528; jieba.set_dictionary(&#x2018;data/dict.txt.big&#x2019;) &#x5176;&#x4ED6;&#x8BED;&#x8A00;&#x5B9E;&#x73B0;&#x7ED3;&#x5DF4;&#x5206;&#x8BCD; Java &#x7248;&#x672C; &#x4F5C;&#x8005;&#xFF1A;piaolingxue &#x5730;&#x5740;&#xFF1A;https://github.com/huaban/jieba-analysis &#x7ED3;&#x5DF4;&#x5206;&#x8BCD; C++ &#x7248;&#x672C; &#x4F5C;&#x8005;&#xFF1A;yanyiwu &#x5730;&#x5740;&#xFF1A;https://github.com/yanyiwu/cppjieba &#x7ED3;&#x5DF4;&#x5206;&#x8BCD; Node.js &#x7248;&#x672C; &#x4F5C;&#x8005;&#xFF1A;yanyiwu &#x5730;&#x5740;&#xFF1A;https://github.com/yanyiwu/nodejieba &#x7ED3;&#x5DF4;&#x5206;&#x8BCD; Erlang &#x7248;&#x672C; &#x4F5C;&#x8005;&#xFF1A;falood &#x5730;&#x5740;&#xFF1A;https://github.com/falood/exjieba &#x7ED3;&#x5DF4;&#x5206;&#x8BCD; R &#x7248;&#x672C; &#x4F5C;&#x8005;&#xFF1A;qinwf &#x5730;&#x5740;&#xFF1A;https://github.com/qinwf/jiebaR &#x7ED3;&#x5DF4;&#x5206;&#x8BCD; iOS &#x7248;&#x672C; &#x4F5C;&#x8005;&#xFF1A;yanyiwu &#x5730;&#x5740;&#xFF1A;https://github.com/yanyiwu/iosjieba &#x7ED3;&#x5DF4;&#x5206;&#x8BCD; PHP &#x7248;&#x672C; &#x4F5C;&#x8005;&#xFF1A;fukuball &#x5730;&#x5740;&#xFF1A;https://github.com/fukuball/jieba-php &#x7ED3;&#x5DF4;&#x5206;&#x8BCD; .NET(C#) &#x7248;&#x672C; &#x4F5C;&#x8005;&#xFF1A;anderscui &#x5730;&#x5740;&#xFF1A;https://github.com/anderscui/jieba.NET/ &#x7CFB;&#x7EDF;&#x96C6;&#x6210; Solr: https://github.com/sing1ee/jieba-solr&#x5206;&#x8BCD;&#x901F;&#x5EA6; 1.5 MB / Second in Full Mode400 KB / Second in Default Mode&#x6D4B;&#x8BD5;&#x73AF;&#x5883;: Intel(R) Core(TM) i7-2600 CPU @ 3.4GHz&#xFF1B;&#x300A;&#x56F4;&#x57CE;&#x300B;.txt &#x5E38;&#x89C1;&#x95EE;&#x9898; &#x6A21;&#x578B;&#x7684;&#x6570;&#x636E;&#x662F;&#x5982;&#x4F55;&#x751F;&#x6210;&#x7684;&#xFF1F; &#x8BE6;&#x89C1;&#xFF1A; https://github.com/fxsjy/jieba/issues/7 &#x201C;&#x53F0;&#x4E2D;&#x201D;&#x603B;&#x662F;&#x88AB;&#x5207;&#x6210;&#x201C;&#x53F0; &#x4E2D;&#x201D;&#xFF1F;&#xFF08;&#x4EE5;&#x53CA;&#x7C7B;&#x4F3C;&#x60C5;&#x51B5;&#xFF09; P(&#x53F0;&#x4E2D;) &#xFF1C; P(&#x53F0;)&#xD7;P(&#x4E2D;)&#xFF0C;&#x201C;&#x53F0;&#x4E2D;&#x201D;&#x8BCD;&#x9891;&#x4E0D;&#x591F;&#x5BFC;&#x81F4;&#x5176;&#x6210;&#x8BCD;&#x6982;&#x7387;&#x8F83;&#x4F4E; &#x89E3;&#x51B3;&#x65B9;&#x6CD5;&#xFF1A;&#x5F3A;&#x5236;&#x8C03;&#x9AD8;&#x8BCD;&#x9891; jieba.add_word(&#x2018;&#x53F0;&#x4E2D;&#x2019;) &#x6216;&#x8005; jieba.suggest_freq(&#x2018;&#x53F0;&#x4E2D;&#x2019;, True) &#x201C;&#x4ECA;&#x5929;&#x5929;&#x6C14; &#x4E0D;&#x9519;&#x201D;&#x5E94;&#x8BE5;&#x88AB;&#x5207;&#x6210;&#x201C;&#x4ECA;&#x5929; &#x5929;&#x6C14; &#x4E0D;&#x9519;&#x201D;&#xFF1F;&#xFF08;&#x4EE5;&#x53CA;&#x7C7B;&#x4F3C;&#x60C5;&#x51B5;&#xFF09; &#x89E3;&#x51B3;&#x65B9;&#x6CD5;&#xFF1A;&#x5F3A;&#x5236;&#x8C03;&#x4F4E;&#x8BCD;&#x9891; jieba.suggest_freq((&#x2018;&#x4ECA;&#x5929;&#x2019;, &#x2018;&#x5929;&#x6C14;&#x2019;), True) &#x6216;&#x8005;&#x76F4;&#x63A5;&#x5220;&#x9664;&#x8BE5;&#x8BCD; jieba.del_word(&#x2018;&#x4ECA;&#x5929;&#x5929;&#x6C14;&#x2019;) &#x5207;&#x51FA;&#x4E86;&#x8BCD;&#x5178;&#x4E2D;&#x6CA1;&#x6709;&#x7684;&#x8BCD;&#x8BED;&#xFF0C;&#x6548;&#x679C;&#x4E0D;&#x7406;&#x60F3;&#xFF1F; &#x89E3;&#x51B3;&#x65B9;&#x6CD5;&#xFF1A;&#x5173;&#x95ED;&#x65B0;&#x8BCD;&#x53D1;&#x73B0; jieba.cut(&#x2018;&#x4E30;&#x7530;&#x592A;&#x7701;&#x4E86;&#x2019;, HMM=False) jieba.cut(&#x2018;&#x6211;&#x4EEC;&#x4E2D;&#x51FA;&#x4E86;&#x4E00;&#x4E2A;&#x53DB;&#x5F92;&#x2019;, HMM=False) &#x66F4;&#x591A;&#x95EE;&#x9898;&#x8BF7;&#x70B9;&#x51FB;&#xFF1A;https://github.com/fxsjy/jieba/issues?sort=updated&amp;state=closed &#x4FEE;&#x8BA2;&#x5386;&#x53F2; https://github.com/fxsjy/jieba/blob/master/Changelog &#x53C2;&#x8003;&#x94FE;&#x63A5;https://github.com/fxsjy/jieba","tags":"gensim 分词"},{"title":"linux-python转码问题","url":"/2016/03/22/linux-python转码问题/","text":"&#x4E4B;&#x524D;&#x7528;&#x7684;&#x4E00;&#x76F4;&#x662F;utf-8&#x7F16;&#x7801;&#xFF0C;&#x51E0;&#x4E4E;&#x4E0D;&#x4F1A;&#x51FA;&#x73B0;&#x4E71;&#x7801;&#x95EE;&#x9898;&#x3002;&#x5948;&#x4F55;&#x516C;&#x53F8;&#x7684;&#x5206;&#x8BCD;&#x8F6F;&#x4EF6;&#x652F;&#x6301;&#x7684;&#x8F93;&#x5165;&#x548C;&#x8F93;&#x51FA;&#x7F16;&#x7801;&#x90FD;&#x662F;gbk&#xFF0C;&#x56E0;&#x6B64;&#x5FC5;&#x987B;&#x8FDB;&#x884C;&#x8F6C;&#x7801;&#xFF0C;&#x4E00;&#x4E2A;&#x975E;&#x5E38;&#x75DB;&#x82E6;&#x7684;&#x8FC7;&#x7A0B;&#xFF0C;&#x5982;&#x5B9E;&#x8BB0;&#x5F55;&#x4E0B;&#x9047;&#x5230;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x4F9B;&#x4EE5;&#x540E;&#x53C2;&#x8003; &#x6807;&#x51C6;utf8&#x8F93;&#x51FA; #!/usr/bin/python # -*- coding: utf8 -*- #################### deal with base64 file ################### import gensim, logging from gensim.models import Doc2Vec import os import multiprocessing import numpy as np import base64 import codecs import g_url_text_pb2 import re import sys reload(sys) sys.setdefaultencoding(&apos;utf8&apos;) logging.basicConfig(format=&apos;%(asctime)s : %(levelname)s : %(message)s&apos;, level=logging.INFO) def newFile(): global count fw = open(&apos;baike_url_part_000.chinese&apos;,&apos;w&apos;) with open(&apos;baike_url_part_000.result&apos;) as f: for line in f: base64Test = base64.b64decode(line) model=g_url_text_pb2.TextInfo() model.ParseFromString(base64Test) doc = model.title.decode(&apos;gbk&apos;, &apos;ignore&apos;)+&apos; &apos;+(model.content.decode(&apos;gbk&apos;, &apos;ignore&apos;)) doc = &quot;&quot;.join(doc.split())#&#x5904;&#x7406;/r/t/n&#x7B49; fw.write(&quot;&quot;.join(doc)+&quot;\\n&quot;) newFile() &#x8F6C;gbk&#x8F93;&#x51FA;&#x5148;&#x4E0D;&#x7BA1;&#x90A3;&#x4E9B;&#x5947;&#x602A;&#x7684;^@^F&#x7B49;&#x5B57;&#x7B26;&#xFF0C;&#x8F6C;&#x6210;gbk&#x7F16;&#x7801;&#x5199;&#x5165;&#x6587;&#x4EF6;&#xFF0C;&#x52A0;&#x4E2A;encode&#x5C31;&#x884C;&#x5566; doc = doc.encode(&apos;gbk&apos;,&apos;ignore&apos;) doc = &quot;&quot;.join(doc.split()) fw.write(&quot;&quot;.join(doc)+&quot;\\n&quot;) &#x6253;&#x5F00;&#x4E00;&#x770B;&#xFF0C;&#x7EB3;&#x5C3C;&#xFF0C;&#x600E;&#x4E48;&#x53D8;&#x6210;&#x4E86;&#x8FD9;&#x6837;&#xFF01;&#x8FD9;&#x662F;&#x4EC0;&#x4E48;&#x9B3C;&#xFF01; &#x51B7;&#x9759;&#x2026;&#x2026;&#x67E5;&#x770B;&#x4E00;&#x4E0B;&#x7F16;&#x7801;&#x683C;&#x5F0F; file baike_url_part_000.chinese &#x7136;&#x800C;&#x2026;&#x2026;&#x53EA;&#x663E;&#x793A;&#x4E86;data&#x2026;&#x2026;&#x597D;&#x5FE7;&#x4F24;&#x2026;&#x2026; baike_url_part_000.chinese: data &#x518D;&#x770B;&#x4E00;&#x4E0B;&#xFF1F;&#x597D;&#x5427;&#x2026;&#x2026;binary&#x3002;&#x3002; file -i baike_url_part_000.chinese baike_url_part_000.chinese: application/octet-stream; charset=binary iconv &#x6587;&#x4EF6;&#x7F16;&#x7801;&#x8F6C;&#x6362;iconv [&#x9009;&#x9879;&#x2026;] [&#x6587;&#x4EF6;&#x2026;] &#x8F93;&#x5165;/&#x8F93;&#x51FA;&#x683C;&#x5F0F;&#x89C4;&#x8303;&#xFF1A;-f, &#x2013;from-code=&#x540D;&#x79F0; &#x539F;&#x59CB;&#x6587;&#x672C;&#x7F16;&#x7801;-t, &#x2013;to-code=&#x540D;&#x79F0; &#x8F93;&#x51FA;&#x7F16;&#x7801; &#x4FE1;&#x606F;&#xFF1A;-l, &#x2013;list &#x5217;&#x4E3E;&#x6240;&#x6709;&#x5DF2;&#x77E5;&#x7684;&#x5B57;&#x7B26;&#x96C6; &#x8F93;&#x51FA;&#x63A7;&#x5236;&#xFF1A;-c &#x4ECE;&#x8F93;&#x51FA;&#x4E2D;&#x5FFD;&#x7565;&#x65E0;&#x6548;&#x7684;&#x5B57;&#x7B26;-o, &#x2013;output=FILE &#x8F93;&#x51FA;&#x6587;&#x4EF6;-s, &#x2013;silent &#x5173;&#x95ED;&#x8B66;&#x544A;&#x2013;verbose &#x6253;&#x5370;&#x8FDB;&#x5EA6;&#x4FE1;&#x606F; # utf &#x8F6C; gbk iconv -c -f utf-8 -t gb2312 file &#x50BB;&#x74DC;&#x547D;&#x4EE4;&#x884C;&#x5DE5;&#x5177;enca&#x597D;&#x4E86;&#xFF0C;&#x8FD9;&#x65F6;&#x5019;&#x5C31;&#x8981;&#x7528;&#x795E;&#x5668;&#x5566;&#xFF01;&#x50BB;&#x74DC;&#x547D;&#x4EE4;&#x884C;&#x5DE5;&#x5177;enca &#x2013; &#x4E0D;&#x4F46;&#x80FD;&#x667A;&#x80FD;&#x8BC6;&#x522B;&#x6587;&#x4EF6;&#x7684;&#x7F16;&#x7801;&#xFF0C;&#x800C;&#x4E14;&#x8FD8;&#x652F;&#x6301;&#x6210;&#x6279;&#x8F6C;&#x6362;&#xFF01;&#x5FC3;&#x52A8;&#x4E86;&#x5417;&#xFF1F;&#x5FC3;&#x52A8;&#x4E0D;&#x5982;&#x884C;&#x52A8;&#xFF01;&#x6765;&#xFF01;&#x5B89;&#x88C5;&#xFF01;so easy~ &#x3000;&#x3000; sudo apt-get install enca &#x5E38;&#x7528;&#x7684;&#x547D;&#x4EE4;&#x683C;&#x5F0F;&#x5982;&#x4E0B; &#x3000;&#x3000; #&#x68C0;&#x67E5;&#x6587;&#x4EF6;&#x7684;&#x7F16;&#x7801;&#x3000; #enca -L &#x5F53;&#x524D;&#x8BED;&#x8A00; -x &#x76EE;&#x6807;&#x7F16;&#x7801; &#x6587;&#x4EF6;&#x540D;&#x3000; enca -L zh_CN file &#x3000;&#x3000; #&#x5C06;&#x6587;&#x4EF6;&#x7F16;&#x7801;&#x8F6C;&#x6362;&#x4E3A;&quot;UTF-8&quot;&#x7F16;&#x7801;&#x3000; enca -L zh_CN -x UTF-8 file #&#x5982;&#x679C;&#x4E0D;&#x60F3;&#x8986;&#x76D6;&#x539F;&#x6587;&#x4EF6; enca -L zh_CN -x UTF-8 &lt; file1 &gt; file2 #&#x628A;&#x5F53;&#x524D;&#x76EE;&#x5F55;&#x4E0B;&#x7684;&#x6240;&#x6709;&#x6587;&#x4EF6;&#x90FD;&#x8F6C;&#x6210;utf-8 &#x3000;&#x3000; enca -L zh_CN -x utf-8 * &#x8FD9;&#x91CC;&#x6211;&#x4EEC;&#x8FD9;&#x4E48;&#x7528;&#x1F447; $ enca -L zh_CN baike_url_part_000.chinese Simplified Chinese National Standard; GB2312 locale&#x53D1;&#x73B0;&#x662F;GB2312,&#x8BF4;&#x660E;&#x4E0D;&#x662F;&#x4EE3;&#x7801;&#x7684;&#x95EE;&#x9898;&#x3002;&#x4F46;&#x662F;&#x4E3A;&#x4EC0;&#x4E48;&#x663E;&#x793A;&#x51FA;&#x6765;&#x662F;&#x4E71;&#x7801;&#x5462;&#xFF1F;&#x90A3;&#x53EA;&#x662F;&#x56E0;&#x4E3A;&#x663E;&#x793A;&#x7684;&#x65F6;&#x5019;&#x4F7F;&#x7528;&#x7684;&#x5B57;&#x7B26;&#x7F16;&#x7801;&#x65B9;&#x5F0F;&#x548C;&#x5B9E;&#x9645;&#x5185;&#x5BB9;&#x7684;&#x5B57;&#x7B26;&#x7F16;&#x7801;&#x4E0D;&#x4E00;&#x81F4;&#xFF0C;&#x6240;&#x4EE5;&#x89E3;&#x51B3;&#x65B9;&#x5F0F;&#x5F53;&#x7136;&#x5C31;&#x662F;&#x53CC;&#x65B9;&#x90FD;&#x7528;&#x540C;&#x4E00;&#x79CD;&#x7F16;&#x7801;&#x65B9;&#x5F0F;&#x55BD;&#x3002;&#x7B80;&#x5355;&#x7684;&#x547D;&#x4EE4;&#x5C31;&#x53EF;&#x4EE5;&#x5B9E;&#x73B0;&#x5566; export LC_ALL= &#x5173;&#x4E8E;locale&#xFF0C;&#x5F3A;&#x70C8;&#x63A8;&#x8350;&#x770B;&#x770B;Locale &#x8BE6;&#x89E3;&#xFF0C;&#x7136;&#x540E;&#x641E;&#x660E;&#x767D;&#x4EE5;&#x4E0B;&#x4E09;&#x4E2A;&#x73AF;&#x5883;&#x53D8;&#x91CF;&#x7684;&#x4F18;&#x5148;&#x7EA7;&#xFF1A;LCALL&gt;LC*&gt;LANG&#x3002;locale&#x76F8;&#x5173;&#x7684;&#x5404;&#x4E2A;&#x73AF;&#x5883;&#x53D8;&#x91CF;&#x7684;&#x4F5C;&#x7528;&#x53C2;&#x89C1;&#x8FD9;&#x91CC;&#x3002; &#x5904;&#x7406;^@^F^A&#x7B49;&#x7279;&#x6B8A;&#x5B57;&#x7B26;&#x867D;&#x7136;&#x53EF;&#x4EE5;&#x663E;&#x793A;&#x4E86;&#xFF0C;&#x4F46;&#x4E2D;&#x95F4;&#x8FD8;&#x6709;&#x8BB8;&#x591A;&#x4E0D;&#x80FD;&#x8BC6;&#x522B;&#x7684;&#x5B57;&#x7B26; &#x770B;&#x4E00;&#x4E0B;&#x8FD9;&#x4E9B;&#x5B57;&#x7B26;&#x7684;ascii&#x5BF9;&#x7167;&#x8868; &#x7136;&#x540E;&#x4E00;&#x952E;&#x66FF;&#x6362;&#xFF0C;&#x4E0B;&#x9762;&#x662F;&#x5C06;^@&#x66FF;&#x6362;&#x4E3A;&#x7A7A;&#x683C;&#x7684;&#x4F8B;&#x5B50; sed -i &quot;s/[\\x00]/ /g&quot; baike_url_part_000.chinese &#x7136;&#x800C;&#x4E0D;&#x53EF;&#x89C1;&#x5B57;&#x7B26;&#x8FD9;&#x4E48;&#x591A;&#xFF0C;&#x603B;&#x4E0D;&#x80FD;&#x4E00;&#x4E2A;&#x4E2A;&#x66FF;&#x6362;&#x5427;&#xFF01;&#x5728;python&#x4E2D;&#x76F4;&#x63A5;&#x7528;&#x6B63;&#x5219;&#x505A;&#x66FF;&#x6362;&#xFF0C;&#x5728;split&#x524D;&#x52A0;&#x4E0A;&#x4E00;&#x884C;&#x4EE3;&#x7801; doc = re.sub(r&apos;[\\x00-\\x0F]+&apos;,&apos; &apos;, doc) doc = &quot;&quot;.join(doc.split()) fw.write(&quot;&quot;.join(doc)+&quot;\\n&quot;) &#x987A;&#x4FBF;&#x63D0;&#x4E00;&#x4E0B;&#xFF0C;&#x5728;python&#x4E2D;&#xFF0C;&#x5B57;&#x7B26;&#x4E32;&#x524D;&#x52A0;r&#x4EE3;&#x8868;&#x6B64;&#x5B57;&#x7B26;&#x4E32;&#x4E3A;&#x539F;&#x6837;&#x663E;&#x793A;&#xFF0C;&#x4E0D;&#x8F6C;&#x4E49;&#x3002;&#x5C31;&#x50CF;&#x5B57;&#x7B26;&#x4E32;&#x2019;\\n&#x2019;&#x8F6C;&#x4E49;&#x662F;&#x6362;&#x884C;&#xFF0C;&#x82E5;&#x5176;&#x524D;&#x52A0;&#x4E0A;&#x5B57;&#x6BCD;r,&#x5373;r&#x2019;\\n&#x2019;&#xFF0C;&#x5219;&#x4E0D;&#x8FDB;&#x884C;&#x8F6C;&#x4E49;&#xFF0C;&#x7ED3;&#x679C;&#x5C06;&#x539F;&#x6837;&#x663E;&#x793A;&#x2019;\\n&#x2019;&#x3002; &#x8FD9;&#x6837;&#xFF0C;&#x624D;&#x7B97;&#x771F;&#x6B63;&#x89E3;&#x51B3;&#x4E86;&#x8FD9;&#x91CC;&#x7684;&#x4E71;&#x7801;&#x95EE;&#x9898;&#x3002; &#x3000;","tags":"shell python 编码"}]}